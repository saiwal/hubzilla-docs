{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#what-is-hubzilla","title":"What is Hubzilla?","text":"<p>Hubzilla is a decentralised communication network with the aim of providing communication options that circumvent censorship, respect privacy and are therefore free from the restrictions imposed by today's commercial communication giants. These primarily provide spy networks for paying customers of all kinds and monopolise and centralise the entire Internet - which was not originally among the revolutionary goals that led to the World Wide Web.</p> <p>Hubzilla is free, open source and free of charge. It was developed to run on a Raspberry Pi as well as on the largest AMD and Intel Xeon multiprocessor servers. It can be used for communication between a few individuals or connect many thousands of people and more.</p> <p>Another goal is to be independent of skills and resources. Hubzilla is as easy to use for the ordinary computer user as it is for system administrators and developers.</p> <p>How you use it depends on how you want to use it.</p> <p>Hubzilla is written in PHP, making it easy to install on any of today's hosting platforms, including self-hosting at home, on shared servers or on virtual and dedicated servers.</p> <p>In other words, Hubzilla can run on any platform that has a web server, a MySQL-compatible database and PHP.</p> <p>Hubzilla offers some unique goodies:</p> <p>One-click identification: you can access other servers in the Hubzilla network by simply clicking on a link to them. Authentication is easily done automatically behind the scenes. Forget all the different usernames for different sites and passwords - Hubzilla does it all for you.</p> <p>Clone: You can clone your online identity (or, as we say, a channel). It is no longer tied to a specific server, domain or IP address. Simply import it to another Hubzilla server (or Hubzilla hub, as we call it) - directly online or using a previously generated export. If your primary hub is suddenly no longer online, no problem, your contacts, posts and messages are still automatically available and accessible under your cloned identity. (*: only posts and messages created after the moment of cloning)</p> <p>Privacy: Hubzilla identities (Nomad IDs) can be deleted, backed up/downloaded and cloned. You have full control over your data. If you decide to delete all your data and your Nomad ID, all you have to do is click on a link and it will be deleted from the server immediately. No questions asked, no fuss.</p>"},{"location":"#hubzilla-features","title":"Hubzilla Features","text":""},{"location":"#built-in-social","title":"Built-in Social","text":"<p>When you post announcements on your website, they are automatically broadcast to your followers on the Fediverse, Mastodon, and more. You can also interact with them via your website.</p>"},{"location":"#groups-forums","title":"Groups &amp; Forums","text":"<p>Building a community is important for your business or nonprofit organization. You can add public, private, and moderated discussion groups &amp; forums. These work across nearly all fediverse platforms.</p>"},{"location":"#cloud-storage","title":"Cloud Storage","text":"<p>You can store documents directly on your website, and share them with others. Public, private, or restricted access. With the files being stored on your domain name, they will know it comes from you.</p>"},{"location":"#federated-single-sign-on","title":"Federated Single Sign On","text":"<p>You can use your Hubzilla online identity to log into other websites that support Magic Signon (OpenWebAuth). That way you don't have to create a new account on every website, forum, membership site, or app.</p>"},{"location":"#nomadic-identity","title":"Nomadic Identity","text":"<p>Clone your online identity and content to multiple sites using the Nomad protocol and mirror any changes in near real time. All your friends and all your content are available on any of your cloned instances - at any time.</p>"},{"location":"about/contribute/","title":"Contributing to This Documentation","text":"<p>Welcome! We\u2019re thrilled to have you contribute to the Hubzilla documentation. This guide explains how to submit changes to our documentation, hosted at <code>https://github.com/saiwal/hubzilla-docs</code>. Built with MkDocs and the <code>mkdocs-material</code> theme, our docs are community-maintainable, and your input\u2014whether fixing a typo, adding a section, or improving clarity\u2014makes a difference. Here\u2019s how to get started.</p>"},{"location":"about/contribute/#how-versioning-works","title":"How Versioning Works","text":"<p>Our documentation uses a versioning system where each version (e.g., <code>10.0.8</code>) has its own branch in the repository. Changes should be made to the branch corresponding to the version you\u2019re documenting (e.g., <code>10.0.8</code>). A maintainer will later merge these changes into the <code>main</code> branch for publishing. This keeps version-specific docs organized and up-to-date.</p>"},{"location":"about/contribute/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account (sign up at github.com if you don\u2019t have one).</li> <li>Basic knowledge of Markdown (our docs are written in this format\u2014check out a Markdown guide if you\u2019re new to it).</li> <li>Optional: Familiarity with Git, MkDocs, and <code>mkdocs-material</code> (no worries if not\u2014we\u2019ll cover web-based editing too!).</li> </ul>"},{"location":"about/contribute/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"about/contribute/#option-1-contribute-using-githubs-web-interface-no-software-required","title":"Option 1: Contribute Using GitHub\u2019s Web Interface (No Software Required)","text":"<p>This is the simplest way to make changes without installing anything.</p>"},{"location":"about/contribute/#visit-the-repository","title":"Visit the Repository","text":"<ul> <li>Go to <code>https://github.com/saiwal/hubzilla-docs</code>.</li> <li>You\u2019ll see the project files, including a <code>docs/</code> folder where the documentation lives.</li> </ul>"},{"location":"about/contribute/#switch-to-the-correct-version-branch","title":"Switch to the Correct Version Branch","text":"<ul> <li>Click the branch dropdown (it defaults to <code>main</code>).</li> <li>Select the branch for the version you\u2019re editing (e.g., <code>10.0.8</code>). If it doesn\u2019t exist yet, a maintainer may need to create it\u2014open an issue to request it.</li> </ul>"},{"location":"about/contribute/#find-or-create-a-file","title":"Find or Create a File","text":"<ul> <li>Navigate to the <code>docs/</code> folder in the selected branch to edit an existing file (e.g., <code>index.md</code>).</li> <li>To add a new page, click \u201cCreate new file\u201d at the top-right after navigating to <code>docs/</code>.</li> </ul>"},{"location":"about/contribute/#edit-the-file","title":"Edit the File","text":"<ul> <li>Click the pencil icon (\u270f\ufe0f) in the top-right corner of any <code>.md</code> file to edit.</li> <li>Make your changes using Markdown (e.g., add text, headers with <code>#</code>, lists with <code>-</code>, or code blocks with ```). The <code>mkdocs-material</code> theme supports rich formatting\u2014see its reference for options like admonitions or tables.</li> <li>If creating a new file, name it descriptively (e.g., <code>new-feature.md</code>) and add your content.</li> </ul>"},{"location":"about/contribute/#preview-your-changes","title":"Preview Your Changes","text":"<ul> <li>Use the \u201cPreview\u201d tab above the editor to see how your Markdown will look (note: GitHub\u2019s preview lacks <code>mkdocs-material</code> styling, so local testing is ideal for full accuracy).</li> </ul>"},{"location":"about/contribute/#submit-your-changes","title":"Submit Your Changes","text":"<ul> <li>Scroll to the \u201cCommit changes\u201d section.</li> <li>Write a short description (e.g., \u201cFixed typo in 10.0.8 install guide\u201d).</li> <li>Ensure \u201cCommit directly to the <code>[version]</code> branch\u201d (e.g., <code>10.0.8</code>) is selected, or select \u201cCreate a new branch\u201d if you\u2019re proposing a new feature branch (e.g., <code>10.0.8-fix-typo</code>).</li> <li>Click \u201cCommit changes.\u201d</li> </ul>"},{"location":"about/contribute/#open-a-pull-request","title":"Open a Pull Request","text":"<ul> <li>If you committed directly to the version branch (e.g., <code>10.0.8</code>), you\u2019re done\u2014maintainers will handle merging to <code>main</code> later.</li> <li>If you created a new branch, go to the \u201cPull requests\u201d tab, click \u201cNew pull request,\u201d set the base branch to your version (e.g., <code>10.0.8</code>), and submit it with a description.</li> </ul>"},{"location":"about/contribute/#wait-for-review","title":"Wait for Review","text":"<ul> <li>A maintainer will review your changes. Once approved, they\u2019ll merge your contribution into the version branch and eventually into <code>main</code> for publishing.</li> </ul>"},{"location":"about/contribute/#option-2-contribute-using-git-locally-for-advanced-users","title":"Option 2: Contribute Using Git Locally (For Advanced Users)","text":"<p>If you prefer working locally and previewing the site with <code>mkdocs-material</code>, use this method.</p>"},{"location":"about/contribute/#fork-the-repository","title":"Fork the Repository","text":"<ul> <li>Go to https://github.com/saiwal/hubzilla-docs.</li> <li>Click \u201cFork\u201d to create a copy under your GitHub account.</li> </ul>"},{"location":"about/contribute/#clone-your-fork","title":"Clone Your Fork","text":"<ul> <li>Open a terminal and run:   <pre><code>git clone https://github.com/YOUR-USERNAME/hubzilla-docs.git\n</code></pre>   Replace <code>YOUR-USERNAME</code> with your GitHub username.</li> <li>Navigate into the folder:   <pre><code>cd hubzilla-docs\n</code></pre></li> </ul>"},{"location":"about/contribute/#switch-to-the-version-branch","title":"Switch to the Version Branch","text":"<ul> <li>Check out the branch for the version you\u2019re editing:   <pre><code>git checkout 10.0.8\n</code></pre></li> <li>If it doesn\u2019t exist locally, fetch it:     <pre><code>git fetch origin\ngit checkout 10.0.8\n</code></pre></li> <li>If the branch isn\u2019t in the repo yet, create it:     <pre><code>git checkout -b 10.0.8\n</code></pre></li> </ul>"},{"location":"about/contribute/#set-up-mkdocs-and-mkdocs-material-locally","title":"Set Up MkDocs and MkDocs-Material Locally","text":"<ul> <li>Ensure Python is installed (python.org).</li> <li>Install MkDocs and <code>mkdocs-material</code>:   <pre><code>pip install mkdocs mkdocs-material\n</code></pre></li> </ul>"},{"location":"about/contribute/#preview-the-site","title":"Preview the Site","text":"<ul> <li>Run:   <pre><code>mkdocs serve\n</code></pre></li> <li>Visit <code>http://localhost:8000</code> to see the live site with <code>mkdocs-material</code> styling as you edit.</li> </ul>"},{"location":"about/contribute/#make-your-changes","title":"Make Your Changes","text":"<ul> <li>Edit or create <code>.md</code> files in the <code>docs/</code> folder.</li> <li>Use <code>mkdocs-material</code> features like admonitions (e.g., <code>!!! note</code>) or tabs\u2014see the docs.</li> <li>Stage and commit your changes:   <pre><code>git add .\ngit commit -m \"Updated 10.0.8 install instructions\"\n</code></pre></li> </ul>"},{"location":"about/contribute/#push-to-your-fork","title":"Push to Your Fork","text":"<ul> <li>Push to the version branch in your fork:   <pre><code>git push origin 10.0.8\n</code></pre></li> </ul>"},{"location":"about/contribute/#create-a-pull-request","title":"Create a Pull Request","text":"<ul> <li>Go to your fork on GitHub (<code>https://github.com/YOUR-USERNAME/hubzilla-docs</code>).</li> <li>Click \u201cCompare &amp; pull request,\u201d setting the base branch to <code>saiwal/hubzilla-docs</code>\u2019s version branch (e.g., <code>10.0.8</code>).</li> <li>Add details and submit!</li> </ul>"},{"location":"about/contribute/#updating-the-navigation","title":"Updating the Navigation","text":"<p>To add a new page to the site\u2019s navigation:</p>"},{"location":"about/contribute/#open-the-configuration-file","title":"Open the Configuration File","text":"<ul> <li>Open <code>mkdocs.yml</code> in the version branch (e.g., <code>10.0.8</code>).</li> </ul>"},{"location":"about/contribute/#modify-the-navigation-section","title":"Modify the Navigation Section","text":"<ul> <li>Find the <code>nav</code> section and add your page, e.g.:   <pre><code>nav:\n  - Home: index.md\n  - New Page: new-feature.md  # Your new file\n</code></pre></li> <li>The <code>mkdocs-material</code> theme will reflect this in the sidebar.</li> </ul>"},{"location":"about/contribute/#submit-the-change","title":"Submit the Change","text":"<ul> <li>Submit this change via a pull request or direct commit to the version branch as described above.</li> </ul>"},{"location":"about/contribute/#tips-for-success","title":"Tips for Success","text":"<ul> <li>Target the Right Branch: Always make changes in the version branch (e.g., <code>10.0.8</code>), not <code>main</code>.</li> <li>Leverage MkDocs-Material: Explore its features for rich formatting.</li> <li>Keep it Clear: Write simply and concisely for all Hubzilla users.</li> <li>Test Locally: Use <code>mkdocs serve</code> to preview with <code>mkdocs-material</code> styling.</li> <li>Ask for Help: Stuck? Open an issue on the repo or contact the community.</li> </ul>"},{"location":"about/contribute/#after-submission","title":"After Submission","text":"<p>Once your changes are merged into the version branch (e.g., <code>10.0.8</code>), a maintainer will handle merging them into <code>main</code> for publishing. Your contribution will then go live at https://saiwal.github.io/hubzilla-docs/, styled beautifully with <code>mkdocs-material</code>. Thank you for improving Hubzilla\u2019s documentation!</p>"},{"location":"about/gdpr/","title":"Privacy Notice","text":""},{"location":"about/gdpr/#how-your-information-will-be-used","title":"How your information will be used","text":"<p>Information you provide to this website may be stored and used to provide services to you.</p> <p>We require an email address to idenitfy the account holder. This will not be shared with any other website or service. It is used to send you notifications about your account and perform administrative tasks such as resetting your password. You have the option to opt-out of all email notifications through your settings.</p> <p>Communication channels created on this website require a name and a photo or avatar. A default avatar will be chosen if you do not supply one. The name, avatar, and a link to the channel webpage will be shared with other servers and services in order to refer to this identity. The name does not need to be your real name and the photo or avatar does not need to resemble you.</p> <p>All other information you supply to this website is optional.</p> <p>As a social communication and cloud storage service, you will usually be using this website to share information with others. We provide a range of privacy options to allow you to restrict this sharing to only those you choose.</p>"},{"location":"about/gdpr/#processing-of-your-information","title":"Processing of your information","text":"<p>Our processing of your information is limited to storing it for you to use. We MAY keep logs of activity to help diagnose software issues and to maintain security of the system against intrusion. These logs are routinely deleted after a few days.</p> <p>We MAY (if you have provided this permission) try to suggest frendships or connections based on analysing publicly available information about your connections. This is currently the most advanced data \"processing\" performed at this website. You may restrict access to this information if this processing is undesired.</p> <p>If supplied, we MAY use your gender to formulate text messages in your native language, for instance \"Bob commented on HIS post.\"</p> <p>In all other cases, your data is stored under your desired privacy policy and to the best of our ability is only shared with those who you have elected to share it with.</p> <p>We do not share your private information with third parties or analyse your behaviour or personal characteristics. We have no advertisements or business relationships with advertisers.</p> <p>We MAY be asked or forced to divulge information provided by you in response to legitimate criminal and legal proceedings. Where possible we will notify you if this happens.</p>"},{"location":"about/gdpr/#access-to-your-information","title":"Access to your information","text":"<p>Some communications are shared with other websites. Those using the same software will usually have similar privacy policies.</p> <p>You may be shown embedded videos and provided links to visit other websites as part of your day-to-day activities using this website. This MAY expose you to monitoring by external services, such as (but not limited to) Facebook, Twitter, and Google. Each website operator is allowed to configure whether or not embedded content is permitted.</p> <p>Further access to your personal data and stored files is under your control.</p> <p>Our storage of your data is provided under your implied consent through your continued use of the service. You may withdraw this consent at any time and on account deletion we will remove all data which belongs to you. The process of deletion may take several days as we also make a good faith effort to delete it from any internetworked websites that have been provided a copy.</p> <p>All data and files stored for a communications channel are available for you to download for either archival puposes or to transfer to another compatible website.</p>"},{"location":"about/gdpr/#your-rights","title":"Your rights","text":"<p>Under the General Data Protection Regulation (GDPR) and The Data Protection Act 2018 (DPA) you have a number of rights with regard to your personal data. You have the right to request from us access to and rectification or erasure of your personal data, the right to restrict processing, object to processing as well as in certain circumstances the right to data portability.</p> <p>If you have provided consent for the processing of your data you have the right (in certain circumstances) to withdraw that consent at any time which will not affect the lawfulness of the processing before your consent was withdrawn.</p> <p>You have the right to lodge a complaint to the Information Commissioners\u2019 Office if you believe that we have not complied with the requirements of the GDPR or DPA 18 with regard to your personal data.</p> <p>Identity and contact details of controller and data protection officer</p> <p>[NAME OF COMPANY] is the controller [and processor] of data for the purposes of the DPA 18 and GDPR. 3</p> <p>If you have any concerns as to how your data is processed you can contact:</p> <p>[ [NAME] Data Protection Offer at [EMAIL ADDRESS] ] [NAME] [JOB TITLE] at [EMAIL ADDRESS] or you can write to these individuals using the address of []</p>"},{"location":"about/release/","title":"Release Notes","text":"<ul> <li>Fix duplicating terms/iconfig in addToCollectionAndSync()</li> <li>Refactor Daemon/Importdoc for better SQL performance when looking up outdated entries</li> <li>Tweak SQL in mod sse_bs for possible performance improvements</li> <li>Fix PHP warnings</li> <li>Do not run post_local hook on add activities in pubcrawl addon</li> <li>Do not run post_local hook on add activities in diaspora addon</li> <li>Remove old rawmsg/fields before storing new rawmsg in pubcrawl addon</li> <li>Fix retractions in diaspora addon</li> </ul>"},{"location":"admin/","title":"Index","text":""},{"location":"admin/#overview","title":"Overview","text":"<p>$Projectname is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support $Projectname. Many will but please review the requirements and confirm these with your hosting provider prior to installation.</p> <p>We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working.</p>"},{"location":"admin/#where-to-find-more-help","title":"Where to find more help","text":"<p>If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker. Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues.</p>"},{"location":"admin/#before-you-begin","title":"Before you begin","text":""},{"location":"admin/#choose-a-domain-name-or-subdomain-name-for-your-server","title":"Choose a domain name or subdomain name for your server","text":"<p>$Projectname can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports.</p>"},{"location":"admin/#decide-if-you-will-use-ssl-and-obtain-an-ssl-certificate-before-software-installation","title":"Decide if you will use SSL and obtain an SSL certificate before software installation","text":"<p>You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates!</p> <p>Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate.</p> <p>This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement.</p> <p>Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt.</p> <p>If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection.  If you do not use SSL, your webserver MUST NOT listen on port 443 at all.</p> <p>If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms.</p>"},{"location":"admin/#deployment","title":"Deployment","text":"<p>There are several ways to deploy a new hub.</p> <ul> <li>Manual installation on an existing server</li> <li>Automated installation on an existing server using a shell script</li> <li>Automated deployment using an OpenShift virtual private server (VPS)</li> </ul>"},{"location":"admin/#requirements","title":"Requirements","text":"<ul> <li> <p>Apache with mod-rewrite enabled and \"AllowOverride All\" so you can use a   local .htaccess file. Some folks have successfully used nginx and lighttpd.   Example config scripts are available for these platforms in doc/install.   Apache and nginx have the most support.</p> </li> <li> <p>PHP 8.1 or later.   Note that on some shared hosting environments, the command line   version of PHP might differ from the webserver version</p> </li> <li> <p>PHP command line access with register_argc_argv set to true in the   php.ini file, and with no hosting provider restrictions on the use of   exec() and proc_open().</p> </li> <li> <p>curl, gd (with at least jpeg and png support), pdo-mysql (or pdo-postgres), mbstring, zip,   and openssl extensions. The imagick extension is not required, but recommended.</p> </li> <li> <p>xml extension is required if you want webdav to work.</p> </li> <li> <p>some form of email server or email gateway such that PHP mail() works.</p> </li> <li> <p>A supported database server. The supported databases are:</p> </li> <li>Mysql version 8.0.22 or later</li> <li>MariaDB version 10.4 or later</li> <li> <p>PostgreSQL version 12 or later</p> </li> <li> <p>ability to schedule jobs with cron.</p> </li> <li> <p>Installation into a top-level domain or sub-domain (without a   directory/path component in the URL) is REQUIRED.</p> </li> </ul>"},{"location":"admin/#manual-installation","title":"Manual Installation","text":""},{"location":"admin/#unpack-the-projectname-files-into-the-root-of-your-web-server-document-area","title":"Unpack the $Projectname files into the root of your web server document area","text":"<p>If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess.</p> <p>If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file.  This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be:</p> <pre><code>git clone https://framagit.org/hubzilla/core.git mywebsite\n</code></pre> <p>and then you can pick up the latest changes at any time with:</p> <pre><code>git pull\n</code></pre> <p>make sure folders <code>store/[data]/smarty3</code> and <code>store</code> exist and are writable by the webserver:</p> <pre><code>mkdir -p \"store/[data]/smarty3\"\nchmod -R 777 store\n\nThis permission (777) is very dangerous and if you have sufficient\nprivilege and knowledge you should make these directories writeable\nonly by the webserver and, if different, the user that will run the\ncron job (see below). In many shared hosting environments this may be\ndifficult without opening a trouble ticket with your provider. The\nabove permissions will allow the software to work, but are not\noptimal.\n</code></pre> <p>The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function:</p> <ul> <li><code>addon</code></li> <li><code>extend</code></li> <li><code>view/theme</code></li> <li><code>widget</code></li> </ul>"},{"location":"admin/#official-addons","title":"Official addons","text":""},{"location":"admin/#installation","title":"Installation","text":"<p>Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames:</p> <pre><code>cd mywebsite\nutil/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons\n</code></pre>"},{"location":"admin/#updating","title":"Updating","text":"<p>For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository::</p> <pre><code>cd mywebsite\nutil/update_addon_repo hzaddons\n</code></pre> <p>Create searchable representations of the online documentation. You may do this any time that the documentation is updated :</p> <pre><code>cd mywebsite\nutil/importdoc\n</code></pre>"},{"location":"admin/#automated-installation-via-the-homeinstall-shell-script","title":"Automated installation via the .homeinstall shell script","text":"<p>There is a shell script in (<code>.homeinstall/hubzilla-setup.sh</code>) that will install $Projectname and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary.</p>"},{"location":"admin/#requirements_1","title":"Requirements","text":"<p>The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9:</p> <ul> <li> <p>Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3)</p> </li> <li> <p>Internet connection and router at home</p> </li> <li>Mini-PC / Raspi connected to your router</li> <li>USB drive for backups</li> <li>Fresh installation of Debian on your mini-pc</li> <li>Router with open ports 80 and 443 for your Debian</li> </ul>"},{"location":"admin/#overview-of-installation-steps","title":"Overview of installation steps","text":"<ol> <li><code>apt-get install git</code></li> <li><code>mkdir -p /var/www/html</code></li> <li><code>cd /var/www/html</code></li> <li><code>git clone https://framagit.org/hubzilla/core.git .</code></li> <li><code>nano .homeinstall/hubzilla-config.txt</code></li> <li><code>cd .homeinstall/</code></li> <li><code>./hubzilla-setup.sh</code></li> <li><code>service apache2 reload</code></li> <li>Open your domain with a browser and step throught the initial configuration of $Projectname.</li> </ol>"},{"location":"admin/#recommended-addons","title":"Recommended Addons","text":"<p>We recommend the following addons be installed on all public sites:</p> <pre><code>nsfw - hide inappropriate posts/comments\nsuperblock - block content from offensive channels\n</code></pre>"},{"location":"admin/#federation-addons","title":"Federation Addons","text":"<p>Several web communities have begun to converge using common protocols. The protocols involved are somewhat limited in their abilities. The GNU-Social protocol for instance offers no privacy modes, and the Diaspora protocol is somewhat restrictive in what kinds of communications are allowed. All comments must be signed in a very unique manner by the original author. The ActivityPub protocol is also being considered and may be supported at a future date. No other existing protocol supports nomadic location as used by this project. This presents some support challenges as some features work with some networks and don't work with others. Nevertheless the federation protocols allow connections to be made to a much larger community of people worldwide. They are provided as addons.</p> <ul> <li> <p>diaspora - The Diaspora Protocol used by Diaspora and Friendica. You should enable 'Diaspora Statistics' (statistics) first to enable all the available features.</p> </li> <li> <p>gnusoc - The GNU-Social Protocol, used by GNU-Social, Mastodon and several other communities. This addon requires you first install the 'pubsubhubbub' service (also an addon).</p> </li> </ul> <p>Each member of your site must choose whether or not to allow these protocols individually as they may conflict with several desirable core features and abilities of this software (such as channel migration and cloning). They do this from their 'Settings -&gt; Feature/Addon Settings' page. The administrator may also set the following:</p> <pre><code>util/config system.diaspora_allowed 1\nutil/config system.gnusoc_allowed 1\n</code></pre> <p>and enable these protocols automatically for all newly created channels.</p>"},{"location":"admin/#service-classes","title":"Service Classes","text":"<p>Service classes allow you to set limits on system resources by limiting what individual accounts can do, including file storage and top-level post limits. Define custom service classes according to your needs in the <code>.htconfig.php</code> file. For example, create a standard and premium class using the following lines:</p> <pre><code>// Service classes\n\nApp::$config['system']['default_service_class']='standard'; // this is the default service class that is attached to every new account\n\n// configuration for standard service class\nApp::$config['service_class']['standard'] =\narray('photo_upload_limit'=&gt;2097152, // total photo storage limit per channel (here 2MB)\n'total_identities' =&gt;1, // number of channels an account can create\n'total_items' =&gt;0, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected\n'total_pages' =&gt;100, // number of pages a channel can create\n'total_channels' =&gt;100, // number of channels the user can add, other users can still add this channel, even if the limit is reached\n'attach_upload_limit' =&gt;2097152, // total attachment storage limit per channel (here 2MB)\n'chatters_inroom' =&gt;20);\n\n// configuration for premium service class\nApp::$config['service_class']['premium'] =\narray('photo_upload_limit'=&gt;20000000000, // total photo storage limit per channel (here 20GB)\n'total_identities' =&gt;20, // number of channels an account can create\n'total_items' =&gt;20000, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected\n'total_pages' =&gt;400, // number of pages a channel can create\n'total_channels' =&gt;2000, // number of channels the user can add, other users can still add this channel, even if the limit is reached\n'attach_upload_limit' =&gt;20000000000, // total attachment storage limit per channel (here 20GB)\n'chatters_inroom' =&gt;100);\n</code></pre> <p>To apply a service class to an existing account, use the command line utility from the web root:</p> <p><code>util/service_class</code> list service classes</p> <p><code>util/config system default_service_class firstclass</code> set the default service class to 'firstclass'</p> <p><code>util/service_class firstclass</code> list the services that are part of 'firstclass' service class</p> <p><code>util/service_class firstclass photo_upload_limit 10000000</code> set firstclass total photo disk usage to 10 million bytes</p> <p><code>util/service_class --account=5 firstclass</code> set account id 5 to service class 'firstclass' (with confirmation)</p> <p><code>util/service_class --channel=blogchan firstclass</code> set the account that owns channel 'blogchan' to service class 'firstclass' (with confirmation)</p> <p>Service class limit options</p> <ul> <li>photo_upload_limit - maximum total bytes for photos</li> <li>total_items - maximum total toplevel posts</li> <li>total_pages - maximum comanche pages</li> <li>total_identities - maximum number of channels owned by account</li> <li>total_channels - maximum number of connections</li> <li>total_feeds - maximum number of rss feed connections</li> <li>attach_upload_limit - maximum file upload storage (bytes)</li> <li>minimum_feedcheck_minutes - lowest setting allowed for polling rss feeds</li> <li>chatrooms - maximum chatrooms</li> <li>chatters_inroom - maximum chatters per room</li> <li>access_tokens - maximum number of Guest Access Tokens per channel</li> </ul>"},{"location":"admin/#theme-management","title":"Theme management","text":""},{"location":"admin/#repo-management-example","title":"Repo management example","text":"<ol> <li>Navigate to your hub web root</li> </ol> <p><pre><code>root@hub:/root# cd /var/www\n</code></pre> 2. Add the theme repo and give it a name</p> <p><pre><code>root@hub:/var/www# util/add_theme_repo https://github.com/DeadSuperHero/redmatrix-themes.git DeadSuperHero\n</code></pre> 3. Update the repo by using</p> <pre><code>root@hub:/var/www#  util/update_theme_repo DeadSuperHero\n</code></pre>"},{"location":"admin/#channel-directory","title":"Channel Directory","text":""},{"location":"admin/#keywords","title":"Keywords","text":"<p>There is a \"tag cloud\" of keywords that can appear on the channel directory page. If you wish to hide these keywords, which are drawn from the directory server, you can use the config tool:</p> <pre><code>util/config system disable_directory_keywords 1\n</code></pre> <p>If your hub is in the standalone mode because you do not wish to connect to the global grid, you may instead ensure the the directory_server system option is empty:</p> <pre><code>util/config system directory_server \"\"\n</code></pre>"},{"location":"admin/#administration","title":"Administration","text":""},{"location":"admin/#site-administration","title":"Site Administration","text":"<p>Administration of the website is commonly done through the admin webpage located at /admin on your website. In order to access this page you must have administration rights to the server. Administration rights are granted to the first account to register on your site, provided the email address of that account exactly matches the email address you provided as the administrator's email address during setup.</p> <p>There are several ways that this can fail and leave the system without an administrator account, for instance if the first account that was created provided a different email address than the administrator email address that was supplied during setup.</p> <p>For security reasons there is no web page or interface on the system which will give you administrator access. If you need to correct a situation where a system has no administrator account it must be done by editing the account table in the database. There is no other way. To do this, you will need to locate the entry in the account table which belongs to the desired administrator, and set 'account_roles' for that entry to 4096. You will then be able to access the admin page from your system's profile menu or directly via /admin .</p> <p>A hub can have multiple admins and there is no limit to how administrators you can have. Repeat the above process for every account you wish to provide with administration rights.</p>"},{"location":"admin/#troubleshooting","title":"Troubleshooting","text":""},{"location":"admin/#log-files","title":"Log files","text":"<p>The system logfile is an extremely useful resource for tracking down things that go wrong. This can be enabled in the admin/log configuration page. A loglevel setting of <code>LOGGER_DEBUG</code> is preferred for stable production sites. Most things that go wrong with communications or storage are listed here. A setting of LOGGER_DATA provides much more detail, but may fill your disk. In either case we recommend the use of logrotate on your operating system to cycle logs and discard older entries.</p> <p>At the bottom of your .htconfig.php file are several lines (commented out) which enable PHP error logging. This reports issues with code syntax and executing the code and is the first place you should look for issues which result in a \"white screen\" or blank page. This is typically the result of code/syntax problems.  Database errors are reported to the system logfile, but we've found it useful to have a file in your top-level directory called dbfail.out which only collects database related issues. If the file exists and is writable, database errors will be logged to it as well as to the system logfile.</p> <p>In the case of \"500\" errors, the issues may often be logged in your webserver logs, often /var/log/apache2/error.log or something similar. Consult your operating system documentation.</p> <p>There are three different log facilities.</p> <p>The first is the database failure log. This is only used if you   create a file called specifically <code>dbfail.out</code> in the root folder of   your website and make it write-able by the web server. If we have   any database failed queries, they are all reported here. They   generally indicate typos in our queries, but also occur if the   database server disconnects or tables get corrupted. On rare   occasions we'll see race conditions in here where two processes   tried to create an xchan or cache entry with the same ID. Any other   errors (especially persistent errors) should be investigated.</p> <p>The second is the PHP error log. This is created by the language   processor and only reports issues in the language environment. Again   these can be syntax errors or programming errors, but these   generally are fatal and result in a \"white screen of death\";   e.g. PHP terminates. You should probably look at this file if   something goes wrong that doesn't result in a white screen of death,   but it isn't uncommon for this file to be empty for days on end.</p> <p>There are some lines at the bottom of the supplied <code>.htconfig.php</code>   file; which if uncommented will enable a PHP error log (extremely   useful for finding the source of white screen failures). This isn't   done by default due to potential issues with logfile ownership and   write permissions and the fact that there is no logfile rotation by   default.</p> <p>The third is the \"application log\". This is used by $Projectname   to report what is going on in the program and usually reports any   difficulties or unexpected data we received. It also occasionally   reports \"heartbeat\" status messages to indicate that we reached a   certain point in a script. This is the most important log file   to us, as we create it ourself for the sole purpose of reporting the   status of background tasks and anything that seems weird or out of   place. It may not be fatal, but maybe just unexpected. If you're   performing a task and there's a problem, let us know what is in this   file when the problem occurred. (Please don't send me 100M dumps   you'll only piss me off). Just a few relevant lines so I can rule   out a few hundred thousand lines of code and concentrate on where   the problem starts showing up.</p> <p>These are your site logs, not mine. We report serious issues at any log level. I highly recommend <code>DEBUG</code> log level for most sites - which provides a bit of additional info and doesn't create huge logfiles. When there's a problem which defies all attempts to track, you might wish to use <code>DATA</code> log level for a short period of time to capture all the detail of what structures we were dealing with at the time. This log level will use a lot of space so is recommended only for brief periods or for developer test sites.</p> <p>I recommend configuring logrotate for both the php log and the application log. I usually have a look at dbfail.out every week or two, fix any issues reported and then starting over with a fresh file. Likewise with the PHP logfile. I refer to it once in a while to see if there's something that needs fixing.</p> <p>If something goes wrong, and it's not a fatal error, I look at the application logfile. Often I will</p> <pre><code>tail -f logfile.out\n</code></pre> <p>While repeating an operation that has problems. Often I'll insert extra logging statements in the code if there isn't any hint what's going wrong. Even something as simple as \"got here\" or printing out the value of a variable that might be suspect. You can do this too - in fact I encourage you to do so. Once you've found what you need to find, you can</p> <pre><code>git checkout file.php\n</code></pre> <p>To immediately clear out all the extra logging stuff you added.  Use the information from this log and any detail you can provide from your investigation of the problem to file your bug report - unless your analysis points to the source of the problem. In that case, just fix it.</p>"},{"location":"admin/#rotating-log-files","title":"Rotating log files","text":"<ol> <li>Enable the logrot addon in the official hubzilla-addons repo</li> <li>Create a directory in your web root called <code>log</code> with webserver write permissions</li> <li>Go to the logrot admin settings and enter this folder name as well as the max size and number of retained log files.</li> </ol>"},{"location":"admin/#reporting-issues","title":"Reporting issues","text":"<p>When reporting issues, please try to provide as much detail as may be necessary for developers to reproduce the issue and provide the complete text of all error messages.</p> <p>We encourage you to try to the best of your abilities to use these logs combined with the source code in your possession to troubleshoot issues and find their cause. The community is often able to help, but only you have access to your site logfiles and it is considered a security risk to share them.</p> <p>If a code issue has been uncovered, please report it on the project bugtracker (https://framagit.org/hubzilla/core/issues). Again provide as much detail as possible to avoid us going back and forth asking questions about your configuration or how to duplicate the problem, so that we can get right to the problem and figure out what to do about it. You are also welcome to offer your own solutions and submit patches. In fact we encourage this as we are all volunteers and have little spare time available. The more people that help, the easier the workload for everybody. It's OK if your solution isn't perfect. Every little bit helps and perhaps we can improve on it.</p>"},{"location":"admin/hub_snapshots/","title":"Hub snapshots","text":""},{"location":"admin/hub_snapshots/#hub-snapshot-tools","title":"Hub Snapshot Tools","text":"<p>Hubzilla developers frequently need to switch between branches that might have  incompatible database schemas or content. The following two scripts create and  restore complete snapshots of a Hubzilla instance, including both the hub web  root and the entire database state. Each script requires a config file called  <code>hub-snapshot.conf</code> residing in the same folder and containing the specific  directories and database details of your hub.</p>"},{"location":"admin/hub_snapshots/#config","title":"Config","text":"<p>The format of the config file is very strict. There must be no spaces between the  variable name and the value. Replace only the content inside the quotes with your  configuration. Save this file as <code>hub-snapshot.conf</code> alongside the scripts.</p> <pre><code># Location of hub root. Typically this is the location of the Hubzilla repo clone.\nHUBROOT=\"/var/www/\"\n# MySQL database name\nDBNAME=\"hubzilla\"\n# MySQL database user\nDBUSER=\"hubzilla\"\n# MySQL database password\nDBPWD=\"akeufajeuwfb\"\n# The target snapshot folder where the git repo will be initialized\nSNAPSHOTROOT=\"/root/snapshots/hubzilla/\"\n</code></pre>"},{"location":"admin/hub_snapshots/#snapshot","title":"Snapshot","text":"<p>Example usage:</p> <pre><code>sh hub-snapshot.sh my-hub.conf \"Commit message for the snapshot\"\n</code></pre> <p>hub-snapshot.sh:</p> <pre><code>#!/bin/bash\n\nif ! [ -f \"$1\" ]; then\n    echo \"$1 is not a valid file. Aborting...\"\n    exit 1\nfi\nsource \"$1\"\n#echo \"$DBNAME\"\n#echo \"$DBUSER\"\n#echo \"$DBPWD\"\n#echo \"$HUBROOT\"\n#echo \"$SNAPSHOTROOT\"\nMESSAGE=\"snapshot: $2\"\n\nif [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then\n    echo \"Required variable is not set. Aborting...\"\n    exit 1\nfi\n\nif [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then\n    mkdir -p \"$SNAPSHOTROOT\"/db/\nfi\nif [ ! -d \"$SNAPSHOTROOT\"/www/ ]; then\n    mkdir -p \"$SNAPSHOTROOT\"/www/\nfi\n\nif [ ! -d \"$SNAPSHOTROOT\"/www/ ] || [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then\n    echo \"Error creating snapshot directories. Aborting...\"\n    exit 1\nfi\n\necho \"Export database...\"\nmysqldump -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" &gt; \"$SNAPSHOTROOT\"/db/\"$DBNAME\".sql\necho \"Copy hub root files...\"\nrsync -va --delete --exclude=.git* \"$HUBROOT\"/ \"$SNAPSHOTROOT\"/www/\n\ncd \"$SNAPSHOTROOT\"\n\nif [ ! -d \".git\" ]; then\n    git init\nfi\nif [ ! -d \".git\" ]; then\n    echo \"Cannot initialize git repo. Aborting...\"\n    exit 1\nfi\n\ngit add -A\necho \"Commit hub snapshot...\"\ngit commit -a -m \"$MESSAGE\"\n\nexit 0\n</code></pre>"},{"location":"admin/hub_snapshots/#restore","title":"Restore","text":"<pre><code>#!/bin/bash\n# Restore hub to a previous state. Input hub config and commit hash\n\nif ! [ -f \"$1\" ]; then\n        echo \"$1 is not a valid file. Aborting...\"\n        exit 1\nfi\nsource \"$1\"\nCOMMIT=$2\n\nif [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then\n        echo \"Required variable is not set. Aborting...\"\n        exit 1\nfi\nRESTOREDIR=\"$(mktemp -d)/\"\n\nif [ ! -d \"$RESTOREDIR\" ]; then\n    echo \"Cannot create restore directory. Aborting...\"\n    exit 1\nfi\necho \"Cloning the snapshot repo...\"\ngit clone \"$SNAPSHOTROOT\" \"$RESTOREDIR\"\ncd \"$RESTOREDIR\"\necho \"Checkout requested snapshot...\"\ngit checkout \"$COMMIT\"\necho \"Restore hub root files...\"\nrsync -a --delete --exclude=.git* \"$RESTOREDIR\"/www/ \"$HUBROOT\"/\necho \"Restore hub database...\"\nmysql -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" &lt; \"$RESTOREDIR\"/db/\"$DBNAME\".sql\n\nchown -R www-data:www-data \"$HUBROOT\"/{store,extend,addon,.htlog,.htconfig.php}\n\necho \"Restored hub to snapshot $COMMIT\"\necho \"Removing temporary files...\"\n\nrm -rf \"$RESTOREDIR\"\n\nexit 0\n</code></pre>"},{"location":"admin/primary_directory/","title":"Primary Directory","text":"<p>By default, $Projectname will use available Directories on the web, which show you channels available around the world.</p> <p>There are certain scenarios where you might want your own directory-server that you can connect multiple hubs to. This will limit the channels that appear in all of your hubs to only channels on hubs connected to your directory-server.</p>"},{"location":"admin/primary_directory/#instuctions-on-how-to-set-up-one-hub-as-the-primary-directory-for-a-series-of-private-hubs","title":"Instuctions on how to set up one hub as the Primary Directory for a series of private hubs.","text":"<ul> <li> <p>On the hub that will be the Directory Server, open the .htconfig.php file and set:</p> <p><code>App::$config['system']['directory_mode'] = DIRECTORY_MODE_PRIMARY;</code></p> <p>By default it should already be set as DIRECTORY_MODE_NORMAL, so just edit that line to say DIRECTORY_MODE_PRIMARY</p> </li> <li> <p>Next, for each hub (including the Directory Server), from a terminal,  cd into the folder where it is installed and run this :</p> <p><code>util/config system directory_realm YOURREALMNAME</code></p> <p>(YOURREALMNAME can be whatever you want your realm-name to be)</p> <p>then:</p> <p><code>util/config system realm_token THEPASSWORD</code></p> <p>(THEPASSWORD is whatever password you want for your realm)</p> <p>NOTE: Use the same realm-name and password for each hub</p> </li> <li> <p>Lastly, for each \"client\" hub, (from a terminal) run:</p> <p><code>util/config system directory_server https://theaddressofyourdirectoryserver.com</code></p> </li> </ul> <p>Now when you view the directory of each hub, it should only show the channels that exist on the hubs in your realm. I have tested with two hubs so far, and it seems to be working fine. Channels created in each hub are reflected in the Primary Directory, and subsequently in the directory of all client hubs</p>"},{"location":"admin/primary_directory/#issues","title":"Issues","text":"<p>When I created the first hub,it was up and running for an hour or so before I changed it to PRIMARY_MODE, and after changing it, there were a few channels from across the matrix still present in the directory. I deleted them from the xchan table and that seems to have fixed the issue. </p>"},{"location":"admin/widgets/","title":"Core Widgets","text":"<p>Some/many of these widgets have restrictions which may restrict the type of page where they may appear or may require login</p> <ul> <li> <p>clock - displays the current time</p> <ul> <li>args: military (1 or 0) - use 24 hour time as opposed to AM/PM  </li> </ul> </li> <li> <p>profile - displays a profile sidebar on pages which load profiles (pages with nickname in the URL)</p> </li> <li> <p>tagcloud - display a tagcloud of webpage items</p> <ul> <li>args: count - number of items to return (default 24)  </li> </ul> </li> <li> <p>collections - privacy group selector for the current logged in channel</p> <ul> <li>args: mode - one of \"conversation\", \"group\", \"abook\" depending on module  </li> </ul> </li> <li> <p>suggestions - friend suggestions for the current logged on channel</p> </li> <li> <p>follow - presents a text box for following another channel</p> </li> <li> <p>notes - private notes area for the current logged in channel if private_notes feature is enabled</p> </li> <li> <p>savedsearch - network/matrix search with save - must be logged in and savedsearch feature enabled</p> </li> <li> <p>filer - select filed items from network/matrix stream - must be logged in</p> </li> <li> <p>archive - date range selector for network and channel pages</p> <ul> <li>args: 'wall' - 1 or 0, limit to wall posts or network/matrix posts (default)  </li> </ul> </li> <li> <p>fullprofile - same as profile currently</p> </li> <li> <p>categories - categories filter (channel page)</p> </li> <li> <p>tagcloud_wall - tagcloud for channel page only</p> <ul> <li>args: 'limit' - number of tags to return (default 50)  </li> </ul> </li> <li> <p>catcloud_wall - tagcloud for channel page categories</p> <ul> <li>args: 'limit' - number of categories to return (default 50)  </li> </ul> </li> <li> <p>affinity - affinity slider for network page - must be logged in</p> </li> <li> <p>settings_menu - sidebar menu for settings page, must be logged in</p> </li> <li> <p>mailmenu - sidebar menu for private message page - must be logged in</p> </li> <li> <p>design_tools - design tools menu for webpage building pages, must be logged in</p> </li> <li> <p>findpeople - tools to find other channels</p> </li> <li> <p>photo_albums - list photo albums of the current page owner with a selector menu</p> </li> <li> <p>vcard - mini profile sidebar for the person of interest (page owner, whatever)</p> </li> <li> <p>dirsafemode - directory selection tool - only on directory pages</p> </li> <li> <p>dirsort - directory selection tool - only on directory pages</p> </li> <li> <p>dirtags - directory tool - only on directory pages</p> </li> <li> <p>menu_preview - preview a menu - only on menu edit pages</p> </li> <li> <p>chatroom_list - list of chatrooms for the page owner</p> </li> <li> <p>bookmarkedchats - list of bookmarked chatrooms collected on this site for the current observer</p> </li> <li> <p>suggestedchats - \"interesting\" chatrooms chosen for the current observer</p> </li> <li> <p>item - displays a single webpage item by mid or page title</p> <ul> <li>args:</li> <li>channel_id - channel that owns the content, defualt is the profile_uid </li> <li>mid - message_id of webpage to display (must be webpage, not a conversation item)</li> <li>title - URL page title of webpage (must provide one of either title or mid)  </li> </ul> </li> <li> <p>photo - display a single photo</p> <ul> <li>args: </li> <li>src - URL of photo, must be http or https</li> <li>zrl - use zid authenticated link</li> <li>style - CSS style string  </li> </ul> </li> <li> <p>cover_photo - display the cover photo for the selected channel</p> <ul> <li>args:</li> <li>channel_id - channel to use, default is the profile_uid </li> <li>style - CSS style string (default is dynamically resized to width of region)  </li> </ul> </li> <li> <p>photo_rand - display a random photo from one of your photo albums. Photo permissions are honoured</p> <ul> <li>args: </li> <li>album - album name (very strongly recommended if you have lots of photos)</li> <li>scale - typically 0 (original size), 1 (1024px), 2, (640px), or 3 (320px)</li> <li>style - CSS style string</li> <li>channel_id - if not your own  </li> </ul> </li> <li> <p>random_block - display a random block element from your webpage design tools collection. Permissions are honoured.</p> <ul> <li>args: </li> <li>contains - only return blocks which include the contains string in the block name</li> <li>channel_id - if not your own  </li> </ul> </li> <li> <p>tasklist - provide a task or to-do list for the currently logged-in channel.</p> <ul> <li>args:</li> <li>all - display completed tasks if all is non-zero.  </li> </ul> </li> <li> <p>forums - provide a list of connected public forums with unseen counts for the current logged-in channel.  </p> </li> <li> <p>activity - provide a list of authors of unread network content for the current logged-in channel.</p> </li> <li> <p>album - provides a widget containing a complete photo album from albums belonging to the page owner; this may be too large to present in a sidebar region as is best implemented as a content region widget. </p> <ul> <li>args:</li> <li>album - album name</li> <li>title - optional title, album name is used if not present  </li> </ul> </li> </ul>"},{"location":"admin/widgets/#creating-new-widgets","title":"Creating New Widgets","text":""},{"location":"admin/widgets/#class-widgets","title":"Class Widgets","text":"<p>To create a class-based widget named 'slugfish' create a file with the following contents:</p> <pre><code>&lt;?php\n\nnamespace Zotlabs\\Widget;\n\n\nclass Slugfish {\n\n    function widget($args) {\n\n    ... widget code goes here.\n    ... The function returns a string which is the HTML content of the widget.\n    ... $args is a named array which is passed any [var] variables from the layout editor\n    ... For instance [widget=slugfish][var=count]3[/var][/widget] will populate $args with\n    ... [ 'count' =&gt; 3 ]\n\n    }\n</code></pre> <p>The resultant file may be placed in widget/Slugfish/Slugfish.php , or Zotlabs/SiteWidgets/Slugfish.php . It also may be linked from a git repository using util/add_widget_repo.</p> <p>Traditional function based widget:</p> <p>If you want a widget named 'slugfish', create widget/widget_slugfish.php containing</p> <pre><code>&lt;?php\n\nfunction widget_slugfish($args) {\n\n.. widget code goes here. See above information for class-based widgets for details.\n\n}\n</code></pre>"},{"location":"admin/widgets/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"api/api_albums/","title":"API albums","text":"<p>Description: list photo albums</p> <p>GET /api/z/1.0/albums</p> <p>Output:</p> <pre><code>text - textual name\n\ntotal - number of photos in this album\n\nurl - web URL\n\nurlencode - textual name, urlencoded\n\nbin2hex - textual name using bin2hex (which is used in the web URL link)\n</code></pre> <p>Example:</p> <pre><code>{\n\n    \"success\": true,\n    \"albums\": [\n        {\n            \"text\": \"/\",\n            \"total\": \"2\",\n            \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/\",\n            \"urlencode\": \"\",\n            \"bin2hex\": \"\"\n        },\n            {\n            \"text\": \"2016-01\",\n            \"total\": \"6\",\n            \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3031\",\n            \"urlencode\": \"2016-01\",\n            \"bin2hex\": \"323031362d3031\"\n        },\n        {\n            \"text\": \"2016-02\",\n            \"total\": \"7\",\n            \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3032\",\n            \"urlencode\": \"2016-02\",\n            \"bin2hex\": \"323031362d3032\"\n        },\n        {\n            \"text\": \"Cover Photos\",\n            \"total\": \"5\",\n            \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/436f7665722050686f746f73\",\n            \"urlencode\": \"Cover+Photos\",\n            \"bin2hex\": \"436f7665722050686f746f73\"\n        },\n        {\n            \"text\": \"Profile Photos\",\n            \"total\": \"26\",\n            \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/50726f66696c652050686f746f73\",\n            \"urlencode\": \"Profile+Photos\",\n            \"bin2hex\": \"50726f66696c652050686f746f73\"\n        }\n    ]\n\n}\n</code></pre>"},{"location":"api/api_filedata/","title":"API filedata","text":"<p>Provides the ability to download a file from cloud storage in chunks</p> <p>GET /api/z/1.0/filedata</p> <p>Required:</p> <pre><code>- file_id\n    attach.hash of desired file ('begins with' match)\n</code></pre> <p>Optional:</p> <pre><code>- start\n    starting byte of returned data in file (counting from 0)\n\n- length\n    length (prior to base64 encoding) of chunk to download\n</code></pre> <p>Returns:</p> <pre><code>attach (DB) structure with base64 encoded 'content' comprised of the desired chunk\n</code></pre> <p>Example:</p> <pre><code>https://xyz.macgirvin.com/api/z/1.0/filedata?f=&amp;file_id=9f5217770fd&amp;start=0&amp;length=48\n</code></pre> <p>Returns:</p> <pre><code>{\n\n    \"attach\": {\n        \"id\": \"107\",\n        \"aid\": \"1\",\n        \"uid\": \"2\",\n        \"hash\": \"9f5217770fd55d563bd77f84d534d8e119a187514bbd391714626cd9c0e60207\",\n        \"creator\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"filename\": \"pcxtopbm.c\",\n        \"filetype\": \"application/octet-stream\",\n        \"filesize\": \"3934\",\n        \"revision\": \"0\",\n        \"folder\": \"\",\n        \"flags\": \"0\",\n        \"is_dir\": \"0\",\n        \"is_photo\": \"0\",\n        \"os_storage\": \"1\",\n        \"os_path\": \"\",\n        \"display_path\": \"\",\n        \"content\": \"LyogcGN4dG9wYm0uYyAtIGNvbnZlcnQgUEMgcGFpbnRicnVzaCAoLnBjeCkgZmls\",\n        \"created\": \"2016-07-24 23:13:01\",\n        \"edited\": \"2016-07-24 23:13:01\",\n        \"allow_cid\": \"\",\n        \"allow_gid\": \"\",\n        \"deny_cid\": \"\",\n        \"deny_gid\": \"\",\n        \"start\": 0,\n        \"length\": 48\n    }\n\n}\n</code></pre>"},{"location":"api/api_files/","title":"API files","text":"<p>List file storage (attach DB)</p> <p>GET /api/z/1.0/files</p> <p>Options:</p> <pre><code>- hash\n    return only entries matching hash (exactly)\n\n- filename\n    return only entries matching filename (substring)\n\n- filetype\n    return only entries matching filetype/mimetype (substring)\n\n- start\n    start at record (default 0)\n\n- records\n    number of records to return or 0 for unlimited\n</code></pre> <p>Example: </p> <p>curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/files -d filetype=multipart/mixed</p> <p>Returns:</p> <pre><code>{\n\n    \"success\": true,\n    \"results\": [\n        {\n            \"id\": \"1\",\n            \"aid\": \"1\",\n            \"uid\": \"2\",\n            \"hash\": \"44ee8b2a1a7f36dea07b93b7747a2383a1bc0fdd08339e8928bfcbe45f65d939\",\n            \"filename\": \"Profile Photos\",\n            \"filetype\": \"multipart/mixed\",\n            \"filesize\": \"0\",\n            \"revision\": \"0\",\n            \"folder\": \"\",\n            \"os_storage\": \"1\",\n            \"is_dir\": \"1\",\n            \"is_photo\": \"0\",\n            \"flags\": \"0\",\n            \"created\": \"2016-01-02 21:51:17\",\n            \"edited\": \"2016-01-02 21:51:17\",\n            \"allow_cid\": \"\",\n            \"allow_gid\": \"\",\n            \"deny_cid\": \"\",\n            \"deny_gid\": \"\"\n        },\n        {\n            \"id\": \"12\",\n            \"aid\": \"1\",\n            \"uid\": \"2\",\n            \"hash\": \"71883f1fc64af33889229cbc79c5a056deeec5fc277d765f182f19073e1b2998\",\n            \"filename\": \"Cover Photos\",\n            \"filetype\": \"multipart/mixed\",\n            \"filesize\": \"0\",\n            \"revision\": \"0\",\n            \"folder\": \"\",\n            \"os_storage\": \"1\",\n            \"is_dir\": \"1\",\n            \"is_photo\": \"0\",\n            \"flags\": \"0\",\n            \"created\": \"2016-01-15 00:24:33\",\n            \"edited\": \"2016-01-15 00:24:33\",\n            \"allow_cid\": \"\",\n            \"allow_gid\": \"\",\n            \"deny_cid\": \"\",\n            \"deny_gid\": \"\"\n        },\n        {\n            \"id\": \"16\",\n            \"aid\": \"1\",\n            \"uid\": \"2\",\n            \"hash\": \"f48f7ec3278499d1dd86b72c3207beaaf4717b07df5cc9b373f14d7aad2e1bcd\",\n            \"filename\": \"2016-01\",\n            \"filetype\": \"multipart/mixed\",\n            \"filesize\": \"0\",\n            \"revision\": \"0\",\n            \"folder\": \"\",\n            \"os_storage\": \"1\",\n            \"is_dir\": \"1\",\n            \"is_photo\": \"0\",\n            \"flags\": \"0\",\n            \"created\": \"2016-01-22 03:24:55\",\n            \"edited\": \"2016-01-22 03:26:57\",\n            \"allow_cid\": \"\",\n            \"allow_gid\": \"\",\n            \"deny_cid\": \"\",\n            \"deny_gid\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/api_group_members/","title":"API group_members","text":"<p>GET /api/z/1.0/group_members</p> <p>Required:</p> <pre><code>group_id or group_name\n</code></pre> <p>Returns:</p> <pre><code>group_member+abook+xchan (DB join) for each member of the privacy group\n\n\n[\n\n    {\n        \"id\": \"1\",\n        \"uid\": \"2\",\n        \"gid\": \"1\",\n        \"xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"abook_id\": \"2\",\n        \"abook_account\": \"1\",\n        \"abook_channel\": \"2\",\n        \"abook_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"abook_my_perms\": \"218555\",\n        \"abook_their_perms\": \"0\",\n        \"abook_closeness\": \"0\",\n        \"abook_created\": \"2016-01-02 21:16:26\",\n        \"abook_updated\": \"2016-01-02 21:16:26\",\n        \"abook_connected\": \"0000-00-00 00:00:00\",\n        \"abook_dob\": \"0000-00-00 00:00:00\",\n        \"abook_flags\": \"0\",\n        \"abook_blocked\": \"0\",\n        \"abook_ignored\": \"0\",\n        \"abook_hidden\": \"0\",\n        \"abook_archived\": \"0\",\n        \"abook_pending\": \"0\",\n        \"abook_unconnected\": \"0\",\n        \"abook_self\": \"1\",\n        \"abook_feed\": \"0\",\n        \"abook_profile\": \"\",\n        \"abook_incl\": \"\",\n        \"abook_excl\": \"\",\n        \"abook_instance\": \"\",\n        \"xchan_hash\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"xchan_guid\": \"lql-1VnxtiO4-WF0h72wLX1Fu8szzHDOXgQaTbELwXW77k8AKFfh-hYr70vqMrc3SSvWN-Flrc5HFhRTWB7ICw\",\n        \"xchan_guid_sig\": \"PafvEL0VpKfxATxlCqDjfOeSIMdmpr3iU7X-Sysa1h5LzDpjSXsjO37tYZL-accb1M5itLlfnW5epkTa5I4flsW21zSY1A2jCuBQUTLLGV7rNyyBy7lgqJUFvAMRx0TfXzP9lcaPqlM9T1tA6jfWOsOmkdzwofGeXBnsjGfjsO2xdGYe6vwjOU0DSavukvzDMnOayB9DekpvDnaNBTxeGLM45Skzr7ZEMcNF7TeXMbnvpfLaALYEKeQs9bGH-UgAG8fBWgzVAzeBfx_XSR1rdixjyiZGP0kq0h35SlmMPcEjliodOBFwMXqpXFB7Ibp4F6o6te2p2ErViJccQVG8VNKB6SbKNXY6bhP5zVcVsJ-vR-p4xXoYJJvzTN7yTDsGAXHOLF4ZrXbo5yi5gFAlIrTLAF2EdWQwxSGyLRWKxG8PrDkzEzX6cJJ0VRcLh5z6OI5QqQNdeghPZbshMFMJSc_ApCPi9_hI4ZfctCIOi3T6bdgTNKryLm5fhy_eqjwLAZTGP-aUBgLZpb1mf2UojBn6Ey9cCyq-0T2RWyk-FcIcbV4qJ-p_8oODqw13Qs5FYkjLr1bGBq82SuolkYrXEwQClxnrfKa4KYc2_eHAXPL01iS9zVnI1ySOCNJshB97Odpooc4wk7Nb2Fo-Q6THU9zuu0uK_-JbK7IIl6go2qA\",\n        \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA18JB76lyP4zzL/y7BCej\\neJnfZIWZNtM3MZvI1zEVMWmmwOS+u/yH8oPwyaDk4Y/tnj8GzMPj1lCGVRcd8EJa\\nNrCMd50HODA5EsJtxpsOzRcILYjOcTtIAG1K4LtKqELi9ICAaFp0fNfa+Jf0eCek\\nvPusx2/ORhy+o23hFoSMhL86o2gmaiRnmnA3Vz4ZMG92ieJEDMXt9IA1EkIqS4y5\\nBPZfVPLD1pv8iivj+dtN1XjwplgjUbtxmU0/Ej808nHppscRIqx/XJ0XZU90oNGw\\n/wYoK2EzJlPbRsAkwNqoFrAYlr5HPpn4BJ2ebFYQgWBUraD7HwS5atsQEaxGfO21\\nlUP0+lDg9t3CXvudDj0UG1jiEKbVIGA+4aG0GN2DSC5AyRq/GRxqyay5W2vQbAZH\\nyvxPGrZFO24I65g3pjhpjEsLqZ4ilTLQoLMs0drCIcRm5RxMUo4s/LMg16lT4cEk\\n1qRtk2X0Sb1AMQQ2uRXiVtWz77QHMONEYkf6OW4SHbwcv5umvlv69NYEGfCcbgq0\\nAV7U4/BWztUz/SWj4r194CG43I9I8dmaEx9CFA/XMePIAXQUuABfe1QMOR6IxLpq\\nTHG1peZgHQKeGz4aSGrhQkZNNoOVNaZoIfcvopxcHDTZLigseEIaPPha4WFYoKPi\\nUPbZ5o8gTLc750uzrnb2jwcCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\",\n        \"xchan_photo_mimetype\": \"image/png\",\n        \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/profile/l/2\",\n        \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/profile/m/2\",\n        \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/profile/s/2\",\n        \"xchan_addr\": \"teller@xyz.macgirvin.com\",\n        \"xchan_url\": \"https://xyz.macgirvin.com/channel/teller\",\n        \"xchan_connurl\": \"https://xyz.macgirvin.com/poco/teller\",\n        \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&amp;url=%s\",\n        \"xchan_connpage\": \"\",\n        \"xchan_name\": \"Teller\",\n        \"xchan_network\": \"zot\",\n        \"xchan_instance_url\": \"\",\n        \"xchan_flags\": \"0\",\n        \"xchan_photo_date\": \"2016-10-19 01:26:50\",\n        \"xchan_name_date\": \"2016-01-02 21:16:26\",\n        \"xchan_hidden\": \"0\",\n        \"xchan_orphan\": \"0\",\n        \"xchan_censored\": \"0\",\n        \"xchan_selfcensored\": \"0\",\n        \"xchan_system\": \"0\",\n        \"xchan_pubforum\": \"0\",\n        \"xchan_deleted\": \"0\"\n    },\n    {\n        \"id\": \"12\",\n        \"uid\": \"2\",\n        \"gid\": \"1\",\n        \"xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\",\n        \"abook_id\": \"24\",\n        \"abook_account\": \"1\",\n        \"abook_channel\": \"2\",\n        \"abook_xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\",\n        \"abook_my_perms\": \"218555\",\n        \"abook_their_perms\": \"218555\",\n        \"abook_closeness\": \"80\",\n        \"abook_created\": \"2016-01-27 00:48:43\",\n        \"abook_updated\": \"2016-12-04 17:16:58\",\n        \"abook_connected\": \"2016-12-04 17:16:58\",\n        \"abook_dob\": \"0001-01-01 00:00:00\",\n        \"abook_flags\": \"0\",\n        \"abook_blocked\": \"0\",\n        \"abook_ignored\": \"0\",\n        \"abook_hidden\": \"0\",\n        \"abook_archived\": \"0\",\n        \"abook_pending\": \"0\",\n        \"abook_unconnected\": \"0\",\n        \"abook_self\": \"0\",\n        \"abook_feed\": \"0\",\n        \"abook_profile\": \"debb5236efb1626cfbad33ccb49892801e5f844aa04bf81f580cfa7d13204819\",\n        \"abook_incl\": \"\",\n        \"abook_excl\": \"\",\n        \"abook_instance\": \"\",\n        \"xchan_hash\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\",\n        \"xchan_guid\": \"d5EMLlt1tHHZ0dANoA7B5Wq9UgXoWcFS9-gXOkL_AAejcPApoQRyxfHTuu8DoTbUaO-bYmX5HPuWuK9PHyqNmA\",\n        \"xchan_guid_sig\": \"CVWEMRPtzI1YcHfnnWHTuv3H964OAmSElgUfxMoX6RdQdxNpqb_POirpVuyP8s3W17mVCfO5V9IAjkg5iKcqCk6YcvOD_egmMy-AnM9TC1kKndQHw55CunD82Q8K_xBNSXkSROizcNkKh9DVLjJPFjW1AqtI4njkZ3EMgrWqnbFRM1qPToUoCY9zM3tEMHoAD9YX1zP90wl40LzfN-dtcNWpSBbiz9owou62uzLbN7mrCwKOMlXLjwwGswRnxIsEnb3O-FXOs8hs0mArKe9snq1-BKeD16LyzxgwlpVLElzIJZGEZGtMdIJgeRzKuBvPjsOIpQ1yAkuOpFJ3nGCM-IPOIIjAmyVl5zD3xPVcxxpZlJRn5fG1Y-gnqTgsrEQCA7M6XPWQdrdHU4akZfyUyFJDhv3uM-jon9VzrYTBw68R0WA-1Z8WafEHA4qh5OWAj85lUarwhr7iTiEckH51ypPCPs6VbT6Pw7yMaxfjFOcipashQagx0tfOlDhE5dQANOXKASFtH1J9-CZY2MQdLPQ6u54d5whuHKMGaJ0V68pnmZ2rOn7g344Ah2WCJrm17jj60QsRMorqRFj7GMdPIA1XB8Wrk88MuYOe3Dhyuu6ZWKI7YTWJS690ZVkKUqAiNHqj0W86DtaiPUc_mmGR0fHl4Gksnko3WmCFv9q2X2E\",\n        \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAoj2xCJktBA8Ww7Hp+ZNL\\nrNuQpo8UB/bfvRkIy+yua3xpF1TuXcnAH61kyRz8vXgOu/l2CyxQbIoaGslCV5Sy\\n8JKeNXe+IilUdSSEjMIwCPfSPsYnMHsSnHWmPmclvJwEtQUKOZmW5mMuVBvXy7D2\\njomFwc69AYphdyys6eQ7Dcn6+FRBiQbyMprZ5lxyVW+O4DuXVNa3ej2ebx0gCJZ4\\ntTIlBoKwEey91dY+FyKVFjdwfNczpmL7LgmZXqcVx+MG3mYgibwdVMiXVj5X06cs\\nV9hJ5Xi+Aklsv/UWJtjw9FVt7y9TLptnhh4Ra6T/MDmnBBIAkOR7P/X8cRv078MT\\nl0IMsP0RJcDEtTLtwHFVtDs6p52KDFqclKWbqmxmxqV3OTPVYtArRGIzgnJi/5ur\\nHRr5G6Cif7QY3UowsIOf78Qvy28LwSbdymgBAWwPPKIviXWxGO+9kMWdmPSUQrWy\\nK0+7YA9P9fBUFfn9Hc+p8SJQmQ6OAqLwrDGiPSOlGaNrbEqwqLGgIpXwK+lEFcFJ\\n3SPOjJRWdR2whlMxvpwX+39+H7dWN3vSa3Al4/Sq7qW8yW2rYwf+eGyp4Z0lRR+8\\nJxFMCwZkSw5g14YdlikAPojv5V1c6KuA5ieg8G1hwyONV7A4JHPyEdPt0W0TZi6C\\nCOVkPaC3xGrguETZpJfVpwUCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\",\n        \"xchan_photo_mimetype\": \"image/png\",\n        \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-4\",\n        \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-5\",\n        \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-6\",\n        \"xchan_addr\": \"cloner@xyz.macgirvin.com\",\n        \"xchan_url\": \"http://abc.macgirvin.com/channel/cloner\",\n        \"xchan_connurl\": \"http://abc.macgirvin.com/poco/cloner\",\n        \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&amp;url=%s\",\n        \"xchan_connpage\": \"\",\n        \"xchan_name\": \"Karen\",\n        \"xchan_network\": \"zot\",\n        \"xchan_instance_url\": \"\",\n        \"xchan_flags\": \"0\",\n        \"xchan_photo_date\": \"2016-03-31 19:59:20\",\n        \"xchan_name_date\": \"2016-01-26 23:23:42\",\n        \"xchan_hidden\": \"0\",\n        \"xchan_orphan\": \"0\",\n        \"xchan_censored\": \"0\",\n        \"xchan_selfcensored\": \"0\",\n        \"xchan_system\": \"0\",\n        \"xchan_pubforum\": \"0\",\n        \"xchan_deleted\": \"0\"\n    }\n\n]\n</code></pre>"},{"location":"api/api_item_update/","title":"API item/update","text":"<p>Usage: POST /api/z/1.0/item/update</p> <p>Description: item/update posts an item (typically a conversation item or post, but can be any item) using form input.  </p> <p>Required:</p> <ul> <li> <p>body</p> <p>text/bbcode contents by default.</p> </li> </ul> <p>Optional:</p> <ul> <li> <p>$_FILES['media']</p> <p>uploaded media file to include with post</p> </li> <li> <p>title</p> <p>title of post/item</p> </li> <li> <p>contact_allow</p> <p>array of xchan.xchan_hash allowed to view this item</p> </li> <li> <p>group_allow</p> <p>array of group.hash allowed to view this item</p> </li> <li> <p>contact_deny</p> <p>array of xchan.xchan_hash not allowed to view this item</p> </li> <li> <p>group_deny</p> <p>array of group.hash not allowed to view this item</p> </li> <li> <p>coord</p> <p>geographic coordinates</p> </li> <li> <p>location</p> <p>freefrom location</p> </li> <li> <p>expire</p> <p>datetime this post will expire or be removed</p> </li> <li> <p>mimetype</p> <p>mimetype if not text/bbcode</p> </li> <li> <p>parent</p> <p>item.id of parent to this post (makes it a comment)</p> </li> <li> <p>parent_mid</p> <p>alternate form of parent using message_id</p> </li> <li> <p>remote_xchan</p> <p>xchan.xchan_hash of this message author if not the channel owner</p> </li> <li> <p>consensus</p> <p>boolean set to true if this is a consensus or voting item (default false)</p> </li> <li> <p>nocomment</p> <p>boolean set to true if comments are to be disabled (default false)</p> </li> <li> <p>origin</p> <p>do not use this without reading the code</p> </li> <li> <p>namespace</p> <p>persistent identity for a remote network or service</p> </li> <li> <p>remote_id</p> <p>message_id of this resource on a remote network or service</p> </li> <li> <p>message_id</p> <p>message_id of this item (leave unset to generate one)</p> </li> <li> <p>created</p> <p>datetime of message creation</p> </li> <li> <p>post_id</p> <p>existing item.id if this is an edit operation</p> </li> <li> <p>app</p> <p>application or network name to display with item</p> </li> <li> <p>categories</p> <p>comma separated categories for this item</p> </li> <li> <p>webpage</p> <p>item.page_type if not 0</p> </li> <li> <p>pagetitle</p> <p>for webpage and design elements, the 'page name'</p> </li> <li> <p>layout_mid</p> <p>item.mid of layout for this design element</p> </li> <li> <p>plink</p> <p>permalink for this item if different than the default</p> </li> <li> <p>verb</p> <p>activitystream verb for this item/activity</p> </li> <li> <p>obj_type</p> <p>activitystream object type for this item/activity</p> </li> </ul> <p>Example: </p> <p>curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/item/update -d body=\"hello world\"</p> <p>Returns:</p> <pre><code>{\n\n    \"success\": true,\n    \"item_id\": \"2245\",\n    \"item\": {\n        \"id\": \"2245\",\n        \"mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\",\n        \"aid\": \"1\",\n        \"uid\": \"2\",\n        \"parent\": \"2245\",\n        \"parent_mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\",\n        \"thr_parent\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\",\n        \"created\": \"2016-12-03 20:00:12\",\n        \"edited\": \"2016-12-03 20:00:12\",\n        \"expires\": \"0001-01-01 00:00:00\",\n        \"commented\": \"2016-12-03 20:00:12\",\n        \"received\": \"2016-12-03 20:00:12\",\n        \"changed\": \"2016-12-03 20:00:12\",\n        \"comments_closed\": \"0001-01-01 00:00:00\",\n        \"owner_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"author_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\",\n        \"source_xchan\": \"\",\n        \"mimetype\": \"text/bbcode\",\n        \"title\": \"\",\n        \"body\": \"hello world\",\n        \"html\": \"\",\n        \"app\": \"\",\n        \"lang\": \"\",\n        \"revision\": \"0\",\n        \"verb\": \"http://activitystrea.ms/schema/1.0/post\",\n        \"obj_type\": \"http://activitystrea.ms/schema/1.0/note\",\n        \"obj\": \"\",\n        \"tgt_type\": \"\",\n        \"target\": \"\",\n        \"layout_mid\": \"\",\n        \"postopts\": \"\",\n        \"route\": \"\",\n        \"llink\": \"https://xyz.macgirvin.com/display/14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\",\n        \"plink\": \"https://xyz.macgirvin.com/channel/mychannel/?f=&amp;mid=14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\",\n        \"resource_id\": \"\",\n        \"resource_type\": \"\",\n        \"attach\": \"\",\n        \"sig\": \"sa4TOQNfHtV13HDZ1tuQGWNBpZp-nWhT2GMrZEmelXxa_IvEepD2SEsCTWOBqM8OKPJLfNy8_i-ORXjrOIIgAa_aT8cw5vka7Q0C8L9eEb_LegwQ_BtH0CXO5uT30e_8uowkwzh6kmlVg1ntD8QqrGgD5jTET_fMQOIw4gQUBh40GDG9RB4QnPp_MKsgemGrADnRk2vHO7-bR32yQ0JI-8G-eyeqGaaJmIwkHoi0vXsfjZtU7ijSLuKEBWboNjKEDU89-vQ1c5Kh1r0pmjiDk-a5JzZTYShpuhVA-vQgEcADA7wkf4lJZCYNwu3FRwHTvhSMdF0nmyv3aPFglQDky38-SAXZyQSvd7qlABHGCVVDmYrYaiq7Dh4rRENbAUf-UJFHPCVB7NRg34R8HIqmOKq1Su99bIWaoI2zuAQEVma9wLqMoFsluFhxX58KeVtlCZlro7tZ6z619-dthS_fwt0cL_2dZ3QwjG1P36Q4Y4KrCTpntn9ot5osh-HjVQ01h1I9yNCj6XPgYJ8Im3KT_G4hmMDFM7H9RUrYLl2o9XYyiS2nRrf4aJHa0UweBlAY4zcQG34bw2AMGCY53mwsSArf4Hs3rKu5GrGphuwYX0lHa7XEKMglwBWPWHI49q7-oNWr7aWwn1FnfaMfl4cQppCMtKESMNRKm_nb9Dsh5e0\",\n        \"diaspora_meta\": \"\",\n        \"location\": \"\",\n        \"coord\": \"\",\n        \"public_policy\": \"\",\n        \"comment_policy\": \"contacts\",\n        \"allow_cid\": \"\",\n        \"allow_gid\": \"\",\n        \"deny_cid\": \"\",\n        \"deny_gid\": \"\",\n        \"item_restrict\": \"0\",\n        \"item_flags\": \"0\",\n        \"item_private\": \"0\",\n        \"item_origin\": \"1\",\n        \"item_unseen\": \"0\",\n        \"item_starred\": \"0\",\n        \"item_uplink\": \"0\",\n        \"item_consensus\": \"0\",\n        \"item_wall\": \"1\",\n        \"item_thread_top\": \"1\",\n        \"item_notshown\": \"0\",\n        \"item_nsfw\": \"0\",\n        \"item_relay\": \"0\",\n        \"item_mentionsme\": \"0\",\n        \"item_nocomment\": \"0\",\n        \"item_obscured\": \"0\",\n        \"item_verified\": \"1\",\n        \"item_retained\": \"0\",\n        \"item_rss\": \"0\",\n        \"item_deleted\": \"0\",\n        \"item_type\": \"0\",\n        \"item_hidden\": \"0\",\n        \"item_unpublished\": \"0\",\n        \"item_delayed\": \"0\",\n        \"item_pending_remove\": \"0\",\n        \"item_blocked\": \"0\"\n    }\n\n}\n</code></pre>"},{"location":"api/api_xchan/","title":"API xchan","text":"<p>An xchan is a global location independent channel and is the primary record for a network  identity. It may refer to channels on other websites, networks, or services. </p> <p>GET /api/z/1.0/xchan</p> <p>Required: one of [ address, hash, guid ] as GET parameters</p> <p>Returns a portable xchan structure</p> <p>Example: https://xyz.macgirvin.com/api/z/1.0/xchan?f=&amp;address=mike@macgirvin.com</p> <p>Returns:</p> <pre><code>{\n    \"hash\": \"jr54M_y2l5NgHX5wBvP0KqWcAHuW23p1ld-6Vn63_pGTZklrI36LF8vUHMSKJMD8xzzkz7s2xxCx4-BOLNPaVA\",\n    \"guid\": \"sebQ-IC4rmFn9d9iu17m4BXO-kHuNutWo2ySjeV2SIW1LzksUkss12xVo3m3fykYxN5HMcc7gUZVYv26asx-Pg\",\n    \"guid_sig\": \"Llenlbl4zHo6-g4sa63MlQmTP5dRCrsPmXHHFmoCHG63BLq5CUZJRLS1vRrrr_MNxr7zob_Ykt_m5xPKe5H0_i4pDj-UdP8dPZqH2fqhhx00kuYL4YUMJ8gRr5eO17vsZQ3XxTcyKewtgeW0j7ytwMp6-hFVUx_Cq08MrXas429ZrjzaEwgTfxGnbgeQYQ0R5EXpHpEmoERnZx77VaEahftmdjAUx9R4YKAp13pGYadJOX5xnLfqofHQD8DyRHWeMJ4G1OfWPSOlXfRayrV_jhnFlZjMU7vOdQwHoCMoR5TFsRsHuzd-qepbvo3pzvQZRWnTNu6oPucgbf94p13QbalYRpBXKOxdTXJrGdESNhGvhtaZnpT9c1QVqC46jdfP0LOX2xrVdbvvG2JMWFv7XJUVjLSk_yjzY6or2VD4V6ztYcjpCi9d_WoNHruoxro_br1YO3KatySxJs-LQ7SOkQI60FpysfbphNyvYMkotwUFI59G08IGKTMu3-GPnV1wp7NOQD1yzJbGGEGSEEysmEP0SO9vnN45kp3MiqbffBGc1r4_YM4e7DPmqOGM94qksOcLOJk1HNESw2dQYWxWQTBXPfOJT6jW9_crGLMEOsZ3Jcss0XS9KzBUA2p_9osvvhUKuKXbNztqH0oZIWlg37FEVsDs_hUwUJpv2Ar09k4\",\n    \"pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA7QCwvuEIwCHjhjbpz3Oc\\ntyei/Pz9nDksNbsc44Cm8jxYGMXsTPFXDZYCcCB5rcAhPPdZSlzaPkv4vPVcMIrw\\n5cdX0tvbwa3rNTng6uFE7qkt15D3YCTkwF0Y9FVZiZ2Ko+G23QeBt9wqb9dlDN1d\\nuPmu9BLYXIT/JXoBwf0vjIPFM9WBi5W/EHGaiuqw7lt0qI7zDGw77yO5yehKE4cu\\n7dt3SakrXphL70LGiZh2XGoLg9Gmpz98t+gvPAUEotAJxIUqnoiTA8jlxoiQjeRK\\nHlJkwMOGmRNPS33awPos0kcSxAywuBbh2X3aSqUMjcbE4cGJ++/13zoa6RUZRObC\\nZnaLYJxqYBh13/N8SfH7d005hecDxWnoYXeYuuMeT3a2hV0J84ztkJX5OoxIwk7S\\nWmvBq4+m66usn6LNL+p5IAcs93KbvOxxrjtQrzohBXc6+elfLVSQ1Rr9g5xbgpub\\npSc+hvzbB6p0tleDRzwAy9X16NI4DYiTj4nkmVjigNo9v2VPnAle5zSam86eiYLO\\nt2u9YRqysMLPKevNdj3CIvst+BaGGQONlQalRdIcq8Lin+BhuX+1TBgqyav4XD9K\\nd+JHMb1aBk/rFLI9/f2S3BJ1XqpbjXz7AbYlaCwKiJ836+HS8PmLKxwVOnpLMbfH\\nPYM8k83Lip4bEKIyAuf02qkCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\",\n    \"photo_mimetype\": \"image/jpeg\",\n    \"photo_l\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-4\",\n    \"photo_m\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-5\",\n    \"photo_s\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-6\",\n    \"address\": \"mike@macgirvin.com\",\n    \"url\": \"https://macgirvin.com/channel/mike\",\n    \"connurl\": \"https://macgirvin.com/poco/mike\",\n    \"follow\": \"https://macgirvin.com/follow?f=&amp;url=%s\",\n    \"connpage\": \"https://macgirvin.com/connect/mike\",\n    \"name\": \"Mike Macgirvin\",\n    \"network\": \"zot\",\n    \"instance_url\": \"\",\n    \"flags\": \"0\",\n    \"photo_date\": \"2012-12-06 05:06:11\",\n    \"name_date\": \"2012-12-06 04:59:13\",\n    \"hidden\": \"1\",\n    \"orphan\": \"0\",\n    \"censored\": \"0\",\n    \"selfcensored\": \"0\",\n    \"system\": \"0\",\n    \"pubforum\": \"0\",\n    \"deleted\": \"0\"\n}\n</code></pre>"},{"location":"api/group/","title":"API group","text":"<p>GET /api/z/1.0/group</p> <p>Description: list privacy groups</p> <p>Returns: DB tables of all privacy groups. </p> <p>To use with API group_members, provide either 'group_id' from the id element returned in this call, or 'group_name' from the gname returned in this call.</p> <pre><code>[\n\n    {\n        \"id\": \"1\",\n        \"hash\": \"966c946394f3e2627bbb8a55026b5725e582407098415c02f85232de3f3fde76Friends\",\n        \"uid\": \"2\",\n        \"visible\": \"0\",\n        \"deleted\": \"0\",\n        \"gname\": \"Friends\"\n    },\n    {\n        \"id\": \"2\",\n        \"hash\": \"852ebc17f8c3ed4866f2162e384ded0f9b9d1048f93822c0c84196745f6eec66Family\",\n        \"uid\": \"2\",\n        \"visible\": \"1\",\n        \"deleted\": \"0\",\n        \"gname\": \"Family\"\n    },\n    {\n        \"id\": \"3\",\n        \"hash\": \"cc3cb5a7f9818effd7c7c80a58b09a189b62efa698a74319117babe33ee30ab9Co-workers\",\n        \"uid\": \"2\",\n        \"visible\": \"0\",\n        \"deleted\": \"0\",\n        \"gname\": \"Co-workers\"\n    }\n]\n</code></pre>"},{"location":"dev/","title":"Documentation","text":"<p>This is an automatically generated documentation for Documentation.</p>"},{"location":"dev/#namespaces","title":"Namespaces","text":""},{"location":"dev/#zotlabsaccess","title":"\\Zotlabs\\Access","text":""},{"location":"dev/#classes","title":"Classes","text":"Class Description <code>AccessList</code> <code>PermissionLimits</code> <code>PermissionRoles</code> <code>Permissions</code>"},{"location":"dev/#zotlabsactivitystreams","title":"\\Zotlabs\\ActivityStreams","text":""},{"location":"dev/#classes_1","title":"Classes","text":"Class Description <code>ASObject</code> <code>Activity</code> <code>Actor</code> <code>AssertionMethod</code> <code>Collection</code> <code>CollectionPage</code> <code>IntransitiveActivity</code> <code>Link</code> <code>OrderedCollection</code> <code>OrderedCollectionPage</code> According to the specification, OrderedCollectionPage extendsboth OrderedCollection and CollectionPage, but PHP is still a bit awkwardwhen it comes to multiple inheritance. Rather than try and do this withtraits, we'll just include the CollectionPage elements here - as this onlyconsists of three properties. <code>Place</code> <code>Profile</code> <code>PublicKey</code> <code>Question</code> <code>Relationship</code> <code>Signature</code> <code>Tombstone</code> <code>UnhandledElementException</code>"},{"location":"dev/#zotlabsdaemon","title":"\\Zotlabs\\Daemon","text":""},{"location":"dev/#classes_2","title":"Classes","text":"Class Description <code>Addon</code> <code>Cache_embeds</code> <code>Cache_query</code> <code>Channel_purge</code> <code>Checksites</code> <code>Cli_suggest</code> <code>Content_importer</code> <code>Convo</code> <code>Cron</code> <code>Cron_daily</code> <code>Cron_weekly</code> <code>Cronhooks</code> <code>CurlAuth</code> <code>Deliver</code> <code>Deliver_hooks</code> <code>Delxitems</code> <code>Directory</code> <code>Expire</code> <code>Externals</code> <code>Fetchparents</code> <code>File_importer</code> <code>Gprobe</code> <code>Importdoc</code> <code>Importfile</code> <code>Master</code> <code>Notifier</code> <code>Onedirsync</code> <code>Onepoll</code> <code>Poller</code> <code>Queue</code> <code>Thumbnail</code> <code>Xchan_photo</code> <code>Zotconvo</code>"},{"location":"dev/#zotlabsentity","title":"\\Zotlabs\\Entity","text":""},{"location":"dev/#classes_3","title":"Classes","text":"Class Description <code>Account</code> <code>Channel</code> <code>Item</code>"},{"location":"dev/#zotlabsextend","title":"\\Zotlabs\\Extend","text":""},{"location":"dev/#classes_4","title":"Classes","text":"Class Description <code>Hook</code> <code>Route</code> <code>Widget</code>"},{"location":"dev/#zotlabsidentity","title":"\\Zotlabs\\Identity","text":""},{"location":"dev/#classes_5","title":"Classes","text":"Class Description <code>BasicId</code> <code>OAuth2Server</code> <code>OAuth2Storage</code> <code>ProfilePhoto</code>"},{"location":"dev/#zotlabslib","title":"\\Zotlabs\\Lib","text":""},{"location":"dev/#classes_6","title":"Classes","text":"Class Description <code>AConfig</code> <code>ASCache</code> A wrapper for the cache api <code>ASCollection</code> Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged). <code>AbConfig</code> <code>AccessList</code> <code>Activity</code> <code>ActivityStreams</code> <code>Api_router</code> <code>BaseObject</code> <code>Cache</code> cache api <code>Chatroom</code> <code>Config</code> <code>Connect</code> <code>Crypto</code> <code>DB_Upgrade</code> Upgrade the database schema if necessary. <code>DReport</code> <code>Enotify</code> <code>ExtendedZip</code> Description of ExtendedZip <code>Hashpath</code> <code>IConfig</code> <code>Img_filesize</code> <code>JSalmon</code> <code>JcsEddsa2022</code> <code>Keyutils</code> KeyutilsConvert RSA keys between various formats <code>LDSignatures</code> <code>Libsync</code> <code>Libzot</code> <code>Libzotdir</code> <code>Mailer</code> A class for sending emails. <code>MarkdownSoap</code> <code>MessageFilter</code> <code>Multibase</code> <code>PConfig</code> <code>Permcat</code> <code>PermissionDescription</code> Encapsulates information the ACL dialog requires to describepermission settings for an item with an empty ACL. <code>Queue</code> <code>QueueWorker</code> <code>SConfig</code> <code>Share</code> <code>SvgSanitizer</code> SVGSantiizer <code>System</code> <code>Techlevels</code> <code>Text</code> <code>ThreadItem</code> A thread item <code>ThreadListener</code> <code>ThreadStream</code> A list of threads <code>Verify</code> <code>Webfinger</code> <code>XConfig</code> <code>ZotURL</code> <code>Zotfinger</code>"},{"location":"dev/#zotlabslibtraits","title":"\\Zotlabs\\Lib\\Traits","text":""},{"location":"dev/#traits","title":"Traits","text":"Trait Description <code>HelpHelperTrait</code>"},{"location":"dev/#zotlabsmodule","title":"\\Zotlabs\\Module","text":""},{"location":"dev/#classes_7","title":"Classes","text":"Class Description <code>Achievements</code> Base controller class for Modules. <code>Acl</code> Base controller class for Modules. <code>Activity</code> Base controller class for Modules. <code>Admin</code> Base controller class for Modules. <code>Affinity</code> Base controller class for Modules. <code>Album</code> Base controller class for Modules. <code>Api</code> Base controller class for Modules. <code>Appman</code> Base controller class for Modules. <code>Apporder</code> Base controller class for Modules. <code>Apps</code> Base controller class for Modules. <code>Apschema</code> Base controller class for Modules. <code>Attach</code> Base controller class for Modules. <code>Attach_edit</code> Base controller class for Modules. <code>Authorize</code> Base controller class for Modules. <code>Authtest</code> Base controller class for Modules. <code>Block</code> Base controller class for Modules. <code>Blocks</code> Base controller class for Modules. <code>Bookmarks</code> Base controller class for Modules. <code>Branchtopic</code> Base controller class for Modules. <code>Cal</code> Base controller class for Modules. <code>Cdav</code> Base controller class for Modules. <code>Changeaddr</code> Base controller class for Modules. <code>Channel</code> Base controller class for Modules. <code>Channel_calendar</code> Base controller class for Modules. <code>Chanview</code> Base controller class for Modules. <code>Chat</code> Base controller class for Modules. <code>Chatsvc</code> Base controller class for Modules. <code>Cloud</code> Base controller class for Modules. <code>Cloud_tiles</code> Base controller class for Modules. <code>Common</code> Base controller class for Modules. <code>Connect</code> Base controller class for Modules. <code>Connections</code> Base controller class for Modules. <code>Connedit</code> Base controller class for Modules. <code>Contactedit</code> Base controller class for Modules. <code>Contactgroup</code> Base controller class for Modules. <code>Conversation</code> Base controller class for Modules. <code>Cover_photo</code> Base controller class for Modules. <code>Dav</code> Base controller class for Modules. <code>Defperms</code> Base controller class for Modules. <code>Dircensor</code> Base controller class for Modules. <code>Directory</code> Base controller class for Modules. <code>Dirsearch</code> Base controller class for Modules. <code>Display</code> Base controller class for Modules. <code>Dreport</code> Base controller class for Modules. <code>Editblock</code> Base controller class for Modules. <code>Editlayout</code> Base controller class for Modules. <code>Editpost</code> Base controller class for Modules. <code>Editwebpage</code> Base controller class for Modules. <code>Email_resend</code> Base controller class for Modules. <code>Email_validation</code> Base controller class for Modules. <code>Embed</code> Base controller class for Modules. <code>Embedphotos</code> Base controller class for Modules. <code>Emoji</code> Base controller class for Modules. <code>Event</code> Base controller class for Modules. <code>Fbrowser</code> Base controller class for Modules. <code>Feed</code> Base controller class for Modules. <code>Fhubloc_id_url</code> Base controller class for Modules. <code>Fhublocs</code> Base controller class for Modules. <code>File_upload</code> Base controller class for Modules. <code>Filer</code> Base controller class for Modules. <code>Filerm</code> Base controller class for Modules. <code>Filestorage</code> Base controller class for Modules. <code>Follow</code> Base controller class for Modules. <code>Getfile</code> Base controller class for Modules. <code>Go</code> Base controller class for Modules. <code>Group</code> Base controller class for Modules. <code>Hashtags</code> Base controller class for Modules. <code>Hcard</code> Base controller class for Modules. <code>Help</code> You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resourcesor use our include mechanism to include it on your local page. <code>Home</code> Base controller class for Modules. <code>Hostxrd</code> Base controller class for Modules. <code>Hq</code> Base controller class for Modules. <code>Id</code> Base controller class for Modules. <code>Impel</code> Base controller class for Modules. <code>Import</code> Base controller class for Modules. <code>Import_items</code> Base controller class for Modules. <code>Import_progress</code> Base controller class for Modules. <code>Invite</code> module: invitexv2.php <code>Item</code> This is the POST destination for most all locally postedtext stuff. This function handles status, wall-to-wall status,local comments, and remote coments that are posted on this site(as opposed to being delivered in a feed). <code>Lang</code> Base controller class for Modules. <code>Layouts</code> Base controller class for Modules. <code>Like</code> Base controller class for Modules. <code>Linkinfo</code> Base controller class for Modules. <code>Lockview</code> Base controller class for Modules. <code>Locs</code> Base controller class for Modules. <code>Login</code> Base controller class for Modules. <code>Logout</code> Base controller class for Modules. <code>Lostpass</code> Base controller class for Modules. <code>Magic</code> Base controller class for Modules. <code>Manage</code> Base controller class for Modules. <code>Manifest</code> Base controller class for Modules. <code>Menu</code> Base controller class for Modules. <code>Mitem</code> Base controller class for Modules. <code>Moderate</code> Base controller class for Modules. <code>Network</code> Base controller class for Modules. <code>New_channel</code> Base controller class for Modules. <code>Notes</code> Base controller class for Modules. <code>Notifications</code> Base controller class for Modules. <code>Notify</code> Base controller class for Modules. <code>OAuth2TestVehicle</code> The OAuth2TestVehicle class is a way to test the registration of an OAuth2client app. It allows you to walk through the steps of registering a client,requesting an authorization code for that client, and then requesting anaccess token for use in authentication against the Hubzilla API endpoints. <code>Oauth</code> Base controller class for Modules. <code>Oauth2</code> Base controller class for Modules. <code>Oauthinfo</code> Base controller class for Modules. <code>Ochannel</code> Base controller class for Modules. <code>Oembed</code> Base controller class for Modules. <code>Oep</code> Base controller class for Modules. <code>Oexchange</code> Base controller class for Modules. <code>Ofeed</code> Base controller class for Modules. <code>Online</code> Base controller class for Modules. <code>Outbox</code> Base controller class for Modules. <code>Owa</code> OpenWebAuth verifier and token generatorSee spec/OpenWebAuth/Home.mdRequests to this endpoint should be signed using HTTP Signaturesusing the 'Authorization: Signature' authentication methodIf the signature verifies a token is returned. <code>Page</code> Base controller class for Modules. <code>Pconfig</code> Base controller class for Modules. <code>Pdledit</code> Base controller class for Modules. <code>Pdledit_gui</code> Base controller class for Modules. <code>Permcat</code> Base controller class for Modules. <code>Permcats</code> Base controller class for Modules. <code>Photo</code> Base controller class for Modules. <code>Photos</code> Base controller class for Modules. <code>Pin</code> Base controller class for Modules. <code>Poco</code> Base controller class for Modules. <code>Poster</code> Base controller class for Modules. <code>Pretheme</code> Base controller class for Modules. <code>Profile</code> Base controller class for Modules. <code>Profile_photo</code> Base controller class for Modules. <code>Profiles</code> Base controller class for Modules. <code>Profperm</code> Base controller class for Modules. <code>Pubsites</code> Base controller class for Modules. <code>Pubstream</code> Base controller class for Modules. <code>Randprof</code> Base controller class for Modules. <code>Rbmark</code> remote bookmark <code>React</code> Base controller class for Modules. <code>Regate</code> Base controller class for Modules. <code>Regdir</code> With args, register a directory server for this realm. <code>Register</code> Base controller class for Modules. <code>Regmod</code> Base controller class for Modules. <code>Regver</code> Base controller class for Modules. <code>Removeaccount</code> Base controller class for Modules. <code>Removeme</code> Base controller class for Modules. <code>Rmagic</code> Base controller class for Modules. <code>Rpost</code> remote post <code>Search</code> Base controller class for Modules. <code>Search_ac</code> Base controller class for Modules. <code>Service_limits</code> Base controller class for Modules. <code>Settings</code> Base controller class for Modules. <code>Share</code> Base controller class for Modules. <code>Sharedwithme</code> Base controller class for Modules. <code>Siteinfo</code> Base controller class for Modules. <code>Sitelist</code> Base controller class for Modules. <code>Smilies</code> Base controller class for Modules. <code>Snap</code> Base controller class for Modules. <code>Sources</code> Base controller class for Modules. <code>Sse</code> Base controller class for Modules. <code>Sse_bs</code> Base controller class for Modules. <code>Sslify</code> Base controller class for Modules. <code>Starred</code> Base controller class for Modules. <code>Subthread</code> Base controller class for Modules. <code>Suggest</code> Base controller class for Modules. <code>Tagger</code> Base controller class for Modules. <code>Tagrm</code> Base controller class for Modules. <code>Tasks</code> Base controller class for Modules. <code>Theme_info</code> Base controller class for Modules. <code>Thing</code> Base controller class for Modules. <code>Token</code> Base controller class for Modules. <code>Tokens</code> Base controller class for Modules. <code>Totp_check</code> Base controller class for Modules. <code>Uexport</code> Base controller class for Modules. <code>Update</code> Base controller class for Modules. <code>Userinfo</code> Base controller class for Modules. <code>View</code> load view/theme/$current_theme/style.php with Hubzilla context <code>Viewconnections</code> Base controller class for Modules. <code>Viewsrc</code> Base controller class for Modules. <code>Vote</code> Base controller class for Modules. <code>Wall_attach</code> Base controller class for Modules. <code>Wall_upload</code> Base controller class for Modules. <code>Webfinger</code> Base controller class for Modules. <code>Webpages</code> Base controller class for Modules. <code>Well_known</code> Base controller class for Modules. <code>Wfinger</code> Base controller class for Modules. <code>Xchan</code> Base controller class for Modules. <code>Xpoco</code> Base controller class for Modules. <code>Xrd</code> Base controller class for Modules. <code>Xref</code> Base controller class for Modules. <code>Z6trans</code> Base controller class for Modules. <code>Zot</code> Base controller class for Modules. <code>Zot_probe</code> Base controller class for Modules. <code>Zotfeed</code> Base controller class for Modules."},{"location":"dev/#zotlabsmoduleadmin","title":"\\Zotlabs\\Module\\Admin","text":""},{"location":"dev/#classes_8","title":"Classes","text":"Class Description <code>Account_edit</code> <code>Accounts</code> <code>Addons</code> <code>Channels</code> <code>Dbsync</code> <code>Features</code> <code>Logs</code> <code>Profs</code> <code>Queue</code> <code>Queueworker</code> Base controller class for Modules. <code>Security</code> <code>Site</code>"},{"location":"dev/#zotlabsmodulesettings","title":"\\Zotlabs\\Module\\Settings","text":""},{"location":"dev/#classes_9","title":"Classes","text":"Class Description <code>Account</code> <code>Calendar</code> <code>Channel</code> <code>Channel_home</code> <code>Connections</code> <code>Conversation</code> <code>Directory</code> <code>Display</code> <code>Editor</code> <code>Events</code> <code>Featured</code> <code>Features</code> <code>Manage</code> <code>Multifactor</code> <code>Network</code> <code>Photos</code> <code>Privacy</code> <code>Profiles</code>"},{"location":"dev/#zotlabsphoto","title":"\\Zotlabs\\Photo","text":""},{"location":"dev/#classes_10","title":"Classes","text":"Class Description <code>PhotoDriver</code> <code>PhotoGd</code> <code>PhotoImagick</code>"},{"location":"dev/#zotlabsrender","title":"\\Zotlabs\\Render","text":""},{"location":"dev/#classes_11","title":"Classes","text":"Class Description <code>SimpleTemplate</code> <code>SmartyInterface</code> <code>SmartyTemplate</code> <code>Theme</code>"},{"location":"dev/#interfaces","title":"Interfaces","text":"Interface Description <code>TemplateEngine</code>"},{"location":"dev/#zotlabsstorage","title":"\\Zotlabs\\Storage","text":""},{"location":"dev/#classes_12","title":"Classes","text":"Class Description <code>BasicAuth</code> <code>CalDAVClient</code> <code>Directory</code> <code>File</code> <code>ZotOauth2Pdo</code>"},{"location":"dev/#zotlabstext","title":"\\Zotlabs\\Text","text":""},{"location":"dev/#classes_13","title":"Classes","text":"Class Description <code>Tagadelic</code>"},{"location":"dev/#zotlabsthumbs","title":"\\Zotlabs\\Thumbs","text":""},{"location":"dev/#classes_14","title":"Classes","text":"Class Description <code>Epubthumb</code> Thumbnail creation for epub files. <code>Mp3audio</code> <code>Pdf</code> <code>Text</code> <code>Video</code>"},{"location":"dev/#zotlabsupdate","title":"\\Zotlabs\\Update","text":""},{"location":"dev/#classes_15","title":"Classes","text":"Class Description <code>_1000</code> <code>_1001</code> <code>_1002</code> <code>_1003</code> <code>_1004</code> <code>_1005</code> <code>_1006</code> <code>_1007</code> <code>_1008</code> <code>_1009</code> <code>_1010</code> <code>_1011</code> <code>_1012</code> <code>_1013</code> <code>_1014</code> <code>_1015</code> <code>_1016</code> <code>_1017</code> <code>_1018</code> <code>_1019</code> <code>_1020</code> <code>_1021</code> <code>_1022</code> <code>_1023</code> <code>_1024</code> <code>_1025</code> <code>_1026</code> <code>_1027</code> <code>_1028</code> <code>_1029</code> <code>_1030</code> <code>_1031</code> <code>_1032</code> <code>_1033</code> <code>_1034</code> <code>_1035</code> <code>_1036</code> <code>_1037</code> <code>_1038</code> <code>_1039</code> <code>_1040</code> <code>_1041</code> <code>_1042</code> <code>_1043</code> <code>_1044</code> <code>_1045</code> <code>_1046</code> <code>_1047</code> <code>_1048</code> <code>_1049</code> <code>_1050</code> <code>_1051</code> <code>_1052</code> <code>_1053</code> <code>_1054</code> <code>_1055</code> <code>_1056</code> <code>_1057</code> <code>_1058</code> <code>_1059</code> <code>_1060</code> <code>_1061</code> <code>_1062</code> <code>_1063</code> <code>_1064</code> <code>_1065</code> <code>_1066</code> <code>_1067</code> <code>_1068</code> <code>_1069</code> <code>_1070</code> <code>_1071</code> <code>_1072</code> <code>_1073</code> <code>_1074</code> <code>_1075</code> <code>_1076</code> <code>_1077</code> <code>_1078</code> <code>_1079</code> <code>_1080</code> <code>_1081</code> <code>_1082</code> <code>_1083</code> <code>_1084</code> <code>_1085</code> <code>_1086</code> <code>_1087</code> <code>_1088</code> <code>_1089</code> <code>_1090</code> <code>_1091</code> <code>_1092</code> <code>_1093</code> <code>_1094</code> <code>_1095</code> <code>_1096</code> <code>_1097</code> <code>_1098</code> <code>_1099</code> <code>_1100</code> <code>_1101</code> <code>_1102</code> <code>_1103</code> <code>_1104</code> <code>_1105</code> <code>_1106</code> <code>_1107</code> <code>_1108</code> <code>_1109</code> <code>_1110</code> <code>_1111</code> <code>_1112</code> <code>_1113</code> <code>_1114</code> <code>_1115</code> <code>_1116</code> <code>_1117</code> <code>_1118</code> <code>_1119</code> <code>_1120</code> <code>_1121</code> <code>_1122</code> <code>_1123</code> <code>_1124</code> <code>_1125</code> <code>_1126</code> <code>_1127</code> <code>_1128</code> <code>_1129</code> <code>_1130</code> <code>_1131</code> <code>_1132</code> <code>_1133</code> <code>_1134</code> <code>_1135</code> <code>_1136</code> <code>_1137</code> <code>_1138</code> <code>_1139</code> <code>_1140</code> <code>_1141</code> <code>_1142</code> <code>_1143</code> <code>_1144</code> <code>_1145</code> <code>_1146</code> <code>_1147</code> <code>_1148</code> <code>_1149</code> <code>_1150</code> <code>_1151</code> <code>_1152</code> <code>_1153</code> <code>_1154</code> <code>_1155</code> <code>_1156</code> <code>_1157</code> <code>_1158</code> <code>_1159</code> <code>_1160</code> <code>_1161</code> <code>_1162</code> <code>_1163</code> <code>_1164</code> <code>_1165</code> <code>_1166</code> <code>_1167</code> <code>_1168</code> <code>_1169</code> <code>_1170</code> <code>_1171</code> <code>_1172</code> <code>_1173</code> <code>_1174</code> <code>_1175</code> <code>_1176</code> <code>_1177</code> <code>_1178</code> <code>_1179</code> <code>_1180</code> <code>_1181</code> <code>_1182</code> <code>_1183</code> <code>_1184</code> <code>_1185</code> <code>_1186</code> <code>_1187</code> <code>_1188</code> <code>_1189</code> <code>_1190</code> <code>_1191</code> <code>_1192</code> <code>_1193</code> <code>_1194</code> <code>_1195</code> <code>_1196</code> <code>_1197</code> <code>_1198</code> <code>_1199</code> <code>_1200</code> <code>_1201</code> <code>_1202</code> <code>_1203</code> <code>_1204</code> <code>_1205</code> <code>_1206</code> <code>_1207</code> <code>_1208</code> <code>_1209</code> <code>_1210</code> <code>_1211</code> <code>_1212</code> <code>_1213</code> <code>_1214</code> <code>_1215</code> <code>_1216</code> <code>_1217</code> <code>_1218</code> <code>_1219</code> <code>_1220</code> <code>_1221</code> <code>_1222</code> <code>_1223</code> <code>_1224</code> <code>_1225</code> <code>_1226</code> <code>_1227</code> <code>_1228</code> <code>_1229</code> <code>_1230</code> <code>_1231</code> <code>_1232</code> <code>_1233</code> <code>_1234</code> <code>_1235</code> <code>_1236</code> <code>_1237</code> <code>_1238</code> <code>_1239</code> <code>_1240</code> <code>_1241</code> <code>_1242</code> <code>_1243</code> <code>_1244</code> <code>_1245</code> <code>_1246</code> <code>_1247</code> <code>_1248</code> <code>_1249</code> <code>_1250</code> <code>_1251</code> <code>_1252</code> <code>_1253</code> <code>_1254</code> <code>_1255</code> <code>_1256</code> <code>_1257</code> <code>_1258</code> <code>_1259</code> <code>_1260</code> <code>_1261</code> <code>_1262</code> <code>_1263</code>"},{"location":"dev/#zotlabsweb","title":"\\Zotlabs\\Web","text":""},{"location":"dev/#classes_16","title":"Classes","text":"Class Description <code>Controller</code> Base controller class for Modules. <code>HTTPHeaders</code> <code>HTTPSig</code> <code>HttpMeta</code> <code>Router</code> We have already parsed the server path into App::$argc and App::$argv <code>Session</code> <code>SessionHandler</code> <code>SessionRedis</code> <code>SubModule</code> <code>WebServer</code>"},{"location":"dev/#zotlabswidget","title":"\\Zotlabs\\Widget","text":""},{"location":"dev/#classes_17","title":"Classes","text":"Class Description <code>Activity</code> <code>Activity_filter</code> <code>Activity_order</code> * Name: Activity order  * Description: Order the network stream by posted date, last commented or by date unthreaded  * Requires: network <code>Admin</code> <code>Affinity</code> <code>Album</code> <code>Appcategories</code> <code>Appcloud</code> <code>Appstore</code> <code>Archive</code> <code>Bookmarkedchats</code> <code>Catcloud</code> * Name: Category cloud  * Description: Display category links in a cloud  * Requires: channel, cards, articles <code>Catcloud_wall</code> <code>Categories</code> <code>Cdav</code> <code>Channel_activities</code> <code>Chatroom_list</code> <code>Chatroom_members</code> <code>Clock</code> <code>Common_friends</code> <code>Cover_photo</code> <code>Design_tools</code> <code>Dirsort</code> <code>Dirtags</code> <code>Filer</code> <code>Findpeople</code> <code>Follow</code> <code>Forums</code> <code>Fullprofile</code> <code>Helpindex</code> <code>Hq_controls</code> <code>Item</code> <code>Menu_preview</code> <code>Messages</code> <code>Newmember</code> <code>Notes</code> <code>Notifications</code> <code>Permcats</code> <code>Photo</code> <code>Photo_albums</code> <code>Photo_rand</code> <code>Pinned</code> * Name: Pinned items  * Description: Display pinned items  * Author: Max Kostikov  * Requires: disabled_for_pdledit_gui <code>Portfolio</code> <code>Privacygroups</code> <code>Profile</code> <code>Pubtagcloud</code> <code>Random_block</code> <code>Rating</code> <code>Savedsearch</code> <code>Settings_menu</code> <code>Sitesearch</code> <code>Suggestedchats</code> <code>Suggestions</code> <code>Tagcloud</code> * Name: Tag cloud  * Description: Display hashtags of your network items in a cloud  * Requires: network, hq <code>Tagcloud_wall</code> <code>Tasklist</code> <code>Tokens</code> <code>Vcard</code> <code>Website_portation_tools</code> <code>Zcard</code>"},{"location":"dev/#zotlabszot6","title":"\\Zotlabs\\Zot6","text":""},{"location":"dev/#classes_18","title":"Classes","text":"Class Description <code>Receiver</code> <code>Zot6Handler</code>"},{"location":"dev/#interfaces_1","title":"Interfaces","text":"Interface Description <code>IHandler</code> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/filesync/","title":"File Sync and Clone","text":"<p>File cloning across multiple instances of a channel is a very hard problem, due to the nature of PHP memory allocation. This needs to be handled dramatically differently than cloning or syncing of other information. (Processing one large video file or 40-50 photos could exhaust memory). Therefore we can't easily just dump all the data to a dump file and sequentially process it. Loading the dump file itself is likely to exhaust memory.</p> <p>There are also two primary operations we are considering. The first is the hardest - saving and then importing all your channel information into a new channel clone. The second is synchronising file changes as they occur across two or more \"active\" clones.</p> <p>For the first cut at this tool we will concentrate on the second case, while trying to maintain some measure of compatibility with the first case so that we can re-use the same tools.</p>"},{"location":"dev/filesync/#meta-data","title":"Meta Data","text":"<p>First we need the metadata for the file in order to precisely re-construct its structure on another site. This requires the following information:</p> <p>'attach' structure (without file contents - which is the default) for the file itself and its parent directories so that we can re-create its precise place in the file system, since we do not know if the parent directory has been imported previously or ever. </p> <p>'photo' structure for any photo elements which were created as a result of uploading this file into the system. This typically contains several different 'scales' or thumbnail images, some of which may be cropped for profile photo use or cover photo use. We need to retain the cropping information which is not present in the metadata, but only in the stored data. The actual thumbnail image data may or may not be included in the metadata. A cover photo of large scale (scale #7) could potentially cause memory issues. Not as bad as a 100M video, but if you have several of these they could add up.  </p> <p>'item' entries which are linked to this file. These can be file share activities, the \"parent item\" linked to photos, and any attached conversation items (photo likes, comments, etc.) </p> <p>All of these items will require URL replacement and re-signing of the item as they are relocated to another site.</p>"},{"location":"dev/filesync/#file-data","title":"File Data","text":"<p>Then we have the actual file data we need to reconstruct the file. This needs to be stored separately from the meta-data to avoid memory exhaustion when processing. The actual file data can be used to reconstruct the attach structure and the first four photo scales. If this is a photo, we need access to the \"#4 scale\" (profile photo) and the #7 scale (cover photo) as they were originally cropped. All other thumbnails can be generated from these. </p>"},{"location":"dev/filesync/#file-sync","title":"File Sync","text":"<p>We will consider this operation first because it is probably the most straightforward to implement. When a photo is added to or removed or changed from the source system, we will send a clone sync packet to all known clones containing the metadata - but no file data . We can only send one sync packet per file operation that needs to be synced. </p> <p>The receiving end will create and perform URL translation on all the metadata structures and store them. Then it will need to fetch the actual data. Assuming CURL supports streaming, an authenticated request is sent to the original site and the original file is requested and streamed directly to disk (bypassing all processing). If photo scale #4 or scale #7 is required, these are requested and stored into their respective structures. We're assuming in this case that the cover photo large scale will not exhaust memory. If CURL cannot be made to support streaming, request packets need to be queued and sent to the origination site to obtain \"chunks\" of the file and re-assembled once all chunks have been retrieved.</p> <p>The authenticated request depends on the mechanism. For CURL streaming, some signed secret with a timestamp will probably need to be generated and posted to the file origination site. Then the data can be retrieved with minimal internal processing and dumped directly to disk using stdio buffering. In the case of a zot request, the zot request packet will be validated, however scheduling chunk batches and re-assembling them could be tricky.</p>"},{"location":"dev/filesync/#file-backuprestore","title":"File Backup/Restore","text":"<p>This is much more complicated as we do not have an authenticate web server to request data from. The metadata can be mostly the same, but we need some form of signalling that we will not be fetching the file via the web. This will likely require a client side process to parse each metadata file and locate a file on disk which it is associated with. Then the data would need to be streamed to the destination server with a special endpoint designed for this task. A java app might be the best option here to retain platform neutrality.</p> <p>Another option would be to use WebDAV for this step. The metadata files would be uploaded first, and then the data files. If a data file corresponded to an existing metadata file, the metadata would be processed; the file stored appropriately, and the metadata file then removed. In this case, photos of scales 4 and 7 would need to be provided in the metadata.  </p> <p>Optionally, this step could also be performed with a filesystem local to the destination server. This would be the highest performance, and a suite of shell-based tools (in the case of Linux) could perform the \"client-side\" of the task.</p> <p>The complexity of this task mandates careful planning into how the data is organised and stored and if necessary backed up remotely or transmitted for backup by the source website.</p>"},{"location":"dev/filesync/#backward-compatibility","title":"Backward Compatibility","text":"<p>There are some obvious issues with making data available for backup or cloning which existed on the system prior to the existence of restore/sync tools. To keep the tools themselves relatively uncomplicated (to the extent possible given the constraints) backward compatibility may have to be preformed by dedicated plugin or addon.        </p>"},{"location":"dev/join/","title":"Developer Guide","text":"<p>Here is how you can join us.</p> <p>First, get yourself a working git package on the system where you will be doing development.</p> <p>Create your own github account.</p> <p>You may fork/clone the $Projectname repository from https://framagit.org/hubzilla/core.git.</p> <p>Follow the instructions provided here: http://help.github.com/fork-a-repo/ to create and use your own tracking fork on framagit</p> <p>Then go to your framagit page and create a \"Pull request\" when you are ready to notify us to merge your work.</p> <p>Translations</p> <p>Our translations are managed through Transifex. If you wish to help out translating $Projectname to another language, sign up on transifex.com, visit https://www.transifex.com/projects/p/hubzilla/ and request to join one of the existing language teams or create a new one. Notify one of the core developers when you have a translation update which requires merging, or ask about merging it yourself if you're comfortable with git and PHP. We have a string file called 'messages.po' which is gettext compliant and a handful of email templates, and from there we automatically generate the application's language files.   </p> <p>Translations - More Info</p> <p>Important</p> <p>Please pull in any changes from the project repository and merge them with your work before issuing a pull request. We reserve the right to reject any patch which results in a large number of merge conflicts. This is especially true in the case of language translations - where we may not be able to understand the subtle differences between conflicting versions.</p> <p>Also - test your changes. Don't assume that a simple fix won't break something else. If possible get an experienced Red developer to review the code. </p> <p>Licensing</p> <p>All code contributed to the project falls under the MIT license, unless otherwise specified. We will accept third-party code which falls under MIT, BSD and LGPL, but copyleft licensing (GPL, and AGPL) is only permitted in addons. It must be possible to completely remove the GPL (copyleft) code from the main project without breaking anything.</p> <p>Coding Style </p> <p>In the interests of consistency we adopt the following code styling. We may accept patches using other styles, but where possible please try to provide a consistent code style. We aren't going to argue or debate the merits of this style, and it is irrelevant what project 'xyz' uses. This is not project 'xyz'. This is a baseline to try and keep the code readable now and in the future. </p> <ul> <li> <p>All comments should be in English.</p> </li> <li> <p>We use doxygen to generate documentation. This hasn't been consistently applied, but learning it and using it are highly encouraged.</p> </li> <li> <p>Indentation is accomplished primarily with tabs using a tab-width of 4.</p> </li> <li> <p>String concatenation and operators should be separated by whitespace. e.g. \"$foo = $bar . 'abc';\" instead of \"$foo=$bar.'abc';\"</p> </li> <li> <p>Generally speaking, we use single quotes for string variables and double quotes for SQL statements. \"Here documents\" should be avoided. Sometimes using double quoted strings with variable replacement is the most efficient means of creating the string. In most cases, you should be using single quotes.</p> </li> <li> <p>Use whitespace liberally to enhance readability. When creating arrays with many elements, we will often set one key/value pair per line, indented from the parent line appropriately. Lining up the assignment operators takes a bit more work, but also increases readability.</p> </li> <li> <p>Generally speaking, opening braces go on the same line as the thing which opens the brace. They are the last character on the line. Closing braces are on a line by themselves. </p> </li> </ul>"},{"location":"dev/join/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"dev/schema/","title":"Red development - a guide to the schema system","text":"<p>A schema, in a nutshell, is a collection of settings for a bunch of variables to define certain elements of a theme.  A schema is loaded as though it were part of config.php and has access to all the same information.  Importantly, this means it is identity aware, and can be used to do some interesting things.  One could, for example, restrict options by service class, or present different options to different members.</p> <p>By default, we filter only by whether or not expert mode is enabled.  If expert mode is enabled, all options are presented to the member.  If it is not, only scheme, background image, font face, and iconset are available as choices.</p> <p>A schema is loaded after the member's personal settings.  Therefore, to allow a member to overwrite a particular aspect of a schema you would use the following syntax:</p> <pre><code>    if (! $foo)\n        $foo = 'bar';\n</code></pre> <p>However, there are circumstances - particularly with positional elements - where it may be desirable (or necessary) to override a member's settings.  In this case, the syntax is even simpler:</p> <pre><code>        $foo = 'bar';\n</code></pre> <p>Members will not thank you for this, however, so only use it when it is required.</p> <p>If no personal options are set, and no schema is selected, we will first try to load a schema with the file name \"default.php\".  This file should never be included with a theme.  If it is, merge conflicts will occur as people update their code.  Rather, this should be defined by administrators on a site by site basis. default.php and default.css MUST be symlinks to existing scheme files.</p> <p>You schema does not need to - and should not - contain all of these values.  Only the values that differ from the defaults should be listed.  This gives you some very powerful options with very few lines of code.</p> <p>Note the options available differ with each theme.  The options available with the Redbasic  theme are as follows:</p> <ul> <li>nav_colour     The colour of the navigation bar.  Options are red, black and silver.  Alternatively,      one can set $nav_bg_1, $nav_bg_2, $nav_bg_3 and $nav_bg_4 to provide gradient and     hover effects.</li> <li>banner_colour     The font colour of the banner element.  Accepts an RGB or Hex value.</li> <li>bgcolour     Set the body background colour.  Accepts an RGB or Hex value.</li> <li>background_image     Sets a background image.  Accepts a URL or path.</li> <li>item_colour     Set the background colour of items.  Accepts an RGB or Hex value.</li> <li>item_opacity     Set the opacity of items.  Accepts a value from 0.01 to 1</li> <li>toolicon_colour     Set the colour of tool icons.  Accepts an RGB or Hex value.</li> <li>toolicon_activecolour     Set the colour of active or hovered icon tools.</li> <li>font_size     Set the size of fonts in items and posts.  Accepts px or em.</li> <li>body_font_size     Sets the size of fonts at the body level.  Accepts px or em.</li> <li>font_colour     Sets the font colour.  Accepts an RGB or Hex value.</li> <li>radius     Set the radius of corners.  Accepts a numeral, and is always in px.</li> <li>shadow     Set the size of shadows shown with inline images.  Accepts a numerical      value.  Note shadows are not applied to smileys.</li> <li>converse_width     Set the maximum width of the content region in px.</li> <li>nav_min_opacity</li> <li>top_photo</li> <li>reply_photo</li> </ul> <p>If a your_schema_name.css file is found, the content of this file will be attached to the end of style.css. This gives the schem developer the possiblity to override any style component.</p>"},{"location":"dev/schema/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"dev/translations/","title":"Translating $Projectname","text":""},{"location":"dev/translations/#translation-process","title":"Translation Process","text":"<p>The strings used in the UI of $Projectname is translated at Transifex and then included in the git repository at github. If you want to help with translation for any language, be it correcting terms or translating $Projectname to a currently not supported language, please register an account at transifex.com and contact the Redmatrix translation team there.</p> <p>Translating $Projectname is simple. Just use the online tool at transifex. If you don't want to deal with git &amp; co. that is fine, we check the status of the translations regularly and import them into the source tree at github so that others can use them.</p> <p>We do not include every translation from transifex in the source tree to avoid a scattered and disturbed overall experience. As an uneducated guess we have a lower limit of 50% translated strings before we include the language. This limit is judging only by the amount of translated strings under the assumption that the most prominent strings for the UI will be translated first by a translation team. If you feel your translation useable before this limit, please contact us and we will probably include your teams work in the source tree.</p> <p>If you want to get your work into the source tree yourself, feel free to do so and contact us with and question that arises. The process is simple and $Projectname ships with all the tools necessary.</p> <p>The location of the translated files in the source tree is     /view/LNG-CODE/ where LNG-CODE is the language code used, e.g. de for German or fr for French. For the email templates (the *.tpl files) just place them into the directory and you are done. The translated strings come as a \"hmessages.po\" file from transifex which needs to be translated into the PHP file $Projectname uses.  To do so, place the file in the directory mentioned above and use the \"po2php\" utility from the util directory of your $Projectname installation.</p> <p>Assuming you want to convert the German localization which is placed in view/de/hmessages.po you would do the following.</p> <ol> <li> <p>Navigate at the command prompt to the base directory of your    $Projectname installation</p> </li> <li> <p>Execute the po2php script, which will place the translation    in the hstrings.php file that is used by $Projectname.</p> <p>$&gt; php util/po2php.php view/de/hmessages.po</p> </li> </ol> <p>The output of the script will be placed at view/de/hstrings.php where    froemdoca os expecting it, so you can test your translation mmediately.</p> <ol> <li>Visit your $Projectname page to check if it still works in the language you    just translated. If not try to find the error, most likely PHP will give    you a hint in the log/warnings.about the error.</li> </ol> <p>For debugging you can also try to \"run\" the file with PHP. This should    not give any output if the file is ok but might give a hint for    searching the bug in the file.</p> <pre><code>   $&gt; php view/de/hstrings.php\n</code></pre> <ol> <li>commit the two files with a meaningful commit message to your git    repository, push it to your fork of the $Projectname repository at github and    issue a pull request for that commit.</li> </ol>"},{"location":"dev/translations/#utilities","title":"Utilities","text":"<p>Additional to the po2php script there are some more utilities for translation in the \"util\" directory of the $Projectname source tree.  If you only want to translate $Projectname into another language you wont need any of these tools most likely but it gives you an idea how the translation process of $Projectname works.</p> <p>For further information see the utils/README file.</p>"},{"location":"dev/translations/#known-problems","title":"Known Problems","text":"<ul> <li>$Projectname uses the language setting of the visitors browser to determain the   language for the UI. Most of the time this works, but there are some known   quirks.</li> <li>the early translations are based on the friendica translations, if you    some rough translations please let us know or fix them at Transifex.</li> </ul>"},{"location":"dev/translations/#links","title":"Links","text":""},{"location":"dev/translations/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"dev/zot/","title":"Zot - A High Level Overview","text":"<p>Here's a high level description of how zot works.</p> <p>In this example, \"Indigo\" is going to send a public message from his website at \"podunk.edu\". \"Nickordo\" is a recipient on another site (\"example.com\").</p> <p>Indigo first posts his message at podunk.edu. podunk.edu looks up who should receive the message and finds Nickordo. Nickordo usually posts from example.com so we add that destination to our list of recipients. We may also add other destinations for nickordo and anybody else that is following Indigo's posts.  </p> <p>In this example we find that we only have one known recipient at one known location. </p> <p>We send a packet to example.com:</p> <pre><code>{\n  \"type\":\"notify\",\n  \"sender\":{\n    \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\",\n    \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\",\n    \"url\":\"http:\\/\\/podunk.edu\",\n    \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\"\n  },\n  \"callback\":\"\\/post\",\n  \"version\":1,\n  \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\"\n}\n</code></pre> <p>This packet says the following:</p> <p>I'm Indigo and here is proof. I'm posting from podunk.edu and here is proof. I've got a package for you. The tracking number is \"1eaa6613....\". </p> <p>Example.com accepts this packet and says \"whoa, hold on - I don't know you. I want to prove who you are.\" So Example.com connects to podunk.edu through a \"well-known URL\" that we use for this purpose and looks up the \"guid\" mentioned above. It should return a bunch of information, one item of which is a public key. Example.com uses this key to verify the signatures in the message to verify that indeed there is a person named Indigo at podunk.edu. We only need to do this once. (Note that Indigo can post from any location. All we have to do is prove that it's Indigo and that Indigo can prove that he's posting from another site.)</p> <p>Then example.com disconnects and flags that there's a message waiting at podunk.edu. Either immediately, or whenever the urge hits (depending on how important Indigo is to anybody on this site), example.com \"calls\" podunk.edu. It says something like this:</p> <pre><code>{\n  \"type\":\"pickup\",\n  \"url\":\"http:\\/\\/example.com\",\n  \"callback_sig\":\"teE1_fLIqfyeCuZY4iS7sNU8jUlUuqYOYBiHLarkC99I9K-uSr8DAwVW8ZPZRK-uYdxRMuKFb6cumF_Gt9XjecCPBM8HkoXHOi_VselzJkxPwor4ZPtWYWWaFtRfcAm794LrWjdz62zdESTQd2JJIZWbrli1sUhK801BF3n0Ye6-X1MWhy9EUTVlNimOeRipcuD_srMhUcAXOEbLlrugZ8ovy2YBe6YOXkS8jj0RSFjsOduXAoVhQmNpcobSYsDvaQS3e3MvE6-oXE602zGQhuNLr7DIMt9PCdAeQo-ZM-DHlZGCkGk4O2oQFCXFzGPqLUMWDACGJfTfIWGoh_EJqT_SD5b_Yi_Wk9S1lj7vb-lmxe5JuIf7ezWzHoBT8vswnZxPYlidH2i9wapdzij9il_qqcCWWHIp7q_XkY_Zj52Z4r4gdmiqM-8y1c_1SDX7hrJFRwqL_PKFbEvyi5nMWTEzqp55Tay5Woiv19STK_H_8ufFfD9AOkYnk6rIOMsk9dn3a5tAFpDRyRndXkBWAXwiJjiND2zjue7BFu7Ty40THXcfYRh1a5XrAXcaGeYuagg-8J9tAufu9_LY3qGazFg8kRBVMOn4M8DRKSIhKj7z4MnbYL0s09gREojy4jqWO3VkaOjP2jUGzoPuUDLasudE1ehWFq0K_MTQNavgmp8\",\n  \"callback\":\"http:\\/\\/example.com\\/post\",\n  \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\",\n  \"secret_sig\":\"O7nB4_UJHBXi28Suwl9LBZF9hI_9KGVTgehnUlWF1oYMNRnBbVHB9lzUfAoalvp3STbU3xJbtD_S58tv6MfV7J5j2V_S1W5ex3dulmDGB8Pt_7Fe5mbEPmjQFcfv3Eg5dUjYIuDl0TDScfrHyImj7RZIWHbwd7wWVoMzzDa_o33klpYmKZCBvObCh55bRrlFkXZs_dRuOiPwkfX0C6_XES4OyOIYl45V30rdhmf-STrf4L9dKYy_axQ12RIwRcKychvVLwlUJn3bn9lgNXRRU_HTne-09OPcJbUOdcD3DkFoKOxMULBNKPHzsCau0ICYug7S0EP6LpCom_mW78s08LyVA1vYeFZjevBCiGecj57yIAQDYi6_rpWJfihYaWHRN0oqtScUR4Bdf0bQbEHxMs4zAtrOAxfyJCbi6U1pfnGgzXzB9ulOYGnVGNTF7Ey4K7FOZIBtk0ILY2JfvBUaVvVs8ttagOOHmhWhnbCvrnOFlkNdlce7zoJCSUJENUOCYmTRfwB_Jno5fAzRnrsYU3_Z-l1mzniU_OmUPz8mPEh7PwhkqAiVlyaM-q15gn7l2lAIDk9kp2X_iCme7v4V0ADN_DbpaI_0-6mPw5HLbKrCsA-sxlSMB4DO4lDCHYkauj0l25sbfroRWB_hax1O4Q0oWyOlVJLUqEC5nuUJCCE\"\n}\n</code></pre> <p>What this message says is: This is example.com, I have proof, and I'm here to pick up a package. Here's the tracking number, and here's proof that this is the tracking number you presumably sent to example.com.</p> <p>Good enough. Podunk.edu checks out the story and indeed, it is example.com, and yes, there's a package waiting with that tracking number. Here's the package...</p> <pre><code>{\n  \"success\":1,\n  \"pickup\":{\n    \"notify\":{\n      \"type\":\"notify\",\n      \"sender\":{\n        \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\",\n        \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\",\n        \"url\":\"http:\\/\\/z.podunk.edu\",\n        \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\"\n      },\n      \"callback\":\"\\/post\",\n      \"version\":1,\n      \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\"\n    },\n    \"message\":{\n      \"message_id\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\",\n      \"message_top\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\",\n      \"message_parent\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\",\n      \"created\":\"2012-11-20 04:04:16\",\n      \"edited\":\"2012-11-20 04:04:16\",\n      \"title\":\"\",\n      \"body\":\"Hi Nickordo\",\n      \"app\":\"\",\n      \"verb\":\"post\",\n      \"object_type\":\"\",\n      \"target_type\":\"\",\n      \"permalink\":\"\",\n      \"location\":\"\",\n      \"longlat\":\"\",\n      \"owner\":{\n        \"name\":\"Indigo\",\n        \"address\":\"indigo@podunk.edu\",\n        \"url\":\"http:\\/\\/podunk.edu\",\n        \"photo\":{\n          \"mimetype\":\"image\\/jpeg\",\n          \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\"\n        },\n        \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\",\n        \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\"\n      },\n      \"author\":{\n        \"name\":\"Indigo\",\n        \"address\":\"indigo@podunk.edu\",\n        \"url\":\"http:\\/\\/podunk.edu\",\n        \"photo\":{\n          \"mimetype\":\"image\\/jpeg\",\n          \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\"\n        },\n        \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\",\n        \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\"\n      }\n    }\n  }\n}\n</code></pre> <p>And that's the package (the original message). Example.com converts this into a form suitable for viewing by Nickordo and notifies Nickordo that there's a new message. Podunk.edu might discover that there are other packages waiting for example.com. If this happens it may also send any and all other waiting packages at this time. Each has the original tracking number attached.  </p>"},{"location":"dev/zot/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"dev/classes/Zotlabs/Access/AccessList/","title":"AccessList","text":"<ul> <li>Full name: <code>\\Zotlabs\\Access\\AccessList</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#constants","title":"Constants","text":"Constant Visibility Type Value <code>REQUIRED_KEYS_CONSTRUCTOR</code> private ['channel_allow_cid', 'channel_allow_gid', 'channel_deny_cid', 'channel_deny_gid'] <code>REQUIRED_KEYS_SET</code> private ['allow_cid', 'allow_gid', 'deny_cid', 'deny_gid']"},{"location":"dev/classes/Zotlabs/Access/AccessList/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Access/AccessList/#allow_cid","title":"allow_cid","text":"<pre><code>private string $allow_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#allow_gid","title":"allow_gid","text":"<pre><code>private string $allow_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#deny_cid","title":"deny_cid","text":"<pre><code>private string $deny_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#deny_gid","title":"deny_gid","text":"<pre><code>private string $deny_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#explicit","title":"explicit","text":"<pre><code>private bool $explicit\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Access/AccessList/#__construct","title":"__construct","text":"<pre><code>public __construct(array $channel): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array A channel array, where these entries are evaluated: \\e string \\b channel_allow_cid =&gt; string of allowed cids \\e string \\b channel_allow_gid =&gt; string of allowed gids \\e string \\b channel_deny_cid =&gt; string of denied cids \\e string \\b channel_deny_gid =&gt; string of denied gids"},{"location":"dev/classes/Zotlabs/Access/AccessList/#validate_input_array","title":"validate_input_array","text":"<pre><code>private validate_input_array(array $arr, array $required_keys): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$required_keys</code> array"},{"location":"dev/classes/Zotlabs/Access/AccessList/#get_explicit","title":"get_explicit","text":"<pre><code>public get_explicit(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#set","title":"set","text":"<pre><code>public set(array $arr, bool $explicit = true): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array   * \\e string \\b allow_cid =&gt; string of allowed cids  * \\e string \\b allow_gid =&gt; string of allowed gids  * \\e string \\b deny_cid  =&gt; string of denied cids  * \\e string \\b deny_gid  =&gt; string of denied gids <code>$explicit</code> bool (optional) default true"},{"location":"dev/classes/Zotlabs/Access/AccessList/#get","title":"get","text":"<pre><code>public get(): array\n</code></pre> <p>Return Value:</p> <p>An associative array with: * \\e string \\b allow_cid =&gt; string of allowed cids * \\e string \\b allow_gid =&gt; string of allowed gids * \\e string \\b deny_cid  =&gt; string of denied cids * \\e string \\b deny_gid  =&gt; string of denied gids</p>"},{"location":"dev/classes/Zotlabs/Access/AccessList/#set_from_array","title":"set_from_array","text":"<pre><code>public set_from_array(array $arr, bool $explicit = true): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array An associative array with: \\e array&amp;#124;string \\b contact_allow =&gt; array with cids or comma-seperated string \\e array&amp;#124;string \\b group_allow   =&gt; array with gids or comma-seperated string \\e array&amp;#124;string \\b contact_deny  =&gt; array with cids or comma-seperated string \\e array&amp;#124;string \\b group_deny    =&gt; array with gids or comma-seperated string <code>$explicit</code> bool (optional) default true"},{"location":"dev/classes/Zotlabs/Access/AccessList/#is_private","title":"is_private","text":"<pre><code>public is_private(): bool\n</code></pre> <p>Return Value:</p> <p>Return true if any of allow_ deny_ values is set.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/","title":"PermissionLimits","text":"<ul> <li>Full name: <code>\\Zotlabs\\Access\\PermissionLimits</code></li> </ul> <p>See Also:</p> <ul> <li>\\Zotlabs\\Access\\Permissions - </li> </ul>"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#std_limits","title":"Std_Limits","text":"<pre><code>public static Std_Limits(): array\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#set","title":"Set","text":"<pre><code>public static Set(int $channel_id, string $perm, int $perm_limit): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int <code>$perm</code> string <code>$perm_limit</code> int one of PERMS_* constants"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#get","title":"Get","text":"<pre><code>public static Get(int $channel_id, string $perm = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int <code>$perm</code> string (optional) <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/","title":"PermissionRoles","text":"<ul> <li>Full name: <code>\\Zotlabs\\Access\\PermissionRoles</code></li> </ul> <p>See Also:</p> <ul> <li>\\Zotlabs\\Access\\Permissions - </li> </ul>"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#version","title":"version","text":"<pre><code>public static version(): \\Zotlabs\\Access\\number\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#role_perms","title":"role_perms","text":"<pre><code>public static role_perms(mixed $role): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$role</code> mixed"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#new_custom_perms","title":"new_custom_perms","text":"<pre><code>public static new_custom_perms(mixed $uid, mixed $perm, mixed $abooks): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$perm</code> mixed <code>$abooks</code> mixed"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#roles","title":"roles","text":"<pre><code>public static roles(): array\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#channel_roles","title":"channel_roles","text":"<pre><code>public static channel_roles(): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Access/Permissions/","title":"Permissions","text":"<ul> <li>Full name: <code>\\Zotlabs\\Access\\Permissions</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Access/Permissions/#version","title":"version","text":"<pre><code>public static version(): \\Zotlabs\\Access\\number\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#perms","title":"Perms","text":"<pre><code>public static Perms(string $filter = &amp;#039;&amp;#039;): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$filter</code> string (optional) only passed to hook permissions_list <p>Return Value:</p> <p>Associative array with permissions and short description.</p>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#blockedanonperms","title":"BlockedAnonPerms","text":"<pre><code>public static BlockedAnonPerms(): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Return Value:</p> <p>Associative array with permissions and short description.</p>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#filledperms","title":"FilledPerms","text":"<pre><code>public static FilledPerms(array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array"},{"location":"dev/classes/Zotlabs/Access/Permissions/#operms","title":"OPerms","text":"<pre><code>public static OPerms(array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array associative perms array 'view_stream' =&gt; 1 <p>Return Value:</p> <p>Indexed array with elements that look like * \\e string \\b name the perm name (e.g. view_stream) * \\e int \\b value the value of the perm (e.g. 1)</p>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#filledautoperms","title":"FilledAutoperms","text":"<pre><code>public static FilledAutoperms(int $channel_id): bool|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int"},{"location":"dev/classes/Zotlabs/Access/Permissions/#permscompare","title":"PermsCompare","text":"<pre><code>public static PermsCompare(array $p1, array $p2): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$p1</code> array The perms that have to exist in $p2 <code>$p2</code> array The perms to compare against <p>Return Value:</p> <p>true if all perms from $p1 exist also in $p2</p>"},{"location":"dev/classes/Zotlabs/Access/Permissions/#connect_perms","title":"connect_perms","text":"<pre><code>public static connect_perms(int $channel_id): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int A channel id <p>Return Value:</p> <p>Associative array with * \\e array \\b perms Permission array * \\e int \\b automatic 0 or 1</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/","title":"ASObject","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> <li>Parent class: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#id","title":"id","text":"<pre><code>public $id\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#type","title":"type","text":"<pre><code>public $type\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#attachment","title":"attachment","text":"<pre><code>public $attachment\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#attributedto","title":"attributedTo","text":"<pre><code>public $attributedTo\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#audience","title":"audience","text":"<pre><code>public $audience\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#content","title":"content","text":"<pre><code>public $content\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#context","title":"context","text":"<pre><code>public $context\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#name","title":"name","text":"<pre><code>public $name\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#endtime","title":"endTime","text":"<pre><code>public $endTime\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#generator","title":"generator","text":"<pre><code>public $generator\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#icon","title":"icon","text":"<pre><code>public $icon\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#image","title":"image","text":"<pre><code>public $image\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#inreplyto","title":"inReplyTo","text":"<pre><code>public $inReplyTo\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#location","title":"location","text":"<pre><code>public $location\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#preview","title":"preview","text":"<pre><code>public $preview\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#published","title":"published","text":"<pre><code>public $published\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#replies","title":"replies","text":"<pre><code>public $replies\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#starttime","title":"startTime","text":"<pre><code>public $startTime\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#summary","title":"summary","text":"<pre><code>public $summary\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#tag","title":"tag","text":"<pre><code>public $tag\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#updated","title":"updated","text":"<pre><code>public $updated\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#url","title":"url","text":"<pre><code>public $url\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#to","title":"to","text":"<pre><code>public $to\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#bto","title":"bto","text":"<pre><code>public $bto\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#cc","title":"cc","text":"<pre><code>public $cc\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#bcc","title":"bcc","text":"<pre><code>public $bcc\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#mediatype","title":"mediaType","text":"<pre><code>public $mediaType\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#duration","title":"duration","text":"<pre><code>public $duration\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#source","title":"source","text":"<pre><code>public $source\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#signature","title":"signature","text":"<pre><code>public $signature\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#proof","title":"proof","text":"<pre><code>public $proof\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#sensitive","title":"sensitive","text":"<pre><code>public $sensitive\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#replyto","title":"replyTo","text":"<pre><code>public $replyTo\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#wall","title":"wall","text":"<pre><code>public $wall\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#iscontainedconversation","title":"isContainedConversation","text":"<pre><code>public $isContainedConversation\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#expires","title":"expires","text":"<pre><code>public $expires\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#canreply","title":"canReply","text":"<pre><code>public $canReply\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#cansearch","title":"canSearch","text":"<pre><code>public $canSearch\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#directmessage","title":"directMessage","text":"<pre><code>public $directMessage\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#commentpolicy","title":"commentPolicy","text":"<pre><code>public $commentPolicy\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/","title":"Activity","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Activity</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#actor","title":"actor","text":"<pre><code>public $actor\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#object","title":"object","text":"<pre><code>public $object\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#target","title":"target","text":"<pre><code>public $target\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#result","title":"result","text":"<pre><code>public $result\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#origin","title":"origin","text":"<pre><code>public $origin\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#instrument","title":"instrument","text":"<pre><code>public $instrument\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getactor","title":"getActor","text":"<pre><code>public getActor(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setactor","title":"setActor","text":"<pre><code>public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$actor</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getobject","title":"getObject","text":"<pre><code>public getObject(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setobject","title":"setObject","text":"<pre><code>public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettarget","title":"getTarget","text":"<pre><code>public getTarget(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settarget","title":"setTarget","text":"<pre><code>public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$target</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getresult","title":"getResult","text":"<pre><code>public getResult(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setresult","title":"setResult","text":"<pre><code>public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$result</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getorigin","title":"getOrigin","text":"<pre><code>public getOrigin(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setorigin","title":"setOrigin","text":"<pre><code>public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$origin</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getinstrument","title":"getInstrument","text":"<pre><code>public getInstrument(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setinstrument","title":"setInstrument","text":"<pre><code>public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\Activity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$instrument</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/","title":"Actor","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Actor</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#inbox","title":"inbox","text":"<pre><code>public $inbox\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#outbox","title":"outbox","text":"<pre><code>public $outbox\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#followers","title":"followers","text":"<pre><code>public $followers\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#following","title":"following","text":"<pre><code>public $following\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#permissions","title":"permissions","text":"<pre><code>public $permissions\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#endpoints","title":"endpoints","text":"<pre><code>public $endpoints\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#publickey","title":"publicKey","text":"<pre><code>public $publicKey\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#preferredusername","title":"preferredUsername","text":"<pre><code>public $preferredUsername\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#alsoknownas","title":"alsoKnownAs","text":"<pre><code>public $alsoKnownAs\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#movedto","title":"movedTo","text":"<pre><code>public $movedTo\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#copiedto","title":"copiedTo","text":"<pre><code>public $copiedTo\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#discoverable","title":"discoverable","text":"<pre><code>public $discoverable\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#manuallyapprovesfollowers","title":"manuallyApprovesFollowers","text":"<pre><code>public $manuallyApprovesFollowers\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#webfinger","title":"webfinger","text":"<pre><code>public $webfinger\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#cansearch","title":"canSearch","text":"<pre><code>public $canSearch\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#indexable","title":"indexable","text":"<pre><code>public $indexable\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#assertionmethod","title":"assertionMethod","text":"<pre><code>public $assertionMethod\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gateways","title":"gateways","text":"<pre><code>public $gateways\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#openwebauth","title":"openwebauth","text":"<pre><code>public $openwebauth\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#authredirect","title":"authredirect","text":"<pre><code>public $authredirect\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getalsoknownas","title":"getAlsoKnownAs","text":"<pre><code>public getAlsoKnownAs(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setalsoknownas","title":"setAlsoKnownAs","text":"<pre><code>public setAlsoKnownAs(mixed $alsoKnownAs): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$alsoKnownAs</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmovedto","title":"getMovedTo","text":"<pre><code>public getMovedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcopiedto","title":"getCopiedTo","text":"<pre><code>public getCopiedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcopiedto","title":"setCopiedTo","text":"<pre><code>public setCopiedTo(mixed $copiedTo): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$copiedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmovedto","title":"setMovedTo","text":"<pre><code>public setMovedTo(mixed $movedTo): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$movedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdiscoverable","title":"getDiscoverable","text":"<pre><code>public getDiscoverable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setdiscoverable","title":"setDiscoverable","text":"<pre><code>public setDiscoverable(mixed $discoverable): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$discoverable</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmanuallyapprovesfollowers","title":"getManuallyApprovesFollowers","text":"<pre><code>public getManuallyApprovesFollowers(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmanuallyapprovesfollowers","title":"setManuallyApprovesFollowers","text":"<pre><code>public setManuallyApprovesFollowers(mixed $manuallyApprovesFollowers): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$manuallyApprovesFollowers</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpreferredusername","title":"getPreferredUsername","text":"<pre><code>public getPreferredUsername(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpreferredusername","title":"setPreferredUsername","text":"<pre><code>public setPreferredUsername(mixed $preferredUsername): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preferredUsername</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getinbox","title":"getInbox","text":"<pre><code>public getInbox(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setinbox","title":"setInbox","text":"<pre><code>public setInbox(mixed $inbox): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inbox</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getoutbox","title":"getOutbox","text":"<pre><code>public getOutbox(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setoutbox","title":"setOutbox","text":"<pre><code>public setOutbox(mixed $outbox): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$outbox</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getfollowers","title":"getFollowers","text":"<pre><code>public getFollowers(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setfollowers","title":"setFollowers","text":"<pre><code>public setFollowers(mixed $followers): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$followers</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getfollowing","title":"getFollowing","text":"<pre><code>public getFollowing(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setfollowing","title":"setFollowing","text":"<pre><code>public setFollowing(mixed $following): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$following</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getendpoints","title":"getEndpoints","text":"<pre><code>public getEndpoints(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setendpoints","title":"setEndpoints","text":"<pre><code>public setEndpoints(mixed $endpoints): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endpoints</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpublickey","title":"getPublicKey","text":"<pre><code>public getPublicKey(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpublickey","title":"setPublicKey","text":"<pre><code>public setPublicKey(mixed $publicKey): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$publicKey</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getwebfinger","title":"getWebfinger","text":"<pre><code>public getWebfinger(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setwebfinger","title":"setWebfinger","text":"<pre><code>public setWebfinger(mixed $webfinger): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$webfinger</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getindexable","title":"getIndexable","text":"<pre><code>public getIndexable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setindexable","title":"setIndexable","text":"<pre><code>public setIndexable(mixed $indexable): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$indexable</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getassertionmethod","title":"getAssertionMethod","text":"<pre><code>public getAssertionMethod(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setassertionmethod","title":"setAssertionMethod","text":"<pre><code>public setAssertionMethod(mixed $assertionMethod): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$assertionMethod</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getgateways","title":"getGateways","text":"<pre><code>public getGateways(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setgateways","title":"setGateways","text":"<pre><code>public setGateways(mixed $gateways): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$gateways</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpermissions","title":"getPermissions","text":"<pre><code>public getPermissions(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpermissions","title":"setPermissions","text":"<pre><code>public setPermissions(mixed $permissions): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$permissions</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getopenwebauth","title":"getOpenwebauth","text":"<pre><code>public getOpenwebauth(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setopenwebauth","title":"setOpenwebauth","text":"<pre><code>public setOpenwebauth(mixed $openwebauth): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$openwebauth</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getauthredirect","title":"getAuthredirect","text":"<pre><code>public getAuthredirect(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setauthredirect","title":"setAuthredirect","text":"<pre><code>public setAuthredirect(mixed $authredirect): \\Zotlabs\\ActivityStreams\\Actor\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$authredirect</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcansearch_1","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcansearch_1","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getid_1","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setid_1","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettype_1","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settype_1","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/","title":"AssertionMethod","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\AssertionMethod</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#id","title":"id","text":"<pre><code>public $id\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#type","title":"type","text":"<pre><code>public $type\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#controller","title":"controller","text":"<pre><code>public $controller\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#publickeymultibase","title":"publicKeyMultibase","text":"<pre><code>public $publicKeyMultibase\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\AssertionMethod\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\AssertionMethod\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontroller","title":"getController","text":"<pre><code>public getController(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontroller","title":"setController","text":"<pre><code>public setController(mixed $controller): \\Zotlabs\\ActivityStreams\\AssertionMethod\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$controller</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpublickeymultibase","title":"getPublicKeyMultibase","text":"<pre><code>public getPublicKeyMultibase(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpublickeymultibase","title":"setPublicKeyMultibase","text":"<pre><code>public setPublicKeyMultibase(mixed $publicKeyMultibase): \\Zotlabs\\ActivityStreams\\AssertionMethod\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$publicKeyMultibase</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getid_1","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setid_1","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettype_1","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settype_1","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/","title":"Collection","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Collection</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#totalitems","title":"totalItems","text":"<pre><code>public int $totalItems\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#current","title":"current","text":"<pre><code>public string $current\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#first","title":"first","text":"<pre><code>public string $first\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#last","title":"last","text":"<pre><code>public string $last\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#items","title":"items","text":"<pre><code>public array $items\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#collectionof","title":"collectionOf","text":"<pre><code>public mixed $collectionOf\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettotalitems","title":"getTotalItems","text":"<pre><code>public getTotalItems(): int\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settotalitems","title":"setTotalItems","text":"<pre><code>public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$totalItems</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcurrent","title":"getCurrent","text":"<pre><code>public getCurrent(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcurrent","title":"setCurrent","text":"<pre><code>public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$current</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getfirst","title":"getFirst","text":"<pre><code>public getFirst(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setfirst","title":"setFirst","text":"<pre><code>public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$first</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getlast","title":"getLast","text":"<pre><code>public getLast(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setlast","title":"setLast","text":"<pre><code>public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$last</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getitems","title":"getItems","text":"<pre><code>public getItems(): array\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setitems","title":"setItems","text":"<pre><code>public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcollectionof","title":"getCollectionOf","text":"<pre><code>public getCollectionOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcollectionof","title":"setCollectionOf","text":"<pre><code>public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$collectionOf</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/","title":"CollectionPage","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\CollectionPage</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\Collection</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#partof","title":"partOf","text":"<pre><code>public $partOf\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#next","title":"next","text":"<pre><code>public $next\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#prev","title":"prev","text":"<pre><code>public $prev\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#startindex","title":"startIndex","text":"<pre><code>public $startIndex\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpartof","title":"getPartOf","text":"<pre><code>public getPartOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpartof","title":"setPartOf","text":"<pre><code>public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\CollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$partOf</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getnext","title":"getNext","text":"<pre><code>public getNext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setnext","title":"setNext","text":"<pre><code>public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\CollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$next</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getprev","title":"getPrev","text":"<pre><code>public getPrev(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setprev","title":"setPrev","text":"<pre><code>public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\CollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$prev</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettotalitems","title":"getTotalItems","text":"<pre><code>public getTotalItems(): int\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settotalitems","title":"setTotalItems","text":"<pre><code>public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$totalItems</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcurrent","title":"getCurrent","text":"<pre><code>public getCurrent(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcurrent","title":"setCurrent","text":"<pre><code>public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$current</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getfirst","title":"getFirst","text":"<pre><code>public getFirst(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setfirst","title":"setFirst","text":"<pre><code>public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$first</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getlast","title":"getLast","text":"<pre><code>public getLast(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setlast","title":"setLast","text":"<pre><code>public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$last</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getitems","title":"getItems","text":"<pre><code>public getItems(): array\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setitems","title":"setItems","text":"<pre><code>public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcollectionof","title":"getCollectionOf","text":"<pre><code>public getCollectionOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcollectionof","title":"setCollectionOf","text":"<pre><code>public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$collectionOf</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/","title":"IntransitiveActivity","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\IntransitiveActivity</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#actor","title":"actor","text":"<pre><code>public $actor\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#target","title":"target","text":"<pre><code>public $target\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#result","title":"result","text":"<pre><code>public $result\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#origin","title":"origin","text":"<pre><code>public $origin\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#instrument","title":"instrument","text":"<pre><code>public $instrument\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getactor","title":"getActor","text":"<pre><code>public getActor(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setactor","title":"setActor","text":"<pre><code>public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\IntransitiveActivity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$actor</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettarget","title":"getTarget","text":"<pre><code>public getTarget(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settarget","title":"setTarget","text":"<pre><code>public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\IntransitiveActivity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$target</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getresult","title":"getResult","text":"<pre><code>public getResult(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setresult","title":"setResult","text":"<pre><code>public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\IntransitiveActivity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$result</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getorigin","title":"getOrigin","text":"<pre><code>public getOrigin(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setorigin","title":"setOrigin","text":"<pre><code>public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\IntransitiveActivity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$origin</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getinstrument","title":"getInstrument","text":"<pre><code>public getInstrument(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setinstrument","title":"setInstrument","text":"<pre><code>public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\IntransitiveActivity\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$instrument</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/","title":"Link","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Link</code></li> <li>Parent class: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#type","title":"type","text":"<pre><code>public $type\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#href","title":"href","text":"<pre><code>public $href\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#rel","title":"rel","text":"<pre><code>public $rel\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#mediatype","title":"mediaType","text":"<pre><code>public $mediaType\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#name","title":"name","text":"<pre><code>public $name\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#hreflang","title":"hreflang","text":"<pre><code>public $hreflang\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#height","title":"height","text":"<pre><code>public $height\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#width","title":"width","text":"<pre><code>public $width\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#preview","title":"preview","text":"<pre><code>public $preview\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gethref","title":"getHref","text":"<pre><code>public getHref(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#sethref","title":"setHref","text":"<pre><code>public setHref(mixed $href): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$href</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getrel","title":"getRel","text":"<pre><code>public getRel(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setrel","title":"setRel","text":"<pre><code>public setRel(mixed $rel): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$rel</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gethreflang","title":"getHreflang","text":"<pre><code>public getHreflang(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#sethreflang","title":"setHreflang","text":"<pre><code>public setHreflang(mixed $hreflang): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$hreflang</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getheight","title":"getHeight","text":"<pre><code>public getHeight(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setheight","title":"setHeight","text":"<pre><code>public setHeight(mixed $height): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$height</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getwidth","title":"getWidth","text":"<pre><code>public getWidth(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setwidth","title":"setWidth","text":"<pre><code>public setWidth(mixed $width): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$width</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\Link\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/","title":"OrderedCollection","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\OrderedCollection</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\Collection</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettotalitems","title":"getTotalItems","text":"<pre><code>public getTotalItems(): int\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settotalitems","title":"setTotalItems","text":"<pre><code>public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$totalItems</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcurrent","title":"getCurrent","text":"<pre><code>public getCurrent(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcurrent","title":"setCurrent","text":"<pre><code>public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$current</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getfirst","title":"getFirst","text":"<pre><code>public getFirst(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setfirst","title":"setFirst","text":"<pre><code>public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$first</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getlast","title":"getLast","text":"<pre><code>public getLast(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setlast","title":"setLast","text":"<pre><code>public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$last</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getitems","title":"getItems","text":"<pre><code>public getItems(): array\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setitems","title":"setItems","text":"<pre><code>public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcollectionof","title":"getCollectionOf","text":"<pre><code>public getCollectionOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcollectionof","title":"setCollectionOf","text":"<pre><code>public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$collectionOf</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/","title":"OrderedCollectionPage","text":"<p>According to the specification, OrderedCollectionPage extends both OrderedCollection and CollectionPage, but PHP is still a bit awkward when it comes to multiple inheritance. Rather than try and do this with traits, we'll just include the CollectionPage elements here - as this only consists of three properties.</p> <ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\OrderedCollectionPage</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\OrderedCollection</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#partof","title":"partOf","text":"<pre><code>public $partOf\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#next","title":"next","text":"<pre><code>public $next\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#prev","title":"prev","text":"<pre><code>public $prev\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#startindex","title":"startIndex","text":"<pre><code>public $startIndex\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpartof","title":"getPartOf","text":"<pre><code>public getPartOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpartof","title":"setPartOf","text":"<pre><code>public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$partOf</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getnext","title":"getNext","text":"<pre><code>public getNext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setnext","title":"setNext","text":"<pre><code>public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$next</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getprev","title":"getPrev","text":"<pre><code>public getPrev(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setprev","title":"setPrev","text":"<pre><code>public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$prev</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getstartindex","title":"getStartIndex","text":"<pre><code>public getStartIndex(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setstartindex","title":"setStartIndex","text":"<pre><code>public setStartIndex(mixed $startIndex): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startIndex</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettotalitems","title":"getTotalItems","text":"<pre><code>public getTotalItems(): int\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settotalitems","title":"setTotalItems","text":"<pre><code>public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$totalItems</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcurrent","title":"getCurrent","text":"<pre><code>public getCurrent(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcurrent","title":"setCurrent","text":"<pre><code>public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$current</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getfirst","title":"getFirst","text":"<pre><code>public getFirst(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setfirst","title":"setFirst","text":"<pre><code>public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$first</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getlast","title":"getLast","text":"<pre><code>public getLast(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setlast","title":"setLast","text":"<pre><code>public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$last</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getitems","title":"getItems","text":"<pre><code>public getItems(): array\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setitems","title":"setItems","text":"<pre><code>public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcollectionof","title":"getCollectionOf","text":"<pre><code>public getCollectionOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcollectionof","title":"setCollectionOf","text":"<pre><code>public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$collectionOf</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/","title":"Place","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Place</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#accuracy","title":"accuracy","text":"<pre><code>public $accuracy\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#altitude","title":"altitude","text":"<pre><code>public $altitude\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#latitude","title":"latitude","text":"<pre><code>public $latitude\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#longitude","title":"longitude","text":"<pre><code>public $longitude\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#radius","title":"radius","text":"<pre><code>public $radius\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#units","title":"units","text":"<pre><code>public $units\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaccuracy","title":"getAccuracy","text":"<pre><code>public getAccuracy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaccuracy","title":"setAccuracy","text":"<pre><code>public setAccuracy(mixed $accuracy): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$accuracy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaltitude","title":"getAltitude","text":"<pre><code>public getAltitude(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaltitude","title":"setAltitude","text":"<pre><code>public setAltitude(mixed $altitude): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$altitude</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlatitude","title":"getLatitude","text":"<pre><code>public getLatitude(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlatitude","title":"setLatitude","text":"<pre><code>public setLatitude(mixed $latitude): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$latitude</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlongitude","title":"getLongitude","text":"<pre><code>public getLongitude(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlongitude","title":"setLongitude","text":"<pre><code>public setLongitude(mixed $longitude): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$longitude</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getradius","title":"getRadius","text":"<pre><code>public getRadius(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setradius","title":"setRadius","text":"<pre><code>public setRadius(mixed $radius): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$radius</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getunits","title":"getUnits","text":"<pre><code>public getUnits(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setunits","title":"setUnits","text":"<pre><code>public setUnits(mixed $units): \\Zotlabs\\ActivityStreams\\Place\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$units</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/","title":"Profile","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Profile</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#describes","title":"describes","text":"<pre><code>public $describes\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdescribes","title":"getDescribes","text":"<pre><code>public getDescribes(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setdescribes","title":"setDescribes","text":"<pre><code>public setDescribes(mixed $describes): \\Zotlabs\\ActivityStreams\\Profile\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$describes</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/","title":"PublicKey","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\PublicKey</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#owner","title":"owner","text":"<pre><code>public $owner\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#signaturealgorithm","title":"signatureAlgorithm","text":"<pre><code>public $signatureAlgorithm\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#publickeypem","title":"publicKeyPem","text":"<pre><code>public $publicKeyPem\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getowner","title":"getOwner","text":"<pre><code>public getOwner(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setowner","title":"setOwner","text":"<pre><code>public setOwner(mixed $owner): \\Zotlabs\\ActivityStreams\\PublicKey\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$owner</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsignaturealgorithm","title":"getSignatureAlgorithm","text":"<pre><code>public getSignatureAlgorithm(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsignaturealgorithm","title":"setSignatureAlgorithm","text":"<pre><code>public setSignatureAlgorithm(mixed $signatureAlgorithm): \\Zotlabs\\ActivityStreams\\PublicKey\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signatureAlgorithm</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpublickeypem","title":"getPublicKeyPem","text":"<pre><code>public getPublicKeyPem(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpublickeypem","title":"setPublicKeyPem","text":"<pre><code>public setPublicKeyPem(mixed $publicKeyPem): \\Zotlabs\\ActivityStreams\\PublicKey\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$publicKeyPem</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/","title":"Question","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Question</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#oneof","title":"oneOf","text":"<pre><code>public $oneOf\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#anyof","title":"anyOf","text":"<pre><code>public $anyOf\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#closed","title":"closed","text":"<pre><code>public $closed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getoneof","title":"getOneOf","text":"<pre><code>public getOneOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setoneof","title":"setOneOf","text":"<pre><code>public setOneOf(mixed $oneOf): \\Zotlabs\\ActivityStreams\\Question\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$oneOf</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getanyof","title":"getAnyOf","text":"<pre><code>public getAnyOf(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setanyof","title":"setAnyOf","text":"<pre><code>public setAnyOf(mixed $anyOf): \\Zotlabs\\ActivityStreams\\Question\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$anyOf</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getclosed","title":"getClosed","text":"<pre><code>public getClosed(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setclosed","title":"setClosed","text":"<pre><code>public setClosed(mixed $closed): \\Zotlabs\\ActivityStreams\\Question\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$closed</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/","title":"Relationship","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Relationship</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#subject","title":"subject","text":"<pre><code>public $subject\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#object","title":"object","text":"<pre><code>public $object\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#relationship_1","title":"relationship","text":"<pre><code>public $relationship\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsubject","title":"getSubject","text":"<pre><code>public getSubject(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsubject","title":"setSubject","text":"<pre><code>public setSubject(mixed $subject): \\Zotlabs\\ActivityStreams\\Relationship\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$subject</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getobject","title":"getObject","text":"<pre><code>public getObject(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setobject","title":"setObject","text":"<pre><code>public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Relationship\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getrelationship","title":"getRelationship","text":"<pre><code>public getRelationship(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setrelationship","title":"setRelationship","text":"<pre><code>public setRelationship(mixed $relationship): \\Zotlabs\\ActivityStreams\\Relationship\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$relationship</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/","title":"Signature","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Signature</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#nonce","title":"nonce","text":"<pre><code>public $nonce\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#creator","title":"creator","text":"<pre><code>public $creator\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#signaturevalue","title":"signatureValue","text":"<pre><code>public $signatureValue\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcreator","title":"getCreator","text":"<pre><code>public getCreator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcreator","title":"setCreator","text":"<pre><code>public setCreator(mixed $creator): \\Zotlabs\\ActivityStreams\\Signature\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$creator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsignaturevalue","title":"getSignatureValue","text":"<pre><code>public getSignatureValue(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsignaturevalue","title":"setSignatureValue","text":"<pre><code>public setSignatureValue(mixed $signatureValue): \\Zotlabs\\ActivityStreams\\Signature\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signatureValue</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getnonce","title":"getNonce","text":"<pre><code>public getNonce(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setnonce","title":"setNonce","text":"<pre><code>public setNonce(mixed $nonce): \\Zotlabs\\ActivityStreams\\Signature\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$nonce</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/","title":"Tombstone","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\Tombstone</code></li> <li>Parent class: <code>\\Zotlabs\\ActivityStreams\\ASObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#formertype","title":"formerType","text":"<pre><code>public $formerType\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#deleted","title":"deleted","text":"<pre><code>public $deleted\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getformertype","title":"getFormerType","text":"<pre><code>public getFormerType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setformertype","title":"setFormerType","text":"<pre><code>public setFormerType(mixed $formerType): \\Zotlabs\\ActivityStreams\\Tombstone\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$formerType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdeleted","title":"getDeleted","text":"<pre><code>public getDeleted(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setdeleted","title":"setDeleted","text":"<pre><code>public setDeleted(mixed $deleted): \\Zotlabs\\ActivityStreams\\Tombstone\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$deleted</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdirectmessage","title":"getDirectMessage","text":"<pre><code>public getDirectMessage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setdirectmessage","title":"setDirectMessage","text":"<pre><code>public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$directMessage</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsignature","title":"getSignature","text":"<pre><code>public getSignature(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsignature","title":"setSignature","text":"<pre><code>public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$signature</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getproof","title":"getProof","text":"<pre><code>public getProof(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setproof","title":"setProof","text":"<pre><code>public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$proof</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsensitive","title":"getSensitive","text":"<pre><code>public getSensitive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsensitive","title":"setSensitive","text":"<pre><code>public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sensitive</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getreplyto","title":"getReplyTo","text":"<pre><code>public getReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setreplyto","title":"setReplyTo","text":"<pre><code>public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$wall</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getiscontainedconversation","title":"getIsContainedConversation","text":"<pre><code>public getIsContainedConversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setiscontainedconversation","title":"setIsContainedConversation","text":"<pre><code>public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$isContainedConversation</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcanreply","title":"getCanReply","text":"<pre><code>public getCanReply(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcanreply","title":"setCanReply","text":"<pre><code>public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canReply</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcansearch","title":"getCanSearch","text":"<pre><code>public getCanSearch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcansearch","title":"setCanSearch","text":"<pre><code>public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$canSearch</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commentPolicy</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#settype","title":"setType","text":"<pre><code>public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getattachment","title":"getAttachment","text":"<pre><code>public getAttachment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setattachment","title":"setAttachment","text":"<pre><code>public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attachment</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getattributedto","title":"getAttributedTo","text":"<pre><code>public getAttributedTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setattributedto","title":"setAttributedTo","text":"<pre><code>public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attributedTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getaudience","title":"getAudience","text":"<pre><code>public getAudience(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setaudience","title":"setAudience","text":"<pre><code>public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$audience</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcontent","title":"getContent","text":"<pre><code>public getContent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcontent","title":"setContent","text":"<pre><code>public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcontext","title":"getContext","text":"<pre><code>public getContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcontext","title":"setContext","text":"<pre><code>public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$context</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setname","title":"setName","text":"<pre><code>public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getendtime","title":"getEndTime","text":"<pre><code>public getEndTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setendtime","title":"setEndTime","text":"<pre><code>public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$endTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getgenerator","title":"getGenerator","text":"<pre><code>public getGenerator(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setgenerator","title":"setGenerator","text":"<pre><code>public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$generator</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#geticon","title":"getIcon","text":"<pre><code>public getIcon(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#seticon","title":"setIcon","text":"<pre><code>public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$icon</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getimage","title":"getImage","text":"<pre><code>public getImage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setimage","title":"setImage","text":"<pre><code>public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$image</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getinreplyto","title":"getInReplyTo","text":"<pre><code>public getInReplyTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setinreplyto","title":"setInReplyTo","text":"<pre><code>public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$inReplyTo</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getpreview","title":"getPreview","text":"<pre><code>public getPreview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setpreview","title":"setPreview","text":"<pre><code>public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$preview</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getpublished","title":"getPublished","text":"<pre><code>public getPublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setpublished","title":"setPublished","text":"<pre><code>public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$published</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getreplies","title":"getReplies","text":"<pre><code>public getReplies(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setreplies","title":"setReplies","text":"<pre><code>public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$replies</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getstarttime","title":"getStartTime","text":"<pre><code>public getStartTime(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setstarttime","title":"setStartTime","text":"<pre><code>public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$startTime</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#gettag","title":"getTag","text":"<pre><code>public getTag(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#settag","title":"setTag","text":"<pre><code>public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tag</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getupdated","title":"getUpdated","text":"<pre><code>public getUpdated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setupdated","title":"setUpdated","text":"<pre><code>public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$updated</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#geturl","title":"getUrl","text":"<pre><code>public getUrl(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#seturl","title":"setUrl","text":"<pre><code>public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getto","title":"getTo","text":"<pre><code>public getTo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setto","title":"setTo","text":"<pre><code>public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$to</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getbto","title":"getBto","text":"<pre><code>public getBto(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setbto","title":"setBto","text":"<pre><code>public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bto</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcc","title":"getCc","text":"<pre><code>public getCc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcc","title":"setCc","text":"<pre><code>public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getbcc","title":"getBcc","text":"<pre><code>public getBcc(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setbcc","title":"setBcc","text":"<pre><code>public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$bcc</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getmediatype","title":"getMediaType","text":"<pre><code>public getMediaType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setmediatype","title":"setMediaType","text":"<pre><code>public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mediaType</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getduration","title":"getDuration","text":"<pre><code>public getDuration(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setduration","title":"setDuration","text":"<pre><code>public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duration</code> mixed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsource","title":"getSource","text":"<pre><code>public getSource(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsource","title":"setSource","text":"<pre><code>public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/ActivityStreams/UnhandledElementException/","title":"UnhandledElementException","text":"<ul> <li>Full name: <code>\\Zotlabs\\ActivityStreams\\UnhandledElementException</code></li> <li>Parent class: <code>Exception</code></li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Addon/","title":"Addon","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Addon</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Addon/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Addon/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/","title":"Cache_embeds","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cache_embeds</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/","title":"Cache_query","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cache_query</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/","title":"Channel_purge","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Channel_purge</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/","title":"Checksites","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Checksites</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Checksites/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/","title":"Cli_suggest","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cli_suggest</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/","title":"Content_importer","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Content_importer</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Convo/","title":"Convo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Convo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Convo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Convo/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cron/","title":"Cron","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cron</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cron/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cron/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/","title":"Cron_daily","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cron_daily</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/","title":"Cron_weekly","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cron_weekly</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/","title":"Cronhooks","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Cronhooks</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/","title":"CurlAuth","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\CurlAuth</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/","title":"Deliver","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Deliver</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Deliver/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/","title":"Deliver_hooks","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Deliver_hooks</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/","title":"Delxitems","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Delxitems</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Directory/","title":"Directory","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Directory</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Directory/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Directory/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Expire/","title":"Expire","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Expire</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Expire/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Expire/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Externals/","title":"Externals","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Externals</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Externals/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Externals/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/","title":"Fetchparents","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Fetchparents</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/","title":"File_importer","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\File_importer</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/File_importer/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/","title":"Gprobe","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Gprobe</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/","title":"Importdoc","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Importdoc</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#update_docs_dir","title":"update_docs_dir","text":"<pre><code>public static update_docs_dir(mixed $s): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/","title":"Importfile","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Importfile</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Importfile/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Master/","title":"Master","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Master</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Master/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Master/#summon","title":"Summon","text":"<pre><code>public static Summon(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Daemon/Master/#release","title":"Release","text":"<pre><code>public static Release(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/","title":"Notifier","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Notifier</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#deliveries","title":"deliveries","text":"<pre><code>public static $deliveries\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#recipients","title":"recipients","text":"<pre><code>public static $recipients\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#env_recips","title":"env_recips","text":"<pre><code>public static $env_recips\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#packet_type","title":"packet_type","text":"<pre><code>public static $packet_type\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#encoding","title":"encoding","text":"<pre><code>public static $encoding\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#encoded_item","title":"encoded_item","text":"<pre><code>public static $encoded_item\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#channel","title":"channel","text":"<pre><code>public static $channel\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#private","title":"private","text":"<pre><code>public static $private\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/","title":"Onedirsync","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Onedirsync</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/","title":"Onepoll","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Onepoll</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Poller/","title":"Poller","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Poller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Poller/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Poller/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Queue/","title":"Queue","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Queue</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Queue/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Queue/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/","title":"Thumbnail","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Thumbnail</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/","title":"Xchan_photo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Xchan_photo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/","title":"Zotconvo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Daemon\\Zotconvo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/#run","title":"run","text":"<pre><code>public static run(mixed $argc, mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argc</code> mixed <code>$argv</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Entity/Account/","title":"Account","text":"<ul> <li>Full name: <code>\\Zotlabs\\Entity\\Account</code></li> <li>Parent class: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Account/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Entity/Account/#account_id","title":"account_id","text":"<pre><code>public $account_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_parent","title":"account_parent","text":"<pre><code>public $account_parent\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_default_channel","title":"account_default_channel","text":"<pre><code>public $account_default_channel\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_salt","title":"account_salt","text":"<pre><code>public $account_salt\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_password","title":"account_password","text":"<pre><code>public $account_password\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_email","title":"account_email","text":"<pre><code>public $account_email\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_external","title":"account_external","text":"<pre><code>public $account_external\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_language","title":"account_language","text":"<pre><code>public $account_language\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_created","title":"account_created","text":"<pre><code>public $account_created\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_lastlog","title":"account_lastlog","text":"<pre><code>public $account_lastlog\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_flags","title":"account_flags","text":"<pre><code>public $account_flags\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_roles","title":"account_roles","text":"<pre><code>public $account_roles\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_reset","title":"account_reset","text":"<pre><code>public $account_reset\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_expires","title":"account_expires","text":"<pre><code>public $account_expires\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_expire_notified","title":"account_expire_notified","text":"<pre><code>public $account_expire_notified\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_service_class","title":"account_service_class","text":"<pre><code>public $account_service_class\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_level","title":"account_level","text":"<pre><code>public $account_level\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_password_change","title":"account_password_change","text":"<pre><code>public $account_password_change\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Account/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setid","title":"setId","text":"<pre><code>public setId(mixed $account_id): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getparent","title":"getParent","text":"<pre><code>public getParent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setparent","title":"setParent","text":"<pre><code>public setParent(mixed $account_parent): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_parent</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getdefaultchannel","title":"getDefaultChannel","text":"<pre><code>public getDefaultChannel(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setdefaultchannel","title":"setDefaultChannel","text":"<pre><code>public setDefaultChannel(mixed $account_default_channel): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_default_channel</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getsalt","title":"getSalt","text":"<pre><code>public getSalt(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setsalt","title":"setSalt","text":"<pre><code>public setSalt(mixed $account_salt): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_salt</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getpassword","title":"getPassword","text":"<pre><code>public getPassword(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setpassword","title":"setPassword","text":"<pre><code>public setPassword(mixed $account_password): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_password</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getemail","title":"getEmail","text":"<pre><code>public getEmail(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setemail","title":"setEmail","text":"<pre><code>public setEmail(mixed $account_email): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_email</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexternal","title":"getExternal","text":"<pre><code>public getExternal(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexternal","title":"setExternal","text":"<pre><code>public setExternal(mixed $account_external): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_external</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlanguage","title":"getLanguage","text":"<pre><code>public getLanguage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlanguage","title":"setLanguage","text":"<pre><code>public setLanguage(mixed $account_language): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_language</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getcreated","title":"getCreated","text":"<pre><code>public getCreated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setcreated","title":"setCreated","text":"<pre><code>public setCreated(mixed $account_created): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_created</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlastlog","title":"getLastlog","text":"<pre><code>public getLastlog(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlastlog","title":"setLastlog","text":"<pre><code>public setLastlog(mixed $account_lastlog): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_lastlog</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getflags","title":"getFlags","text":"<pre><code>public getFlags(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setflags","title":"setFlags","text":"<pre><code>public setFlags(mixed $account_flags): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_flags</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getroles","title":"getRoles","text":"<pre><code>public getRoles(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setroles","title":"setRoles","text":"<pre><code>public setRoles(mixed $account_roles): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_roles</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getreset","title":"getReset","text":"<pre><code>public getReset(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setreset","title":"setReset","text":"<pre><code>public setReset(mixed $account_reset): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_reset</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $account_expires): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_expires</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexpirenotified","title":"getExpireNotified","text":"<pre><code>public getExpireNotified(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexpirenotified","title":"setExpireNotified","text":"<pre><code>public setExpireNotified(mixed $account_expire_notified): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_expire_notified</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getserviceclass","title":"getServiceClass","text":"<pre><code>public getServiceClass(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setserviceclass","title":"setServiceClass","text":"<pre><code>public setServiceClass(mixed $account_service_class): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_service_class</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlevel","title":"getLevel","text":"<pre><code>public getLevel(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlevel","title":"setLevel","text":"<pre><code>public setLevel(mixed $account_level): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_level</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#getpasswordchange","title":"getPasswordChange","text":"<pre><code>public getPasswordChange(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setpasswordchange","title":"setPasswordChange","text":"<pre><code>public setPasswordChange(mixed $account_password_change): \\Zotlabs\\Entity\\Account\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_password_change</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Account/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Account/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Account/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Account/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Entity/Channel/","title":"Channel","text":"<ul> <li>Full name: <code>\\Zotlabs\\Entity\\Channel</code></li> <li>Parent class: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_id","title":"channel_id","text":"<pre><code>public $channel_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_account_id","title":"channel_account_id","text":"<pre><code>public $channel_account_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_primary","title":"channel_primary","text":"<pre><code>public $channel_primary\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_name","title":"channel_name","text":"<pre><code>public $channel_name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_parent","title":"channel_parent","text":"<pre><code>public $channel_parent\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_address","title":"channel_address","text":"<pre><code>public $channel_address\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_guid","title":"channel_guid","text":"<pre><code>public $channel_guid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_guid_sig","title":"channel_guid_sig","text":"<pre><code>public $channel_guid_sig\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_hash","title":"channel_hash","text":"<pre><code>public $channel_hash\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_timezone","title":"channel_timezone","text":"<pre><code>public $channel_timezone\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_location","title":"channel_location","text":"<pre><code>public $channel_location\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_theme","title":"channel_theme","text":"<pre><code>public $channel_theme\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_startpage","title":"channel_startpage","text":"<pre><code>public $channel_startpage\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_pubkey","title":"channel_pubkey","text":"<pre><code>public $channel_pubkey\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_prvkey","title":"channel_prvkey","text":"<pre><code>public $channel_prvkey\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_epubkey","title":"channel_epubkey","text":"<pre><code>public $channel_epubkey\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_eprvkey","title":"channel_eprvkey","text":"<pre><code>public $channel_eprvkey\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_notifyflags","title":"channel_notifyflags","text":"<pre><code>public $channel_notifyflags\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_pageflags","title":"channel_pageflags","text":"<pre><code>public $channel_pageflags\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_dirdate","title":"channel_dirdate","text":"<pre><code>public $channel_dirdate\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_lastpost","title":"channel_lastpost","text":"<pre><code>public $channel_lastpost\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deleted","title":"channel_deleted","text":"<pre><code>public $channel_deleted\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_active","title":"channel_active","text":"<pre><code>public $channel_active\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_max_anon_mail","title":"channel_max_anon_mail","text":"<pre><code>public $channel_max_anon_mail\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_max_friend_req","title":"channel_max_friend_req","text":"<pre><code>public $channel_max_friend_req\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_expire_days","title":"channel_expire_days","text":"<pre><code>public $channel_expire_days\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_passwd_reset","title":"channel_passwd_reset","text":"<pre><code>public $channel_passwd_reset\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_default_group","title":"channel_default_group","text":"<pre><code>public $channel_default_group\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_allow_cid","title":"channel_allow_cid","text":"<pre><code>public $channel_allow_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_allow_gid","title":"channel_allow_gid","text":"<pre><code>public $channel_allow_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deny_cid","title":"channel_deny_cid","text":"<pre><code>public $channel_deny_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deny_gid","title":"channel_deny_gid","text":"<pre><code>public $channel_deny_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_removed","title":"channel_removed","text":"<pre><code>public $channel_removed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_system","title":"channel_system","text":"<pre><code>public $channel_system\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_moved","title":"channel_moved","text":"<pre><code>public $channel_moved\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_password","title":"channel_password","text":"<pre><code>public $channel_password\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_salt","title":"channel_salt","text":"<pre><code>public $channel_salt\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Channel/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setid","title":"setId","text":"<pre><code>public setId(mixed $channel_id): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getaccountid","title":"getAccountId","text":"<pre><code>public getAccountId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setaccountid","title":"setAccountId","text":"<pre><code>public setAccountId(mixed $channel_account_id): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_account_id</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getprimary","title":"getPrimary","text":"<pre><code>public getPrimary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setprimary","title":"setPrimary","text":"<pre><code>public setPrimary(mixed $channel_primary): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_primary</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getname","title":"getName","text":"<pre><code>public getName(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setname","title":"setName","text":"<pre><code>public setName(mixed $channel_name): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_name</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getparent","title":"getParent","text":"<pre><code>public getParent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setparent","title":"setParent","text":"<pre><code>public setParent(mixed $channel_parent): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_parent</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getaddress","title":"getAddress","text":"<pre><code>public getAddress(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setaddress","title":"setAddress","text":"<pre><code>public setAddress(mixed $channel_address): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_address</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getguid","title":"getGuid","text":"<pre><code>public getGuid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setguid","title":"setGuid","text":"<pre><code>public setGuid(mixed $channel_guid): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_guid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getguidsig","title":"getGuidSig","text":"<pre><code>public getGuidSig(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setguidsig","title":"setGuidSig","text":"<pre><code>public setGuidSig(mixed $channel_guid_sig): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_guid_sig</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gethash","title":"getHash","text":"<pre><code>public getHash(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#sethash","title":"setHash","text":"<pre><code>public setHash(mixed $channel_hash): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_hash</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gettimezone","title":"getTimezone","text":"<pre><code>public getTimezone(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#settimezone","title":"setTimezone","text":"<pre><code>public setTimezone(mixed $channel_timezone): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_timezone</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $channel_location): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_location</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gettheme","title":"getTheme","text":"<pre><code>public getTheme(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#settheme","title":"setTheme","text":"<pre><code>public setTheme(mixed $channel_theme): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_theme</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getstartpage","title":"getStartpage","text":"<pre><code>public getStartpage(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setstartpage","title":"setStartpage","text":"<pre><code>public setStartpage(mixed $channel_startpage): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_startpage</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpubkey","title":"getPubkey","text":"<pre><code>public getPubkey(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpubkey","title":"setPubkey","text":"<pre><code>public setPubkey(mixed $channel_pubkey): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_pubkey</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getprvkey","title":"getPrvkey","text":"<pre><code>public getPrvkey(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setprvkey","title":"setPrvkey","text":"<pre><code>public setPrvkey(mixed $channel_prvkey): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_prvkey</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getepubkey","title":"getEpubkey","text":"<pre><code>public getEpubkey(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setepubkey","title":"setEpubkey","text":"<pre><code>public setEpubkey(mixed $channel_epubkey): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_epubkey</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#geteprvkey","title":"getEprvkey","text":"<pre><code>public getEprvkey(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#seteprvkey","title":"setEprvkey","text":"<pre><code>public setEprvkey(mixed $channel_eprvkey): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_eprvkey</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getnotifyflags","title":"getNotifyflags","text":"<pre><code>public getNotifyflags(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setnotifyflags","title":"setNotifyflags","text":"<pre><code>public setNotifyflags(mixed $channel_notifyflags): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_notifyflags</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpageflags","title":"getPageflags","text":"<pre><code>public getPageflags(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpageflags","title":"setPageflags","text":"<pre><code>public setPageflags(mixed $channel_pageflags): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_pageflags</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdirdate","title":"getDirdate","text":"<pre><code>public getDirdate(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdirdate","title":"setDirdate","text":"<pre><code>public setDirdate(mixed $channel_dirdate): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_dirdate</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getlastpost","title":"getLastpost","text":"<pre><code>public getLastpost(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setlastpost","title":"setLastpost","text":"<pre><code>public setLastpost(mixed $channel_lastpost): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_lastpost</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdeleted","title":"getDeleted","text":"<pre><code>public getDeleted(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdeleted","title":"setDeleted","text":"<pre><code>public setDeleted(mixed $channel_deleted): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_deleted</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getactive","title":"getActive","text":"<pre><code>public getActive(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setactive","title":"setActive","text":"<pre><code>public setActive(mixed $channel_active): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_active</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmaxanonmail","title":"getMaxAnonMail","text":"<pre><code>public getMaxAnonMail(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmaxanonmail","title":"setMaxAnonMail","text":"<pre><code>public setMaxAnonMail(mixed $channel_max_anon_mail): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_max_anon_mail</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmaxfriendreq","title":"getMaxFriendReq","text":"<pre><code>public getMaxFriendReq(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmaxfriendreq","title":"setMaxFriendReq","text":"<pre><code>public setMaxFriendReq(mixed $channel_max_friend_req): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_max_friend_req</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getexpiredays","title":"getExpireDays","text":"<pre><code>public getExpireDays(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setexpiredays","title":"setExpireDays","text":"<pre><code>public setExpireDays(mixed $channel_expire_days): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_expire_days</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpasswdreset","title":"getPasswdReset","text":"<pre><code>public getPasswdReset(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpasswdreset","title":"setPasswdReset","text":"<pre><code>public setPasswdReset(mixed $channel_passwd_reset): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_passwd_reset</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdefaultgroup","title":"getDefaultGroup","text":"<pre><code>public getDefaultGroup(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdefaultgroup","title":"setDefaultGroup","text":"<pre><code>public setDefaultGroup(mixed $channel_default_group): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_default_group</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getallowcid","title":"getAllowCid","text":"<pre><code>public getAllowCid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setallowcid","title":"setAllowCid","text":"<pre><code>public setAllowCid(mixed $channel_allow_cid): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_allow_cid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getallowgid","title":"getAllowGid","text":"<pre><code>public getAllowGid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setallowgid","title":"setAllowGid","text":"<pre><code>public setAllowGid(mixed $channel_allow_gid): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_allow_gid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdenycid","title":"getDenyCid","text":"<pre><code>public getDenyCid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdenycid","title":"setDenyCid","text":"<pre><code>public setDenyCid(mixed $channel_deny_cid): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_deny_cid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdenygid","title":"getDenyGid","text":"<pre><code>public getDenyGid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdenygid","title":"setDenyGid","text":"<pre><code>public setDenyGid(mixed $channel_deny_gid): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_deny_gid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getremoved","title":"getRemoved","text":"<pre><code>public getRemoved(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setremoved","title":"setRemoved","text":"<pre><code>public setRemoved(mixed $channel_removed): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_removed</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getsystem","title":"getSystem","text":"<pre><code>public getSystem(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setsystem","title":"setSystem","text":"<pre><code>public setSystem(mixed $channel_system): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_system</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmoved","title":"getMoved","text":"<pre><code>public getMoved(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmoved","title":"setMoved","text":"<pre><code>public setMoved(mixed $channel_moved): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_moved</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpassword","title":"getPassword","text":"<pre><code>public getPassword(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpassword","title":"setPassword","text":"<pre><code>public setPassword(mixed $channel_password): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_password</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getsalt","title":"getSalt","text":"<pre><code>public getSalt(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setsalt","title":"setSalt","text":"<pre><code>public setSalt(mixed $channel_salt): \\Zotlabs\\Entity\\Channel\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_salt</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Channel/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Entity/Item/","title":"Item","text":"<ul> <li>Full name: <code>\\Zotlabs\\Entity\\Item</code></li> <li>Parent class: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Item/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Entity/Item/#id","title":"id","text":"<pre><code>public $id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#parent","title":"parent","text":"<pre><code>public $parent\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#aid","title":"aid","text":"<pre><code>public $aid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#uid","title":"uid","text":"<pre><code>public $uid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#uuid","title":"uuid","text":"<pre><code>public $uuid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#mid","title":"mid","text":"<pre><code>public $mid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#parent_mid","title":"parent_mid","text":"<pre><code>public $parent_mid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#thr_parent","title":"thr_parent","text":"<pre><code>public $thr_parent\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_level","title":"item_level","text":"<pre><code>public $item_level\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#llink","title":"llink","text":"<pre><code>public $llink\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#plink","title":"plink","text":"<pre><code>public $plink\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#created","title":"created","text":"<pre><code>public $created\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#edited","title":"edited","text":"<pre><code>public $edited\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#expires","title":"expires","text":"<pre><code>public $expires\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#commented","title":"commented","text":"<pre><code>public $commented\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#received","title":"received","text":"<pre><code>public $received\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#changed","title":"changed","text":"<pre><code>public $changed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#comments_closed","title":"comments_closed","text":"<pre><code>public $comments_closed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#owner_xchan","title":"owner_xchan","text":"<pre><code>public $owner_xchan\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#author_xchan","title":"author_xchan","text":"<pre><code>public $author_xchan\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#source_xchan","title":"source_xchan","text":"<pre><code>public $source_xchan\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#mimetype","title":"mimetype","text":"<pre><code>public $mimetype\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#lang","title":"lang","text":"<pre><code>public $lang\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#app","title":"app","text":"<pre><code>public $app\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#title","title":"title","text":"<pre><code>public $title\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#summary","title":"summary","text":"<pre><code>public $summary\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#body","title":"body","text":"<pre><code>public $body\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#html","title":"html","text":"<pre><code>public $html\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#verb","title":"verb","text":"<pre><code>public $verb\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#obj_type","title":"obj_type","text":"<pre><code>public $obj_type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#obj","title":"obj","text":"<pre><code>public $obj\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#tgt_type","title":"tgt_type","text":"<pre><code>public $tgt_type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#target","title":"target","text":"<pre><code>public $target\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#attach","title":"attach","text":"<pre><code>public $attach\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#sig","title":"sig","text":"<pre><code>public $sig\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#revision","title":"revision","text":"<pre><code>public $revision\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#layout_mid","title":"layout_mid","text":"<pre><code>public $layout_mid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#postopts","title":"postopts","text":"<pre><code>public $postopts\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#route","title":"route","text":"<pre><code>public $route\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#resource_id","title":"resource_id","text":"<pre><code>public $resource_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#resource_type","title":"resource_type","text":"<pre><code>public $resource_type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#location","title":"location","text":"<pre><code>public $location\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#coord","title":"coord","text":"<pre><code>public $coord\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#public_policy","title":"public_policy","text":"<pre><code>public $public_policy\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#comment_policy","title":"comment_policy","text":"<pre><code>public $comment_policy\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#allow_cid","title":"allow_cid","text":"<pre><code>public $allow_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#allow_gid","title":"allow_gid","text":"<pre><code>public $allow_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#deny_cid","title":"deny_cid","text":"<pre><code>public $deny_cid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#deny_gid","title":"deny_gid","text":"<pre><code>public $deny_gid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_restrict","title":"item_restrict","text":"<pre><code>public $item_restrict\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_flags","title":"item_flags","text":"<pre><code>public $item_flags\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_private","title":"item_private","text":"<pre><code>public $item_private\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_origin","title":"item_origin","text":"<pre><code>public $item_origin\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_unseen","title":"item_unseen","text":"<pre><code>public $item_unseen\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_starred","title":"item_starred","text":"<pre><code>public $item_starred\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_uplink","title":"item_uplink","text":"<pre><code>public $item_uplink\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_consensus","title":"item_consensus","text":"<pre><code>public $item_consensus\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_wall","title":"item_wall","text":"<pre><code>public $item_wall\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_thread_top","title":"item_thread_top","text":"<pre><code>public $item_thread_top\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_notshown","title":"item_notshown","text":"<pre><code>public $item_notshown\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_nsfw","title":"item_nsfw","text":"<pre><code>public $item_nsfw\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_relay","title":"item_relay","text":"<pre><code>public $item_relay\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_mentionsme","title":"item_mentionsme","text":"<pre><code>public $item_mentionsme\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_nocomment","title":"item_nocomment","text":"<pre><code>public $item_nocomment\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_obscured","title":"item_obscured","text":"<pre><code>public $item_obscured\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_verified","title":"item_verified","text":"<pre><code>public $item_verified\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_retained","title":"item_retained","text":"<pre><code>public $item_retained\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_rss","title":"item_rss","text":"<pre><code>public $item_rss\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_deleted","title":"item_deleted","text":"<pre><code>public $item_deleted\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_type","title":"item_type","text":"<pre><code>public $item_type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_hidden","title":"item_hidden","text":"<pre><code>public $item_hidden\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_unpublished","title":"item_unpublished","text":"<pre><code>public $item_unpublished\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_delayed","title":"item_delayed","text":"<pre><code>public $item_delayed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_pending_remove","title":"item_pending_remove","text":"<pre><code>public $item_pending_remove\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_blocked","title":"item_blocked","text":"<pre><code>public $item_blocked\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Item/#getid","title":"getId","text":"<pre><code>public getId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setid","title":"setId","text":"<pre><code>public setId(mixed $id): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmid","title":"getMid","text":"<pre><code>public getMid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmid","title":"setMid","text":"<pre><code>public setMid(mixed $mid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuuid","title":"getUuid","text":"<pre><code>public getUuid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuuid","title":"setUuid","text":"<pre><code>public setUuid(mixed $uuid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$uuid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getaid","title":"getAid","text":"<pre><code>public getAid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setaid","title":"setAid","text":"<pre><code>public setAid(mixed $aid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$aid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuid","title":"getUid","text":"<pre><code>public getUid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuid","title":"setUid","text":"<pre><code>public setUid(mixed $uid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getparent","title":"getParent","text":"<pre><code>public getParent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setparent","title":"setParent","text":"<pre><code>public setParent(mixed $parent): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$parent</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getparentmid","title":"getParentMid","text":"<pre><code>public getParentMid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setparentmid","title":"setParentMid","text":"<pre><code>public setParentMid(mixed $parent_mid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$parent_mid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getthrparent","title":"getThrParent","text":"<pre><code>public getThrParent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setthrparent","title":"setThrParent","text":"<pre><code>public setThrParent(mixed $thr_parent): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$thr_parent</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlevel","title":"getLevel","text":"<pre><code>public getLevel(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlevel","title":"setLevel","text":"<pre><code>public setLevel(mixed $item_level): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_level</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcreated","title":"getCreated","text":"<pre><code>public getCreated(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcreated","title":"setCreated","text":"<pre><code>public setCreated(mixed $created): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$created</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getedited","title":"getEdited","text":"<pre><code>public getEdited(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setedited","title":"setEdited","text":"<pre><code>public setEdited(mixed $edited): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$edited</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getexpires","title":"getExpires","text":"<pre><code>public getExpires(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setexpires","title":"setExpires","text":"<pre><code>public setExpires(mixed $expires): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expires</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommented","title":"getCommented","text":"<pre><code>public getCommented(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommented","title":"setCommented","text":"<pre><code>public setCommented(mixed $commented): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$commented</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getreceived","title":"getReceived","text":"<pre><code>public getReceived(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setreceived","title":"setReceived","text":"<pre><code>public setReceived(mixed $received): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$received</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getchanged","title":"getChanged","text":"<pre><code>public getChanged(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setchanged","title":"setChanged","text":"<pre><code>public setChanged(mixed $changed): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$changed</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommentsclosed","title":"getCommentsClosed","text":"<pre><code>public getCommentsClosed(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommentsclosed","title":"setCommentsClosed","text":"<pre><code>public setCommentsClosed(mixed $comments_closed): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$comments_closed</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getownerxchan","title":"getOwnerXchan","text":"<pre><code>public getOwnerXchan(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setownerxchan","title":"setOwnerXchan","text":"<pre><code>public setOwnerXchan(mixed $owner_xchan): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$owner_xchan</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getauthorxchan","title":"getAuthorXchan","text":"<pre><code>public getAuthorXchan(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setauthorxchan","title":"setAuthorXchan","text":"<pre><code>public setAuthorXchan(mixed $author_xchan): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$author_xchan</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsourcexchan","title":"getSourceXchan","text":"<pre><code>public getSourceXchan(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsourcexchan","title":"setSourceXchan","text":"<pre><code>public setSourceXchan(mixed $source_xchan): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$source_xchan</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmimetype","title":"getMimetype","text":"<pre><code>public getMimetype(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmimetype","title":"setMimetype","text":"<pre><code>public setMimetype(mixed $mimetype): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mimetype</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettitle","title":"getTitle","text":"<pre><code>public getTitle(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#settitle","title":"setTitle","text":"<pre><code>public setTitle(mixed $title): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$title</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsummary","title":"getSummary","text":"<pre><code>public getSummary(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsummary","title":"setSummary","text":"<pre><code>public setSummary(mixed $summary): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$summary</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getbody","title":"getBody","text":"<pre><code>public getBody(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setbody","title":"setBody","text":"<pre><code>public setBody(mixed $body): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$body</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gethtml","title":"getHtml","text":"<pre><code>public getHtml(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#sethtml","title":"setHtml","text":"<pre><code>public setHtml(mixed $html): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$html</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getapp","title":"getApp","text":"<pre><code>public getApp(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setapp","title":"setApp","text":"<pre><code>public setApp(mixed $app): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$app</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlang","title":"getLang","text":"<pre><code>public getLang(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlang","title":"setLang","text":"<pre><code>public setLang(mixed $lang): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$lang</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrevision","title":"getRevision","text":"<pre><code>public getRevision(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrevision","title":"setRevision","text":"<pre><code>public setRevision(mixed $revision): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$revision</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getverb","title":"getVerb","text":"<pre><code>public getVerb(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setverb","title":"setVerb","text":"<pre><code>public setVerb(mixed $verb): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$verb</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobjtype","title":"getObjType","text":"<pre><code>public getObjType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobjtype","title":"setObjType","text":"<pre><code>public setObjType(mixed $obj_type): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$obj_type</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobj","title":"getObj","text":"<pre><code>public getObj(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobj","title":"setObj","text":"<pre><code>public setObj(mixed $obj): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$obj</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettgttype","title":"getTgtType","text":"<pre><code>public getTgtType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#settgttype","title":"setTgtType","text":"<pre><code>public setTgtType(mixed $tgt_type): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$tgt_type</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettarget","title":"getTarget","text":"<pre><code>public getTarget(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#settarget","title":"setTarget","text":"<pre><code>public setTarget(mixed $target): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$target</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlayoutmid","title":"getLayoutMid","text":"<pre><code>public getLayoutMid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlayoutmid","title":"setLayoutMid","text":"<pre><code>public setLayoutMid(mixed $layout_mid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$layout_mid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpostopts","title":"getPostopts","text":"<pre><code>public getPostopts(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpostopts","title":"setPostopts","text":"<pre><code>public setPostopts(mixed $postopts): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$postopts</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getroute","title":"getRoute","text":"<pre><code>public getRoute(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setroute","title":"setRoute","text":"<pre><code>public setRoute(mixed $route): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$route</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getllink","title":"getLlink","text":"<pre><code>public getLlink(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setllink","title":"setLlink","text":"<pre><code>public setLlink(mixed $llink): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$llink</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getplink","title":"getPlink","text":"<pre><code>public getPlink(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setplink","title":"setPlink","text":"<pre><code>public setPlink(mixed $plink): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$plink</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getresourceid","title":"getResourceId","text":"<pre><code>public getResourceId(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setresourceid","title":"setResourceId","text":"<pre><code>public setResourceId(mixed $resource_id): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$resource_id</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getresourcetype","title":"getResourceType","text":"<pre><code>public getResourceType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setresourcetype","title":"setResourceType","text":"<pre><code>public setResourceType(mixed $resource_type): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$resource_type</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getattach","title":"getAttach","text":"<pre><code>public getAttach(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setattach","title":"setAttach","text":"<pre><code>public setAttach(mixed $attach): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsig","title":"getSig","text":"<pre><code>public getSig(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsig","title":"setSig","text":"<pre><code>public setSig(mixed $sig): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sig</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlocation","title":"getLocation","text":"<pre><code>public getLocation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlocation","title":"setLocation","text":"<pre><code>public setLocation(mixed $location): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcoord","title":"getCoord","text":"<pre><code>public getCoord(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcoord","title":"setCoord","text":"<pre><code>public setCoord(mixed $coord): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$coord</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpublicpolicy","title":"getPublicPolicy","text":"<pre><code>public getPublicPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpublicpolicy","title":"setPublicPolicy","text":"<pre><code>public setPublicPolicy(mixed $public_policy): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$public_policy</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommentpolicy","title":"getCommentPolicy","text":"<pre><code>public getCommentPolicy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommentpolicy","title":"setCommentPolicy","text":"<pre><code>public setCommentPolicy(mixed $comment_policy): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$comment_policy</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getallowcid","title":"getAllowCid","text":"<pre><code>public getAllowCid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setallowcid","title":"setAllowCid","text":"<pre><code>public setAllowCid(mixed $allow_cid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$allow_cid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getallowgid","title":"getAllowGid","text":"<pre><code>public getAllowGid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setallowgid","title":"setAllowGid","text":"<pre><code>public setAllowGid(mixed $allow_gid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$allow_gid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdenycid","title":"getDenyCid","text":"<pre><code>public getDenyCid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdenycid","title":"setDenyCid","text":"<pre><code>public setDenyCid(mixed $deny_cid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$deny_cid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdenygid","title":"getDenyGid","text":"<pre><code>public getDenyGid(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdenygid","title":"setDenyGid","text":"<pre><code>public setDenyGid(mixed $deny_gid): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$deny_gid</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrestrict","title":"getRestrict","text":"<pre><code>public getRestrict(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrestrict","title":"setRestrict","text":"<pre><code>public setRestrict(mixed $item_restrict): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_restrict</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getflags","title":"getFlags","text":"<pre><code>public getFlags(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setflags","title":"setFlags","text":"<pre><code>public setFlags(mixed $item_flags): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_flags</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getprivate","title":"getPrivate","text":"<pre><code>public getPrivate(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setprivate","title":"setPrivate","text":"<pre><code>public setPrivate(mixed $item_private): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_private</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getorigin","title":"getOrigin","text":"<pre><code>public getOrigin(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setorigin","title":"setOrigin","text":"<pre><code>public setOrigin(mixed $item_origin): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_origin</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getunseen","title":"getUnseen","text":"<pre><code>public getUnseen(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setunseen","title":"setUnseen","text":"<pre><code>public setUnseen(mixed $item_unseen): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_unseen</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getstarred","title":"getStarred","text":"<pre><code>public getStarred(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setstarred","title":"setStarred","text":"<pre><code>public setStarred(mixed $item_starred): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_starred</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuplink","title":"getUplink","text":"<pre><code>public getUplink(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuplink","title":"setUplink","text":"<pre><code>public setUplink(mixed $item_uplink): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_uplink</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getconsensus","title":"getConsensus","text":"<pre><code>public getConsensus(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setconsensus","title":"setConsensus","text":"<pre><code>public setConsensus(mixed $item_consensus): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_consensus</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getwall","title":"getWall","text":"<pre><code>public getWall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setwall","title":"setWall","text":"<pre><code>public setWall(mixed $item_wall): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_wall</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getthreadtop","title":"getThreadTop","text":"<pre><code>public getThreadTop(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setthreadtop","title":"setThreadTop","text":"<pre><code>public setThreadTop(mixed $item_thread_top): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_thread_top</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnotshown","title":"getNotshown","text":"<pre><code>public getNotshown(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnotshown","title":"setNotshown","text":"<pre><code>public setNotshown(mixed $item_notshown): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_notshown</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnsfw","title":"getNsfw","text":"<pre><code>public getNsfw(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnsfw","title":"setNsfw","text":"<pre><code>public setNsfw(mixed $item_nsfw): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_nsfw</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrelay","title":"getRelay","text":"<pre><code>public getRelay(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrelay","title":"setRelay","text":"<pre><code>public setRelay(mixed $item_relay): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_relay</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmentionsme","title":"getMentionsme","text":"<pre><code>public getMentionsme(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmentionsme","title":"setMentionsme","text":"<pre><code>public setMentionsme(mixed $item_mentionsme): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_mentionsme</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnocomment","title":"getNocomment","text":"<pre><code>public getNocomment(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnocomment","title":"setNocomment","text":"<pre><code>public setNocomment(mixed $item_nocomment): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_nocomment</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobscured","title":"getObscured","text":"<pre><code>public getObscured(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobscured","title":"setObscured","text":"<pre><code>public setObscured(mixed $item_obscured): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_obscured</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getverified","title":"getVerified","text":"<pre><code>public getVerified(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setverified","title":"setVerified","text":"<pre><code>public setVerified(mixed $item_verified): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_verified</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getretained","title":"getRetained","text":"<pre><code>public getRetained(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setretained","title":"setRetained","text":"<pre><code>public setRetained(mixed $item_retained): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_retained</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrss","title":"getRss","text":"<pre><code>public getRss(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrss","title":"setRss","text":"<pre><code>public setRss(mixed $item_rss): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_rss</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdeleted","title":"getDeleted","text":"<pre><code>public getDeleted(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdeleted","title":"setDeleted","text":"<pre><code>public setDeleted(mixed $item_deleted): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_deleted</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettype","title":"getType","text":"<pre><code>public getType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#settype","title":"setType","text":"<pre><code>public setType(mixed $item_type): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_type</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#gethidden","title":"getHidden","text":"<pre><code>public getHidden(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#sethidden","title":"setHidden","text":"<pre><code>public setHidden(mixed $item_hidden): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_hidden</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getunpublished","title":"getUnpublished","text":"<pre><code>public getUnpublished(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setunpublished","title":"setUnpublished","text":"<pre><code>public setUnpublished(mixed $item_unpublished): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_unpublished</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdelayed","title":"getDelayed","text":"<pre><code>public getDelayed(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdelayed","title":"setDelayed","text":"<pre><code>public setDelayed(mixed $item_delayed): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_delayed</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpendingremove","title":"getPendingRemove","text":"<pre><code>public getPendingRemove(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpendingremove","title":"setPendingRemove","text":"<pre><code>public setPendingRemove(mixed $item_pending_remove): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_pending_remove</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getblocked","title":"getBlocked","text":"<pre><code>public getBlocked(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setblocked","title":"setBlocked","text":"<pre><code>public setBlocked(mixed $item_blocked): \\Zotlabs\\Entity\\Item\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item_blocked</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Entity/Item/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/Entity/Item/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Entity/Item/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Extend/Hook/","title":"Hook","text":"<ul> <li>Full name: <code>\\Zotlabs\\Extend\\Hook</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Extend/Hook/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Extend/Hook/#register","title":"register","text":"<pre><code>public static register(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hook</code> mixed <code>$file</code> mixed <code>$function</code> mixed <code>$version</code> mixed <code>$priority</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Hook/#register_array","title":"register_array","text":"<pre><code>public static register_array(mixed $file, mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Hook/#unregister","title":"unregister","text":"<pre><code>public static unregister(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hook</code> mixed <code>$file</code> mixed <code>$function</code> mixed <code>$version</code> mixed <code>$priority</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Hook/#unregister_by_file","title":"unregister_by_file","text":"<pre><code>public static unregister_by_file(string $file): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> string"},{"location":"dev/classes/Zotlabs/Extend/Hook/#insert","title":"insert","text":"<pre><code>public static insert(string $hook, string $fn, int $version, int $priority): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hook</code> string name of hook to attach callback <code>$fn</code> string function name of callback handler <code>$version</code> int hook interface version, 0 uses two callback params, 1 uses one callback param <code>$priority</code> int currently not implemented in this function, would require the hook array to be resorted <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Extend/Route/","title":"Route","text":"<ul> <li>Full name: <code>\\Zotlabs\\Extend\\Route</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Extend/Route/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Extend/Route/#register","title":"register","text":"<pre><code>public static register(mixed $file, mixed $modname): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$modname</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Route/#unregister","title":"unregister","text":"<pre><code>public static unregister(mixed $file, mixed $modname): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$modname</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Route/#unregister_by_file","title":"unregister_by_file","text":"<pre><code>public static unregister_by_file(mixed $file): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Route/#get","title":"get","text":"<pre><code>public static get(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Extend/Route/#set","title":"set","text":"<pre><code>public static set(mixed $r): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$r</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Extend/Widget/","title":"Widget","text":"<ul> <li>Full name: <code>\\Zotlabs\\Extend\\Widget</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Extend/Widget/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Extend/Widget/#register","title":"register","text":"<pre><code>public static register(mixed $file, mixed $widget): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$widget</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Widget/#unregister","title":"unregister","text":"<pre><code>public static unregister(mixed $file, mixed $widget): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$widget</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Widget/#unregister_by_file","title":"unregister_by_file","text":"<pre><code>public static unregister_by_file(mixed $file): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed"},{"location":"dev/classes/Zotlabs/Extend/Widget/#get","title":"get","text":"<pre><code>public static get(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Extend/Widget/#set","title":"set","text":"<pre><code>public static set(mixed $r): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$r</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/","title":"BasicId","text":"<ul> <li>Full name: <code>\\Zotlabs\\Identity\\BasicId</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Identity/BasicId/#name","title":"name","text":"<pre><code>private $name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#profile_photo","title":"profile_photo","text":"<pre><code>private $profile_photo\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#profile_url","title":"profile_url","text":"<pre><code>private $profile_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#address","title":"address","text":"<pre><code>private $address\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#protocol","title":"protocol","text":"<pre><code>private $protocol\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/","title":"OAuth2Server","text":"<ul> <li>Full name: <code>\\Zotlabs\\Identity\\OAuth2Server</code></li> <li>Parent class: <code>Server</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/#__construct","title":"__construct","text":"<pre><code>public __construct(\\Zotlabs\\Identity\\OAuth2Storage $storage, mixed $config = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$storage</code> \\Zotlabs\\Identity\\OAuth2Storage <code>$config</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/","title":"OAuth2Storage","text":"<ul> <li>Full name: <code>\\Zotlabs\\Identity\\OAuth2Storage</code></li> <li>Parent class: <code>Pdo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#checkusercredentials","title":"checkUserCredentials","text":"<pre><code>public checkUserCredentials(string $username, string $password): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$username</code> string <code>$password</code> string"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuserdetails","title":"getUserDetails","text":"<pre><code>public getUserDetails(string $username): array|bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$username</code> string"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#checkpassword","title":"checkPassword","text":"<pre><code>protected checkPassword(array $user, string $password): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$user</code> array <code>$password</code> string"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuser","title":"getUser","text":"<pre><code>public getUser(string $username): array|bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$username</code> string"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#scopeexists","title":"scopeExists","text":"<pre><code>public scopeExists(mixed $scope): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$scope</code> mixed"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getdefaultscope","title":"getDefaultScope","text":"<pre><code>public getDefaultScope(mixed $client_id = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$client_id</code> mixed"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuserclaims","title":"getUserClaims","text":"<pre><code>public getUserClaims(mixed $user_id, mixed $claims): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$user_id</code> mixed <code>$claims</code> mixed"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#setuser","title":"setUser","text":"<p>plaintext passwords are bad!  Override this for your application</p> <pre><code>public setUser(string $username, string $password, string $firstName = null, string $lastName = null): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$username</code> string <code>$password</code> string <code>$firstName</code> string <code>$lastName</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/","title":"ProfilePhoto","text":"<ul> <li>Full name: <code>\\Zotlabs\\Identity\\ProfilePhoto</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_large_url","title":"photo_large_url","text":"<pre><code>private $photo_large_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_medium_url","title":"photo_medium_url","text":"<pre><code>private $photo_medium_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_small_url","title":"photo_small_url","text":"<pre><code>private $photo_small_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_mimetype","title":"photo_mimetype","text":"<pre><code>private $photo_mimetype\n</code></pre>"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_updated","title":"photo_updated","text":"<pre><code>private $photo_updated\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/AConfig/","title":"AConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\AConfig</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/AConfig/#load","title":"Load","text":"<pre><code>public static Load(mixed $account_id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#get","title":"Get","text":"<pre><code>public static Get(mixed $account_id, mixed $family, mixed $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$default</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#set","title":"Set","text":"<pre><code>public static Set(mixed $account_id, mixed $family, mixed $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$value</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(mixed $account_id, mixed $family, mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ASCache/","title":"ASCache","text":"<p>A wrapper for the cache api</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\ASCache</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ASCache/#isenabled","title":"isEnabled","text":"<pre><code>public static isEnabled(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#getage","title":"getAge","text":"<pre><code>public static getAge(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#get","title":"Get","text":"<pre><code>public static Get(mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#set","title":"Set","text":"<pre><code>public static Set(mixed $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed <code>$value</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/","title":"ASCollection","text":"<p>Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged).</p> <p>Construct with either an existing object or url and an optional channel to sign requests. $direction is 0 (default) to fetch from the beginning, and 1 to fetch from the end and reverse order the resultant array. An optional limit to the number of records returned may also be specified. Use $class-&gt;get() to return an array of collection members.</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\ASCollection</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#channel","title":"channel","text":"<pre><code>private $channel\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#nextpage","title":"nextpage","text":"<pre><code>private $nextpage\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#limit","title":"limit","text":"<pre><code>private $limit\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#direction","title":"direction","text":"<pre><code>private $direction\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#data","title":"data","text":"<pre><code>private $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#history","title":"history","text":"<pre><code>private $history\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $obj, mixed $channel = null, mixed $direction, mixed $limit): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$obj</code> mixed <code>$channel</code> mixed <code>$direction</code> mixed <code>$limit</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#next","title":"next","text":"<pre><code>public next(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#setnext","title":"setnext","text":"<pre><code>public setnext(mixed $data): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/","title":"AbConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\AbConfig</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#load","title":"Load","text":"<pre><code>public static Load(mixed $chan, mixed $xhash, mixed $family = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$chan</code> mixed <code>$xhash</code> mixed <code>$family</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#get","title":"Get","text":"<pre><code>public static Get(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$chan</code> mixed <code>$xhash</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$default</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#set","title":"Set","text":"<pre><code>public static Set(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$chan</code> mixed <code>$xhash</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$value</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(mixed $chan, mixed $xhash, mixed $family, mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$chan</code> mixed <code>$xhash</code> mixed <code>$family</code> mixed <code>$key</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/AccessList/","title":"AccessList","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\AccessList</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/AccessList/#add","title":"add","text":"<pre><code>public static add(mixed $uid, mixed $name, mixed $public): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$name</code> mixed <code>$public</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#remove","title":"remove","text":"<pre><code>public static remove(mixed $uid, mixed $name): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_name","title":"by_name","text":"<pre><code>public static by_name(mixed $uid, mixed $name): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_id","title":"by_id","text":"<pre><code>public static by_id(mixed $uid, mixed $id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_hash","title":"by_hash","text":"<pre><code>public static by_hash(mixed $uid, mixed $hash): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$hash</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_remove","title":"member_remove","text":"<pre><code>public static member_remove(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$name</code> mixed <code>$member</code> mixed <code>$gid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_add","title":"member_add","text":"<pre><code>public static member_add(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$name</code> mixed <code>$member</code> mixed <code>$gid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#members","title":"members","text":"<pre><code>public static members(mixed $uid, mixed $gid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$gid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#members_xchan","title":"members_xchan","text":"<pre><code>public static members_xchan(mixed $uid, mixed $gid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$gid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#profile_members_xchan","title":"profile_members_xchan","text":"<pre><code>public static profile_members_xchan(mixed $uid, mixed $gid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$gid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#select","title":"select","text":"<pre><code>public static select(mixed $uid, mixed $options): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$options</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#expand","title":"expand","text":"<pre><code>public static expand(mixed $g): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$g</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_of","title":"member_of","text":"<pre><code>public static member_of(mixed $c): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$c</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#containing","title":"containing","text":"<pre><code>public static containing(mixed $uid, mixed $c): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$c</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Activity/","title":"Activity","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Activity</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Activity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_object","title":"encode_object","text":"<pre><code>public static encode_object(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_local","title":"fetch_local","text":"<pre><code>public static fetch_local(mixed $url, mixed $portable_id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <code>$portable_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch","title":"fetch","text":"<pre><code>public static fetch(mixed $url, mixed $channel = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_person","title":"fetch_person","text":"<pre><code>public static fetch_person(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_profile","title":"fetch_profile","text":"<pre><code>public static fetch_profile(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_thing","title":"fetch_thing","text":"<pre><code>public static fetch_thing(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_item","title":"fetch_item","text":"<pre><code>public static fetch_item(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_image","title":"fetch_image","text":"<pre><code>public static fetch_image(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_event","title":"fetch_event","text":"<pre><code>public static fetch_event(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#paged_collection_init","title":"paged_collection_init","text":"<pre><code>public static paged_collection_init(mixed $total, mixed $id, mixed $type = &amp;#039;OrderedCollection&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$total</code> mixed <code>$id</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item_collection","title":"encode_item_collection","text":"<pre><code>public static encode_item_collection(mixed $items, mixed $id, mixed $type, mixed $total): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed <code>$id</code> mixed <code>$type</code> mixed <code>$total</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_follow_collection","title":"encode_follow_collection","text":"<pre><code>public static encode_follow_collection(mixed $items, mixed $id, mixed $type, mixed $extra = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed <code>$id</code> mixed <code>$type</code> mixed <code>$extra</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_simple_collection","title":"encode_simple_collection","text":"<pre><code>public static encode_simple_collection(mixed $items, mixed $id, mixed $type, mixed $total, mixed $extra = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$items</code> mixed <code>$id</code> mixed <code>$type</code> mixed <code>$total</code> mixed <code>$extra</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item","title":"encode_item","text":"<pre><code>public static encode_item(mixed $i): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$i</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_taxonomy","title":"decode_taxonomy","text":"<pre><code>public static decode_taxonomy(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_taxonomy","title":"encode_taxonomy","text":"<pre><code>public static encode_taxonomy(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_attachment","title":"encode_attachment","text":"<pre><code>public static encode_attachment(mixed $item, mixed $iconfig = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$iconfig</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_iconfig","title":"decode_iconfig","text":"<pre><code>public static decode_iconfig(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_attachment","title":"decode_attachment","text":"<pre><code>public static decode_attachment(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_activity","title":"encode_activity","text":"<pre><code>public static encode_activity(mixed $i, mixed $recurse = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$i</code> mixed <code>$recurse</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#map_mentions","title":"map_mentions","text":"<pre><code>public static map_mentions(mixed $i): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$i</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#map_acl","title":"map_acl","text":"<pre><code>public static map_acl(mixed $i): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$i</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#lookup_term_url","title":"lookup_term_url","text":"<pre><code>public static lookup_term_url(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_person","title":"encode_person","text":"<pre><code>public static encode_person(mixed $p, mixed $extended = true): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$p</code> mixed <code>$extended</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item_object","title":"encode_item_object","text":"<pre><code>public static encode_item_object(mixed $item, mixed $elm = &amp;#039;obj&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$elm</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#activity_mapper","title":"activity_mapper","text":"<pre><code>public static activity_mapper(mixed $verb): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$verb</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#activity_obj_mapper","title":"activity_obj_mapper","text":"<pre><code>public static activity_obj_mapper(mixed $obj): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$obj</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#follow","title":"follow","text":"<pre><code>public static follow(mixed $channel, mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#unfollow","title":"unfollow","text":"<pre><code>public static unfollow(mixed $channel, mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#drop","title":"drop","text":"<pre><code>public static drop(mixed $channel, mixed $observer, mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$observer</code> mixed <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#actor_store","title":"actor_store","text":"<pre><code>public static actor_store(mixed $person_obj, mixed $force = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$person_obj</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#vid_sort","title":"vid_sort","text":"<pre><code>public static vid_sort(mixed $a, mixed $b): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed <code>$b</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_bbmention","title":"get_actor_bbmention","text":"<pre><code>public static get_actor_bbmention(mixed $id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#update_poll","title":"update_poll","text":"<pre><code>public static update_poll(mixed $pollItem, mixed $response): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$pollItem</code> mixed <code>$response</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_note","title":"decode_note","text":"<pre><code>public static decode_note(mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#store","title":"store","text":"<pre><code>public static store(mixed $channel, mixed $observer_hash, mixed $act, mixed $item, mixed $fetch_parents = true, mixed $force = false, mixed $is_collection_operation = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$observer_hash</code> mixed <code>$act</code> mixed <code>$item</code> mixed <code>$fetch_parents</code> mixed <code>$force</code> mixed <code>$is_collection_operation</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_and_store_parents","title":"fetch_and_store_parents","text":"<pre><code>public static fetch_and_store_parents(array $channel, array $observer_hash, array $item, object $act = null, bool $force = false): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array <code>$observer_hash</code> array <code>$item</code> array string&amp;#124;array <code>$act</code> object activitystreams object (optional) default null <code>$force</code> bool disregard permissions and force storage (optional) default false"},{"location":"dev/classes/Zotlabs/Lib/Activity/#bb_attach","title":"bb_attach","text":"<pre><code>public static bb_attach(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#media_not_in_body","title":"media_not_in_body","text":"<pre><code>public static media_not_in_body(mixed $s, mixed $body): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$body</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#bb_content","title":"bb_content","text":"<pre><code>public static bb_content(mixed $content, mixed $field): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$content</code> mixed <code>$field</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_content","title":"get_content","text":"<pre><code>public static get_content(mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_textfield","title":"get_textfield","text":"<pre><code>public static get_textfield(mixed $act, mixed $field): null|string|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$act</code> mixed <code>$field</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#token_from_request","title":"token_from_request","text":"<pre><code>public static token_from_request(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Activity/#find_best_identity","title":"find_best_identity","text":"<pre><code>public static find_best_identity(mixed $xchan): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$xchan</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_cached_actor","title":"get_cached_actor","text":"<pre><code>public static get_cached_actor(mixed $id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor","title":"get_actor","text":"<pre><code>public static get_actor(mixed $actor_id, mixed $force = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$actor_id</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_unknown_actor","title":"get_unknown_actor","text":"<pre><code>public static get_unknown_actor(mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_hublocs","title":"get_actor_hublocs","text":"<pre><code>public static get_actor_hublocs(mixed $url, mixed $options = &amp;#039;all&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <code>$options</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_collections","title":"get_actor_collections","text":"<pre><code>public static get_actor_collections(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_protocols","title":"get_actor_protocols","text":"<pre><code>public static get_actor_protocols(mixed $actor): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$actor</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_quote_bbcode","title":"get_quote_bbcode","text":"<pre><code>public static get_quote_bbcode(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_attributed_to_actor_url","title":"get_attributed_to_actor_url","text":"<pre><code>public static get_attributed_to_actor_url(mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#ap_context","title":"ap_context","text":"<pre><code>public static ap_context(mixed $contextType = null): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$contextType</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#ap_schema","title":"ap_schema","text":"<pre><code>public static ap_schema(mixed $contextType = null): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$contextType</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#build_packet","title":"build_packet","text":"<pre><code>public static build_packet(array $obj, array $channel = [], bool $json_encode = true): string|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$obj</code> array <code>$channel</code> array (optional) default [] <code>$json_encode</code> bool (optional) default true"},{"location":"dev/classes/Zotlabs/Lib/Activity/#init_background_fetch","title":"init_background_fetch","text":"<pre><code>public static init_background_fetch(string $observer_hash = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$observer_hash</code> string"},{"location":"dev/classes/Zotlabs/Lib/Activity/#addtocollection","title":"addToCollection","text":"<pre><code>public static addToCollection(mixed $channel, mixed $object, mixed $target, mixed $sourceItem = null, mixed $deliver = true): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$object</code> mixed <code>$target</code> mixed <code>$sourceItem</code> mixed <code>$deliver</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Activity/#removefromcollection","title":"removeFromCollection","text":"<pre><code>public static removeFromCollection(mixed $channel, mixed $object, mixed $target, mixed $deliver = true): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$object</code> mixed <code>$target</code> mixed <code>$deliver</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/","title":"ActivityStreams","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\ActivityStreams</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#raw","title":"raw","text":"<pre><code>public $raw\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#data","title":"data","text":"<pre><code>public $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#meta","title":"meta","text":"<pre><code>public $meta\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#valid","title":"valid","text":"<pre><code>public $valid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#deleted","title":"deleted","text":"<pre><code>public $deleted\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#portable_id","title":"portable_id","text":"<pre><code>public $portable_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#id","title":"id","text":"<pre><code>public $id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#parent_id","title":"parent_id","text":"<pre><code>public $parent_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#type","title":"type","text":"<pre><code>public $type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#actor","title":"actor","text":"<pre><code>public $actor\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#obj","title":"obj","text":"<pre><code>public $obj\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#tgt","title":"tgt","text":"<pre><code>public $tgt\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#origin","title":"origin","text":"<pre><code>public $origin\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#owner","title":"owner","text":"<pre><code>public $owner\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#signer","title":"signer","text":"<pre><code>public $signer\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#sig","title":"sig","text":"<pre><code>public $sig\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#sigok","title":"sigok","text":"<pre><code>public $sigok\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#recips","title":"recips","text":"<pre><code>public $recips\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#raw_recips","title":"raw_recips","text":"<pre><code>public $raw_recips\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#saved_recips","title":"saved_recips","text":"<pre><code>public $saved_recips\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#__construct","title":"__construct","text":"<pre><code>public __construct(string $string, mixed $portable_id = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$string</code> string <code>$portable_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_valid","title":"is_valid","text":"<pre><code>public is_valid(): bool\n</code></pre> <p>Return Value:</p> <p>Return true if the JSON string could be decoded.</p>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#set_recips","title":"set_recips","text":"<pre><code>public set_recips(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#objprop","title":"objprop","text":"<pre><code>public objprop(string $property, mixed $default = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$property</code> string <code>$default</code> mixed return value if property or object not setor object is a string id which could not be fetched."},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#collect_recips","title":"collect_recips","text":"<pre><code>public collect_recips(mixed $base = &amp;#039;&amp;#039;, string $namespace = &amp;#039;&amp;#039;): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base</code> mixed <code>$namespace</code> string (optional) default empty"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#expand","title":"expand","text":"<pre><code>public expand(mixed $arr, mixed $base = &amp;#039;&amp;#039;, mixed $namespace = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <code>$base</code> mixed <code>$namespace</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_namespace","title":"get_namespace","text":"<pre><code>public get_namespace(array $base, string $namespace): string|null\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base</code> array <code>$namespace</code> string if not set return empty string"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_property_obj","title":"get_property_obj","text":"<pre><code>public get_property_obj(string $property, array $base = &amp;#039;&amp;#039;, string $namespace = &amp;#039;&amp;#039;): null|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$property</code> string <code>$base</code> array (optional) <code>$namespace</code> string (optional) default empty"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#fetch_property","title":"fetch_property","text":"<pre><code>public fetch_property(string $url, mixed $channel = null): null|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> string <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_an_actor","title":"is_an_actor","text":"<pre><code>public static is_an_actor(mixed $s): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_response_activity","title":"is_response_activity","text":"<pre><code>public static is_response_activity(mixed $s): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_actor","title":"get_actor","text":"<pre><code>public get_actor(string $property, array $base = &amp;#039;&amp;#039;, string $namespace = &amp;#039;&amp;#039;): null|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$property</code> string <code>$base</code> array <code>$namespace</code> string (optional) default empty"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_compound_property","title":"get_compound_property","text":"<pre><code>public get_compound_property(string $property, array $base = &amp;#039;&amp;#039;, string $namespace = &amp;#039;&amp;#039;, bool $first = false): null|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$property</code> string <code>$base</code> array <code>$namespace</code> string (optional) default empty <code>$first</code> bool (optional) default false, if true and result is a sequential array return only the first element"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_url","title":"is_url","text":"<pre><code>public is_url(string $url): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> string"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_primary_type","title":"get_primary_type","text":"<pre><code>public get_primary_type(array $base = &amp;#039;&amp;#039;, string $namespace = &amp;#039;&amp;#039;): null|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base</code> array <code>$namespace</code> string (optional) default empty"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#debug","title":"debug","text":"<pre><code>public debug(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_as_request","title":"is_as_request","text":"<pre><code>public static is_as_request(mixed $channel = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_accept_header_string","title":"get_accept_header_string","text":"<pre><code>public static get_accept_header_string(mixed $channel = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#checkeddsasignature","title":"checkEddsaSignature","text":"<pre><code>public checkEddsaSignature(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Api_router/","title":"Api_router","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Api_router</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Api_router/#routes","title":"routes","text":"<pre><code>private static $routes\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Api_router/#register","title":"register","text":"<pre><code>public static register(mixed $path, mixed $fn, mixed $auth_required): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$path</code> mixed <code>$fn</code> mixed <code>$auth_required</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#find","title":"find","text":"<pre><code>public static find(mixed $path): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$path</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#dbg","title":"dbg","text":"<pre><code>public static dbg(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/","title":"BaseObject","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\BaseObject</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#string","title":"string","text":"<pre><code>public $string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#ldcontext","title":"ldContext","text":"<pre><code>public $ldContext\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $input = null, mixed $strict = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$input</code> mixed <code>$strict</code> mixed <p>Throws:</p> <p>if $strict</p> <ul> <li><code>UnhandledElementException</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#getdatatype","title":"getDataType","text":"<pre><code>public getDataType(mixed $element, mixed $object = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$element</code> mixed <code>$object</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#toarray","title":"toArray","text":"<pre><code>public toArray(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#getldcontext","title":"getLdContext","text":"<pre><code>public getLdContext(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#setldcontext","title":"setLdContext","text":"<pre><code>public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ldContext</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Cache/","title":"Cache","text":"<p>cache api</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\Cache</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Cache/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Cache/#get","title":"get","text":"<pre><code>public static get(string $key, string $age = &amp;#039;&amp;#039;): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> string <code>$age</code> string in SQL format, default is '30 DAY'"},{"location":"dev/classes/Zotlabs/Lib/Cache/#set","title":"set","text":"<pre><code>public static set(mixed $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed <code>$value</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/","title":"Chatroom","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Chatroom</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#create","title":"create","text":"<pre><code>public static create(array $channel, array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array <code>$arr</code> array <p>Return Value:</p> <p>An associative array containing: * \\e boolean \\b success - A boolean success status * \\e string \\b message - (optional) A string</p>"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#destroy","title":"destroy","text":"<pre><code>public static destroy(mixed $channel, mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#enter","title":"enter","text":"<pre><code>public static enter(mixed $observer_xchan, mixed $room_id, mixed $status, mixed $client): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$observer_xchan</code> mixed <code>$room_id</code> mixed <code>$status</code> mixed <code>$client</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#leave","title":"leave","text":"<pre><code>public static leave(mixed $observer_xchan, mixed $room_id, mixed $client): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$observer_xchan</code> mixed <code>$room_id</code> mixed <code>$client</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#roomlist","title":"roomlist","text":"<pre><code>public static roomlist(mixed $uid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#list_count","title":"list_count","text":"<pre><code>public static list_count(mixed $uid): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#message","title":"message","text":"<pre><code>public static message(int $uid, int $room_id, string $xchan, string $text): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> int <code>$room_id</code> int <code>$xchan</code> string <code>$text</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Config/","title":"Config","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Config</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Config/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Config/#load","title":"Load","text":"<pre><code>public static Load(string $family, mixed $recursionCounter): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$family</code> string The category of the configuration value <code>$recursionCounter</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Config/#set","title":"Set","text":"<pre><code>public static Set(string $family, string $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to set <code>$value</code> mixed The value to store in the configuration <p>Return Value:</p> <p>Return the set value, or false if the database update failed</p>"},{"location":"dev/classes/Zotlabs/Lib/Config/#get","title":"Get","text":"<pre><code>public static Get(string $family, string $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to query <code>$default</code> mixed (optional) default false <p>Return Value:</p> <p>Return value or false on error or if not set</p>"},{"location":"dev/classes/Zotlabs/Lib/Config/#delete","title":"Delete","text":"<pre><code>public static Delete(string $family, string $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to delete"},{"location":"dev/classes/Zotlabs/Lib/Config/#get_from_storage","title":"get_from_storage","text":"<pre><code>private static get_from_storage(string $family, string $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to query <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Connect/","title":"Connect","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Connect</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Connect/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Connect/#connect_1","title":"connect","text":"<p>Takes a $channel and a $url/handle and adds a new connection</p> <pre><code>public static connect(mixed $channel, mixed $url, mixed $sub_channel = false): mixed\n</code></pre> <p>Returns array  $return['success'] boolean true if successful  $return['abook'] Address book entry joined with xchan if successful  $return['message'] error text if success is false.</p> <p>This function does NOT send sync packets to clones. The caller is responsible for doing this</p> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$url</code> mixed <code>$sub_channel</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Crypto/","title":"Crypto","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Crypto</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Crypto/#openssl_algorithms","title":"openssl_algorithms","text":"<pre><code>public static $openssl_algorithms\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Crypto/#methods_1","title":"methods","text":"<pre><code>public static methods(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#signing_methods","title":"signing_methods","text":"<pre><code>public static signing_methods(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#new_keypair","title":"new_keypair","text":"<pre><code>public static new_keypair(mixed $bits): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$bits</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#sign","title":"sign","text":"<pre><code>public static sign(mixed $data, mixed $key, mixed $alg = &amp;#039;sha256&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$key</code> mixed <code>$alg</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#verify","title":"verify","text":"<pre><code>public static verify(mixed $data, mixed $sig, mixed $key, mixed $alg = &amp;#039;sha256&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$sig</code> mixed <code>$key</code> mixed <code>$alg</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#encapsulate","title":"encapsulate","text":"<pre><code>public static encapsulate(mixed $data, mixed $pubkey, mixed $alg): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$pubkey</code> mixed <code>$alg</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#unencapsulate","title":"unencapsulate","text":"<pre><code>public static unencapsulate(mixed $data, mixed $prvkey): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$prvkey</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/","title":"DB_Upgrade","text":"<p>Upgrade the database schema if necessary.</p> <p>Compares the currently active database schema version with the version required for this version of Hubzilla, and performs the upgrade if needed.</p> <p>If the difference consists of more than one revision of the schema, each of the intermediate upgrades are performed in turn.</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\DB_Upgrade</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/#run","title":"run","text":"<p>Check the installed and required schema versions and perform the upgrade if necessary.</p> <pre><code>public static run(int $db_revision): void\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$db_revision</code> int <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/DReport/","title":"DReport","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\DReport</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/DReport/#location","title":"location","text":"<pre><code>private $location\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#sender","title":"sender","text":"<pre><code>private $sender\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#recipient","title":"recipient","text":"<pre><code>private $recipient\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#name","title":"name","text":"<pre><code>private $name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#message_id","title":"message_id","text":"<pre><code>private $message_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#message_uuid","title":"message_uuid","text":"<pre><code>private $message_uuid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#status","title":"status","text":"<pre><code>private $status\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#date","title":"date","text":"<pre><code>private $date\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/DReport/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $location, mixed $sender, mixed $recipient, mixed $message_id, mixed $message_uuid = &amp;#039;&amp;#039;, mixed $status = &amp;#039;deliver&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$location</code> mixed <code>$sender</code> mixed <code>$recipient</code> mixed <code>$message_id</code> mixed <code>$message_uuid</code> mixed <code>$status</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/DReport/#update","title":"update","text":"<pre><code>public update(mixed $status): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$status</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/DReport/#set_name","title":"set_name","text":"<pre><code>public set_name(mixed $name): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/DReport/#addto_update","title":"addto_update","text":"<pre><code>public addto_update(mixed $status): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$status</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/DReport/#set","title":"set","text":"<pre><code>public set(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/DReport/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/DReport/#is_storable","title":"is_storable","text":"<pre><code>public static is_storable(array $dr): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$dr</code> array <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Enotify/","title":"Enotify","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Enotify</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Enotify/#submit","title":"submit","text":"<pre><code>public static submit(array $params): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$params</code> array an assoziative array with: \\e string \\b from_xchan sender xchan hash \\e string \\b to_xchan recipient xchan hash \\e array \\b item an assoziative array \\e int \\b type one of the NOTIFY_ constants from boot.php \\e string \\b link \\e string \\b parent_mid \\e string \\b otype \\e string \\b verb \\e string \\b activity"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#send","title":"send","text":"<pre><code>public static send(array $params): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$params</code> array an assoziative array with: \\e string \\b fromName        name of the sender \\e string \\b fromEmail       email of the sender \\e string \\b replyTo         replyTo address to direct responses \\e string \\b toEmail         destination email address \\e string \\b messageSubject  subject of the message \\e string \\b htmlVersion     html version of the message \\e string \\b textVersion     text only version of the message \\e string \\b additionalMailHeader  additions to the smtp mail header"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format","title":"format","text":"<pre><code>public static format(mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_notify","title":"format_notify","text":"<pre><code>public static format_notify(mixed $tt): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$tt</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_intros","title":"format_intros","text":"<pre><code>public static format_intros(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_files","title":"format_files","text":"<pre><code>public static format_files(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_mail","title":"format_mail","text":"<pre><code>public static format_mail(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_all_events","title":"format_all_events","text":"<pre><code>public static format_all_events(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_register","title":"format_register","text":"<pre><code>public static format_register(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/","title":"ExtendedZip","text":"<p>Description of ExtendedZip</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\ExtendedZip</code></li> <li>Parent class: <code>ZipArchive</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#addtree","title":"addTree","text":"<pre><code>public addTree(mixed $dirname, mixed $localname = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dirname</code> mixed <code>$localname</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#_addtree","title":"_addTree","text":"<pre><code>protected _addTree(mixed $dirname, mixed $localname): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dirname</code> mixed <code>$localname</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#ziptree","title":"zipTree","text":"<pre><code>public static zipTree(mixed $dirname, mixed $zipFilename, mixed $flags, mixed $localname = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$dirname</code> mixed <code>$zipFilename</code> mixed <code>$flags</code> mixed <code>$localname</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/","title":"Hashpath","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Hashpath</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Hashpath/#path","title":"path","text":"<pre><code>public static path(mixed $hash, mixed $prefix = &amp;#039;.&amp;#039;, mixed $depth = 1, mixed $slice = 2, mixed $mkdir = true, mixed $alg = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> mixed <code>$prefix</code> mixed <code>$depth</code> mixed <code>$slice</code> mixed <code>$mkdir</code> mixed <code>$alg</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/IConfig/","title":"IConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\IConfig</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/IConfig/#load","title":"Load","text":"<pre><code>public static Load(mixed&amp; $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#get","title":"Get","text":"<pre><code>public static Get(mixed&amp; $item, mixed $family, mixed $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$default</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#set","title":"Set","text":"<p>IConfig::Set(&amp;$item, $family, $key, $value, $sharing = false);</p> <pre><code>public static Set(mixed&amp; $item, mixed $family, mixed $key, mixed $value, mixed $sharing = false): mixed\n</code></pre> <p>$item - item array or item id. If passed an array the iconfig meta information is    added to the item structure (which will need to be saved with item_store eventually).    If passed an id, the DB is updated, but may not be federated and/or cloned. $family - namespace of meta variable $key - key of meta variable $value - value of meta variable $sharing - boolean (default false); if true the meta information is propagated with the item   to other sites/channels, mostly useful when $item is an array and has not yet been stored/delivered.   If the meta information is added after delivery and you wish it to be shared, it may be necessary to   alter the item edited timestamp and invoke the delivery process on the updated item. The edited   timestamp needs to be altered in order to trigger an item_store_update() at the receiving end.</p> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$value</code> mixed <code>$sharing</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(mixed&amp; $item, mixed $family, mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$family</code> mixed <code>$key</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/","title":"Img_filesize","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Img_filesize</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#url","title":"url","text":"<pre><code>private $url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $url): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#getsize","title":"getSize","text":"<pre><code>public getSize(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#getlocalfilesize","title":"getLocalFileSize","text":"<pre><code>public static getLocalFileSize(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/","title":"JSalmon","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\JSalmon</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#sign","title":"sign","text":"<pre><code>public static sign(mixed $data, mixed $key_id, mixed $key, mixed $data_type = &amp;#039;application/x-zot+json&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$key_id</code> mixed <code>$key</code> mixed <code>$data_type</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#verify","title":"verify","text":"<pre><code>public static verify(mixed $x): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#unpack","title":"unpack","text":"<pre><code>public static unpack(mixed $data): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/","title":"JcsEddsa2022","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\JcsEddsa2022</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#sign","title":"sign","text":"<pre><code>public sign(mixed $data, mixed $channel): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#verify","title":"verify","text":"<pre><code>public verify(mixed $data, mixed $publicKey): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$publicKey</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#signabledata","title":"signableData","text":"<pre><code>public signableData(mixed $data): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#signableoptions","title":"signableOptions","text":"<pre><code>public signableOptions(mixed $options): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$options</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#hash","title":"hash","text":"<pre><code>public hash(mixed $obj, mixed $binary = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$obj</code> mixed <code>$binary</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#canonicalize","title":"canonicalize","text":"<pre><code>public canonicalize(mixed $data): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/","title":"Keyutils","text":"<p>Keyutils Convert RSA keys between various formats</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\Keyutils</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#metopem","title":"meToPem","text":"<pre><code>public static meToPem(string $m, string $e): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$m</code> string modulo <code>$e</code> string exponent"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#rsatopem","title":"rsaToPem","text":"<pre><code>public static rsaToPem(mixed $key): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#pemtorsa","title":"pemToRsa","text":"<pre><code>public static pemToRsa(mixed $key): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#pemtome","title":"pemToMe","text":"<pre><code>public static pemToMe(string $key, string&amp; $m, string&amp; $e): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> string key <code>$m</code> string reference modulo <code>$e</code> string reference exponent"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#salmonkey","title":"salmonKey","text":"<pre><code>public static salmonKey(string $pubkey): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$pubkey</code> string"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#convertsalmonkey","title":"convertSalmonKey","text":"<pre><code>public static convertSalmonKey(string $key): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/","title":"LDSignatures","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\LDSignatures</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#verify","title":"verify","text":"<pre><code>public static verify(mixed $data, mixed $pubkey): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$pubkey</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#dopplesign","title":"dopplesign","text":"<pre><code>public static dopplesign(mixed&amp; $data, mixed $channel): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#sign","title":"sign","text":"<pre><code>public static sign(mixed $data, mixed $channel): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#signable_data","title":"signable_data","text":"<pre><code>public static signable_data(mixed $data): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#signable_options","title":"signable_options","text":"<pre><code>public static signable_options(mixed $options): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$options</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#hash","title":"hash","text":"<pre><code>public static hash(mixed $obj): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$obj</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#normalise","title":"normalise","text":"<pre><code>public static normalise(mixed $data): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#salmon_sign","title":"salmon_sign","text":"<pre><code>public static salmon_sign(mixed $data, mixed $channel): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$channel</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Libsync/","title":"Libsync","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Libsync</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Libsync/#build_sync_packet","title":"build_sync_packet","text":"<pre><code>public static build_sync_packet(int $uid, array $packet = null, bool $groups_changed = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> int (optional) default 0 <code>$packet</code> array (optional) default null <code>$groups_changed</code> bool (optional) default false"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#process_channel_sync_delivery","title":"process_channel_sync_delivery","text":"<pre><code>public static process_channel_sync_delivery(string $sender, array $arr, array $deliveries): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string <code>$arr</code> array <code>$deliveries</code> array"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#sync_locations","title":"sync_locations","text":"<pre><code>public static sync_locations(array $sender, array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> array <code>$arr</code> array"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#keychange","title":"keychange","text":"<pre><code>public static keychange(mixed $channel, mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/","title":"Libzot","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Libzot</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Libzot/#new_uid","title":"new_uid","text":"<pre><code>public static new_uid(string $channel_nick): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_nick</code> string a unique nickname of controlling entity"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#make_xchan_hash","title":"make_xchan_hash","text":"<pre><code>public static make_xchan_hash(string $guid, string $pubkey): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$guid</code> string <code>$pubkey</code> string"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#get_hublocs","title":"get_hublocs","text":"<pre><code>public static get_hublocs(string $hash): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> string - xchan_hash <p>Return Value:</p> <p>of hubloc (hub location structures)</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#build_packet","title":"build_packet","text":"<pre><code>public static build_packet(array $channel, string $type = &amp;#039;activity&amp;#039;, array $recipients = null, array $msg = [], string $encoding = &amp;#039;activitystreams&amp;#039;, string $remote_key = null, string $methods = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array sender channel structure <code>$type</code> string packet type: one of 'ping', 'pickup', 'purge', 'refresh', 'keychange', 'force_refresh', 'notify', 'auth_check' <code>$recipients</code> array envelope recipients, array of portable_id's; empty for public posts <code>$msg</code> array optional message <code>$encoding</code> string optional encoding, default 'activitystreams' <code>$remote_key</code> string optional public site key of target hub used to encrypt entire packetNOTE: remote_key and encrypted packets are required for 'auth_check' packets, optional for all others <code>$methods</code> string optional comma separated list of encryption methods @ref best_algorithm()"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#best_algorithm","title":"best_algorithm","text":"<pre><code>public static best_algorithm(string $methods): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$methods</code> string Comma separated list of encryption methods <p>Return Value:</p> <p>first match from our site method preferences Crypto::methods() array of a method which is common to both sites; or 'aes256cbc' if no matches are found.</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zot","title":"zot","text":"<pre><code>public static zot(string $url, string $data, array $channel = null, array $crypto = null): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> string <code>$data</code> string <code>$channel</code> array (required if using zot6 delivery) <code>$crypto</code> array (required if encrypted httpsig, requires hubloc_sitekey and site_crypto elements) <p>Return Value:</p> <p>see z_post_url() for returned data format</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\z_post_url() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#refresh","title":"refresh","text":"<pre><code>public static refresh(array $them, array $channel = null, bool $force = false): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$them</code> array =&gt; xchan structure of sender <code>$channel</code> array =&gt; local channel structure of target recipient, required for \"friending\" operations <code>$force</code> bool (optional) default false <p>Return Value:</p> <ul> <li> <ul> <li>\\b true if successful</li> </ul> </li> <li> <ul> <li>otherwise \\b false</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#gethub","title":"gethub","text":"<pre><code>public static gethub(array $arr, bool $multiple = false): array|null\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array an associative array which must contain: \\e string \\b id =&gt; id of conversant \\e string \\b id_sig =&gt; id signed with conversant's private key \\e string \\b location =&gt; URL of the origination hub of this communication \\e string \\b location_sig =&gt; URL signed with conversant's private key* \\e string \\b site_id =&gt; URL signed with conversant's private key <code>$multiple</code> bool (optional) default false <p>Return Value:</p> <ul> <li> <ul> <li>null if site is blacklisted or not found</li> </ul> </li> <li> <ul> <li>otherwise an array with an hubloc record</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#valid_hub","title":"valid_hub","text":"<pre><code>public static valid_hub(string $sender, string $site_id): null|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string <code>$site_id</code> string"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#register_hub","title":"register_hub","text":"<pre><code>public static register_hub(string $id): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> string <p>Return Value:</p> <p>An associative array with * \\e boolean \\b success * \\e string \\b message (optional, unused) error string only if success is false</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_xchan","title":"import_xchan","text":"<pre><code>public static import_xchan(array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array =&gt; json_decoded discovery packet <p>Return Value:</p> <p>An associative array with: * \\e boolean \\b success boolean true or false * \\e string \\b message (optional) error string only if success is false</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#process_response","title":"process_response","text":"<pre><code>public static process_response(string $hub, array $arr, array $outq): void\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hub</code> string - url of site we just contacted <code>$arr</code> array - output of z_post_url() <code>$outq</code> array - The queue structure attached to this request"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#fetch","title":"fetch","text":"<pre><code>public static fetch(array $arr): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array decrypted and json decoded notify packet from remote site <p>Return Value:</p> <p>from zot_import()</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\zot_import() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import","title":"import","text":"<pre><code>public static import(array $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array 'pickup' structure returned from remote site"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#is_top_level","title":"is_top_level","text":"<pre><code>public static is_top_level(array $env, object $act): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$env</code> array <code>$act</code> object"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#find_parent","title":"find_parent","text":"<pre><code>public static find_parent(mixed $env, mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$env</code> mixed <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#find_parent_owner_hashes","title":"find_parent_owner_hashes","text":"<pre><code>public static find_parent_owner_hashes(mixed $env, mixed $act): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$env</code> mixed <code>$act</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#public_recips","title":"public_recips","text":"<pre><code>public static public_recips(array $msg, object $act): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$msg</code> array <code>$act</code> object"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#process_delivery","title":"process_delivery","text":"<pre><code>public static process_delivery(string $sender, mixed $act, array $arr, array $deliveries, bool $relay, bool $public = false, bool $request = false, bool $force = false, mixed $is_collection_operation = false): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string <code>$act</code> mixed <code>$arr</code> array <code>$deliveries</code> array <code>$relay</code> bool <code>$public</code> bool (optional) default false <code>$request</code> bool (optional) default false <code>$force</code> bool (optional) default false - should only be set for manual fetch <code>$is_collection_operation</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#fetch_conversation","title":"fetch_conversation","text":"<pre><code>public static fetch_conversation(mixed $channel, mixed $mid, mixed $force = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$mid</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#remove_community_tag","title":"remove_community_tag","text":"<pre><code>public static remove_community_tag(string $sender, array $arr, int $uid): void\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string <code>$arr</code> array an associative array \\e int \\b verb \\e int \\b obj_type* \\e int \\b mid <code>$uid</code> int"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_imported_item","title":"update_imported_item","text":"<pre><code>public static update_imported_item(string $sender, array $item, array $orig, int $uid, bool $tag_delivery): void|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string <code>$item</code> array <code>$orig</code> array <code>$uid</code> int <code>$tag_delivery</code> bool <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\item_store_update() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#delete_imported_item","title":"delete_imported_item","text":"<pre><code>public static delete_imported_item(string $sender, mixed $act, array $item, int $uid, bool $relay): bool|int\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> string *  * \\e string \\b hash a xchan_hash <code>$act</code> mixed <code>$item</code> array <code>$uid</code> int <code>$relay</code> bool <p>Return Value:</p> <p>post_id</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#encode_locations","title":"encode_locations","text":"<pre><code>public static encode_locations(array $channel): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array an associative array which must contain* \\e string \\b channel_hash the hash of the channel <p>Return Value:</p> <p>an array with associative arrays</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\self::get_hublocs() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_site","title":"import_site","text":"<pre><code>public static import_site(array $arr): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <p>Return Value:</p> <p>true if updated or inserted</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#get_rpost_path","title":"get_rpost_path","text":"<pre><code>public static get_rpost_path(array $observer): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$observer</code> array *  * \\e string \\b xchan_url"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_author_zot","title":"import_author_zot","text":"<pre><code>public static import_author_zot(array $x): bool|string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$x</code> array <p>Return Value:</p> <p>return false or a hash</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zotinfo","title":"zotinfo","text":"<pre><code>public static zotinfo(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#site_info","title":"site_info","text":"<pre><code>public static site_info(): array\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_hub_connected","title":"update_hub_connected","text":"<pre><code>public static update_hub_connected(array $hub, string $site_id = &amp;#039;&amp;#039;): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hub</code> array <code>$site_id</code> string (optional, default empty) <p>Return Value:</p> <p>hubloc_url</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#sign","title":"sign","text":"<pre><code>public static sign(string $data, string $key, string $alg = &amp;#039;sha256&amp;#039;): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> string <code>$key</code> string <code>$alg</code> string (optional) default 'sha256'"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#verify","title":"verify","text":"<pre><code>public static verify(mixed $data, mixed $sig, mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$sig</code> mixed <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#is_zot_request","title":"is_zot_request","text":"<pre><code>public static is_zot_request(): bool\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zot_record_preferred","title":"zot_record_preferred","text":"<pre><code>public static zot_record_preferred(mixed $arr, mixed $check = &amp;#039;hubloc_network&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <code>$check</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_cached_hubloc","title":"update_cached_hubloc","text":"<pre><code>public static update_cached_hubloc(mixed $hubloc): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hubloc</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/","title":"Libzotdir","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Libzotdir</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#find_upstream_directory","title":"find_upstream_directory","text":"<pre><code>public static find_upstream_directory(int $dirmode): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$dirmode</code> int"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#check_upstream_directory","title":"check_upstream_directory","text":"<p>Directories may come and go over time. We will need to check that our directory server is still valid occasionally, and reset to something that is if our directory has gone offline for any reason</p> <pre><code>public static check_upstream_directory(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#get_directory_setting","title":"get_directory_setting","text":"<pre><code>public static get_directory_setting(mixed $observer, mixed $setting): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$observer</code> mixed <code>$setting</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#dir_sort_links","title":"dir_sort_links","text":"<pre><code>public static dir_sort_links(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#sync_directories","title":"sync_directories","text":"<pre><code>public static sync_directories(int $dirmode): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$dirmode</code> int ;"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#update_directory_entry","title":"update_directory_entry","text":"<pre><code>public static update_directory_entry(array $ud): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$ud</code> array Entry from update table"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#local_dir_update","title":"local_dir_update","text":"<pre><code>public static local_dir_update(int $uid, bool $force): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> int <code>$force</code> bool"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#import_directory_profile","title":"import_directory_profile","text":"<pre><code>public static import_directory_profile(string $hash, array $profile): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> string <code>$profile</code> array <p>Return Value:</p> <p>$updated if something changed</p>"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#import_directory_keywords","title":"import_directory_keywords","text":"<pre><code>public static import_directory_keywords(string $hash, array $keywords): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> string An xtag_hash <code>$keywords</code> array"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#update","title":"update","text":"<pre><code>public static update(string $hash, string $addr, bool $bump_date = true, mixed $flag = null): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> string the channel hash <code>$addr</code> string the channel url <code>$bump_date</code> bool (optional) default true <code>$flag</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#delete_by_hash","title":"delete_by_hash","text":"<pre><code>public static delete_by_hash(string $hash): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$hash</code> string the channel hash <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Mailer/","title":"Mailer","text":"<p>A class for sending emails.</p> <p>Based on the previous <code>z_mail</code> function, but adaped and made more robust and usable as a class.</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\Mailer</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Mailer/#params","title":"params","text":"<pre><code>private array $params\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Mailer/#__construct","title":"__construct","text":"<pre><code>public __construct(array $params = []): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$params</code> array"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#deliver","title":"deliver","text":"<pre><code>public deliver(): bool\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/","title":"MarkdownSoap","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\MarkdownSoap</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#str","title":"str","text":"<pre><code>private string $str\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#token","title":"token","text":"<pre><code>private string $token\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#clean","title":"clean","text":"<pre><code>public clean(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#extract_code","title":"extract_code","text":"<pre><code>public extract_code(string $s): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> string <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\encode_code() - * \\Zotlabs\\Lib\\putback_code() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#encode_code","title":"encode_code","text":"<pre><code>public encode_code(mixed $matches): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$matches</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#decode_code","title":"decode_code","text":"<pre><code>public decode_code(mixed $matches): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$matches</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#putback_code","title":"putback_code","text":"<pre><code>public putback_code(string $s): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> string <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\extract_code() - * \\Zotlabs\\Lib\\decode_code() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#purify","title":"purify","text":"<pre><code>public purify(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#protect_autolinks","title":"protect_autolinks","text":"<pre><code>public protect_autolinks(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#unprotect_autolinks","title":"unprotect_autolinks","text":"<pre><code>public unprotect_autolinks(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#escape","title":"escape","text":"<pre><code>public escape(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#unescape","title":"unescape","text":"<pre><code>public static unescape(string $s): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/","title":"MessageFilter","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\MessageFilter</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#evaluate","title":"evaluate","text":"<pre><code>public static evaluate(mixed $item, mixed $incl, mixed $excl): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$incl</code> mixed <code>$excl</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#test_condition","title":"test_condition","text":"<pre><code>public static test_condition(string $s, array $item): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$s</code> string <code>$item</code> array <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Multibase/","title":"Multibase","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Multibase</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Multibase/#key","title":"key","text":"<pre><code>protected $key\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Multibase/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#publickey","title":"publicKey","text":"<pre><code>public publicKey(mixed $key): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#secretkey","title":"secretKey","text":"<pre><code>public secretKey(mixed $key): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#decode","title":"decode","text":"<pre><code>public decode(mixed $key, mixed $binary = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed <code>$binary</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/PConfig/","title":"PConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\PConfig</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/PConfig/#load","title":"Load","text":"<pre><code>public static Load(string $uid): void|false\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> string The channel_id <p>Return Value:</p> <p>Nothing or false if $uid is null or false</p>"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#get","title":"Get","text":"<pre><code>public static Get(string $uid, string $family, string $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> string The channel_id <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to query <code>$default</code> mixed (optional, default false)Default value to return if key does not exist <p>Return Value:</p> <p>Stored value or false if it does not exist</p>"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#set","title":"Set","text":"<pre><code>public static Set(string $uid, string $family, string $key, string $value, string $updated = NULL): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> string The channel_id <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to set <code>$value</code> string The value to store <code>$updated</code> string (optional)The datetime to store <p>Return Value:</p> <p>Stored $value or false</p>"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(string $uid, string $family, string $key, string $updated = NULL): bool\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$uid</code> string The channel_id <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to delete <code>$updated</code> string (optional)The datetime to store <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Permcat/","title":"Permcat","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Permcat</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Permcat/#permcats","title":"permcats","text":"<pre><code>private array $permcats\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Permcat/#__construct","title":"__construct","text":"<pre><code>public __construct(int $channel_id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#listing","title":"listing","text":"<pre><code>public listing(): array\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#fetch","title":"fetch","text":"<pre><code>public fetch(string $name): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string <p>Return Value:</p> <ul> <li> <ul> <li>\\e array with permcats</li> </ul> </li> <li> <ul> <li>\\e bool \\b error if $name not found in permcats true</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#load_permcats","title":"load_permcats","text":"<pre><code>public load_permcats(mixed $uid): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#find_permcat","title":"find_permcat","text":"<pre><code>public static find_permcat(mixed $arr, mixed $name): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#update","title":"update","text":"<pre><code>public static update(mixed $channel_id, mixed $name, mixed $permarr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> mixed <code>$name</code> mixed <code>$permarr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#delete","title":"delete","text":"<pre><code>public static delete(mixed $channel_id, mixed $name): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> mixed <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#assign","title":"assign","text":"<pre><code>public static assign(array $channel, string $role, array $contacts): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> array <code>$role</code> string the name of the role <code>$contacts</code> array an array of contact hashes <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/","title":"PermissionDescription","text":"<p>Encapsulates information the ACL dialog requires to describe permission settings for an item with an empty ACL.</p> <p>i.e the caption, icon, and tooltip for the no-ACL option in the ACL dialog.</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\PermissionDescription</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#global_perm","title":"global_perm","text":"<pre><code>private $global_perm\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#channel_perm","title":"channel_perm","text":"<pre><code>private $channel_perm\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fallback_description","title":"fallback_description","text":"<pre><code>private $fallback_description\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromdescription","title":"fromDescription","text":"<p>If the interpretation of an empty ACL can't be summarised with a global default permission or a specific permission setting then use this method and describe what it means instead.</p> <pre><code>public static fromDescription(string $description): \\Zotlabs\\Lib\\a\n</code></pre> <p>Remember to localize the description first.</p> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$description</code> string - the localized caption for the no-ACL option in the ACL dialog. <p>Return Value:</p> <p>new instance of PermissionDescription</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromstandalonepermission","title":"fromStandalonePermission","text":"<p>Use this method only if the interpretation of an empty ACL doesn't fall back to a global default permission. You should pass one of the constants from boot.php - PERMS_PUBLIC, PERMS_NETWORK etc.</p> <pre><code>public static fromStandalonePermission(int $perm): \\Zotlabs\\Lib\\a\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$perm</code> int - a single enumerated constant permission - PERMS_PUBLIC, PERMS_NETWORK etc. <p>Return Value:</p> <p>new instance of PermissionDescription</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromglobalpermission","title":"fromGlobalPermission","text":"<p>This is the preferred way to create a PermissionDescription, as it provides the most details.</p> <pre><code>public static fromGlobalPermission(string $permname): \\Zotlabs\\Lib\\a\n</code></pre> <p>Use this method if you know an empty ACL will result in one of the global default permissions being used, such as channel_r_stream (for which you would pass 'view_stream').</p> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$permname</code> string - a key for the global perms array from get_perms() in permissions.php,e.g. 'view_stream', 'view_profile', etc. <p>Return Value:</p> <p>new instance of PermissionDescription</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_description","title":"get_permission_description","text":"<p>Gets a localized description of the permission, or a generic message if the permission is unknown.</p> <pre><code>public get_permission_description(): string\n</code></pre> <p>Return Value:</p> <p>description</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_icon","title":"get_permission_icon","text":"<p>Returns an icon css class name if an appropriate one is available, e.g. \"bi-globe\" for Public, otherwise returns empty string.</p> <pre><code>public get_permission_icon(): string\n</code></pre> <p>Return Value:</p> <p>icon css class name (often FontAwesome)</p>"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_origin_description","title":"get_permission_origin_description","text":"<p>Returns a localized description of where the permission came from, if this is known.</p> <pre><code>public get_permission_origin_description(): string\n</code></pre> <p>If it's not know, or if the permission is standalone and didn't come from a default permission setting, then empty string is returned.</p> <p>Return Value:</p> <p>description or empty string</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Queue/","title":"Queue","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Queue</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Queue/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Queue/#update","title":"update","text":"<pre><code>public static update(mixed $id, mixed $add_priority): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$add_priority</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Queue/#remove","title":"remove","text":"<pre><code>public static remove(mixed $id, mixed $channel_id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$channel_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Queue/#remove_by_posturl","title":"remove_by_posturl","text":"<pre><code>public static remove_by_posturl(mixed $posturl): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$posturl</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Queue/#set_delivered","title":"set_delivered","text":"<pre><code>public static set_delivered(mixed $id, mixed $channel): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Queue/#insert","title":"insert","text":"<pre><code>public static insert(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Queue/#deliver","title":"deliver","text":"<pre><code>public static deliver(mixed $outq, mixed $immediate = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$outq</code> mixed <code>$immediate</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/","title":"QueueWorker","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\QueueWorker</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#queueworker_1","title":"queueworker","text":"<pre><code>public static $queueworker\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#maxworkers","title":"maxworkers","text":"<pre><code>public static $maxworkers\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#workermaxage","title":"workermaxage","text":"<pre><code>public static $workermaxage\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#workersleep","title":"workersleep","text":"<pre><code>public static $workersleep\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#default_priorities","title":"default_priorities","text":"<pre><code>public static $default_priorities\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#long_running_cmd","title":"long_running_cmd","text":"<pre><code>public static $long_running_cmd\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#summon","title":"Summon","text":"<pre><code>public static Summon(mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argv</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#release","title":"Release","text":"<pre><code>public static Release(mixed $argv): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$argv</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkercount","title":"GetWorkerCount","text":"<pre><code>public static GetWorkerCount(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkerid","title":"GetWorkerID","text":"<pre><code>public static GetWorkerID(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkid","title":"getWorkId","text":"<pre><code>private static getWorkId(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#process","title":"Process","text":"<pre><code>public static Process(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#clearqueue","title":"ClearQueue","text":"<pre><code>public static ClearQueue(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getuuid","title":"getUuid","text":"<pre><code>private static getUuid(string $data): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> string <p>Return Value:</p> <p>$uuid</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/SConfig/","title":"SConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\SConfig</code></li> </ul> <p>See Also:</p> <ul> <li>\\Zotlabs\\Lib\\XConfig - </li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/SConfig/#load","title":"Load","text":"<pre><code>public static Load(mixed $server_id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$server_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#get","title":"Get","text":"<pre><code>public static Get(mixed $server_id, mixed $family, mixed $key, mixed $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$server_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$default</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#set","title":"Set","text":"<pre><code>public static Set(mixed $server_id, mixed $family, mixed $key, mixed $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$server_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <code>$value</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(mixed $server_id, mixed $family, mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$server_id</code> mixed <code>$family</code> mixed <code>$key</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Share/","title":"Share","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Share</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Share/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Share/#item","title":"item","text":"<pre><code>private $item\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Share/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Share/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $post_id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$post_id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Share/#obj","title":"obj","text":"<pre><code>public obj(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Share/#bbcode","title":"bbcode","text":"<pre><code>public bbcode(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/","title":"SvgSanitizer","text":"<p>SVGSantiizer</p> <p>Whitelist-based PHP SVG sanitizer.</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\SvgSanitizer</code></li> </ul> <p>See Also:</p> <ul> <li>https://github.com/alister-/SVG-Sanitizer} - @author Alister Norris @copyright Copyright (c) 2013 Alister Norris @license http://opensource.org/licenses/mit-license.php The MIT License @package svgsanitizer</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#xmldoc","title":"xmlDoc","text":"<pre><code>private $xmlDoc\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#removedattrs","title":"removedattrs","text":"<pre><code>private $removedattrs\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#allowed_functions","title":"allowed_functions","text":"<pre><code>private static $allowed_functions\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#whitelist","title":"whitelist","text":"<pre><code>private static $whitelist\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#load","title":"load","text":"<pre><code>public load(mixed $file): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#loadxml","title":"loadXML","text":"<pre><code>public loadXML(mixed $str): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$str</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#sanitize","title":"sanitize","text":"<pre><code>public sanitize(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#savesvg","title":"saveSVG","text":"<pre><code>public saveSVG(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/System/","title":"System","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\System</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/System/#get_platform_name","title":"get_platform_name","text":"<pre><code>public static get_platform_name(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_site_name","title":"get_site_name","text":"<pre><code>public static get_site_name(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_version","title":"get_project_version","text":"<pre><code>public static get_project_version(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_update_version","title":"get_update_version","text":"<pre><code>public static get_update_version(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_notify_icon","title":"get_notify_icon","text":"<pre><code>public static get_notify_icon(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_site_icon","title":"get_site_icon","text":"<pre><code>public static get_site_icon(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_link","title":"get_project_link","text":"<pre><code>public static get_project_link(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_srclink","title":"get_project_srclink","text":"<pre><code>public static get_project_srclink(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_server_role","title":"get_server_role","text":"<pre><code>public static get_server_role(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_zot_revision","title":"get_zot_revision","text":"<pre><code>public static get_zot_revision(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#get_std_version","title":"get_std_version","text":"<pre><code>public static get_std_version(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/System/#compatible_project","title":"compatible_project","text":"<pre><code>public static compatible_project(mixed $p): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$p</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/","title":"Techlevels","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Techlevels</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Techlevels/#levels","title":"levels","text":"<pre><code>public static levels(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Text/","title":"Text","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Text</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Text/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Text/#escape_tags","title":"escape_tags","text":"<p>use this on \"body\" or \"content\" input where angle chars shouldn't be removed, and allow them to be safely displayed.</p> <pre><code>public static escape_tags(string $string): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$string</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/","title":"ThreadItem","text":"<p>A thread item</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\ThreadItem</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#data","title":"data","text":"<pre><code>public $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#template","title":"template","text":"<pre><code>private $template\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#comment_box_template","title":"comment_box_template","text":"<pre><code>private $comment_box_template\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#commentable","title":"commentable","text":"<pre><code>private $commentable\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#reactions","title":"reactions","text":"<pre><code>private $reactions\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#toplevel","title":"toplevel","text":"<pre><code>private $toplevel\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#children","title":"children","text":"<pre><code>private $children\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#parent","title":"parent","text":"<pre><code>private $parent\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#conversation","title":"conversation","text":"<pre><code>private $conversation\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#redirect_url","title":"redirect_url","text":"<pre><code>private $redirect_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_url","title":"owner_url","text":"<pre><code>private $owner_url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_photo","title":"owner_photo","text":"<pre><code>private $owner_photo\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_name","title":"owner_name","text":"<pre><code>private $owner_name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#wall_to_wall","title":"wall_to_wall","text":"<pre><code>private $wall_to_wall\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#threaded","title":"threaded","text":"<pre><code>private $threaded\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#visiting","title":"visiting","text":"<pre><code>private $visiting\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#channel","title":"channel","text":"<pre><code>private $channel\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#display_mode","title":"display_mode","text":"<pre><code>private $display_mode\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#reload","title":"reload","text":"<pre><code>private $reload\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#mid_uuid_map","title":"mid_uuid_map","text":"<pre><code>private $mid_uuid_map\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $data): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_template_data","title":"get_template_data","text":"<p>Get data in a form usable by a conversation template</p> <pre><code>public get_template_data(mixed $conv_responses, mixed $mid_uuid_map, mixed $thread_level = 1, mixed $conv_flags = []): mixed\n</code></pre> <p>Returns: _ The data requested on success _ false on failure</p> <p>Parameters:</p> Parameter Type Description <code>$conv_responses</code> mixed <code>$mid_uuid_map</code> mixed <code>$thread_level</code> mixed <code>$conv_flags</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_id","title":"get_id","text":"<pre><code>public get_id(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_display_mode","title":"get_display_mode","text":"<pre><code>public get_display_mode(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_display_mode","title":"set_display_mode","text":"<pre><code>public set_display_mode(mixed $mode): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mode</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_threaded","title":"is_threaded","text":"<pre><code>public is_threaded(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_reload","title":"set_reload","text":"<pre><code>public set_reload(mixed $val): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$val</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_reload","title":"get_reload","text":"<pre><code>public get_reload(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_commentable","title":"set_commentable","text":"<pre><code>public set_commentable(mixed $val): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$val</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_commentable","title":"is_commentable","text":"<pre><code>public is_commentable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#add_child","title":"add_child","text":"<p>Add a child item</p> <pre><code>public add_child(mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_child","title":"get_child","text":"<p>Get a child by its ID</p> <pre><code>public get_child(mixed $id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_children","title":"get_children","text":"<p>Get all our children</p> <pre><code>public get_children(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_parent","title":"set_parent","text":"<p>Set our parent</p> <pre><code>protected set_parent(mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#remove_parent","title":"remove_parent","text":"<p>Remove our parent</p> <pre><code>protected remove_parent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#remove_child","title":"remove_child","text":"<p>Remove a child</p> <pre><code>public remove_child(mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_parent","title":"get_parent","text":"<p>Get parent item</p> <pre><code>protected get_parent(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_conversation","title":"set_conversation","text":"<p>set conversation</p> <pre><code>public set_conversation(mixed $conv): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$conv</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_conversation","title":"get_conversation","text":"<p>get conversation</p> <pre><code>public get_conversation(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_data","title":"get_data","text":"<p>Get raw data</p> <pre><code>public get_data(): mixed\n</code></pre> <p>We shouldn't need this</p>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_data_value","title":"get_data_value","text":"<p>Get a data value</p> <pre><code>public get_data_value(mixed $name): mixed\n</code></pre> <p>Returns: _ value on success _ false on failure</p> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_template","title":"get_template","text":"<p>Get template</p> <pre><code>public get_template(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_template","title":"set_template","text":"<pre><code>public set_template(mixed $t): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$t</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_toplevel","title":"is_toplevel","text":"<p>Check if this is a toplevel post</p> <pre><code>private is_toplevel(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#count_descendants","title":"count_descendants","text":"<p>Count the total of our descendants</p> <pre><code>private count_descendants(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#count_unseen_descendants","title":"count_unseen_descendants","text":"<pre><code>private count_unseen_descendants(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_comment_box_template","title":"get_comment_box_template","text":"<p>Get the template for the comment box</p> <pre><code>private get_comment_box_template(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_comment_box","title":"get_comment_box","text":"<p>Get the comment box</p> <pre><code>private get_comment_box(): mixed\n</code></pre> <p>Returns: _ The comment box string (empty if no comment box) _ false on failure</p>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_redirect_url","title":"get_redirect_url","text":"<pre><code>private get_redirect_url(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#check_wall_to_wall","title":"check_wall_to_wall","text":"<p>Check if we are a wall to wall or announce item and set the relevant properties</p> <pre><code>protected check_wall_to_wall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_wall_to_wall","title":"is_wall_to_wall","text":"<pre><code>private is_wall_to_wall(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_url","title":"get_owner_url","text":"<pre><code>private get_owner_url(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_photo","title":"get_owner_photo","text":"<pre><code>private get_owner_photo(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_name","title":"get_owner_name","text":"<pre><code>private get_owner_name(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_visiting","title":"is_visiting","text":"<pre><code>private is_visiting(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/","title":"ThreadListener","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\ThreadListener</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#isenabled","title":"isEnabled","text":"<pre><code>public static isEnabled(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#store","title":"store","text":"<pre><code>public static store(mixed $target_id, mixed $portable_id, mixed $ltype): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$target_id</code> mixed <code>$portable_id</code> mixed <code>$ltype</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#fetch","title":"fetch","text":"<pre><code>public static fetch(mixed $target_id, mixed $portable_id, mixed $ltype): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$target_id</code> mixed <code>$portable_id</code> mixed <code>$ltype</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#fetch_by_target","title":"fetch_by_target","text":"<pre><code>public static fetch_by_target(mixed $target_id, mixed $ltype): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$target_id</code> mixed <code>$ltype</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#delete_by_target","title":"delete_by_target","text":"<pre><code>public static delete_by_target(mixed $target_id, mixed $ltype): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$target_id</code> mixed <code>$ltype</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#delete_by_pid","title":"delete_by_pid","text":"<pre><code>public static delete_by_pid(mixed $portable_id, mixed $ltype): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$portable_id</code> mixed <code>$ltype</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/","title":"ThreadStream","text":"<p>A list of threads</p> <ul> <li>Full name: <code>\\Zotlabs\\Lib\\ThreadStream</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#threads","title":"threads","text":"<pre><code>private $threads\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#mode","title":"mode","text":"<pre><code>private $mode\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#observer","title":"observer","text":"<pre><code>private $observer\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#writable","title":"writable","text":"<pre><code>private $writable\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#commentable","title":"commentable","text":"<pre><code>private $commentable\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#uploadable","title":"uploadable","text":"<pre><code>private $uploadable\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#profile_owner","title":"profile_owner","text":"<pre><code>private $profile_owner\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#preview","title":"preview","text":"<pre><code>private $preview\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#prepared_item","title":"prepared_item","text":"<pre><code>private $prepared_item\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#reload","title":"reload","text":"<pre><code>public $reload\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#cipher","title":"cipher","text":"<pre><code>private $cipher\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $mode, mixed $preview, mixed $uploadable, mixed $prepared_item = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mode</code> mixed <code>$preview</code> mixed <code>$uploadable</code> mixed <code>$prepared_item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#set_mode","title":"set_mode","text":"<p>Set the mode we'll be displayed on</p> <pre><code>private set_mode(mixed $mode): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$mode</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_mode","title":"get_mode","text":"<p>Get mode</p> <pre><code>public get_mode(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_writable","title":"is_writable","text":"<p>Check if page is writable</p> <pre><code>public is_writable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_commentable","title":"is_commentable","text":"<pre><code>public is_commentable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_uploadable","title":"is_uploadable","text":"<pre><code>public is_uploadable(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_preview","title":"is_preview","text":"<p>Check if page is a preview</p> <pre><code>public is_preview(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_profile_owner","title":"get_profile_owner","text":"<p>Get profile owner</p> <pre><code>public get_profile_owner(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#set_profile_owner","title":"set_profile_owner","text":"<pre><code>public set_profile_owner(mixed $uid): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_observer","title":"get_observer","text":"<pre><code>public get_observer(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_cipher","title":"get_cipher","text":"<pre><code>public get_cipher(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#add_thread","title":"add_thread","text":"<p>Add a thread to the conversation</p> <pre><code>public add_thread(mixed $item): mixed\n</code></pre> <p>Returns: _ The inserted item on success _ false on failure</p> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_template_data","title":"get_template_data","text":"<p>Get data in a form usable by a conversation template</p> <pre><code>public get_template_data(mixed $conv_responses, mixed $mid_uuid_map): mixed\n</code></pre> <p>We should find a way to avoid using those arguments (at least most of them)</p> <p>Returns:      _ The data requested on success      _ false on failure</p> <p>Parameters:</p> Parameter Type Description <code>$conv_responses</code> mixed <code>$mid_uuid_map</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_thread","title":"get_thread","text":"<p>Get a thread based on its item id</p> <pre><code>private get_thread(mixed $id): mixed\n</code></pre> <p>Returns: _ The found item on success _ false on failure</p> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Verify/","title":"Verify","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Verify</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Verify/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Verify/#create","title":"create","text":"<pre><code>public static create(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed <code>$channel_id</code> mixed <code>$token</code> mixed <code>$meta</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Verify/#match","title":"match","text":"<pre><code>public static match(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed <code>$channel_id</code> mixed <code>$token</code> mixed <code>$meta</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Verify/#get_meta","title":"get_meta","text":"<pre><code>public static get_meta(mixed $type, mixed $channel_id, mixed $token): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed <code>$channel_id</code> mixed <code>$token</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Verify/#purge","title":"purge","text":"<pre><code>public static purge(string $type, string $interval): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$type</code> string Verify type <code>$interval</code> string SQL compatible time interval <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/","title":"Webfinger","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Webfinger</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#server","title":"server","text":"<pre><code>private static $server\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#resource","title":"resource","text":"<pre><code>private static $resource\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#exec","title":"exec","text":"<pre><code>public static exec(mixed $resource): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$resource</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#parse_resource","title":"parse_resource","text":"<pre><code>public static parse_resource(mixed $resource): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$resource</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#zot_url","title":"zot_url","text":"<pre><code>public static zot_url(mixed $resource): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$resource</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/XConfig/","title":"XConfig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\XConfig</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/XConfig/#load","title":"Load","text":"<pre><code>public static Load(string $xchan): void|false\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$xchan</code> string The observer's hash <p>Return Value:</p> <p>Returns false if xchan is not set</p>"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#get","title":"Get","text":"<pre><code>public static Get(string $xchan, string $family, string $key, bool $default = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$xchan</code> string The observer's hash <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to query <code>$default</code> bool (optional) default false <p>Return Value:</p> <p>Stored $value or false if it does not exist</p>"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#set","title":"Set","text":"<pre><code>public static Set(string $xchan, string $family, string $key, string $value): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$xchan</code> string The observer's hash <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to set <code>$value</code> string The value to store <p>Return Value:</p> <p>Stored $value or false</p>"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#delete","title":"Delete","text":"<pre><code>public static Delete(string $xchan, string $family, string $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$xchan</code> string The observer's hash <code>$family</code> string The category of the configuration value <code>$key</code> string The configuration key to delete <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/","title":"ZotURL","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\ZotURL</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#fetch","title":"fetch","text":"<pre><code>public static fetch(mixed $url, mixed $channel): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#is_zoturl","title":"is_zoturl","text":"<pre><code>public static is_zoturl(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#lookup","title":"lookup","text":"<pre><code>public static lookup(mixed $portable_id): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$portable_id</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/","title":"Zotfinger","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Zotfinger</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/#exec","title":"exec","text":"<pre><code>public static exec(mixed $resource, mixed $channel = null, mixed $verify = true, mixed $recurse = true): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$resource</code> mixed <code>$channel</code> mixed <code>$verify</code> mixed <code>$recurse</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/","title":"HelpHelperTrait","text":""},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#helphelpertrait","title":"HelpHelperTrait","text":"<ul> <li>Full name: <code>\\Zotlabs\\Lib\\Traits\\HelpHelperTrait</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#file_name","title":"file_name","text":"<pre><code>private string $file_name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#file_type","title":"file_type","text":"<pre><code>private string $file_type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#lang","title":"lang","text":"<p>Associative array containing the detected language.</p> <pre><code>private array $lang\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#determine_help_language","title":"determine_help_language","text":"<p>Determines help language.</p> <pre><code>private determine_help_language(): mixed\n</code></pre> <p>If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent.</p> <p>Updates the <code>$lang</code> property of the module.</p>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#find_help_file","title":"find_help_file","text":"<p>Find the full path name of the file, given it's base path and the language of the request.</p> <pre><code>private find_help_file(string $base_path, string $lang): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base_path</code> string The path of the file to find, relative to thedoc root path, and without the extension. <code>$lang</code> string"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#missing_translation","title":"missing_translation","text":"<pre><code>public missing_translation(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#missing_translation_message","title":"missing_translation_message","text":"<pre><code>public missing_translation_message(): string\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Achievements/","title":"Achievements","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Achievements</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Achievements/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Achievements/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Achievements/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Achievements/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Achievements/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Achievements/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Acl/","title":"Acl","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Acl</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Acl/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Acl/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Acl/#navbar_complete","title":"navbar_complete","text":"<pre><code>public navbar_complete(mixed&amp; $a): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Acl/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Acl/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Acl/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Acl/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Activity/","title":"Activity","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Activity</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Activity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Activity/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Activity/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Activity/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Activity/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Activity/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/","title":"Admin","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/#sm","title":"sm","text":"<pre><code>private $sm\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/#admin_page_summary","title":"admin_page_summary","text":"<pre><code>public admin_page_summary(): string\n</code></pre> <p>Return Value:</p> <p>HTML from parsed admin_summary.tpl</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Affinity/","title":"Affinity","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Affinity</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Affinity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Affinity/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Affinity/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Affinity/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Affinity/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Affinity/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Affinity/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Album/","title":"Album","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Album</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Album/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Album/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Album/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Album/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Album/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Album/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Api/","title":"Api","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Api</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Api/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Api/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Api/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Api/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Api/#oauth_get_client","title":"oauth_get_client","text":"<pre><code>public oauth_get_client(mixed $request): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$request</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Api/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Api/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Api/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Api/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Appman/","title":"Appman","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Appman</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Appman/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Appman/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Appman/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Appman/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Appman/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Appman/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Appman/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Apporder/","title":"Apporder","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Apporder</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Apporder/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apporder/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Apporder/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Apporder/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apporder/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Apporder/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Apporder/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Apps/","title":"Apps","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Apps</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Apps/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apps/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Apps/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apps/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Apps/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Apps/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Apschema/","title":"Apschema","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Apschema</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Apschema/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apschema/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Apschema/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Apschema/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Apschema/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Apschema/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Attach/","title":"Attach","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Attach</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Attach/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Attach/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach/#zip_archive_handler","title":"zip_archive_handler","text":"<pre><code>public zip_archive_handler(mixed $zip, mixed $attach_ids, mixed $attach_path, mixed $pass = 1): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$zip</code> mixed <code>$attach_ids</code> mixed <code>$attach_path</code> mixed <code>$pass</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Attach/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Attach/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/","title":"Attach_edit","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Attach_edit</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Authorize/","title":"Authorize","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Authorize</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Authorize/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Authorize/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Authorize/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Authorize/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Authorize/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Authorize/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Authorize/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Authtest/","title":"Authtest","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Authtest</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Authtest/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Authtest/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Authtest/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Authtest/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Authtest/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Authtest/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Block/","title":"Block","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Block</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Block/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Block/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Block/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Block/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Block/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Block/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Block/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Blocks/","title":"Blocks","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Blocks</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Blocks/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Blocks/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Blocks/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Blocks/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Blocks/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Blocks/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Blocks/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/","title":"Bookmarks","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Bookmarks</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/","title":"Branchtopic","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Branchtopic</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Cal/","title":"Cal","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Cal</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Cal/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cal/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cal/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Cal/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cal/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cal/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cal/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/","title":"Cdav","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Cdav</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cdav/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#activate","title":"activate","text":"<pre><code>public activate(mixed $pdo, mixed $channel): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$pdo</code> mixed <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get_cdav_data","title":"get_cdav_data","text":"<pre><code>public get_cdav_data(mixed $id, mixed $table): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$table</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Cdav/#request_to_array","title":"request_to_array","text":"<pre><code>public request_to_array(mixed $req): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$req</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Cdav/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cdav/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/","title":"Changeaddr","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Changeaddr</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Channel/","title":"Channel","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Channel</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Channel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Channel/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Channel/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/","title":"Channel_calendar","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Channel_calendar</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Chanview/","title":"Chanview","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Chanview</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Chanview/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chanview/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Chanview/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chanview/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Chanview/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Chanview/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/","title":"Chat","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Chat</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Chat/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chat/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chat/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Chat/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/","title":"Chatsvc","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Chatsvc</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud/","title":"Cloud","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Cloud</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Cloud/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cloud/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Cloud/#davexception","title":"DAVException","text":"<pre><code>public DAVException(mixed $err): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$err</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Cloud/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cloud/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/","title":"Cloud_tiles","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Cloud_tiles</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Common/","title":"Common","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Common</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Common/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Common/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Common/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Common/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Common/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Common/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Common/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/","title":"Connect","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Connect</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Connect/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connect/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connect/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Connect/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Connections/","title":"Connections","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Connections</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Connections/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connections/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connections/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Connections/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connections/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connections/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Connections/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/","title":"Connedit","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Connedit</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connedit/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#connedit_clone","title":"connedit_clone","text":"<pre><code>public connedit_clone(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Connedit/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Connedit/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/","title":"Contactedit","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Contactedit</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Contactedit/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#contactedit_clone","title":"contactedit_clone","text":"<pre><code>public contactedit_clone(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#do_action","title":"do_action","text":"<pre><code>public do_action(mixed $contact, mixed $cmd): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$contact</code> mixed <code>$cmd</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get_tools","title":"get_tools","text":"<pre><code>public get_tools(mixed $contact): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$contact</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Contactedit/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/","title":"Contactgroup","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Contactgroup</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Conversation/","title":"Conversation","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Conversation</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Conversation/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Conversation/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Conversation/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Conversation/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Conversation/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Conversation/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/","title":"Cover_photo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Cover_photo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): void\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#cover_photo_crop_ui_head","title":"cover_photo_crop_ui_head","text":"<pre><code>public cover_photo_crop_ui_head(mixed&amp; $a, mixed $ph, mixed $hash, mixed $smallest): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed <code>$ph</code> mixed <code>$hash</code> mixed <code>$smallest</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Dav/","title":"Dav","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Dav</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Dav/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dav/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Dav/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dav/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Dav/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Dav/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/","title":"Defperms","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Defperms</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Defperms/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#defperms_clone","title":"defperms_clone","text":"<pre><code>public defperms_clone(mixed&amp; $a): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Defperms/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Defperms/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Defperms/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Dircensor/","title":"Dircensor","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Dircensor</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dircensor/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dircensor/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Directory/","title":"Directory","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Directory</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Directory/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Directory/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Directory/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Directory/#reorder_results","title":"reorder_results","text":"<pre><code>public static reorder_results(mixed $results, mixed $suggests): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$results</code> mixed <code>$suggests</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Directory/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Directory/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Directory/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Directory/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/","title":"Dirsearch","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Dirsearch</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_query_build","title":"dir_query_build","text":"<pre><code>public dir_query_build(mixed $joiner, mixed $field, mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$joiner</code> mixed <code>$field</code> mixed <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_flag_build","title":"dir_flag_build","text":"<pre><code>public dir_flag_build(mixed $joiner, mixed $field, mixed $bit, mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$joiner</code> mixed <code>$field</code> mixed <code>$bit</code> mixed <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_parse_query","title":"dir_parse_query","text":"<pre><code>public dir_parse_query(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#list_public_sites","title":"list_public_sites","text":"<pre><code>public list_public_sites(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Display/","title":"Display","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Display</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Display/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Display/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Display/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Display/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Display/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Display/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Display/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Dreport/","title":"Dreport","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Dreport</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Dreport/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dreport/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Dreport/#dreport_gravity_sort","title":"dreport_gravity_sort","text":"<pre><code>private static dreport_gravity_sort(mixed $a, mixed $b): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed <code>$b</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Dreport/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Dreport/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Dreport/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Dreport/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Editblock/","title":"Editblock","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Editblock</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Editblock/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editblock/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editblock/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Editblock/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editblock/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editblock/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Editblock/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/","title":"Editlayout","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Editlayout</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editlayout/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editlayout/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Editpost/","title":"Editpost","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Editpost</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Editpost/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editpost/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Editpost/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editpost/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editpost/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Editpost/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/","title":"Editwebpage","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Editwebpage</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/","title":"Email_resend","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Email_resend</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Email_resend/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Email_resend/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/","title":"Email_validation","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Email_validation</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Email_validation/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Email_validation/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Embed/","title":"Embed","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Embed</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Embed/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Embed/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Embed/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Embed/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Embed/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Embed/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/","title":"Embedphotos","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Embedphotos</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): string\n</code></pre> <p>Return Value:</p> <p>A JSON string.</p>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#photolink","title":"photolink","text":"<pre><code>protected static photolink(mixed $resource): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$resource</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#embedphotos_widget_album","title":"embedphotos_widget_album","text":"<pre><code>protected embedphotos_widget_album(array $args): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> array associative array with \\e array \\b channel \\e string \\b album <p>Return Value:</p> <p>with HTML code from 'photo_album.tpl'</p> <p>See Also:</p> <ul> <li> <ul> <li>\\Zotlabs\\Widget\\Album::widget()</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#embedphotos_album_list","title":"embedphotos_album_list","text":"<pre><code>protected embedphotos_album_list(): null|array\n</code></pre> <p>See Also:</p> <ul> <li>\\Zotlabs\\Module\\photos_albums_list() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Emoji/","title":"Emoji","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Emoji</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Emoji/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Emoji/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Emoji/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Emoji/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Emoji/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Emoji/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Event/","title":"Event","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Event</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Event/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Event/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Event/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Event/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Event/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Event/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/","title":"Fbrowser","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Fbrowser</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#folder1","title":"folder1","text":"<pre><code>private static folder1(mixed $el): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$el</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#files1","title":"files1","text":"<pre><code>private static files1(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#files2","title":"files2","text":"<pre><code>private static files2(mixed $rr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$rr</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Feed/","title":"Feed","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Feed</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Feed/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Feed/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Feed/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Feed/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Feed/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Feed/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/","title":"Fhubloc_id_url","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Fhubloc_id_url</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/","title":"Fhublocs","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Fhublocs</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/File_upload/","title":"File_upload","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\File_upload</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/File_upload/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/File_upload/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/File_upload/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/File_upload/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/File_upload/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/File_upload/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Filer/","title":"Filer","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Filer</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Filer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filer/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Filer/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filer/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Filer/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Filer/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Filerm/","title":"Filerm","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Filerm</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Filerm/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filerm/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Filerm/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filerm/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Filerm/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Filerm/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/","title":"Filestorage","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Filestorage</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filestorage/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Filestorage/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Follow/","title":"Follow","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Follow</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Follow/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Follow/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Follow/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Follow/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Follow/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Follow/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Follow/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Getfile/","title":"Getfile","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Getfile</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Getfile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Getfile/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Getfile/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Getfile/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Getfile/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Getfile/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Go/","title":"Go","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Go</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Go/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Go/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Go/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Go/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Go/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Go/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Go/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Group/","title":"Group","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Group</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Group/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Group/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Group/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Group/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Group/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Group/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Group/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Group/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Hashtags/","title":"Hashtags","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Hashtags</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hashtags/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hashtags/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Hcard/","title":"Hcard","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Hcard</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Hcard/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hcard/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hcard/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Hcard/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hcard/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hcard/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Hcard/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Help/","title":"Help","text":"<p>You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resources or use our include mechanism to include it on your local page.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Help</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Help/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Help/#heading_slug","title":"heading_slug","text":"<pre><code>private string $heading_slug\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Help/#init","title":"init","text":"<p>Pre-check before processing request.</p> <pre><code>public init(): mixed\n</code></pre> <p>Determine language requested, and ensure that a topic was requested. If no topic was requested, redirect to the about page, and abort processing.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#get","title":"get","text":"<p>Process get request for the help module.</p> <pre><code>public get(): string\n</code></pre> <p>Loads the correct help file from the <code>doc/</code> directory, and passes it to the help template in <code>view/tpl/help.tpl</code>.</p> <p>If the requested help topic does not exist for the currently selected language, a 404 status is returned instead.</p> <p>This function currently also handles search and serving static assets that may be used by the help files.</p> <p>Return Value:</p> <p>The rendered help page or a 404 page if help topic was not found.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#render_content","title":"render_content","text":"<pre><code>public render_content(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#render_help_file","title":"render_help_file","text":"<pre><code>public render_help_file(string $file_name, string $file_type): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file_name</code> string <code>$file_type</code> string"},{"location":"dev/classes/Zotlabs/Module/Help/#get_page_title","title":"get_page_title","text":"<pre><code>public get_page_title(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#get_toc_heading","title":"get_toc_heading","text":"<pre><code>public get_toc_heading(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#get_heading","title":"get_heading","text":"<pre><code>private get_heading(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#set_page_title","title":"set_page_title","text":"<p>Set the page title to an unslugified version of the file name.</p> <pre><code>private set_page_title(): void\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Help/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#determine_help_language","title":"determine_help_language","text":"<p>Determines help language.</p> <pre><code>private determine_help_language(): mixed\n</code></pre> <p>If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent.</p> <p>Updates the <code>$lang</code> property of the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Help/#find_help_file","title":"find_help_file","text":"<p>Find the full path name of the file, given it's base path and the language of the request.</p> <pre><code>private find_help_file(string $base_path, string $lang): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base_path</code> string The path of the file to find, relative to thedoc root path, and without the extension. <code>$lang</code> string"},{"location":"dev/classes/Zotlabs/Module/Help/#missing_translation","title":"missing_translation","text":"<pre><code>public missing_translation(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Help/#missing_translation_message","title":"missing_translation_message","text":"<pre><code>public missing_translation_message(): string\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Home/","title":"Home","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Home</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Home/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Home/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Home/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Home/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Home/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Home/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Home/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/","title":"Hostxrd","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Hostxrd</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/","title":"Hq","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Hq</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Hq/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hq/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Hq/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Hq/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Id/","title":"Id","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Id</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Id/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Id/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Id/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Id/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Id/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Id/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Impel/","title":"Impel","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Impel</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Impel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Impel/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Impel/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Impel/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Impel/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Impel/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Import/","title":"Import","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Import</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Import/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import/#import_account","title":"import_account","text":"<pre><code>public import_account(int $account_id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$account_id</code> int"},{"location":"dev/classes/Zotlabs/Module/Import/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Import/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>Return Value:</p> <p>with parsed HTML.</p>"},{"location":"dev/classes/Zotlabs/Module/Import/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Import/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Import/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Import_items/","title":"Import_items","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Import_items</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Import_items/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import_items/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_items/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>Return Value:</p> <p>with parsed HTML.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_items/#import","title":"import","text":"<pre><code>public static import(mixed $channel, mixed $data): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Import_items/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import_items/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_items/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_items/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/","title":"Import_progress","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Import_progress</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import_progress/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Import_progress/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/","title":"Invite","text":"<p>module: invitexv2.php</p> <p>send email invitations to join social network</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Invite</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Invite/#constants","title":"Constants","text":"Constant Visibility Type Value <code>MYP</code> public 'ZAI' <code>VERSION</code> public '2.0.0'"},{"location":"dev/classes/Zotlabs/Module/Invite/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Invite/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/#calcdue","title":"calcdue","text":"<pre><code>public calcdue(mixed $duri = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$duri</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Invite/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Invite/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Invite/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Item/","title":"Item","text":"<p>This is the POST destination for most all locally posted text stuff. This function handles status, wall-to-wall status, local comments, and remote coments that are posted on this site (as opposed to being delivered in a feed).</p> <p>Also processed here are posts and comments coming through the statusnet/twitter API. All of these become an \"item\" which is our basic unit of information. Posts that originate externally or do not fall into the above posting categories go through item_store() instead of this function.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Item</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Item/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Item/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Item/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Item/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Item/#item_check_service_class","title":"item_check_service_class","text":"<pre><code>public item_check_service_class(mixed $channel_id, mixed $iswebpage): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> mixed <code>$iswebpage</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Item/#extract_bb_poll_data","title":"extract_bb_poll_data","text":"<pre><code>public extract_bb_poll_data(mixed&amp; $body, mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$body</code> mixed <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Item/#extract_poll_data","title":"extract_poll_data","text":"<pre><code>public extract_poll_data(mixed $poll, mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$poll</code> mixed <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Item/#add_listeners","title":"add_listeners","text":"<pre><code>public add_listeners(mixed $item): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Item/#init_zot_request","title":"init_zot_request","text":"<pre><code>private init_zot_request(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Item/#init_as_request","title":"init_as_request","text":"<pre><code>private init_as_request(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Item/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Item/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Item/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Item/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Lang/","title":"Lang","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Lang</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Lang/#constants","title":"Constants","text":"Constant Visibility Type Value <code>MYP</code> public 'ZIN' <code>VERSION</code> public '2.0.0'"},{"location":"dev/classes/Zotlabs/Module/Lang/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lang/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Lang/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Lang/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lang/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Lang/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Lang/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Layouts/","title":"Layouts","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Layouts</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Layouts/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Layouts/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Layouts/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Layouts/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Layouts/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Layouts/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Layouts/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Like/","title":"Like","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Like</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Like/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Like/#reaction_to_activity","title":"reaction_to_activity","text":"<pre><code>private reaction_to_activity(mixed $reaction): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$reaction</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Like/#like_response","title":"like_response","text":"<pre><code>private like_response(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Like/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Like/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Like/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Like/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Like/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/","title":"Linkinfo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Linkinfo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#deletexnode","title":"deletexnode","text":"<pre><code>public static deletexnode(mixed&amp; $doc, mixed $node): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$doc</code> mixed <code>$node</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#completeurl","title":"completeurl","text":"<pre><code>public static completeurl(mixed $url, mixed $scheme): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed <code>$scheme</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get_video_poster","title":"get_video_poster","text":"<pre><code>public static get_video_poster(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#parseurl_getsiteinfo","title":"parseurl_getsiteinfo","text":"<pre><code>public static parseurl_getsiteinfo(mixed $url): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#arr_add_hashes","title":"arr_add_hashes","text":"<pre><code>private static arr_add_hashes(mixed&amp; $item, mixed $k): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$k</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Lockview/","title":"Lockview","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Lockview</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Lockview/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lockview/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Lockview/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lockview/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Lockview/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Lockview/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Locs/","title":"Locs","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Locs</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Locs/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Locs/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Locs/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Locs/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Locs/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Locs/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Locs/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Login/","title":"Login","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Login</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Login/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Login/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Login/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Login/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Login/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Login/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Logout/","title":"Logout","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Logout</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Logout/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Logout/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Logout/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Logout/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Logout/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Logout/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/","title":"Lostpass","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Lostpass</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lostpass/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Lostpass/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Magic/","title":"Magic","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Magic</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Magic/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Magic/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Magic/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Magic/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Magic/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Magic/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Manage/","title":"Manage","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Manage</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Manage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Manage/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Manage/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Manage/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Manage/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Manage/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Manifest/","title":"Manifest","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Manifest</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Manifest/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Manifest/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Manifest/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Manifest/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Manifest/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Manifest/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/","title":"Menu","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Menu</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Menu/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Menu/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Menu/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Menu/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/","title":"Mitem","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Mitem</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Mitem/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Mitem/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Mitem/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Moderate/","title":"Moderate","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Moderate</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Moderate/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Moderate/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Moderate/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Moderate/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Moderate/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Moderate/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Network/","title":"Network","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Network</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Network/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Network/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Network/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Network/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Network/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Network/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Network/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/","title":"New_channel","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\New_channel</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/New_channel/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/New_channel/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/New_channel/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Notes/","title":"Notes","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Notes</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Notes/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notes/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Notes/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Notes/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notes/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Notes/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Notes/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Notifications/","title":"Notifications","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Notifications</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Notifications/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notifications/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Notifications/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notifications/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Notifications/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Notifications/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Notify/","title":"Notify","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Notify</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Notify/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notify/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Notify/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Notify/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Notify/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Notify/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Notify/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/","title":"OAuth2TestVehicle","text":"<p>The OAuth2TestVehicle class is a way to test the registration of an OAuth2 client app. It allows you to walk through the steps of registering a client, requesting an authorization code for that client, and then requesting an access token for use in authentication against the Hubzilla API endpoints.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\OAuth2TestVehicle</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth/","title":"Oauth","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oauth</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oauth/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauth/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauth/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/","title":"Oauth2","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oauth2</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauth2/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauth2/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/","title":"Oauthinfo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oauthinfo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/","title":"Ochannel","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Ochannel</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Ochannel/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Ochannel/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oembed/","title":"Oembed","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oembed</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oembed/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oembed/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oembed/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oembed/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oembed/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oembed/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oep/","title":"Oep","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oep</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oep/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oep/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_display_reply","title":"oep_display_reply","text":"<pre><code>public oep_display_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_cards_reply","title":"oep_cards_reply","text":"<pre><code>public oep_cards_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_articles_reply","title":"oep_articles_reply","text":"<pre><code>public oep_articles_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_mid_reply","title":"oep_mid_reply","text":"<pre><code>public oep_mid_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_profile_reply","title":"oep_profile_reply","text":"<pre><code>public oep_profile_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_album_reply","title":"oep_album_reply","text":"<pre><code>public oep_album_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_phototop_reply","title":"oep_phototop_reply","text":"<pre><code>public oep_phototop_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_photo_reply","title":"oep_photo_reply","text":"<pre><code>public oep_photo_reply(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Oep/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oep/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oep/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oep/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/","title":"Oexchange","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Oexchange</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oexchange/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Oexchange/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Ofeed/","title":"Ofeed","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Ofeed</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Ofeed/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Ofeed/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Online/","title":"Online","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Online</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Online/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Online/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Online/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Online/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Online/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Online/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Outbox/","title":"Outbox","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Outbox</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Outbox/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Outbox/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Outbox/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Outbox/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Outbox/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Outbox/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Owa/","title":"Owa","text":"<p>OpenWebAuth verifier and token generator See spec/OpenWebAuth/Home.md Requests to this endpoint should be signed using HTTP Signatures using the 'Authorization: Signature' authentication method If the signature verifies a token is returned.</p> <p>This token may be exchanged for an authenticated cookie.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Owa</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Owa/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Owa/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Owa/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Owa/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Owa/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Owa/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Page/","title":"Page","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Page</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Page/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Page/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Page/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Page/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Page/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Page/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Page/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/","title":"Pconfig","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pconfig</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pconfig/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#pconfig_form","title":"pconfig_form","text":"<pre><code>public pconfig_form(mixed $cat, mixed $k): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$cat</code> mixed <code>$k</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#disallowed_pconfig","title":"disallowed_pconfig","text":"<pre><code>public disallowed_pconfig(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pconfig/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/","title":"Pdledit","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pdledit</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pdledit/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pdledit/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/","title":"Pdledit_gui","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pdledit_gui</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_templates","title":"get_templates","text":"<pre><code>public get_templates(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_modules","title":"get_modules","text":"<pre><code>public get_modules(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_widgets","title":"get_widgets","text":"<pre><code>public get_widgets(mixed $module): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$module</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_menus","title":"get_menus","text":"<pre><code>public get_menus(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_blocks","title":"get_blocks","text":"<pre><code>public get_blocks(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_template","title":"get_template","text":"<pre><code>public get_template(mixed $pdl): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$pdl</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_regions","title":"get_regions","text":"<pre><code>public get_regions(mixed $pdl): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$pdl</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#parse_region","title":"parse_region","text":"<pre><code>public parse_region(mixed $pdl): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$pdl</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_template_info","title":"get_template_info","text":"<pre><code>public get_template_info(string $template): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$template</code> string the name of the template <p>Return Value:</p> <p>with the information</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_pdl","title":"get_pdl","text":"<pre><code>public get_pdl(mixed $module): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$module</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Permcat/","title":"Permcat","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Permcat</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Permcat/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Permcat/#permcats","title":"permcats","text":"<pre><code>private $permcats\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Permcat/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Permcat/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcat/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Permcat/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcat/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcat/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Permcats/","title":"Permcats","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Permcats</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Permcats/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Permcats/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcats/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcats/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Permcats/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcats/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Permcats/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Photo/","title":"Photo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Photo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Photo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Photo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Photo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Photo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Photo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/","title":"Photos","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Photos</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Photos/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Photos/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Photos/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Photos/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pin/","title":"Pin","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pin</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pin/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pin/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pin/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pin/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pin/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pin/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pin/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Poco/","title":"Poco","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Poco</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Poco/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Poco/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Poco/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Poco/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Poco/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Poco/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Poster/","title":"Poster","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Poster</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Poster/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Poster/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Poster/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Poster/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Poster/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Poster/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pretheme/","title":"Pretheme","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pretheme</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pretheme/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pretheme/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Profile/","title":"Profile","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Profile</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Profile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profile/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profile/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/","title":"Profile_photo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Profile_photo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#profile_photo_crop_ui_head","title":"profile_photo_crop_ui_head","text":"<pre><code>public profile_photo_crop_ui_head(mixed $ph, mixed $hash, mixed $smallest): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ph</code> mixed <code>$hash</code> mixed <code>$smallest</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/","title":"Profiles","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Profiles</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profiles/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profiles/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profiles/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Profperm/","title":"Profperm","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Profperm</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Profperm/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profperm/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profperm/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Profperm/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Profperm/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Profperm/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Profperm/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pubsites/","title":"Pubsites","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pubsites</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pubsites/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pubsites/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Pubstream/","title":"Pubstream","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Pubstream</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pubstream/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Pubstream/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Randprof/","title":"Randprof","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Randprof</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Randprof/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Randprof/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Randprof/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Randprof/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Randprof/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Randprof/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Randprof/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/","title":"Rbmark","text":"<p>remote bookmark</p> <p>https://yoursite/rbmark?f=&amp;title=&amp;url=&amp;private=&amp;remote_return=</p> <p>This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length</p> <p>f= placeholder, often required title= link text url= URL to bookmark ischat=1 if this bookmark is a chatroom private= Don't share this link remote_return= absolute URL to return after posting is finished</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Rbmark</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rbmark/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): void\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get_bookmark_folders","title":"get_bookmark_folders","text":"<pre><code>private get_bookmark_folders(int $channel_id): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> int"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rbmark/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/React/","title":"React","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\React</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/React/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/React/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/React/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/React/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/React/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/React/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Regate/","title":"Regate","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Regate</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Regate/#constants","title":"Constants","text":"Constant Visibility Type Value <code>MYP</code> public 'ZAR' <code>VERSION</code> public '2.0.0'"},{"location":"dev/classes/Zotlabs/Module/Regate/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regate/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Regate/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Regate/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regate/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Regate/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Regate/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Regdir/","title":"Regdir","text":"<p>With args, register a directory server for this realm.</p> <p>With no args, return a JSON array of directory servers for this realm.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Regdir</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Regdir/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regdir/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Regdir/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regdir/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Regdir/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Regdir/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Register/","title":"Register","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Register</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Register/#constants","title":"Constants","text":"Constant Visibility Type Value <code>MYP</code> public 'ZAR' <code>VERSION</code> public '2.0.0'"},{"location":"dev/classes/Zotlabs/Module/Register/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Register/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Register/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Register/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Register/#check_reg_limits","title":"check_reg_limits","text":"<pre><code>public check_reg_limits(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Register/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Register/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Register/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Register/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Regmod/","title":"Regmod","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Regmod</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Regmod/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regmod/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Regmod/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regmod/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Regmod/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Regmod/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Regver/","title":"Regver","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Regver</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Regver/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regver/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Regver/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Regver/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Regver/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Regver/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/","title":"Removeaccount","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Removeaccount</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Removeme/","title":"Removeme","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Removeme</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Removeme/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Removeme/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeme/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeme/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Removeme/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeme/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Removeme/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/","title":"Rmagic","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Rmagic</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rmagic/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rmagic/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/","title":"Rpost","text":"<p>remote post</p> <p>https://yoursite/rpost?f=&amp;title=&amp;body=&amp;remote_return=</p> <p>This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length</p> <p>f= placeholder, often required title= Title of post body= Body of post url= URL which will be parsed and the results appended to the body source= Source application post_id= post_id of post to 'share' (local use only) remote_return= absolute URL to return after posting is finished type= choices are 'html' or 'bbcode', default is 'bbcode'</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Rpost</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rpost/#get","title":"get","text":"<p>Handle requests.</p> <pre><code>public get(): string\n</code></pre> <p>Despite it's name, this method handles both POST and GET requests to the module.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#redirect_or_login","title":"redirect_or_login","text":"<p>Redirect to the observer's instance if not local, or return login form.</p> <pre><code>private redirect_or_login(): string\n</code></pre> <p>The request is saved in the session if there's a <code>body</code> request param present. (Otherwise not.)</p> <p>Return Value:</p> <p>A login form if not redirected. If the session was determned to belong to a remote channel, the function does not return.</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#handle_attachments","title":"handle_attachments","text":"<p>Handle uplads of attachments in the rpost call.</p> <pre><code>private handle_attachments(): void\n</code></pre> <p>This is only relevant for POST requests.</p> <p>The function will modify the <code>$_REQUEST['body']</code> superglobal (or add it if it does not exist).</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Rpost/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Rpost/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Search/","title":"Search","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Search</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Search/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Search/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Search/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(mixed $update, mixed $load = false): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Parameters:</p> Parameter Type Description <code>$update</code> mixed <code>$load</code> mixed <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Search/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Search/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Search/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Search/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Search_ac/","title":"Search_ac","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Search_ac</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Search_ac/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Search_ac/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Service_limits/","title":"Service_limits","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Service_limits</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Service_limits/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Service_limits/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/","title":"Settings","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/#sm","title":"sm","text":"<pre><code>private $sm\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Share/","title":"Share","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Share</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Share/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Share/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Share/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Share/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Share/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Share/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/","title":"Sharedwithme","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sharedwithme</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/","title":"Siteinfo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Siteinfo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sitelist/","title":"Sitelist","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sitelist</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sitelist/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sitelist/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Smilies/","title":"Smilies","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Smilies</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Smilies/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Smilies/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Smilies/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Smilies/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Smilies/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Smilies/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Snap/","title":"Snap","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Snap</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Snap/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Snap/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Snap/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Snap/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Snap/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Snap/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sources/","title":"Sources","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sources</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sources/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sources/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sources/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Sources/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sources/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sources/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sources/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sse/","title":"Sse","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sse</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Sse/#uid","title":"uid","text":"<pre><code>public static $uid\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#ob_hash","title":"ob_hash","text":"<pre><code>public static $ob_hash\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#sse_id","title":"sse_id","text":"<pre><code>public static $sse_id\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#vnotify","title":"vnotify","text":"<pre><code>public static $vnotify\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#sse_enabled","title":"sse_enabled","text":"<pre><code>public static $sse_enabled\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sse/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sse/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/","title":"Sse_bs","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sse_bs</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#uid","title":"uid","text":"<pre><code>public static $uid\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#ob_hash","title":"ob_hash","text":"<pre><code>public static $ob_hash\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#sse_id","title":"sse_id","text":"<pre><code>public static $sse_id\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#vnotify","title":"vnotify","text":"<pre><code>public static $vnotify\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#evdays","title":"evdays","text":"<pre><code>public static $evdays\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#limit","title":"limit","text":"<pre><code>public static $limit\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#offset","title":"offset","text":"<pre><code>public static $offset\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#xchans","title":"xchans","text":"<pre><code>public static $xchans\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#mark_read","title":"mark_read","text":"<pre><code>public mark_read(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_network","title":"bs_network","text":"<pre><code>public bs_network(mixed $notifications): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$notifications</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_dm","title":"bs_dm","text":"<pre><code>public bs_dm(mixed $notifications): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$notifications</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_home","title":"bs_home","text":"<pre><code>public bs_home(mixed $notifications): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$notifications</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_pubs","title":"bs_pubs","text":"<pre><code>public bs_pubs(mixed $notifications): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$notifications</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_notify","title":"bs_notify","text":"<pre><code>public bs_notify(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_intros","title":"bs_intros","text":"<pre><code>public bs_intros(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_forums","title":"bs_forums","text":"<pre><code>public bs_forums(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_files","title":"bs_files","text":"<pre><code>public bs_files(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_all_events","title":"bs_all_events","text":"<pre><code>public bs_all_events(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_register","title":"bs_register","text":"<pre><code>public bs_register(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_info_notice","title":"bs_info_notice","text":"<pre><code>public bs_info_notice(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Sslify/","title":"Sslify","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Sslify</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Sslify/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sslify/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sslify/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Sslify/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Sslify/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Sslify/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Starred/","title":"Starred","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Starred</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Starred/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Starred/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Starred/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Starred/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Starred/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Starred/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Subthread/","title":"Subthread","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Subthread</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Subthread/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Subthread/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Subthread/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Subthread/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Subthread/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Subthread/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Suggest/","title":"Suggest","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Suggest</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Suggest/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Suggest/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Suggest/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Suggest/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Suggest/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Suggest/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Suggest/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Tagger/","title":"Tagger","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Tagger</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Tagger/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tagger/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagger/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tagger/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagger/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagger/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/","title":"Tagrm","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Tagrm</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tagrm/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tagrm/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/","title":"Tasks","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Tasks</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tasks/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tasks/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tasks/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Theme_info/","title":"Theme_info","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Theme_info</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get_theme_config_file","title":"get_theme_config_file","text":"<pre><code>public get_theme_config_file(mixed $theme): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$theme</code> mixed"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Theme_info/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/","title":"Thing","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Thing</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Thing/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Thing/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Thing/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Thing/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Token/","title":"Token","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Token</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Token/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Token/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Token/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Token/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Token/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Token/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Tokens/","title":"Tokens","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Tokens</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Tokens/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tokens/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tokens/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Tokens/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Tokens/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Tokens/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Tokens/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/","title":"Totp_check","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Totp_check</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Totp_check/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Totp_check/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Uexport/","title":"Uexport","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Uexport</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Uexport/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Uexport/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Uexport/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Uexport/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Uexport/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Uexport/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Uexport/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Update/","title":"Update","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Update</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Update/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Update/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Update/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Update/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Update/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Update/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Userinfo/","title":"Userinfo","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Userinfo</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Userinfo/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Userinfo/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/View/","title":"View","text":"<p>load view/theme/$current_theme/style.php with Hubzilla context</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\View</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/View/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/View/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/View/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/View/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/View/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/View/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/","title":"Viewconnections","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Viewconnections</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/","title":"Viewsrc","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Viewsrc</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Vote/","title":"Vote","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Vote</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Vote/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Vote/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Vote/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Vote/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Vote/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Vote/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/","title":"Wall_attach","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Wall_attach</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/","title":"Wall_upload","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Wall_upload</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Webfinger/","title":"Webfinger","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Webfinger</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Webfinger/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Webfinger/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/","title":"Webpages","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Webpages</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Webpages/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Webpages/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Webpages/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Well_known/","title":"Well_known","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Well_known</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Well_known/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Well_known/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Well_known/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Well_known/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Well_known/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Well_known/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Wfinger/","title":"Wfinger","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Wfinger</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wfinger/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Wfinger/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Xchan/","title":"Xchan","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Xchan</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Xchan/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xchan/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Xchan/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xchan/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xchan/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Xchan/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Xpoco/","title":"Xpoco","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Xpoco</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xpoco/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xpoco/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Xrd/","title":"Xrd","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Xrd</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Xrd/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xrd/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xrd/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xrd/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xrd/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Xrd/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Xref/","title":"Xref","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Xref</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Xref/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xref/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xref/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Xref/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Xref/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Xref/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/","title":"Z6trans","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Z6trans</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get_core_cols","title":"get_core_cols","text":"<pre><code>public get_core_cols(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Z6trans/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Zot/","title":"Zot","text":"<p>Base controller class for Modules.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Zot</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Zot/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zot/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zot/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/","title":"Zot_probe","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Zot_probe</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/","title":"Zotfeed","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Zotfeed</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/","title":"Account_edit","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Account_edit</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/","title":"Accounts","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Accounts</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#constants","title":"Constants","text":"Constant Visibility Type Value <code>MYP</code> public 'ZAR' <code>VERSION</code> public '2.0.0'"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#post","title":"post","text":"<p>Handle POST actions on accounts admin page.</p> <pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#handle_ajax_request","title":"handle_ajax_request","text":"<pre><code>private handle_ajax_request(): void\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#block_unblock_accounts","title":"block_unblock_accounts","text":"<p>Block or unblock accounts given by the <code>user</code> and <code>blocked</code> POST params.</p> <pre><code>private block_unblock_accounts(): void\n</code></pre> <p>The post params <code>user</code> and <code>blocked</code> must be present and arrays of equal lengths. The <code>user</code> array should contain account id's or the accounts to process, and the <code>blocked</code> array holds a corresponding boolean value to indicate that the account at the same offset in the <code>user</code> array is or is not blocked.</p> <p>An account that is not blocked will be blocked, and accounts that are blocked will be unblocked.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#delete_accounts","title":"delete_accounts","text":"<p>Delete multiple accounts given by the <code>user</code> POST param.</p> <pre><code>private delete_accounts(): void\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/","title":"Addons","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Addons</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre> <p>Return Value:</p> <p>with parsed HTML</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#plugin_sort","title":"plugin_sort","text":"<pre><code>public static plugin_sort(mixed $a, mixed $b): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed <code>$b</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/","title":"Channels","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Channels</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre> <p>Return Value:</p> <p>with parsed HTML</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/","title":"Dbsync","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Dbsync</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/","title":"Features","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Features</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/","title":"Logs","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Logs</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/","title":"Profs","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Profs</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/","title":"Queue","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Queue</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/","title":"Queueworker","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Queueworker</code></li> <li>Parent class: <code>\\Zotlabs\\Web\\Controller</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#init_1","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#post_1","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#get_1","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/","title":"Security","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Security</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#trim_array_elems","title":"trim_array_elems","text":"<pre><code>public trim_array_elems(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/","title":"Site","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Admin\\Site</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#constants","title":"Constants","text":"Constant Visibility Type Value <code>regxTime34</code> public '/^(?:2[0-3]"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#eol","title":"eol","text":"<pre><code>private string $eol\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#joo","title":"joo","text":"<pre><code>private string $joo\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#wdconst","title":"wdconst","text":"<pre><code>public $wdconst\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#register_duty","title":"register_duty","text":"<pre><code>public $register_duty\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#isajax","title":"isajax","text":"<pre><code>public $isajax\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#jsoo","title":"jsoo","text":"<pre><code>public $jsoo\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#msgbg","title":"msgbg","text":"<pre><code>public $msgbg\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#error","title":"error","text":"<pre><code>public $error\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#msgfg","title":"msgfg","text":"<pre><code>public $msgfg\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre> <p>Return Value:</p> <p>with HTML</p>"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#duty","title":"duty","text":"<pre><code>private duty(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/","title":"Account","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Account</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/","title":"Calendar","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Calendar</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/","title":"Channel","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Channel</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/","title":"Channel_home","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Channel_home</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/","title":"Connections","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Connections</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/","title":"Conversation","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Conversation</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/","title":"Directory","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Directory</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/","title":"Display","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Display</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#get_theme_config_file","title":"get_theme_config_file","text":"<pre><code>public get_theme_config_file(mixed $theme): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$theme</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/","title":"Editor","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Editor</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/","title":"Events","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Events</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/","title":"Featured","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Featured</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#sortpanels","title":"sortpanels","text":"<pre><code>public sortpanels(mixed&amp; $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/","title":"Features","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Features</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/","title":"Manage","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Manage</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/","title":"Multifactor","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Multifactor</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/","title":"Network","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Network</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/","title":"Photos","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Photos</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/","title":"Privacy","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Privacy</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/","title":"Profiles","text":"<ul> <li>Full name: <code>\\Zotlabs\\Module\\Settings\\Profiles</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#post","title":"post","text":"<pre><code>public post(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/","title":"PhotoDriver","text":"<ul> <li>Full name: <code>\\Zotlabs\\Photo\\PhotoDriver</code></li> <li>This class is an Abstract class</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#image","title":"image","text":"<pre><code>protected resource|\\Imagick $image\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#width","title":"width","text":"<pre><code>protected int $width\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#height","title":"height","text":"<pre><code>protected int $height\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#valid","title":"valid","text":"<pre><code>protected bool $valid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#type","title":"type","text":"<pre><code>protected string $type\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#types","title":"types","text":"<pre><code>protected array $types\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#supportedtypes","title":"supportedTypes","text":"<pre><code>public supportedTypes(): array\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>Associative array with mimetype as key and file extension as value.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#load","title":"load","text":"<pre><code>protected load(mixed $data, mixed $type): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#destroy","title":"destroy","text":"<pre><code>protected destroy(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#setdimensions","title":"setDimensions","text":"<pre><code>protected setDimensions(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getimage","title":"getImage","text":"<pre><code>public getImage(): bool|resource|\\Imagick\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#doscaleimage","title":"doScaleImage","text":"<pre><code>public doScaleImage(mixed $new_width, mixed $new_height): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$new_width</code> mixed <code>$new_height</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#rotate","title":"rotate","text":"<pre><code>public rotate(mixed $degrees): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$degrees</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#flip","title":"flip","text":"<pre><code>public flip(mixed $horiz = true, mixed $vert = false): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$horiz</code> mixed <code>$vert</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#cropimagerect","title":"cropImageRect","text":"<pre><code>public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$maxx</code> int width of the new image <code>$maxy</code> int height of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#imagestring","title":"imageString","text":"<pre><code>public imageString(): string\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>A Binary String.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#clearexif","title":"clearexif","text":"<pre><code>public clearexif(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#__construct","title":"__construct","text":"<pre><code>public __construct(string $data, string $type = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> string Image <code>$type</code> string mimetype"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#__destruct","title":"__destruct","text":"<pre><code>public __destruct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#is_valid","title":"is_valid","text":"<pre><code>public is_valid(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getwidth","title":"getWidth","text":"<pre><code>public getWidth(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Width of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getheight","title":"getHeight","text":"<pre><code>public getHeight(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Height of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#saveimage","title":"saveImage","text":"<pre><code>public saveImage(string $path): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$path</code> string Path and filename where to save the image <p>Return Value:</p> <p>False on failure, otherwise true</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#gettype","title":"getType","text":"<pre><code>public getType(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise mimetype.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getext","title":"getExt","text":"<pre><code>public getExt(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise file extension.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimage","title":"scaleImage","text":"<pre><code>public scaleImage(int $max, bool $float_height = true): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int maximum pixel size in either dimension <code>$float_height</code> bool (optional)If true allow height to float to any length on tall images, constrainingonly the width <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimageup","title":"scaleImageUp","text":"<pre><code>public scaleImageUp(mixed $min): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$min</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimagesquare","title":"scaleImageSquare","text":"<pre><code>public scaleImageSquare(int $dim): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dim</code> int Pixel of square image <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#cropimage","title":"cropImage","text":"<pre><code>public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int size of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\cropImageRect() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#exif","title":"exif","text":"<pre><code>public exif(string $filename): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$filename</code> string"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#orient","title":"orient","text":"<pre><code>public orient(array $exif): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$exif</code> array <p>Return Value:</p> <p>true if oriented, otherwise false</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#save","title":"save","text":"<pre><code>public save(array $arr, bool $skipcheck = false): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$skipcheck</code> bool (optional) default false"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#storethumbnail","title":"storeThumbnail","text":"<pre><code>public storeThumbnail(array $arr, mixed $scale): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$scale</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/","title":"PhotoGd","text":"<ul> <li>Full name: <code>\\Zotlabs\\Photo\\PhotoGd</code></li> <li>Parent class: <code>\\Zotlabs\\Photo\\PhotoDriver</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#supportedtypes","title":"supportedTypes","text":"<pre><code>public supportedTypes(): array\n</code></pre> <p>Return Value:</p> <p>Associative array with mimetype as key and file extension as value.</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\PhotoDriver::supportedTypes() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#load","title":"load","text":"<pre><code>protected load(mixed $data, mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#setdimensions","title":"setDimensions","text":"<pre><code>protected setDimensions(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#clearexif","title":"clearexif","text":"<pre><code>public clearexif(): void\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#destroy","title":"destroy","text":"<pre><code>protected destroy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getimage","title":"getImage","text":"<pre><code>public getImage(): bool|resource\n</code></pre> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\PhotoDriver::getImage() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#doscaleimage","title":"doScaleImage","text":"<pre><code>public doScaleImage(mixed $dest_width, mixed $dest_height): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dest_width</code> mixed <code>$dest_height</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#rotate","title":"rotate","text":"<pre><code>public rotate(mixed $degrees): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$degrees</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#flip","title":"flip","text":"<pre><code>public flip(mixed $horiz = true, mixed $vert = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$horiz</code> mixed <code>$vert</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimagerect","title":"cropImageRect","text":"<pre><code>public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$maxx</code> mixed width of the new image <code>$maxy</code> mixed height of the new image <code>$x</code> mixed x-offset for region <code>$y</code> mixed y-offset for region <code>$w</code> mixed width of region <code>$h</code> mixed height of region <p>Return Value:</p> <p>false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#imagestring","title":"imageString","text":"<pre><code>public imageString(): string\n</code></pre> <p>Return Value:</p> <p>A Binary String.</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\PhotoDriver::imageString() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#supportedtypes_1","title":"supportedTypes","text":"<pre><code>public supportedTypes(): array\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>Associative array with mimetype as key and file extension as value.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#load_1","title":"load","text":"<pre><code>protected load(mixed $data, mixed $type): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#destroy_1","title":"destroy","text":"<pre><code>protected destroy(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#setdimensions_1","title":"setDimensions","text":"<pre><code>protected setDimensions(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getimage_1","title":"getImage","text":"<pre><code>public getImage(): bool|resource|\\Imagick\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#doscaleimage_1","title":"doScaleImage","text":"<pre><code>public doScaleImage(mixed $new_width, mixed $new_height): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$new_width</code> mixed <code>$new_height</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#rotate_1","title":"rotate","text":"<pre><code>public rotate(mixed $degrees): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$degrees</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#flip_1","title":"flip","text":"<pre><code>public flip(mixed $horiz = true, mixed $vert = false): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$horiz</code> mixed <code>$vert</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimagerect_1","title":"cropImageRect","text":"<pre><code>public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$maxx</code> int width of the new image <code>$maxy</code> int height of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#imagestring_1","title":"imageString","text":"<pre><code>public imageString(): string\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>A Binary String.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#clearexif_1","title":"clearexif","text":"<pre><code>public clearexif(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#__construct","title":"__construct","text":"<pre><code>public __construct(string $data, string $type = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> string Image <code>$type</code> string mimetype"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#__destruct","title":"__destruct","text":"<pre><code>public __destruct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#is_valid","title":"is_valid","text":"<pre><code>public is_valid(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getwidth","title":"getWidth","text":"<pre><code>public getWidth(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Width of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getheight","title":"getHeight","text":"<pre><code>public getHeight(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Height of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#saveimage","title":"saveImage","text":"<pre><code>public saveImage(string $path): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$path</code> string Path and filename where to save the image <p>Return Value:</p> <p>False on failure, otherwise true</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#gettype","title":"getType","text":"<pre><code>public getType(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise mimetype.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getext","title":"getExt","text":"<pre><code>public getExt(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise file extension.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimage","title":"scaleImage","text":"<pre><code>public scaleImage(int $max, bool $float_height = true): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int maximum pixel size in either dimension <code>$float_height</code> bool (optional)If true allow height to float to any length on tall images, constrainingonly the width <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimageup","title":"scaleImageUp","text":"<pre><code>public scaleImageUp(mixed $min): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$min</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimagesquare","title":"scaleImageSquare","text":"<pre><code>public scaleImageSquare(int $dim): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dim</code> int Pixel of square image <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimage","title":"cropImage","text":"<pre><code>public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int size of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\cropImageRect() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#exif","title":"exif","text":"<pre><code>public exif(string $filename): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$filename</code> string"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#orient","title":"orient","text":"<pre><code>public orient(array $exif): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$exif</code> array <p>Return Value:</p> <p>true if oriented, otherwise false</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#save","title":"save","text":"<pre><code>public save(array $arr, bool $skipcheck = false): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$skipcheck</code> bool (optional) default false"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#storethumbnail","title":"storeThumbnail","text":"<pre><code>public storeThumbnail(array $arr, mixed $scale): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$scale</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/","title":"PhotoImagick","text":"<ul> <li>Full name: <code>\\Zotlabs\\Photo\\PhotoImagick</code></li> <li>Parent class: <code>\\Zotlabs\\Photo\\PhotoDriver</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#supportedtypes","title":"supportedTypes","text":"<pre><code>public supportedTypes(): array\n</code></pre> <p>Return Value:</p> <p>Associative array with mimetype as key and file extension as value.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#load","title":"load","text":"<pre><code>protected load(mixed $data, mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#destroy","title":"destroy","text":"<pre><code>protected destroy(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#setdimensions","title":"setDimensions","text":"<pre><code>protected setDimensions(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#clearexif","title":"clearexif","text":"<pre><code>public clearexif(): mixed\n</code></pre> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\PhotoDriver::clearexif() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getimage","title":"getImage","text":"<pre><code>public getImage(): bool|\\Imagick\n</code></pre> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\PhotoDriver::getImage() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#doscaleimage","title":"doScaleImage","text":"<pre><code>public doScaleImage(mixed $dest_width, mixed $dest_height): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dest_width</code> mixed <code>$dest_height</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#rotate","title":"rotate","text":"<pre><code>public rotate(mixed $degrees): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$degrees</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#flip","title":"flip","text":"<pre><code>public flip(mixed $horiz = true, mixed $vert = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$horiz</code> mixed <code>$vert</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimagerect","title":"cropImageRect","text":"<pre><code>public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$maxx</code> mixed width of the new image <code>$maxy</code> mixed height of the new image <code>$x</code> mixed x-offset for region <code>$y</code> mixed y-offset for region <code>$w</code> mixed width of region <code>$h</code> mixed height of region <p>Return Value:</p> <p>false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#imagestring","title":"imageString","text":"<pre><code>public imageString(): string\n</code></pre> <p>Return Value:</p> <p>A Binary String.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#supportedtypes_1","title":"supportedTypes","text":"<pre><code>public supportedTypes(): array\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>Associative array with mimetype as key and file extension as value.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#load_1","title":"load","text":"<pre><code>protected load(mixed $data, mixed $type): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#destroy_1","title":"destroy","text":"<pre><code>protected destroy(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#setdimensions_1","title":"setDimensions","text":"<pre><code>protected setDimensions(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getimage_1","title":"getImage","text":"<pre><code>public getImage(): bool|resource|\\Imagick\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#doscaleimage_1","title":"doScaleImage","text":"<pre><code>public doScaleImage(mixed $new_width, mixed $new_height): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$new_width</code> mixed <code>$new_height</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#rotate_1","title":"rotate","text":"<pre><code>public rotate(mixed $degrees): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$degrees</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#flip_1","title":"flip","text":"<pre><code>public flip(mixed $horiz = true, mixed $vert = false): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$horiz</code> mixed <code>$vert</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimagerect_1","title":"cropImageRect","text":"<pre><code>public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$maxx</code> int width of the new image <code>$maxy</code> int height of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#imagestring_1","title":"imageString","text":"<pre><code>public imageString(): string\n</code></pre> <ul> <li>This method is abstract.</li> </ul> <p>Return Value:</p> <p>A Binary String.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#clearexif_1","title":"clearexif","text":"<pre><code>public clearexif(): mixed\n</code></pre> <ul> <li>This method is abstract.</li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#__construct","title":"__construct","text":"<pre><code>public __construct(string $data, string $type = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> string Image <code>$type</code> string mimetype"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#__destruct","title":"__destruct","text":"<pre><code>public __destruct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#is_valid","title":"is_valid","text":"<pre><code>public is_valid(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getwidth","title":"getWidth","text":"<pre><code>public getWidth(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Width of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getheight","title":"getHeight","text":"<pre><code>public getHeight(): bool|\\Zotlabs\\Photo\\number\n</code></pre> <p>Return Value:</p> <p>Height of image in pixels, or false on failure</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#saveimage","title":"saveImage","text":"<pre><code>public saveImage(string $path): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$path</code> string Path and filename where to save the image <p>Return Value:</p> <p>False on failure, otherwise true</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#gettype","title":"getType","text":"<pre><code>public getType(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise mimetype.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getext","title":"getExt","text":"<pre><code>public getExt(): bool|string\n</code></pre> <p>Return Value:</p> <p>False on failure, otherwise file extension.</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimage","title":"scaleImage","text":"<pre><code>public scaleImage(int $max, bool $float_height = true): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int maximum pixel size in either dimension <code>$float_height</code> bool (optional)If true allow height to float to any length on tall images, constrainingonly the width <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimageup","title":"scaleImageUp","text":"<pre><code>public scaleImageUp(mixed $min): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$min</code> mixed"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimagesquare","title":"scaleImageSquare","text":"<pre><code>public scaleImageSquare(int $dim): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$dim</code> int Pixel of square image <p>Return Value:</p> <p>false on failure, otherwise void</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimage","title":"cropImage","text":"<pre><code>public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$max</code> int size of the new image <code>$x</code> int x-offset for region <code>$y</code> int y-offset for region <code>$w</code> int width of region <code>$h</code> int height of region <p>Return Value:</p> <p>false on failure</p> <p>See Also:</p> <ul> <li>\\Zotlabs\\Photo\\cropImageRect() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#exif","title":"exif","text":"<pre><code>public exif(string $filename): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$filename</code> string"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#orient","title":"orient","text":"<pre><code>public orient(array $exif): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$exif</code> array <p>Return Value:</p> <p>true if oriented, otherwise false</p>"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#save","title":"save","text":"<pre><code>public save(array $arr, bool $skipcheck = false): bool|array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$skipcheck</code> bool (optional) default false"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#storethumbnail","title":"storeThumbnail","text":"<pre><code>public storeThumbnail(array $arr, mixed $scale): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array <code>$scale</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/","title":"SimpleTemplate","text":"<ul> <li>Full name: <code>\\Zotlabs\\Render\\SimpleTemplate</code></li> <li>This class implements: <code>\\Zotlabs\\Render\\TemplateEngine</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#name","title":"name","text":"<pre><code>public static $name\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#r","title":"r","text":"<pre><code>public $r\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#search","title":"search","text":"<pre><code>public $search\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace","title":"replace","text":"<pre><code>public $replace\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#stack","title":"stack","text":"<pre><code>public $stack\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#nodes","title":"nodes","text":"<pre><code>public $nodes\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#done","title":"done","text":"<pre><code>public $done\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#d","title":"d","text":"<pre><code>public $d\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#lang","title":"lang","text":"<pre><code>public $lang\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#debug","title":"debug","text":"<pre><code>public $debug\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_preg_error","title":"_preg_error","text":"<pre><code>private _preg_error(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_push_stack","title":"_push_stack","text":"<pre><code>private _push_stack(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_pop_stack","title":"_pop_stack","text":"<pre><code>private _pop_stack(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_get_var","title":"_get_var","text":"<pre><code>private _get_var(mixed $name, mixed $retNoKey = false): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> mixed <code>$retNoKey</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_if","title":"_replcb_if","text":"<p>IF node \\code {{ if &lt;$var&gt; }}...[{{ else }} ...] {{ endif }} {{ if &lt;$var&gt;== }}...[{{ else }} ...]{{ endif }} {{ if &lt;$var&gt;!= }}...[{{ else }} ...]{{ endif }} \\endcode <pre><code>private _replcb_if(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_for","title":"_replcb_for","text":"<p>FOR node \\code {{ for &lt;$var&gt; as $name }}...{{ endfor }} {{ for &lt;$var&gt; as $key=&gt;$name }}...{{ endfor }} \\endcode</p> <pre><code>private _replcb_for(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_inc","title":"_replcb_inc","text":"<p>INC node \\code {{ inc  [with $var1=$var2] }}{{ endinc }} \\endcode <pre><code>private _replcb_inc(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_debug","title":"_replcb_debug","text":"<p>DEBUG node \\code {{ debug $var [$var [$var [...]]] }}{{ enddebug }} \\endcode replace node with <pre>var_dump($var, $var, ...);</pre></p> <pre><code>private _replcb_debug(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_node","title":"_replcb_node","text":"<pre><code>private _replcb_node(mixed $m): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$m</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb","title":"_replcb","text":"<pre><code>private _replcb(mixed $m): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$m</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_build_nodes","title":"_build_nodes","text":"<pre><code>private _build_nodes(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#var_replace","title":"var_replace","text":"<pre><code>private var_replace(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace_1","title":"replace","text":"<pre><code>private replace(mixed $s, mixed $r): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$r</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace_macros","title":"replace_macros","text":"<pre><code>public replace_macros(mixed $s, mixed $r): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$r</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#get_markup_template","title":"get_markup_template","text":"<pre><code>public get_markup_template(mixed $file, mixed $root = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$root</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/","title":"SmartyInterface","text":"<ul> <li>Full name: <code>\\Zotlabs\\Render\\SmartyInterface</code></li> <li>Parent class: <code>Smarty</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#filename","title":"filename","text":"<pre><code>public $filename\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#parsed","title":"parsed","text":"<pre><code>public parsed(mixed $template = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$template</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/","title":"SmartyTemplate","text":"<ul> <li>Full name: <code>\\Zotlabs\\Render\\SmartyTemplate</code></li> <li>This class implements: <code>\\Zotlabs\\Render\\TemplateEngine</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#name","title":"name","text":"<pre><code>public static $name\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#replace_macros","title":"replace_macros","text":"<pre><code>public replace_macros(mixed $s, mixed $r): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$r</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#get_markup_template","title":"get_markup_template","text":"<pre><code>public get_markup_template(mixed $file, mixed $root = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$root</code> mixed"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#get_intltext_template","title":"get_intltext_template","text":"<pre><code>public get_intltext_template(mixed $file, mixed $root = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$root</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/","title":"TemplateEngine","text":"<ul> <li>Full name: <code>\\Zotlabs\\Render\\TemplateEngine</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#replace_macros","title":"replace_macros","text":"<pre><code>public replace_macros(mixed $s, mixed $v): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$v</code> mixed"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#get_markup_template","title":"get_markup_template","text":"<pre><code>public get_markup_template(mixed $file, mixed $root = &amp;#039;&amp;#039;): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> mixed <code>$root</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Render/Theme/","title":"Theme","text":"<ul> <li>Full name: <code>\\Zotlabs\\Render\\Theme</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Render/Theme/#system_theme","title":"system_theme","text":"<pre><code>public static $system_theme\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#session_theme","title":"session_theme","text":"<pre><code>public static $session_theme\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#base_themes","title":"base_themes","text":"<pre><code>public static $base_themes\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Render/Theme/#current","title":"current","text":"<pre><code>public static current(): array\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#url","title":"url","text":"<pre><code>public static url(): string\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Render/Theme/#debug","title":"debug","text":"<pre><code>public debug(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/","title":"BasicAuth","text":"<ul> <li>Full name: <code>\\Zotlabs\\Storage\\BasicAuth</code></li> <li>Parent class: <code>AbstractBasic</code></li> </ul> <p>See Also:</p> <ul> <li>http://github.com/friendica/red - </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_name","title":"channel_name","text":"<pre><code>protected string|null $channel_name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_id","title":"channel_id","text":"<pre><code>public int $channel_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_account_id","title":"channel_account_id","text":"<pre><code>public int $channel_account_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_hash","title":"channel_hash","text":"<pre><code>public string $channel_hash\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#observer","title":"observer","text":"<pre><code>public string $observer\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#browser","title":"browser","text":"<pre><code>public $browser\n</code></pre> <p>See Also:</p> <ul> <li>\\Zotlabs\\Storage\\Browser::set_writeable() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#owner_id","title":"owner_id","text":"<pre><code>public int $owner_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#owner_nick","title":"owner_nick","text":"<p>channel_name of the current visited path. Set in Directory::getDir().</p> <pre><code>public string $owner_nick\n</code></pre> <p>Used for creating the path in cloud/</p>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#timezone","title":"timezone","text":"<p>Timezone from the visiting channel's channel_timezone.</p> <pre><code>protected string $timezone\n</code></pre> <p>Used in @ref Browser</p>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#module_disabled","title":"module_disabled","text":"<pre><code>public $module_disabled\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#validateuserpass","title":"validateUserPass","text":"<pre><code>protected validateUserPass(string $username, string $password): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$username</code> string <code>$password</code> string <p>See Also:</p> <ul> <li> <ul> <li>\\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::validateUserPass</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setauthenticated","title":"setAuthenticated","text":"<pre><code>protected setAuthenticated(mixed $channel): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#check","title":"check","text":"<p>When this method is called, the backend must check if authentication was successful.</p> <pre><code>public check(\\Sabre\\HTTP\\RequestInterface $request, \\Sabre\\HTTP\\ResponseInterface $response): array\n</code></pre> <p>The returned value must be one of the following</p> <p>[true, \"principals/username\"] [false, \"reason for failure\"]</p> <p>If authentication was successful, it's expected that the authentication backend returns a so-called principal url.</p> <p>Examples of a principal url:</p> <p>principals/admin principals/user1 principals/users/joe principals/uid/123457</p> <p>If you don't use WebDAV ACL (RFC3744) we recommend that you simply return a string such as:</p> <p>principals/users/[username]</p> <p>Parameters:</p> Parameter Type Description <code>$request</code> \\Sabre\\HTTP\\RequestInterface <code>$response</code> \\Sabre\\HTTP\\ResponseInterface"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#check_module_access","title":"check_module_access","text":"<pre><code>protected check_module_access(mixed $channel_id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$channel_id</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setcurrentuser","title":"setCurrentUser","text":"<p>Sets the channel_name from the currently logged-in channel.</p> <pre><code>public setCurrentUser(string $name): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string The channel's name"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#getcurrentuser","title":"getCurrentUser","text":"<p>Returns information about the currently logged-in channel.</p> <pre><code>public getCurrentUser(): string|null\n</code></pre> <p>If nobody is currently logged in, this method should return null.</p> <p>See Also:</p> <ul> <li> <ul> <li>\\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::getCurrentUser</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#settimezone","title":"setTimezone","text":"<pre><code>public setTimezone(string $timezone): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$timezone</code> string The channel's timezone."},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#gettimezone","title":"getTimezone","text":"<pre><code>public getTimezone(): string\n</code></pre> <p>Return Value:</p> <p>Return the channel's timezone.</p>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setbrowserplugin","title":"setBrowserPlugin","text":"<pre><code>public setBrowserPlugin(\\Sabre\\DAV\\Browser\\Plugin $browser): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$browser</code> \\Sabre\\DAV\\Browser\\Plugin <p>See Also:</p> <ul> <li>\\Zotlabs\\Storage\\RedBrowser::set_writeable() - </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#log","title":"log","text":"<pre><code>public log(): void\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/","title":"CalDAVClient","text":"<ul> <li>Full name: <code>\\Zotlabs\\Storage\\CalDAVClient</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#username","title":"username","text":"<pre><code>private $username\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#password","title":"password","text":"<pre><code>private $password\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#url","title":"url","text":"<pre><code>private $url\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#filepos","title":"filepos","text":"<pre><code>public $filepos\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#request_data","title":"request_data","text":"<pre><code>public $request_data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $user, mixed $pass, mixed $url): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$user</code> mixed <code>$pass</code> mixed <code>$url</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#set_data","title":"set_data","text":"<pre><code>private set_data(mixed $s): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#curl_read","title":"curl_read","text":"<pre><code>public curl_read(mixed $ch, mixed $fh, mixed $size): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ch</code> mixed <code>$fh</code> mixed <code>$size</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#ctag_fetch","title":"ctag_fetch","text":"<pre><code>public ctag_fetch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#detail_fetch","title":"detail_fetch","text":"<pre><code>public detail_fetch(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Storage/Directory/","title":"Directory","text":"<ul> <li>Full name: <code>\\Zotlabs\\Storage\\Directory</code></li> <li>Parent class: <code>Node</code></li> <li>This class implements: <code>\\Sabre\\DAV\\ICollection</code>, <code>\\Sabre\\DAV\\IQuota</code>, <code>\\Sabre\\DAV\\IMoveTarget</code></li> </ul> <p>See Also:</p> <ul> <li>http://github.com/friendica/red - </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Storage/Directory/#red_path","title":"red_path","text":"<pre><code>private string $red_path\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#folder_hash","title":"folder_hash","text":"<pre><code>public $folder_hash\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#data","title":"data","text":"<pre><code>public $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#ext_path","title":"ext_path","text":"<pre><code>private string $ext_path\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#root_dir","title":"root_dir","text":"<pre><code>private $root_dir\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#auth","title":"auth","text":"<pre><code>private $auth\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#os_path","title":"os_path","text":"<pre><code>public string $os_path\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Storage/Directory/#__construct","title":"__construct","text":"<pre><code>public __construct(string $ext_path, mixed $data, \\Zotlabs\\Storage\\BasicAuth&amp; $auth_plugin): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$ext_path</code> string a full path <code>$data</code> mixed <code>$auth_plugin</code> \\Zotlabs\\Storage\\BasicAuth"},{"location":"dev/classes/Zotlabs/Storage/Directory/#log","title":"log","text":"<pre><code>private log(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getchildren","title":"getChildren","text":"<pre><code>public getChildren(): array\n</code></pre> <p>Return Value:</p> <p>\\Sabre\\DAV\\INode[]</p> <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getchild","title":"getChild","text":"<pre><code>public getChild(string $name): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string <p>Throws:</p> <ul> <li> <p><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></p> </li> <li> <p><code>&amp;quot;\\Sabre\\DAV\\Exception\\NotFound&amp;quot;</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getname","title":"getName","text":"<pre><code>public getName(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#setname","title":"setName","text":"<pre><code>public setName(string $name): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string The new name of the directory. <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#createfile","title":"createFile","text":"<pre><code>public createFile(string $name, resource|string $data = null): null|string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string Name of the file <code>$data</code> resource|string Initial payload <p>Return Value:</p> <p>ETag</p> <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#createdirectory","title":"createDirectory","text":"<pre><code>public createDirectory(string $name): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string the directory to create"},{"location":"dev/classes/Zotlabs/Storage/Directory/#delete","title":"delete","text":"<pre><code>public delete(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#childexists","title":"childExists","text":"<pre><code>public childExists(string $name): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string The name to check if it exists."},{"location":"dev/classes/Zotlabs/Storage/Directory/#moveinto","title":"moveInto","text":"<pre><code>public moveInto(mixed $targetName, mixed $sourcePath, \\Sabre\\DAV\\INode $sourceNode): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$targetName</code> mixed <code>$sourcePath</code> mixed <code>$sourceNode</code> \\Sabre\\DAV\\INode"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getdir","title":"getDir","text":"<pre><code>public getDir(): void\n</code></pre> <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\NotFound&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getlastmodified","title":"getLastModified","text":"<pre><code>public getLastModified(): int\n</code></pre> <p>Return Value:</p> <p>last modification time in UNIX timestamp</p>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#collectiondata","title":"CollectionData","text":"<pre><code>public CollectionData(string $file, \\Zotlabs\\Storage\\BasicAuth&amp; $auth): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> string path to a directory <code>$auth</code> \\Zotlabs\\Storage\\BasicAuth <p>Throws:</p> <ul> <li> <p><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></p> </li> <li> <p><code>&amp;quot;\\Sabre\\DAV\\Exception\\NotFound&amp;quot;</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#channellist","title":"ChannelList","text":"<pre><code>public ChannelList(\\Zotlabs\\Storage\\BasicAuth&amp; $auth): array\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$auth</code> \\Zotlabs\\Storage\\BasicAuth <p>Return Value:</p> <p>Directory[]</p>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#filedata","title":"FileData","text":"<pre><code>public FileData(string $file, \\Zotlabs\\Storage\\BasicAuth&amp; $auth, bool $test = false): \\Zotlabs\\Storage\\File|\\Zotlabs\\Storage\\Directory|bool|null\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$file</code> string path to file or directory <code>$auth</code> \\Zotlabs\\Storage\\BasicAuth <code>$test</code> bool (optional) enable test mode <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getquotainfo","title":"getQuotaInfo","text":"<pre><code>public getQuotaInfo(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Storage/File/","title":"File","text":"<ul> <li>Full name: <code>\\Zotlabs\\Storage\\File</code></li> <li>Parent class: <code>Node</code></li> <li>This class implements: <code>\\Sabre\\DAV\\IFile</code></li> </ul> <p>See Also:</p> <ul> <li>http://github.com/friendica/red - </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/File/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Storage/File/#data","title":"data","text":"<p>The file from attach table.</p> <pre><code>public array $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#auth","title":"auth","text":"<pre><code>private $auth\n</code></pre> <p>See Also:</p> <ul> <li> <ul> <li>\\Sabre\\DAV\\Auth\\Backend\\BackendInterface</li> </ul> </li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/File/#name","title":"name","text":"<pre><code>private string $name\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#os_path","title":"os_path","text":"<pre><code>public $os_path\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#folder_hash","title":"folder_hash","text":"<pre><code>public $folder_hash\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Storage/File/#__construct","title":"__construct","text":"<p>Sets up the node, expects a full path name.</p> <pre><code>public __construct(string $name, array $data, mixed&amp; $auth): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$name</code> string <code>$data</code> array from attach table <code>$auth</code> mixed"},{"location":"dev/classes/Zotlabs/Storage/File/#getname","title":"getName","text":"<pre><code>public getName(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#setname","title":"setName","text":"<pre><code>public setName(string $newName): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$newName</code> string The new name of the file. <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/File/#put","title":"put","text":"<pre><code>public put(resource $data): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> resource"},{"location":"dev/classes/Zotlabs/Storage/File/#get","title":"get","text":"<pre><code>public get(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#getetag","title":"getETag","text":"<pre><code>public getETag(): null|string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#getcontenttype","title":"getContentType","text":"<pre><code>public getContentType(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Storage/File/#getsize","title":"getSize","text":"<pre><code>public getSize(): int\n</code></pre> <p>Return Value:</p> <p>filesize in bytes</p>"},{"location":"dev/classes/Zotlabs/Storage/File/#getlastmodified","title":"getLastModified","text":"<pre><code>public getLastModified(): int\n</code></pre> <p>Return Value:</p> <p>last modification time in UNIX timestamp</p>"},{"location":"dev/classes/Zotlabs/Storage/File/#delete","title":"delete","text":"<pre><code>public delete(): mixed\n</code></pre> <p>Throws:</p> <ul> <li><code>&amp;quot;\\Sabre\\DAV\\Exception\\Forbidden&amp;quot;</code></li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/","title":"ZotOauth2Pdo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Storage\\ZotOauth2Pdo</code></li> <li>Parent class: <code>Pdo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/#getconfig","title":"getConfig","text":"<pre><code>public getConfig(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/","title":"Tagadelic","text":"<ul> <li>Full name: <code>\\Zotlabs\\Text\\Tagadelic</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#calc","title":"calc","text":"<pre><code>public static calc(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#tags_sort","title":"tags_sort","text":"<pre><code>public static tags_sort(mixed $a, mixed $b): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$a</code> mixed <code>$b</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/","title":"Epubthumb","text":"<p>Thumbnail creation for epub files.</p> <ul> <li>Full name: <code>\\Zotlabs\\Thumbs\\Epubthumb</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#match","title":"Match","text":"<p>Match for application/epub+zip.</p> <pre><code>public Match(string $type): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> string MimeType"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#thumb","title":"Thumb","text":"<p>Create the thumbnail if the Epub has a cover.</p> <pre><code>public Thumb(array $attach, \\Zotlabs\\Thumbs\\number $preview_style, \\Zotlabs\\Thumbs\\number $height = 300, \\Zotlabs\\Thumbs\\number $width = 300): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> array <code>$preview_style</code> \\Zotlabs\\Thumbs\\number unused <code>$height</code> \\Zotlabs\\Thumbs\\number (optional) default 300 <code>$width</code> \\Zotlabs\\Thumbs\\number (optional) default 300"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#getcover","title":"getCover","text":"<pre><code>private getCover(string $filename): \\GdImage|false\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$filename</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/","title":"Mp3audio","text":"<ul> <li>Full name: <code>\\Zotlabs\\Thumbs\\Mp3audio</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#match","title":"Match","text":"<pre><code>public Match(mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#thumb","title":"Thumb","text":"<pre><code>public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> mixed <code>$preview_style</code> mixed <code>$height</code> mixed <code>$width</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/","title":"Pdf","text":"<ul> <li>Full name: <code>\\Zotlabs\\Thumbs\\Pdf</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#match","title":"Match","text":"<pre><code>public Match(mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#thumb","title":"Thumb","text":"<pre><code>public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> mixed <code>$preview_style</code> mixed <code>$height</code> mixed <code>$width</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Thumbs/Text/","title":"Text","text":"<ul> <li>Full name: <code>\\Zotlabs\\Thumbs\\Text</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Thumbs/Text/#matchdefault","title":"MatchDefault","text":"<pre><code>public MatchDefault(mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#thumb","title":"Thumb","text":"<pre><code>public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> mixed <code>$preview_style</code> mixed <code>$height</code> mixed <code>$width</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Thumbs/Video/","title":"Video","text":"<ul> <li>Full name: <code>\\Zotlabs\\Thumbs\\Video</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Thumbs/Video/#matchdefault","title":"MatchDefault","text":"<pre><code>public MatchDefault(mixed $type): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$type</code> mixed"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#thumb","title":"Thumb","text":"<pre><code>public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$attach</code> mixed <code>$preview_style</code> mixed <code>$height</code> mixed <code>$width</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1000/","title":"_1000","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1000</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1000/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1000/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1001/","title":"_1001","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1001</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1001/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1001/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1002/","title":"_1002","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1002</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1002/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1002/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1003/","title":"_1003","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1003</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1003/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1003/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1004/","title":"_1004","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1004</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1004/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1004/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1005/","title":"_1005","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1005</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1005/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1005/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1006/","title":"_1006","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1006</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1006/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1006/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1007/","title":"_1007","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1007</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1007/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1007/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1008/","title":"_1008","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1008</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1008/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1008/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1009/","title":"_1009","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1009</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1009/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1009/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1010/","title":"_1010","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1010</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1010/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1010/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1011/","title":"_1011","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1011</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1011/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1011/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1012/","title":"_1012","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1012</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1012/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1012/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1013/","title":"_1013","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1013</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1013/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1013/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1014/","title":"_1014","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1014</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1014/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1014/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1015/","title":"_1015","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1015</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1015/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1015/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1016/","title":"_1016","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1016</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1016/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1016/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1017/","title":"_1017","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1017</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1017/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1017/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1018/","title":"_1018","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1018</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1018/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1018/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1019/","title":"_1019","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1019</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1019/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1019/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1020/","title":"_1020","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1020</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1020/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1020/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1021/","title":"_1021","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1021</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1021/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1021/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1022/","title":"_1022","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1022</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1022/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1022/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1023/","title":"_1023","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1023</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1023/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1023/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1024/","title":"_1024","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1024</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1024/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1024/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1025/","title":"_1025","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1025</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1025/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1025/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1026/","title":"_1026","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1026</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1026/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1026/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1027/","title":"_1027","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1027</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1027/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1027/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1028/","title":"_1028","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1028</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1028/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1028/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1029/","title":"_1029","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1029</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1029/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1029/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1030/","title":"_1030","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1030</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1030/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1030/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1031/","title":"_1031","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1031</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1031/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1031/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1032/","title":"_1032","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1032</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1032/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1032/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1033/","title":"_1033","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1033</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1033/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1033/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1034/","title":"_1034","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1034</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1034/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1034/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1035/","title":"_1035","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1035</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1035/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1035/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1036/","title":"_1036","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1036</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1036/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1036/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1037/","title":"_1037","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1037</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1037/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1037/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1038/","title":"_1038","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1038</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1038/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1038/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1039/","title":"_1039","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1039</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1039/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1039/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1040/","title":"_1040","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1040</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1040/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1040/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1041/","title":"_1041","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1041</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1041/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1041/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1042/","title":"_1042","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1042</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1042/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1042/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1043/","title":"_1043","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1043</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1043/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1043/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1044/","title":"_1044","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1044</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1044/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1044/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1045/","title":"_1045","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1045</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1045/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1045/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1046/","title":"_1046","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1046</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1046/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1046/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1047/","title":"_1047","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1047</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1047/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1047/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1048/","title":"_1048","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1048</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1048/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1048/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1049/","title":"_1049","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1049</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1049/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1049/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1050/","title":"_1050","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1050</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1050/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1050/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1051/","title":"_1051","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1051</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1051/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1051/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1052/","title":"_1052","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1052</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1052/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1052/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1053/","title":"_1053","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1053</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1053/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1053/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1054/","title":"_1054","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1054</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1054/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1054/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1055/","title":"_1055","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1055</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1055/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1055/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1056/","title":"_1056","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1056</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1056/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1056/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1057/","title":"_1057","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1057</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1057/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1057/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1058/","title":"_1058","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1058</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1058/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1058/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1059/","title":"_1059","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1059</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1059/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1059/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1060/","title":"_1060","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1060</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1060/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1060/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1061/","title":"_1061","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1061</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1061/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1061/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1062/","title":"_1062","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1062</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1062/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1062/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1063/","title":"_1063","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1063</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1063/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1063/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1064/","title":"_1064","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1064</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1064/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1064/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1065/","title":"_1065","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1065</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1065/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1065/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1066/","title":"_1066","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1066</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1066/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1066/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1067/","title":"_1067","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1067</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1067/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1067/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1068/","title":"_1068","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1068</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1068/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1068/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1069/","title":"_1069","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1069</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1069/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1069/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1070/","title":"_1070","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1070</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1070/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1070/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1071/","title":"_1071","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1071</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1071/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1071/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1072/","title":"_1072","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1072</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1072/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1072/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1073/","title":"_1073","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1073</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1073/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1073/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1074/","title":"_1074","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1074</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1074/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1074/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1075/","title":"_1075","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1075</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1075/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1075/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1076/","title":"_1076","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1076</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1076/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1076/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1077/","title":"_1077","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1077</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1077/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1077/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1078/","title":"_1078","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1078</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1078/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1078/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1079/","title":"_1079","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1079</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1079/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1079/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1080/","title":"_1080","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1080</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1080/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1080/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1081/","title":"_1081","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1081</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1081/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1081/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1082/","title":"_1082","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1082</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1082/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1082/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1083/","title":"_1083","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1083</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1083/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1083/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1084/","title":"_1084","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1084</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1084/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1084/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1085/","title":"_1085","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1085</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1085/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1085/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1086/","title":"_1086","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1086</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1086/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1086/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1087/","title":"_1087","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1087</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1087/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1087/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1088/","title":"_1088","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1088</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1088/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1088/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1089/","title":"_1089","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1089</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1089/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1089/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1090/","title":"_1090","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1090</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1090/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1090/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1091/","title":"_1091","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1091</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1091/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1091/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1092/","title":"_1092","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1092</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1092/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1092/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1093/","title":"_1093","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1093</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1093/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1093/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1094/","title":"_1094","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1094</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1094/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1094/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1095/","title":"_1095","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1095</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1095/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1095/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1096/","title":"_1096","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1096</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1096/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1096/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1097/","title":"_1097","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1097</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1097/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1097/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1098/","title":"_1098","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1098</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1098/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1098/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1099/","title":"_1099","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1099</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1099/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1099/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1100/","title":"_1100","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1100</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1100/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1100/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1101/","title":"_1101","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1101</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1101/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1101/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1102/","title":"_1102","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1102</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1102/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1102/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1103/","title":"_1103","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1103</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1103/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1103/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1104/","title":"_1104","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1104</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1104/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1104/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1105/","title":"_1105","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1105</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1105/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1105/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1106/","title":"_1106","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1106</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1106/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1106/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1107/","title":"_1107","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1107</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1107/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1107/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1108/","title":"_1108","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1108</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1108/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1108/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1109/","title":"_1109","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1109</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1109/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1109/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1110/","title":"_1110","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1110</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1110/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1110/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1111/","title":"_1111","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1111</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1111/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1111/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1112/","title":"_1112","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1112</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1112/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1112/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1113/","title":"_1113","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1113</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1113/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1113/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1114/","title":"_1114","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1114</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1114/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1114/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1115/","title":"_1115","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1115</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1115/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1115/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1116/","title":"_1116","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1116</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1116/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1116/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1117/","title":"_1117","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1117</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1117/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1117/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1118/","title":"_1118","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1118</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1118/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1118/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1119/","title":"_1119","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1119</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1119/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1119/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1120/","title":"_1120","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1120</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1120/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1120/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1121/","title":"_1121","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1121</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1121/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1121/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1122/","title":"_1122","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1122</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1122/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1122/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1123/","title":"_1123","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1123</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1123/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1123/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1124/","title":"_1124","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1124</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1124/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1124/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1125/","title":"_1125","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1125</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1125/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1125/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1126/","title":"_1126","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1126</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1126/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1126/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1127/","title":"_1127","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1127</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1127/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1127/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1128/","title":"_1128","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1128</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1128/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1128/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1129/","title":"_1129","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1129</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1129/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1129/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1130/","title":"_1130","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1130</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1130/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1130/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1131/","title":"_1131","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1131</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1131/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1131/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1132/","title":"_1132","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1132</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1132/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1132/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1133/","title":"_1133","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1133</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1133/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1133/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1134/","title":"_1134","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1134</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1134/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1134/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1135/","title":"_1135","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1135</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1135/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1135/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1136/","title":"_1136","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1136</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1136/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1136/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1137/","title":"_1137","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1137</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1137/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1137/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1138/","title":"_1138","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1138</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1138/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1138/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1139/","title":"_1139","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1139</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1139/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1139/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1140/","title":"_1140","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1140</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1140/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1140/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1141/","title":"_1141","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1141</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1141/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1141/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1142/","title":"_1142","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1142</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1142/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1142/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1143/","title":"_1143","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1143</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1143/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1143/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1144/","title":"_1144","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1144</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1144/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1144/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1145/","title":"_1145","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1145</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1145/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1145/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1146/","title":"_1146","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1146</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1146/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1146/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1147/","title":"_1147","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1147</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1147/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1147/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1148/","title":"_1148","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1148</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1148/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1148/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1149/","title":"_1149","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1149</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1149/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1149/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1150/","title":"_1150","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1150</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1150/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1150/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1151/","title":"_1151","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1151</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1151/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1151/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1152/","title":"_1152","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1152</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1152/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1152/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1153/","title":"_1153","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1153</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1153/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1153/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1154/","title":"_1154","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1154</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1154/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1154/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1155/","title":"_1155","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1155</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1155/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1155/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1156/","title":"_1156","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1156</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1156/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1156/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1157/","title":"_1157","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1157</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1157/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1157/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1158/","title":"_1158","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1158</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1158/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1158/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1159/","title":"_1159","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1159</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1159/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1159/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1160/","title":"_1160","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1160</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1160/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1160/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1161/","title":"_1161","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1161</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1161/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1161/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1162/","title":"_1162","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1162</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1162/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1162/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1163/","title":"_1163","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1163</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1163/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1163/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1164/","title":"_1164","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1164</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1164/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1164/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1165/","title":"_1165","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1165</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1165/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1165/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1166/","title":"_1166","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1166</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1166/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1166/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1167/","title":"_1167","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1167</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1167/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1167/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1168/","title":"_1168","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1168</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1168/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1168/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1169/","title":"_1169","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1169</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1169/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1169/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1170/","title":"_1170","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1170</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1170/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1170/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1171/","title":"_1171","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1171</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1171/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1171/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1172/","title":"_1172","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1172</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1172/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1172/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1173/","title":"_1173","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1173</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1173/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1173/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1174/","title":"_1174","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1174</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1174/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1174/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1175/","title":"_1175","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1175</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1175/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1175/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1176/","title":"_1176","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1176</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1176/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1176/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1177/","title":"_1177","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1177</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1177/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1177/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1178/","title":"_1178","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1178</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1178/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1178/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1179/","title":"_1179","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1179</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1179/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1179/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1180/","title":"_1180","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1180</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1180/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1180/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1181/","title":"_1181","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1181</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1181/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1181/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1182/","title":"_1182","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1182</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1182/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1182/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1183/","title":"_1183","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1183</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1183/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1183/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1184/","title":"_1184","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1184</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1184/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1184/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1185/","title":"_1185","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1185</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1185/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1185/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1186/","title":"_1186","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1186</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1186/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1186/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1187/","title":"_1187","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1187</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1187/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1187/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1188/","title":"_1188","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1188</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1188/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1188/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1189/","title":"_1189","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1189</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1189/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1189/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1190/","title":"_1190","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1190</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1190/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1190/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1191/","title":"_1191","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1191</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1191/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1191/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1192/","title":"_1192","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1192</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1192/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1192/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1193/","title":"_1193","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1193</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1193/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1193/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1194/","title":"_1194","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1194</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1194/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1194/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1195/","title":"_1195","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1195</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1195/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1195/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1196/","title":"_1196","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1196</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1196/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1196/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1197/","title":"_1197","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1197</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1197/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1197/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1198/","title":"_1198","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1198</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1198/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1198/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1199/","title":"_1199","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1199</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1199/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1199/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1200/","title":"_1200","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1200</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1200/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1200/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1201/","title":"_1201","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1201</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1201/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1201/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1202/","title":"_1202","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1202</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1202/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1202/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1203/","title":"_1203","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1203</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1203/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1203/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1204/","title":"_1204","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1204</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1204/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1204/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1205/","title":"_1205","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1205</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1205/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1205/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1206/","title":"_1206","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1206</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1206/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1206/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1207/","title":"_1207","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1207</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1207/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1207/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1208/","title":"_1208","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1208</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1208/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1208/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1209/","title":"_1209","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1209</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1209/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1209/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1210/","title":"_1210","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1210</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1210/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1210/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1211/","title":"_1211","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1211</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1211/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1211/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1212/","title":"_1212","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1212</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1212/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1212/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1213/","title":"_1213","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1213</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1213/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1213/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1214/","title":"_1214","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1214</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1214/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1214/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1215/","title":"_1215","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1215</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1215/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1215/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1216/","title":"_1216","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1216</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1216/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1216/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1217/","title":"_1217","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1217</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1217/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1217/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1218/","title":"_1218","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1218</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1218/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1218/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1219/","title":"_1219","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1219</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1219/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1219/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1220/","title":"_1220","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1220</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1220/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1220/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1221/","title":"_1221","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1221</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1221/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1221/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1222/","title":"_1222","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1222</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1222/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1222/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1223/","title":"_1223","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1223</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1223/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1223/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1224/","title":"_1224","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1224</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1224/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1224/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1225/","title":"_1225","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1225</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1225/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1225/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1226/","title":"_1226","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1226</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1226/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1226/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Update/_1226/#upgrade","title":"upgrade","text":"<pre><code>public static upgrade(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1227/","title":"_1227","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1227</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1227/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1227/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1228/","title":"_1228","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1228</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1228/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1228/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1229/","title":"_1229","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1229</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1229/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1229/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1230/","title":"_1230","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1230</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1230/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1230/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1231/","title":"_1231","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1231</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1231/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1231/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1232/","title":"_1232","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1232</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1232/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1232/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1233/","title":"_1233","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1233</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1233/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1233/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1234/","title":"_1234","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1234</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1234/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1234/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1235/","title":"_1235","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1235</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1235/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1235/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1236/","title":"_1236","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1236</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1236/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1236/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1237/","title":"_1237","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1237</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1237/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1237/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1238/","title":"_1238","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1238</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1238/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1238/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1239/","title":"_1239","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1239</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1239/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1239/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1240/","title":"_1240","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1240</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1240/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1240/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1241/","title":"_1241","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1241</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1241/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1241/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1242/","title":"_1242","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1242</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1242/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1242/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1243/","title":"_1243","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1243</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1243/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1243/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1244/","title":"_1244","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1244</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1244/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1244/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1245/","title":"_1245","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1245</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1245/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1245/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1246/","title":"_1246","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1246</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1246/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1246/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1247/","title":"_1247","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1247</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1247/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1247/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1248/","title":"_1248","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1248</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1248/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1248/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1249/","title":"_1249","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1249</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1249/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1249/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1250/","title":"_1250","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1250</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1250/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1250/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1251/","title":"_1251","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1251</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1251/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1251/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1252/","title":"_1252","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1252</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1252/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1252/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1253/","title":"_1253","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1253</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1253/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1253/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1254/","title":"_1254","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1254</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1254/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1254/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1255/","title":"_1255","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1255</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1255/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1255/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1256/","title":"_1256","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1256</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1256/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1256/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1257/","title":"_1257","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1257</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1257/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1257/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1258/","title":"_1258","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1258</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1258/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1258/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1259/","title":"_1259","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1259</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1259/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1259/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1260/","title":"_1260","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1260</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1260/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1260/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Update/_1260/#verify","title":"verify","text":"<pre><code>public verify(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1261/","title":"_1261","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1261</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1261/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1261/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Update/_1261/#verify","title":"verify","text":"<pre><code>public verify(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1262/","title":"_1262","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1262</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1262/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1262/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Update/_1263/","title":"_1263","text":"<ul> <li>Full name: <code>\\Zotlabs\\Update\\_1263</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Update/_1263/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Update/_1263/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/Controller/","title":"Controller","text":"<p>Base controller class for Modules.</p> <p>Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need.</p> <p>The methods defined by this class is invoked in order:</p> <ul> <li>init()</li> <li>post() -- only for POST requests</li> <li>get()</li> </ul> <p>Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module <code>init</code> and/or <code>post</code> functions and then invoke <code>killme()</code> to terminate further processing.</p> <ul> <li>Full name: <code>\\Zotlabs\\Web\\Controller</code></li> <li>This class is an Abstract class</li> </ul>"},{"location":"dev/classes/Zotlabs/Web/Controller/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/Controller/#init","title":"init","text":"<p>Initialize request processing.</p> <pre><code>public init(): mixed\n</code></pre> <p>This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.</p>"},{"location":"dev/classes/Zotlabs/Web/Controller/#post","title":"post","text":"<p>Process POST requests.</p> <pre><code>public post(): mixed\n</code></pre> <p>This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.</p>"},{"location":"dev/classes/Zotlabs/Web/Controller/#get","title":"get","text":"<p>Process GET requests or the body part of POST requests.</p> <pre><code>public get(): string\n</code></pre> <p>This method is called directly for GET requests, and immediately after the <code>post()</code> method for POST requests.</p> <p>It will return the module content as a HTML string.</p> <p>Return Value:</p> <p>HTML content for the module.</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/","title":"HTTPHeaders","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\HTTPHeaders</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#in_progress","title":"in_progress","text":"<pre><code>private $in_progress\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#parsed","title":"parsed","text":"<pre><code>private $parsed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $headers): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$headers</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#fetch","title":"fetch","text":"<pre><code>public fetch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#fetcharr","title":"fetcharr","text":"<pre><code>public fetcharr(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/","title":"HTTPSig","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\HTTPSig</code></li> </ul> <p>See Also:</p> <ul> <li>https://tools.ietf.org/html/draft-cavage-http-signatures-10 - </li> </ul>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#generate_digest_header","title":"generate_digest_header","text":"<pre><code>public static generate_digest_header(string $body, string $alg = &amp;#039;sha256&amp;#039;): string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$body</code> string The value to create the digest for <code>$alg</code> string hash algorithm (one of 'sha256','sha512') <p>Return Value:</p> <p>The generated digest header string for $body</p> <p>See Also:</p> <ul> <li>https://tools.ietf.org/html/rfc5843 - </li> </ul>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#find_headers","title":"find_headers","text":"<pre><code>public static find_headers(mixed $data, mixed&amp; $body): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$body</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#verify","title":"verify","text":"<pre><code>public static verify(mixed $data, mixed $key = &amp;#039;&amp;#039;, mixed $keytype = &amp;#039;&amp;#039;): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$key</code> mixed <code>$keytype</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_key","title":"get_key","text":"<pre><code>public static get_key(mixed $key, mixed $keytype, mixed $id, mixed $force = false): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed <code>$keytype</code> mixed <code>$id</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#convertkey","title":"convertKey","text":"<pre><code>public static convertKey(mixed $key): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$key</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_activitystreams_key","title":"get_activitystreams_key","text":"<pre><code>public static get_activitystreams_key(string $id, bool $force = false, mixed $delete = false): bool|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> string <code>$force</code> bool (optional, default false) <code>$delete</code> mixed <p>Return Value:</p> <p>false if no pub key found, otherwise return an array with the pub key</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_webfinger_key","title":"get_webfinger_key","text":"<pre><code>public static get_webfinger_key(string $id, bool $force = false): bool|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> string <code>$force</code> bool (optional, default false) <p>Return Value:</p> <p>false if no pub key found, otherwise return an array with the pub key</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_zotfinger_key","title":"get_zotfinger_key","text":"<pre><code>public static get_zotfinger_key(string $id, bool $force = false): bool|array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$id</code> string <code>$force</code> bool (optional, default false) <p>Return Value:</p> <p>false if no pub key found, otherwise return an array with the public key</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#create_sig","title":"create_sig","text":"<pre><code>public static create_sig(array $head, string $prvkey, string $keyid = EMPTY_STR, bool $auth = false, string $alg = &amp;#039;sha256&amp;#039;, array $encryption = false): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$head</code> array <code>$prvkey</code> string <code>$keyid</code> string (optional, default '') <code>$auth</code> bool (optional, default false) <code>$alg</code> string (optional, default 'sha256') <code>$encryption</code> array [ 'key', 'algorithm' ] or false"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#set_headers","title":"set_headers","text":"<pre><code>public static set_headers(array $headers): void\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$headers</code> array"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#sign","title":"sign","text":"<pre><code>public static sign(array $head, string $prvkey, string $alg = &amp;#039;sha256&amp;#039;): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$head</code> array <code>$prvkey</code> string <code>$alg</code> string (optional) default 'sha256'"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#parse_sigheader","title":"parse_sigheader","text":"<pre><code>public static parse_sigheader(string $header): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$header</code> string <p>Return Value:</p> <p>associate array with - \\e string \\b keyID - \\e string \\b algorithm - \\e array  \\b headers - \\e string \\b signature</p>"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#decrypt_sigheader","title":"decrypt_sigheader","text":"<pre><code>public static decrypt_sigheader(string $header, string $prvkey = null): array|string\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$header</code> string <code>$prvkey</code> string (optional), if not set use site private key <p>Return Value:</p> <p>associative array, empty string if failue - \\e string \\b iv - \\e string \\b key - \\e string \\b alg - \\e string \\b data</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/","title":"HttpMeta","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\HttpMeta</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#vars","title":"vars","text":"<pre><code>private $vars\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#og","title":"og","text":"<pre><code>private $og\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#ogproperties","title":"ogproperties","text":"<pre><code>private $ogproperties\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#set","title":"set","text":"<pre><code>public set(mixed $property, mixed $value, mixed $mode): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$property</code> mixed <code>$value</code> mixed <code>$mode</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#check_required","title":"check_required","text":"<pre><code>public check_required(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#get_field","title":"get_field","text":"<pre><code>public get_field(mixed $field): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$field</code> mixed"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#get","title":"get","text":"<pre><code>public get(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/Router/","title":"Router","text":"<p>We have already parsed the server path into App::$argc and App::$argv</p> <p>App::$argv[0] is our module name. Let's call it 'foo'. We will load the Zotlabs/Module/Foo.php (object) or file mod/foo.php (procedural) and use it for handling our URL request to 'https://ourgreatwebsite.something/foo' . The module file contains a few functions that we call in various circumstances and in the following order:</p> <ul> <li>Full name: <code>\\Zotlabs\\Web\\Router</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/Router/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/Router/#modname","title":"modname","text":"<pre><code>private $modname\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Router/#controller","title":"controller","text":"<pre><code>private $controller\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Router/#module_loaded","title":"module_loaded","text":"<pre><code>private bool $module_loaded\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Router/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/Router/#__construct","title":"__construct","text":"<pre><code>public __construct(): mixed\n</code></pre> <p>Throws:</p> <p>module not found</p> <ul> <li><code>Exception</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/Router/#dispatch","title":"Dispatch","text":"<pre><code>public Dispatch(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/Session/","title":"Session","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\Session</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/Session/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/Session/#handler","title":"handler","text":"<pre><code>private $handler\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#session_started","title":"session_started","text":"<pre><code>private $session_started\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#custom_handler","title":"custom_handler","text":"<pre><code>private $custom_handler\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/Session/#init","title":"init","text":"<pre><code>public init(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#start","title":"start","text":"<pre><code>public start(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#nuke","title":"nuke","text":"<pre><code>public nuke(): void\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#new_cookie","title":"new_cookie","text":"<pre><code>public new_cookie(mixed $xtime): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$xtime</code> mixed"},{"location":"dev/classes/Zotlabs/Web/Session/#extend_cookie","title":"extend_cookie","text":"<pre><code>public extend_cookie(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/Session/#return_check","title":"return_check","text":"<pre><code>public return_check(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/","title":"SessionHandler","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\SessionHandler</code></li> <li>This class implements: <code>\\SessionHandlerInterface</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#open","title":"open","text":"<pre><code>public open(mixed $s, mixed $n): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$n</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#read","title":"read","text":"<pre><code>public read(mixed $id): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#write","title":"write","text":"<pre><code>public write(mixed $id, mixed $data): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#close","title":"close","text":"<pre><code>public close(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#destroy","title":"destroy","text":"<pre><code>public destroy(mixed $id): bool\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#gc","title":"gc","text":"<pre><code>public gc(mixed $expire): int\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expire</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/","title":"SessionRedis","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\SessionRedis</code></li> <li>This class implements: <code>\\SessionHandlerInterface</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#redis","title":"redis","text":"<pre><code>private $redis\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $connection): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$connection</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#open","title":"open","text":"<pre><code>public open(mixed $s, mixed $n): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$s</code> mixed <code>$n</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#read","title":"read","text":"<pre><code>public read(mixed $id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#write","title":"write","text":"<pre><code>public write(mixed $id, mixed $data): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed <code>$data</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#close","title":"close","text":"<pre><code>public close(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#destroy","title":"destroy","text":"<pre><code>public destroy(mixed $id): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$id</code> mixed"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#gc","title":"gc","text":"<pre><code>public gc(mixed $expire): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$expire</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/SubModule/","title":"SubModule","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\SubModule</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/SubModule/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Web/SubModule/#controller","title":"controller","text":"<pre><code>private $controller\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/SubModule/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/SubModule/#__construct","title":"__construct","text":"<pre><code>public __construct(int $whicharg = 1): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$whicharg</code> int"},{"location":"dev/classes/Zotlabs/Web/SubModule/#call","title":"call","text":"<pre><code>public call(string $method): bool|mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$method</code> string <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Web/WebServer/","title":"WebServer","text":"<ul> <li>Full name: <code>\\Zotlabs\\Web\\WebServer</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Web/WebServer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Web/WebServer/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/WebServer/#initialise_content","title":"initialise_content","text":"<pre><code>private initialise_content(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/WebServer/#create_channel_links","title":"create_channel_links","text":"<pre><code>private create_channel_links(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Web/WebServer/#set_homebase","title":"set_homebase","text":"<pre><code>private set_homebase(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Activity/","title":"Activity","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Activity</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Activity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Activity/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/","title":"Activity_filter","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Activity_filter</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/","title":"Activity_order","text":"<ul> <li>Name: Activity order</li> <li>Description: Order the network stream by posted date, last commented or by date unthreaded</li> <li> <p>Requires: network</p> </li> <li> <p>Full name: <code>\\Zotlabs\\Widget\\Activity_order</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Activity_order/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Admin/","title":"Admin","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Admin</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Admin/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Admin/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Affinity/","title":"Affinity","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Affinity</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Affinity/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Affinity/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Album/","title":"Album","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Album</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Album/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Album/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/","title":"Appcategories","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Appcategories</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Appcategories/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/","title":"Appcloud","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Appcloud</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Appcloud/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Appstore/","title":"Appstore","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Appstore</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Appstore/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Appstore/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Archive/","title":"Archive","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Archive</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Archive/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Archive/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/","title":"Bookmarkedchats","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Bookmarkedchats</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/","title":"Catcloud","text":"<ul> <li>Name: Category cloud</li> <li>Description: Display category links in a cloud</li> <li> <p>Requires: channel, cards, articles</p> </li> <li> <p>Full name: <code>\\Zotlabs\\Widget\\Catcloud</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Catcloud/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/","title":"Catcloud_wall","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Catcloud_wall</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Categories/","title":"Categories","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Categories</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Categories/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Categories/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Cdav/","title":"Cdav","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Cdav</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Cdav/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Cdav/#widget","title":"widget","text":"<pre><code>public widget(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/","title":"Channel_activities","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Channel_activities</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#activities","title":"activities","text":"<pre><code>public static $activities\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#uid","title":"uid","text":"<pre><code>public static $uid\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#limit","title":"limit","text":"<pre><code>public static $limit\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#channel","title":"channel","text":"<pre><code>public static $channel\n</code></pre> <ul> <li>This property is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#widget","title":"widget","text":"<pre><code>public static widget(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_photos_activity","title":"get_photos_activity","text":"<pre><code>private static get_photos_activity(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_files_activity","title":"get_files_activity","text":"<pre><code>private static get_files_activity(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_webpages_activity","title":"get_webpages_activity","text":"<pre><code>private static get_webpages_activity(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_channels_activity","title":"get_channels_activity","text":"<pre><code>private static get_channels_activity(): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/","title":"Chatroom_list","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Chatroom_list</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/","title":"Chatroom_members","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Chatroom_members</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/#widget","title":"widget","text":"<pre><code>public widget(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Clock/","title":"Clock","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Clock</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Clock/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Clock/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/","title":"Common_friends","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Common_friends</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Common_friends/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/","title":"Cover_photo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Cover_photo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/","title":"Design_tools","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Design_tools</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Design_tools/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/","title":"Dirsort","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Dirsort</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Dirsort/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/","title":"Dirtags","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Dirtags</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Dirtags/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Filer/","title":"Filer","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Filer</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Filer/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Filer/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/","title":"Findpeople","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Findpeople</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Findpeople/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Follow/","title":"Follow","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Follow</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Follow/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Follow/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Forums/","title":"Forums","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Forums</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Forums/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Forums/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/","title":"Fullprofile","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Fullprofile</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/","title":"Helpindex","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Helpindex</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#contents","title":"contents","text":"<pre><code>private string $contents\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#widget","title":"widget","text":"<pre><code>public widget(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#title","title":"title","text":"<pre><code>public title(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#contents_1","title":"contents","text":"<pre><code>public contents(): string\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#inherited-methods","title":"Inherited methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#determine_help_language","title":"determine_help_language","text":"<p>Determines help language.</p> <pre><code>private determine_help_language(): mixed\n</code></pre> <p>If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent.</p> <p>Updates the <code>$lang</code> property of the module.</p>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#find_help_file","title":"find_help_file","text":"<p>Find the full path name of the file, given it's base path and the language of the request.</p> <pre><code>private find_help_file(string $base_path, string $lang): void\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$base_path</code> string The path of the file to find, relative to thedoc root path, and without the extension. <code>$lang</code> string"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#missing_translation","title":"missing_translation","text":"<pre><code>public missing_translation(): bool\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#missing_translation_message","title":"missing_translation_message","text":"<pre><code>public missing_translation_message(): string\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/","title":"Hq_controls","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Hq_controls</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/#widget","title":"widget","text":"<pre><code>public widget(mixed $options): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$options</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Item/","title":"Item","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Item</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Item/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Item/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/","title":"Menu_preview","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Menu_preview</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Messages/","title":"Messages","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Messages</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Messages/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Messages/#widget","title":"widget","text":"<pre><code>public static widget(mixed $arr): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_messages_page","title":"get_messages_page","text":"<pre><code>public static get_messages_page(mixed $options): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$options</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_dm_recipients","title":"get_dm_recipients","text":"<pre><code>public static get_dm_recipients(mixed $channel, mixed $item): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$channel</code> mixed <code>$item</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_notices_page","title":"get_notices_page","text":"<pre><code>public static get_notices_page(mixed $options): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$options</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Newmember/","title":"Newmember","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Newmember</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Newmember/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Newmember/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Notes/","title":"Notes","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Notes</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Notes/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Notes/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Notifications/","title":"Notifications","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Notifications</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Notifications/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Notifications/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Permcats/","title":"Permcats","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Permcats</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Permcats/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Permcats/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Photo/","title":"Photo","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Photo</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Photo/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Photo/#widget","title":"widget","text":"<pre><code>public widget(array $arr): string\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> array associative array with \\e string \\b src URL of photo; URL must be an http or https URL \\e boolean \\b zrl use zid in URL* \\e string \\b style CSS string <p>Return Value:</p> <p>with parsed HTML</p> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/","title":"Photo_albums","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Photo_albums</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/","title":"Photo_rand","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Photo_rand</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Pinned/","title":"Pinned","text":"<ul> <li>Name: Pinned items</li> <li>Description: Display pinned items</li> <li>Author: Max Kostikov</li> <li> <p>Requires: disabled_for_pdledit_gui</p> </li> <li> <p>Full name: <code>\\Zotlabs\\Widget\\Pinned</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Widget/Pinned/#allowed_types","title":"allowed_types","text":"<pre><code>private $allowed_types\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#uid","title":"uid","text":"<pre><code>private $uid\n</code></pre>"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Pinned/#widget","title":"widget","text":"<pre><code>public widget(mixed $uid, mixed $types): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$uid</code> mixed <code>$types</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#list","title":"list","text":"<pre><code>private list(mixed $types): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$types</code> mixed"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#activity","title":"activity","text":"<pre><code>private activity(mixed $item, mixed&amp; $conv_responses): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$item</code> mixed <code>$conv_responses</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/","title":"Portfolio","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Portfolio</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Portfolio/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/","title":"Privacygroups","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Privacygroups</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Profile/","title":"Profile","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Profile</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Profile/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Profile/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/","title":"Pubtagcloud","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Pubtagcloud</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Random_block/","title":"Random_block","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Random_block</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Random_block/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Random_block/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Rating/","title":"Rating","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Rating</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Rating/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Rating/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/","title":"Savedsearch","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Savedsearch</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/","title":"Settings_menu","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Settings_menu</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/","title":"Sitesearch","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Sitesearch</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/","title":"Suggestedchats","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Suggestedchats</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/","title":"Suggestions","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Suggestions</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Suggestions/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/","title":"Tagcloud","text":"<ul> <li>Name: Tag cloud</li> <li>Description: Display hashtags of your network items in a cloud</li> <li> <p>Requires: network, hq</p> </li> <li> <p>Full name: <code>\\Zotlabs\\Widget\\Tagcloud</code></p> </li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/","title":"Tagcloud_wall","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Tagcloud_wall</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/","title":"Tasklist","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Tasklist</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Tasklist/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Tokens/","title":"Tokens","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Tokens</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Tokens/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Tokens/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Vcard/","title":"Vcard","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Vcard</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Vcard/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Vcard/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/","title":"Website_portation_tools","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Website_portation_tools</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/#widget","title":"widget","text":"<pre><code>public widget(mixed $arr): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$arr</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Widget/Zcard/","title":"Zcard","text":"<ul> <li>Full name: <code>\\Zotlabs\\Widget\\Zcard</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Widget/Zcard/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Widget/Zcard/#widget","title":"widget","text":"<pre><code>public widget(mixed $args): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$args</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/","title":"IHandler","text":"<ul> <li>Full name: <code>\\Zotlabs\\Zot6\\IHandler</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#notify","title":"Notify","text":"<pre><code>public Notify(mixed $data, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#rekey","title":"Rekey","text":"<pre><code>public Rekey(mixed $sender, mixed $data, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#refresh","title":"Refresh","text":"<pre><code>public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$recipients</code> mixed <code>$hub</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#purge","title":"Purge","text":"<pre><code>public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$recipients</code> mixed <code>$hub</code> mixed <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/","title":"Receiver","text":"<ul> <li>Full name: <code>\\Zotlabs\\Zot6\\Receiver</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#properties","title":"Properties","text":""},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#data","title":"data","text":"<pre><code>protected $data\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#encrypted","title":"encrypted","text":"<pre><code>protected $encrypted\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#error","title":"error","text":"<pre><code>protected $error\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#messagetype","title":"messagetype","text":"<pre><code>protected $messagetype\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#sender","title":"sender","text":"<pre><code>protected $sender\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#site_id","title":"site_id","text":"<pre><code>protected $site_id\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#validated","title":"validated","text":"<pre><code>protected $validated\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#recipients","title":"recipients","text":"<pre><code>protected $recipients\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#response","title":"response","text":"<pre><code>protected $response\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#handler","title":"handler","text":"<pre><code>protected $handler\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#prvkey","title":"prvkey","text":"<pre><code>protected $prvkey\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#rawdata","title":"rawdata","text":"<pre><code>protected $rawdata\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#sigdata","title":"sigdata","text":"<pre><code>protected $sigdata\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#hub","title":"hub","text":"<pre><code>protected $hub\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#__construct","title":"__construct","text":"<pre><code>public __construct(mixed $handler, mixed $localdata = null): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$handler</code> mixed <code>$localdata</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#run","title":"run","text":"<pre><code>public run(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#validatesender","title":"ValidateSender","text":"<pre><code>public ValidateSender(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#valid_httpsig","title":"Valid_Httpsig","text":"<pre><code>public Valid_Httpsig(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#dispatch","title":"Dispatch","text":"<pre><code>public Dispatch(): mixed\n</code></pre>"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#encryptresponse","title":"EncryptResponse","text":"<pre><code>public EncryptResponse(): mixed\n</code></pre> <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/","title":"Zot6Handler","text":"<ul> <li>Full name: <code>\\Zotlabs\\Zot6\\Zot6Handler</code></li> <li>This class implements: <code>\\Zotlabs\\Zot6\\IHandler</code></li> </ul>"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#methods","title":"Methods","text":""},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#notify","title":"Notify","text":"<pre><code>public Notify(mixed $data, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#rekey","title":"Rekey","text":"<pre><code>public Rekey(mixed $sender, mixed $data, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#refresh","title":"Refresh","text":"<pre><code>public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$recipients</code> mixed <code>$hub</code> mixed <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#purge","title":"Purge","text":"<pre><code>public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed\n</code></pre> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$recipients</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_notify","title":"reply_notify","text":"<pre><code>public static reply_notify(mixed $data, mixed $hub): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_refresh","title":"reply_refresh","text":"<pre><code>public static reply_refresh(array $sender, array $recipients, array $hub, mixed $force): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> array <code>$recipients</code> array <code>$hub</code> array <code>$force</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#rekey_request","title":"rekey_request","text":"<pre><code>public static rekey_request(mixed $sender, mixed $data, mixed $hub): mixed\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> mixed <code>$data</code> mixed <code>$hub</code> mixed"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_purge","title":"reply_purge","text":"<pre><code>public static reply_purge(array $sender, array $recipients, array $hub): array\n</code></pre> <ul> <li>This method is static.</li> </ul> <p>Parameters:</p> Parameter Type Description <code>$sender</code> array <code>$recipients</code> array <code>$hub</code> array <p>Automatically generated on 2025-03-15</p>"},{"location":"dev/database/","title":"Database updates","text":"<p>In the https://huburl/admin/dbsync page the administrator can check if any update was not successful and, if so, retry it.</p> <p>If an update has failed but doesn't register as failed for some reason, the administrator can attempt to re-execute the update. For example for DB update #1999, by visiting the webpage:</p> <p>https://huburl/admin/dbsync/1999</p>"},{"location":"dev/database/#database-tables","title":"Database Tables","text":"Table Description abconfig arbitrary storage for connections of local channels abook connections of local channels account service provider account addon registered plugins app personal app data attach file attachments auth_codes OAuth usage cache OEmbed cache cal CalDAV containers for events channel local channels chat chat room content chatpresence channel presence information for chat chatroom data for the actual chat room clients OAuth usage config main configuration storage conv Diaspora private messages meta conversation structure event Events pgrp_member privacy groups (collections.md), group info pgrp privacy groups (collections.md), member info hook plugin hook registry hubloc xchan location storage, ties a hub location to an xchan iconfig extensible arbitrary storage for items issue future bug/issue database item all posts and webpages item_id (deprecated by iconfig) other identifiers on other services for posts likes likes of 'things' mail private messages menu webpage menu data menu_item entries for webpage menus notify notifications obj object data for things (x has y) outq output queue pconfig personal (per channel) configuration storage photo photo storage poll data for polls poll_elm data for poll elements profdef custom profile field definitions profext custom profile field data profile channel profiles profile_check DFRN remote auth use, may be obsolete register registrations requiring admin approval session web session storage shares shared item information sign Diaspora signatures. To be phased out. site site table to find directory peers source channel sources data sys_perms extensible permissions for OAuth term item taxonomy (categories, tags, etc.) table tokens OAuth usage updates directory sync updates verify general purpose verification structure vote vote data for polls xchan list of known channels in the universe xchat bookmarked chat rooms xconfig as pconfig but for channels with no local account xign channels ignored by friend suggestions xlink \"friends of friends\" linkages derived from poco, also ratings storage xperm OAuth/OpenID-Connect extensible permissions permissions storage xprof if this hub is a directory server, contains basic public profile info of everybody in the network xtag if this hub is a directory server, contains tags or interests of everybody in the network"},{"location":"dev/database/db_abook/","title":"abook","text":"Field Description Type Null Key Default Extra abook_id Sequential ID int(10) unsigned NO PRI NULL auto_increment abook_account account.account_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_channel channel.channel_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_xchan xchan.xchan_hash of the target identity (this channel's connection) char(255) NO MUL abook_my_perms bitfield of all specific permissions granted this connection int(11) NO MUL 0 abook_their_perms bitfield of all permissions granted to you by this connection int(11) NO MUL 0 abook_closeness \"closeness\" value for optional affinity tool, 0-99 tinyint(3) unsigned NO MUL 99 abook_created Datetime this record was created datetime NO MUL 0000-00-00 00:00:00 abook_updated Datetime this record was modified datetime NO MUL 0000-00-00 00:00:00 abook_connected datetime of last successful \"poll\" for this connection datetime NO MUL 0000-00-00 00:00:00 abook_dob Datetime of connection's birthday converted from their timezone to UTC datetime NO MUL 0000-00-00 00:00:00 abook_flags No longer used int(11) NO MUL 0 abook_profile profile.guid of profile to display to this connection if authenticated char(64) NO MUL abook_blocked Bi-directional communications with this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_ignored Incoming communications from this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_hidden This connection will not be shown as a connection to anybody but the channel owner int(11) NO MUL 0 abook_archived This connection is likely non-functioning and the entry and conversations are preserved, but further polled communications will not be attempted int(11) NO MUL 0 abook_pending A connection request was received from this channel but has not been approved by the channel owner, public communications may still be visible but no additional permissions have been granted int(11) NO MUL 0 abook_unconnected currently unused. Projected usage is to indicate \"one-way\" connections which were instigated on this end but are still pending on the remote end int(11) NO MUL 0 abook_self is a special case where the owner is the target. Every channel has one abook entry with abook_self and with a target abook_xchan set to channel.channel_hash. When this flag is present, abook_my_perms is the default permissions granted to all new connections and several other fields are unused int(11) NO MUL 0 abook_feed indicates this connection is an RSS/Atom feed and may trigger special handling int(11) NO MUL 0 abook_incl connection filter allow rules separated by LF text NO MUL 0 abook_excl connection filter deny rules separated by LF text NO MUL 0 abook_instance comma separated list of site urls of all channel clones that this connection is connected with (used only for singleton networks which don't support cloning) text NO MUL 0"},{"location":"dev/database/db_account/","title":"account","text":"Field Description Type Null Key Default Extra account_id table index int(10) unsigned NO PRI NULL auto_increment account_parent for hierarchical accounts, the account_id of the parent to this one, if account_parent = account_id, this is the top level account int(10) unsigned NO MUL 0 account_default_channel channel_id of channel to connect on login int(10) unsigned NO MUL 0 account_salt complexity token for account_password char(32) NO account_password hashed password for this account char(255) NO account_email essentially the login ID, although it is usually possible to login with a channel address char(255) NO MUL account_external Currently unused char(255) NO MUL account_language default language (closest available browser-accept language when account was created) char(16) NO en account_created timestamp of account creation datetime NO 0000-00-00 00:00:00 account_lastlog timestamp of last login (or daily update if \"remember me\" is in effect) datetime NO MUL 0000-00-00 00:00:00 account_flags see notes int(10) unsigned NO MUL 0 account_roles see notes int(10) unsigned NO MUL 0 account_reset verification token for password reset char(255) NO account_expires timestamp when account expires and will be deleted datetime NO MUL 0000-00-00 00:00:00 account_expire_notified timestamp of last warning of account expiration datetime NO 0000-00-00 00:00:00 account_service_class service class for this account, determines what if any limits/restrictions are in place char(32) NO MUL account_level future use int(10) unsigned NO MUL 0 account_password_changed timestamp of last password change - to limit account deletion for 48 hours to prevent malicious activity datetime NO MUL 0000-00-00 00:00:00"},{"location":"dev/database/db_account/#notes","title":"Notes:","text":""},{"location":"dev/database/db_account/#account-flags","title":"Account Flags","text":"<p>define ( 'ACCOUNT_OK',           0x0000 ); define ( 'ACCOUNT_UNVERIFIED',   0x0001 ); define ( 'ACCOUNT_BLOCKED',      0x0002 ); define ( 'ACCOUNT_EXPIRED',      0x0004 ); define ( 'ACCOUNT_REMOVED',      0x0008 ); define ( 'ACCOUNT_PENDING',      0x0010 );</p>"},{"location":"dev/database/db_account/#account-roles","title":"Account roles","text":"<p>define ( 'ACCOUNT_ROLE_SYSTEM',    0x0002 ); // 2 - this is the special system account define ( 'ACCOUNT_ROLE_DEVELOPER', 0x0004 ); define ( 'ACCOUNT_ROLE_ADMIN',     0x1000 ); // 4096 - this account is an administrator</p>"},{"location":"dev/database/db_addon/","title":"Db addon","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td]generated index[td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aname[/td][td]plugin base (file)name[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]version[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]installed[/td][td]currently always 1[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hidden[/td][td]currently unused[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]tstamp[/td][td]file timestamp to check for reloads[/td][td]bigint(20)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]plugin_admin[/td][td]1 = has admin config, 0 = has no admin config[/td][td]tinyint(1)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Notes:</p> <p>These are addons which have been enabled by the site administrator on the admin/plugin page</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_app/","title":"Db app","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]generated index[/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]app_id[/td][td]hash identifying this app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_sig[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_author[/td][td]xchan_hash of app creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_name[/td][td]name of app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_desc[/td][td]optional description of app[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]app_url[/td][td]target_url[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_photo[/td][td]app icon[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_version[/td][td]version of app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_channel[/td][td]channel_id owning this instance of the app[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]app_addr[/td][td]reddress/webbie of app creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_price[/td][td]free-form price field[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_page[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_requires[/td][td]access rules[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr]</p> <p>[tr][td]app_created[/td][td]datetime of app creation[/td][td]datetime[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_edited[/td][td]datetime of last app edit[/td][td]datetime[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr]</p> <p>[tr][td]app_deleted[/td][td]1 = deleted, 0 = normal[/td][td]int(11)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_system[/td][td]1 = imported system app, 0 = member created app[/td][td]int(11)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr]</p> <p>[/table]</p> <p>Storage for personal apps</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_attach/","title":"Db attach","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]generated index[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td]account_id of owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id of owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hash[/td][td]hash for cross-site identification[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]creator[/td][td]xchan_hash of author/creator[/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filename[/td][td]filename of original[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filetype[/td][td]mimetype[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filesize[/td][td]size in bytes[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]revision[/td][td]for version control (partially implemented)[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]folder[/td][td]attach.hash of parent folder[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]flags[/td][td]no longer used[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]is_dir[/td][td]0 (file) or 1 to indicate a directory[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]is_photo[/td][td]if 1, a photo is linked to this resource[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]os_storage[/td][td]if 0, data contains content; if 1 data contains path to content (always 1 in hubzilla)[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]os_path[/td][td]under construction, store the system path[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]display_path[/td][td]under construction, store the human readable path[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]content[/td][td]file data or pathname to stored data if ATTACH_FLAG_OS[/td][td]longblob[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]creation time[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]edited[/td][td]last edit time[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>permissions are xchan_hash or group_hash surrounded by angle chars. e.g. '' <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_auth_codes/","title":"Db auth codes","text":"<p>OAuth2 authorisation register - currently implemented but unused</p> <p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]varchar(40)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]redirect_uri[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]scope[/td][td][/td][td]varchar(250)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_cache/","title":"Db cache","text":"<p>OEmbed information cache</p> <p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]k[/td][td]horizontal width + url or resource[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td]OEmbed response from site[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]updated[/td][td]datetime of cache insertion[/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_channel/","title":"Db channel","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]channel_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_account_id[/td][td]account.id of the account owning this channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_primary[/td][td]1 = this is the primary instance of this channel[/td][td]tinyint(1) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_name[/td][td]Name that this channel is known by[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_address[/td][td]\"username\" or URL-and-email safe nickname[/td][td]char(255)[/td][td]NO[/td][td]UNI[/td][td][/td][td] [/td][/tr] [tr][td]channel_guid[/td][td]Long hash representing a psuedo-unique ID, does not have ot be globally unique[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_guid_sig[/td][td]channel.gui signed with channel.prvkey and base64url_encoded[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_hash[/td][td]base64url_encode of a 64-char whirlpool hash of channel.guid and channel_guid_sig concatenated, synonymous with xchan_hash.[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_timezone[/td][td]PHP-legal timezone[/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]UTC[/td][td] [/td][/tr] [tr][td]channel_location[/td][td]Default for item.location[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_theme[/td][td]channel theme preference[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_startpage[/td]relative site URL to visit after logging in[td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]channel_pubkey[/td][td]RSA public key 4096 bit[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_prvkey[/td][td]RSA private key 4096 bit[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_notifyflags[/td][td]bifield representing what notification types are active[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]65535[/td][td] [/td][/tr] [tr][td]channel_pageflags[/td][td]bitfield of special channel uses[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_dirdate[/td][td]time when directory was last pinged. Must do this once a month[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_lastpost[/td][td]date of last post for this channel. May not be fully implemented[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_deleted[/td][td]time when channel was deleted[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_max_anon_mail[/td][td]unused[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]10[/td][td] [/td][/tr] [tr][td]channel_max_friend_req[/td][td]unused[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]10[/td][td] [/td][/tr] [tr][td]channel_expire_days[/td][td]expire imported content that hasn't been otherwise protected after this many days, 0 is no expiration[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_passwd_reset[/td][td]password reset token[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]channel_default_group[/td][td]put all new connections into the group with this name[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_allow_cid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_allow_gid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_deny_cid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_deny_gid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_r_stream[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_profile[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_photos[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_abook[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_stream[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_wall[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_tagwall[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_comment[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_mail[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_photos[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_chat[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_a_delegate[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_r_storage[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_storage[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_pages[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_pages[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_a_republish[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_like[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_removed[/td][td]if 1, this channel has been deleted[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_system[/td][td]if 1, this is the special system channel on this site[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_moved[/td][td]URL of relocated channel, making this instance abandoned if set[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_chat/","title":"Db chat","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]chat_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]chat_room[/td][td]chatroom.cr_id for this chat[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]chat_xchan[/td][td]author xchan_hash[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]chat_text[/td][td]the text of the chat message[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]timestamp of this message[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_chatpresence/","title":"Db chatpresence","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]cp_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cp_room[/td][td]chatroom.cr_id of the chatroom[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cp_xchan[/td][td]xchan_hash of the chatroom participant[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]cp_last[/td][td]datetime last ping[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cp_status[/td][td]text status description e.g. \"online\"[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cp_client[/td][td]IP address of this client[/td][td]char(128)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_chatroom/","title":"Db chatroom","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]cr_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cr_aid[/td][td]account.id of chatroom owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cr_uid[/td][td]channel.channel_id of chatroom owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cr_name[/td][td]visible name of chatroom[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]cr_created[/td][td]creation timestampe[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cr_edited[/td][td]edited timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cr_expire[/td][td]expiration period for chats in this chatroom in minutes, 0 is no expiration[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_clients/","title":"Db clients","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]pw[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]redirect_uri[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]clname[/td][td][/td][td]text[/td][td]YES[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]icon[/td][td][/td][td]text[/td][td]YES[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_config/","title":"Db config","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_conv/","title":"Db conv","text":"<p>Used in Diaspora private mails</p> <p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]guid[/td][td]A unique identifier for this conversation[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]recips[/td][td]sender_handle;recipient_handle[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]creator[/td][td]handle of creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]creation timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]updated[/td][td]edited timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]subject[/td][td]subject of initial message (obscured for privacy)[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_event/","title":"Db event","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]event_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]edited[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dtstart[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]dtend[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]summary[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]description[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]location[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]etype[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]nofinish[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]adjust[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]1[/td][td] [/td][/tr] [tr][td]dismissed[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr]</p> <p>[tr][td]event_status[/td][td][/td][td]charr(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_status_date[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_percent[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_repeat[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_sequence[/td][td][/td][td]smallint[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_priority[/td][td][/td][td]smallint[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_vdata[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]cal_id[/td][td][/td][td]int(10)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr]</p> <p>[/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_fcontact/","title":"Db fcontact","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]request[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]nick[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]batch[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]notify[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]poll[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]confirm[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]priority[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]network[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]alias[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pubkey[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]updated[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_ffinder/","title":"Db ffinder","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]fid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_fserver/","title":"Db fserver","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]server[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]posturl[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]key[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_fsuggest/","title":"Db fsuggest","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]request[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]note[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_hook/","title":"Db hook","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hook[/td][td]name of hook[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]file[/td][td]relative filename of hook handler[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]fn[/td][td]function name of hook handler[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]priority[/td][td]can be used to sort conflicts in hook handling by calling handlers in priority order[/td][td]int(11) unsigned[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]hook_version[/td][td]version 0 hooks must have two arguments, the App and the hook data. version 1 hooks have 1 argument - the hook data[/td][td]int(11) unsigned[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_hubloc/","title":"Db hubloc","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]hubloc_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hubloc_guid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_guid_sig[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_network[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hubloc_status[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hubloc_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_url_sig[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_host[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_callback[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]hubloc_connect[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_sitekey[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]hubloc_connected[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_issue/","title":"Db issue","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]issue_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]issue_created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]issue_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]issue_assigned[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_priority[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_status[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_component[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_item/","title":"Db item","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]Sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]mid[/td][td]Message-id - globally unique, there can be several items with the same message-ID in the table as they may have different uid owners[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]aid[/td][td]channel_account_id of the channel_id (uid) which owns this copy of the item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id (uid) which owns this copy of the item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]parent[/td][td]item.id of the parent to this item if it is a reply of some form; otherwise this must be set to the id of this item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]parent_mid[/td][td]Globally unique message-id of the parent to this item[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]thr_parent[/td][td]If the parent of this item is not the top-level item in the conversation, the message-id of the immediate parent; otherwise set to parent_mid[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td]Creation timestamp. If creation is more than ten minutes into the future, set item_delayed to 1; it will automatically be delivered by the poller once the created time has passed[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]edited[/td][td]Date of  last edit (default is created)[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]expires[/td][td]Date this item expires and will be removed[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]commented[/td][td]Date of last comment/reply to this item[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]received[/td][Date the item was received at this sitetd][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]changed[/td][td]Date that something in the conversation changed, indicating clients should fetch the conversation again[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]comments_closed[/td][td]Date after which no more comments will be accepted[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]owner_xchan[/td][td]xchan_hash of the owner of this conversation (this is who replies are sent to)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]author_xchan[/td][td]xchan_hash of the author of this item[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]source_xchan[/td][td]xchan_hash of the external source of this item belongs to multiple delivery chains and comments need to be uplinked[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mimetype[/td][td]mime type of the content body[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]title[/td][td]item title[/td][td]text[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]body[/td][td]item body content[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]app[/td][td]application which generated this item[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]lang[/td][td]auto-detected language[/td][td]char(64)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]revision[/td][td]future use, version control[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]verb[/td][td]ActivityStreams verb (old style URI)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_type[/td][td]ActivityStreams object type (old style URI)[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]obj[/td][td]JSON encoded object structure unless it is an implied object (normal post)[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]tgt_type[/td][td]ActivityStreams target type if applicable (URI)[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]target[/td][td]JSON encoded target structure if used[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]layout_mid[/td][td]For webpages, which layout (mid or message_id) to use when displaying this page[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]postopts[/td][td]External post connectors add their network name to this comma-separated string to identify that they should be delivered to these networks during delivery[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]route[/td][td]comma separated xchan list of xchans where this message was routed on its way to this destination, used for route loop discovery and rejection of comments which arrived by alternate routes and may have different permissions[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]llink[/td][td]URL of a displayable copy of this post/conversation on this site[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]plink[/td][td]permalink or URL toa displayable copy  of the message at its source[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]resource_id[/td][td]Used to link other tables to items, it identifies the linked resource and if set must also set resource_type[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]resource_type[/td][td]default none, if a linked resource this should be the name of the resource type such as \"photo\" or \"event\"[/td][td]char(16)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]attach[/td][td]JSON structure representing attachments to this item[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]sig[/td][td]RSA signature of the item body by the original author if the private key is available[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]diaspora_meta[/td][td]Used to store Diaspora comment signatures with their weird requirements[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]location[/td][td]text location where this item originated[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]coord[/td][td] longitude/latitude pair representing location where this item originated[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]public_policy[/td][td]If the author has specified restrictions (this network, this site) etc. for distribution, the corresponding policy text is present here and item_private = 1[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]comment_policy[/td][td]If the author has specified comment restrictions (thei network, this site, etc.) the corresponding policy text is present here[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]Access Control - list of allowed xchans '...'[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td]Access Control - list of allowed group hashes, see allow_cid[td][/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]Access Control - list of denied xchans[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]Access Control - list of denied groups[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]item_restrict[/td]no longer used[td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_flags[/td][td]no longer used[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_private[/td][td]distribution is restricted[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_origin[/td][td]item originated at this site[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_unseen[/td][td]item has not been seen[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_starred[/td][td]item has been favourited[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_uplink[/td][td]This item is part of a multiple delivery chain and must be uplinked to the original sender (source_xchan)[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_consensus[/td][td]This item allows voting tools[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_wall[/td][td]This item was posted to the wall of uid[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_thread_top[/td][td]parent = id, this is the top post in a conversation [/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_notshown[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_nsfw[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_relay[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_mentionsme[/td][td]The owner of this item was mentioned in it[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_nocomment[/td][td]if 1, no comments are allowed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_obscured[/td][td]no longer used[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_verified[/td][td]the signature has been verified on this site[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_retained[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_rss[/td][td]item originated in a feed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_deleted[/td][td]item has been deleted[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_type[/td][td]used to identify webpage and design element types, 0 is a normal conversation item[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_hidden[/td][td]0 or 1 if item is not to be displayed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_unpublished[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_delayed[/td][td]item is posted in the future[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_pending_remove[/td][td]item is in the process of being removed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_blocked[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] <p>[/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_item_id/","title":"Db item id","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]iid[/td][td]item.id of the referenced item[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]sid[/td][td]an additional identifier to attach or link to the referenced item (often used to store a message_id from another system in order to suppress duplicates)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]service[/td][td]the name or description of the service which generated this identifier[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_likes/","title":"Db likes","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(11) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]liker[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]likee[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target_type[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target_id[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_mail/","title":"Db mail","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]convid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]mail_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]from_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]to_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]account_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]title[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]body[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]attach[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]parent_mid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_menu/","title":"Db menu","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]menu_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]menu_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]menu_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]menu_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]menu_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_menu_item/","title":"Db menu item","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]mitem_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]mitem_link[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mitem_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mitem_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mitem_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]mitem_menu_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]mitem_order[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_notify/","title":"Db notify","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xname[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]date[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]msg[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]aid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]link[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]parent[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]seen[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ntype[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]otype[/td][td][/td][td]char(16)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_obj/","title":"Db obj","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]obj_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]obj_page[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_type[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]obj_obj[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_outq/","title":"Db outq","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]outq_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]outq_account[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_driver[/td][td][/td][td]char(32)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]outq_posturl[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]outq_async[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_delivered[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]outq_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]outq_notify[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]outq_msg[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_pconfig/","title":"Db pconfig","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_pgrp/","title":"Db pgrp","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td]unique hash representing this group with the group name appended[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id owning this data[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]visible[/td][td]1 indicates the member list is not private[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]deleted[/td][td]1 indicates the group has been deleted[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]gname[/td][td]human readable name of group[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_pgrp_member/","title":"Db pgrp member","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]gid[/td][td]groups.id of the associated group[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan[/td][td]xchan.xchan_hash of the member assigned to the associated group[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_photo/","title":"Db photo","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]resource_id[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]edited[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]title[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]description[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]album[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]filename[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mimetype[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]image/jpeg[/td][td] [/td][/tr] [tr][td]height[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]width[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]filesize[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]content[/td][td][/td][td]mediumblob[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]scale[/td][td][/td][td]tinyint(3)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]profile[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]photo_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_poll/","title":"Db poll","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]poll_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]poll_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]poll_desc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]poll_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]poll_votes[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_poll_elm/","title":"Db poll elm","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]pelm_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]pelm_poll[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]pelm_desc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pelm_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]pelm_result[/td][td][/td][td]float[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_profdef/","title":"Db profdef","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]field_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]field_type[/td][td][/td][td]char(16)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_help[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_inputs[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_profext/","title":"Db profext","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_profile/","title":"Db profile","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]profile_guid[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]profile_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]is_default[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hide_friends[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]fullname[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pdesc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]chandesc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dob[/td][td][/td][td]char(32)[/td][td]NO[/td][td][/td][td]0000-00-00[/td][td] [/td][/tr] [tr][td]dob_tz[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]UTC[/td][td] [/td][/tr] [tr][td]address[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]locality[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]region[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]postal_code[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]country_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]hometown[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]gender[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]marital[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]partner[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]howlong[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]sexual[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]politic[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]religion[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]keywords[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]likes[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dislikes[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]about[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]summary[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]music[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]book[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]tv[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]film[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]interest[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]romance[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]employment[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]education[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]contact[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channels[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]homepage[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]thumb[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]publish[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_profile_check/","title":"Db profile check","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]dfrn_id[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]sec[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]expire[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_register/","title":"Db register","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]password[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]language[/td][td][/td][td]char(16)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_session/","title":"Db session","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]sid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]data[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]expire[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_shares/","title":"Db shares","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]share_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]share_type[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]share_target[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]share_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_sign/","title":"Db sign","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]retract_iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]signed_text[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]signature[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]signer[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_site/","title":"Db site","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]site_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]site_access[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_update[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_pull[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_sync[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_directory[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]site_register[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_sellpage[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]site_location[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]site_realm[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_source/","title":"Db source","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]src_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]src_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]src_channel_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]src_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]src_patt[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_spam/","title":"Db spam","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]spam[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ham[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]term[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]date[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_sys_perms/","title":"Db sys perms","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]public_perm[/td][td][/td][td]tinyint(1) unsigned[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_term/","title":"Db term","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]tid[/td][td]sequential index[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td]channel_account_id of the controlling channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id of the controlling channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]oid[/td][td]DB index of linked thing[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]otype[/td][td]type of linked thing[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]ttype[/td][td]taxonomy type (See Tag/term types in boot.php)[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]term[/td][td]the actual taxonomy term[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td]relevant link (for tags and mentions, a link to the associated resource)[td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]imgurl[/td][td]rarely used - an image associated with this taxonomy term[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]term_hash[/td][td]unique hash for this entry[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]parent_hash[/td][td]for hierarchical taxonomies, the hash of the relevant parent[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_tokens/","title":"Db tokens","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]varchar(40)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]secret[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]scope[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_updates/","title":"Db updates","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]ud_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]ud_hash[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]ud_guid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]ud_date[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]ud_last[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]ud_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ud_addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_verify/","title":"Db verify","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]type[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]token[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]meta[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_vote/","title":"Db vote","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]vote_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]vote_poll[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]vote_element[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]vote_result[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]vote_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xchan/","title":"Db xchan","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xchan_hash[/td][td]calculated hash of this extended channel[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_guid[/td][td]channel_guid of this extended channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_guid_sig[/td][td]base64url encoded signature of the guid[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_pubkey[/td][td]public key for verifying signed data and assertions[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_photo_mimetype[/td][td]mimetype of the profile photo[/td][td]char(32)[/td][td]NO[/td][td][/td][td]image/jpeg[/td][td] [/td][/tr] [tr][td]xchan_photo_l[/td][td]photo url 300px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_photo_m[/td][td]photo url 80 px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_photo_s[/td][td]photo url 48 px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_addr[/td][td]user@host[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_url[/td][td]url of channel page on primary hub location[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_connurl[/td]poco url[td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_follow[/td]url template for following %s[td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_connpage[/td][td]for premium channels url of channel to display when connecting[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_name[/td][td]human readabl name of channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_network[/td][td]network of channel for instance 'zot', 'diaspora', 'unknown'[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_instance_url[/td][td]no longer used[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_flags[/td][td]no longer used[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_photo_date[/td][td]timestamp of last photo change in GMT[/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]xchan_name_date[/td][td]timestamp of last name change in GMT[/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]xchan_hidden[/td][td]flag - channel is hidden[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_orphan[/td][td]flag - channel has no known hubloc locations[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_censored[/td][td]flag - channel has been censored[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_selfcensored[/td][td]flag - channel is self censored (adult or nsfw)[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_system[/td][td]flag - this represents a system channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_pubforum[/td][td]flag - channel is a public forum[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_deleted[/td][td]flag - channel was deleted[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr]</p> <p>[/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xchat/","title":"Db xchat","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xchat_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xchat_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_edited[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xconfig/","title":"Db xconfig","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xign/","title":"Db xign","text":"<p>xign - holds xchan information for channels that have been ignored in 'friend suggestions'  [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td]local channel.channel_id[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan[/td][td]xchan.xchan_hash of ignored channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xlink/","title":"Db xlink","text":"<p>xlink - used to store social graph and channel ratings [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xlink_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xlink_xchan[/td][td]xchan.xchan_hash of controlling channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xlink_link[/td][td]xchan.xchan_hash of link target (connection or rating)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xlink_rating[/td][td]int rating[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_rating_txt[/td][td]rating text[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_updated[/td][td]timestamp of update in GMT[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [tr][td]xlink_static[/td][td]0 for social graph, 1 for ratings[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_sig[/td][td]base64url encoded signature of rating information[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xprof/","title":"Db xprof","text":"<p>xprof - stores searchable public profile information on directory servers [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xprof_hash[/td][td]xchan.xchan_hash of this channel[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_age[/td][td]current age (updated monthly)[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xprof_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_dob[/td][td][/td][td]char(12)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_gender[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_marital[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_sexual[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_locale[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_region[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_postcode[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_country[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_keywords[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_about[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_homepage[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xprof_hometown[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/database/db_xtag/","title":"Db xtag","text":"<p>[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xtag_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xtag_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xtag_term[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xtag_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table]</p> <p>Return to [zrl=[baseurl]/help/database]database documentation[/zrl]</p>"},{"location":"dev/plugins/","title":"Creating Plugins/Addons for $Projectname","text":"<p>So you want to make $Projectname do something it doesn't already do. There are lots of ways. But let's learn how to write a plugin or addon. </p> <p>In your $Projectname folder/directory, you will probably see a sub-directory called 'addon'. If you don't have one already, go ahead and create it. </p> <pre><code>mkdir addon\n</code></pre> <p>Then figure out a name for your addon. You probably have at least a vague idea of what you want it to do. For our example I'm going to create a plugin called 'randplace' that provides a somewhat random location for each of your posts. The name of your plugin is used to find the functions we need to access and is part of the function names, so to be safe, use only simple text characters.</p> <p>Once you've chosen a name, create a directory beneath 'addon' to hold your working file or files.</p> <pre><code>mkdir addon/randplace\n</code></pre> <p>Now create your plugin file. It needs to have the same name, and it's a PHP script, so using your favourite editor, create the file</p> <pre><code>addon/randplace/randplace.php\n</code></pre> <p>The very first line of this file needs to be</p> <pre><code>&lt;?php\n</code></pre> <p>Then we're going to create a comment block to describe the plugin. There's a special format for this. We use / ... / comment-style and some tagged lines consisting of</p> <pre><code>/**\n *\n * Name: Random Place (here you can use better descriptions than you could in the filename)\n * Description: Sample $Projectname plugin, Sets a random place when posting.\n * Version: 1.0\n * Author: Mike Macgirvin &lt;mike@zothub.com&gt;\n *\n */\n</code></pre> <p>These tags will be seen by the site administrator when he/she installs or manages plugins from the admin panel. There can be more than one author. Just add another line starting with 'Author:'.</p> <p>The typical plugin will have at least the following functions:</p> <ul> <li>pluginname_load()</li> <li>pluginname_unload()</li> </ul> <p>In our case, we'll call them randplace_load() and randplace_unload(), as that is the name of our plugin. These functions are called whenever we wish to either initialise the plugin or remove it from the current webpage. Also if your plugin requires things like altering the database schema before it can run for the very first time, you would likely place these instructions in the functions named</p> <ul> <li>pluginname_install()</li> <li>pluginname_uninstall()</li> </ul> <p>Next we'll talk about hooks. Hooks are places in $Projectname code where we allow plugins to do stuff. There are a lot of these, and they each have a name. What we normally do is use the pluginname_load() function to register a \"handler function\" for any hooks you are interested in. Then when any of these hooks are triggered, your code will be called.</p> <p>We register hook handlers with the 'register_hook()' function. It takes 3 arguments. The first is the hook we wish to catch, the second is the filename of the file to find our handler function (relative to the base of your $Projectname installation), and the third is the function name of your handler function. So let's create our randplace_load() function right now. </p> <pre><code>function randplace_load() {\n    register_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook');\n\n    register_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings');\n    register_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post');\n\n}\n</code></pre> <p>So we're going to catch three events, 'post_local' which is triggered when a post is made on the local system, 'feature_settings' to set some preferences for our plugin, and 'feature_settings_post' to store those settings. </p> <p>Next we'll create an unload function. This is easy, as it just unregisters our hooks. It takes exactly the same arguments. </p> <pre><code>function randplace_unload() {\n    unregister_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook');\n\n    unregister_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings');\n    unregister_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post');\n\n}\n</code></pre> <p>Hooks are called with two arguments. The first is always $a, which is our global App structure and contains a huge amount of information about the state of the web request we are processing; as well as who the viewer is, and what our login state is, and the current contents of the web page we're probably constructing.</p> <p>The second argument is specific to the hook you're calling. It contains information relevant to that particular place in the program, and often allows you to look at, and even change it. In order to change it, you need to add '&amp;' to the variable name so it is passed to your function by reference. Otherwise it will create a copy and any changes you make will be lost when the hook process returns. Usually (but not always) the second argument is a named array of data structures. Please see the \"hook reference\" (not yet written as of this date) for details on any specific hook. Occasionally you may need to view the program source to see precisely how a given hook is called and how the results are processed. </p> <p>Let's go ahead and add some code to implement our post_local hook handler. </p> <pre><code>function randplace_post_hook($a, &amp;$item) {\n\n    /**\n     *\n     * An item was posted on the local system.\n     * We are going to look for specific items:\n     *      - A status post by a profile owner\n     *      - The profile owner must have allowed our plugin\n     *\n     */\n\n    logger('randplace invoked');\n\n    if(! local_channel())   /* non-zero if this is a logged in user of this system */\n        return;\n\n    if(local_channel() != $item['uid'])    /* Does this person own the post? */\n        return;\n\n    if(($item['parent']) || (! is_item_normal($item))) {\n        /* If the item has a parent, or isn't \"normal\", this is a comment or something else, not a status post. */\n        return;\n    }\n\n    /* Retrieve our personal config setting */\n\n    $active = get_pconfig(local_channel(), 'randplace', 'enable');\n\n    if(! $active)\n        return;\n    /**\n     *\n     * OK, we're allowed to do our stuff.\n     * Here's what we are going to do:\n     * load the list of timezone names, and use that to generate a list of world cities.\n     * Then we'll pick one of those at random and put it in the \"location\" field for the post.\n     *\n     */\n\n    $cities = array();\n    $zones = timezone_identifiers_list();\n    foreach($zones as $zone) {\n        if((strpos($zone,'/')) &amp;&amp; (! stristr($zone,'US/')) &amp;&amp; (! stristr($zone,'Etc/')))\n            $cities[] = str_replace('_', ' ',substr($zone,strpos($zone,'/') + 1));\n    }\n\n    if(! count($cities))\n        return;\n    $city = array_rand($cities,1);\n    $item['location'] = $cities[$city];\n\n    return;\n}\n</code></pre> <p>Now let's add our functions to create and store preference settings.</p> <pre><code>/**\n *\n * Callback from the settings post function.\n * $post contains the global $_POST array.\n * We will make sure we've got a valid user account \n * and that only our own submit button was clicked\n * and if so set our configuration setting for this person.\n *\n */\n\nfunction randplace_settings_post($a,$post) {\n    if(! local_channel())\n        return;\n    if($_POST['randplace-submit'])\n        set_pconfig(local_channel(),'randplace','enable',intval($_POST['randplace']));\n}\n\n\n\n/**\n *\n * Called from the Feature Setting form.\n * The second argument is a string in this case, the HTML content region of the page.\n * Add our own settings info to the string.\n *\n * For uniformity of settings pages, we use the following convention\n *     &lt;div class=\"settings-block\"&gt;\n *       &lt;h3&gt;title&lt;/h3&gt;\n *       .... settings html - many elements will be floated...\n *       &lt;div class=\"clear\"&gt;&lt;/div&gt; &lt;!-- generic class which clears all floats --&gt;\n *       &lt;input type=\"submit\" name=\"pluginnname-submit\" class=\"settings-submit\" ..... /&gt;\n *     &lt;/div&gt;\n */\n\n\n\nfunction randplace_settings(&amp;$a,&amp;$s) {\n\n    if(! local_channel())\n        return;\n\n    /* Add our stylesheet to the page so we can make our settings look nice */\n\n    head_add_css('/addon/randplace/randplace.css');\n\n    /* Get the current state of our config variable */\n\n    $enabled = get_pconfig(local_channel(),'randplace','enable');\n\n    $checked = (($enabled) ? ' checked=\"checked\" ' : '');\n\n    /* Add some HTML to the existing form */\n\n    $s .= '&lt;div class=\"settings-block\"&gt;';\n    $s .= '&lt;h3&gt;' . t('Randplace Settings') . '&lt;/h3&gt;';\n    $s .= '&lt;div id=\"randplace-enable-wrapper\"&gt;';\n    $s .= '&lt;label id=\"randplace-enable-label\" for=\"randplace-checkbox\"&gt;' . t('Enable Randplace Plugin') . '&lt;/label&gt;';\n    $s .= '&lt;input id=\"randplace-checkbox\" type=\"checkbox\" name=\"randplace\" value=\"1\" ' . $checked . '/&gt;';\n    $s .= '&lt;/div&gt;&lt;div class=\"clear\"&gt;&lt;/div&gt;';\n\n    /* provide a submit button */\n\n    $s .= '&lt;div class=\"settings-submit-wrapper\" &gt;&lt;input type=\"submit\" name=\"randplace-submit\" class=\"settings-submit\" value=\"' . t('Submit') . '\" /&gt;&lt;/div&gt;&lt;/div&gt;';\n\n}\n</code></pre> <p>Advanced Plugins</p> <p>Sometimes your plugins want to provide a range of new functionality which isn't provided at all or is clumsy to provide using hooks. In this case your plugin can also act as a 'module'. A module in our case refers to a structured webpage handler which responds to a given URL. Then anything which accesses that URL will be handled completely by your plugin.</p> <p>The key to this is to create a simple function named pluginname_module() which does nothing. </p> <pre><code>function randplace_module() { return; }\n</code></pre> <p>Once this function exists, the URL https://yoursite/randplace will access your plugin as a module. Then you can define functions which are called at various points to build a webpage just like the modules in the mod/ directory. The typical functions and the order which they are called is</p> <pre><code>modulename_init($a)    // (e.g. randplace_init($a);) called first - if you wish to emit json or xml, \n                       // you should do it here, followed by killme() which will avoid the default action of building a webpage\nmodulename_aside($a)   // Often used to create sidebar content\nmodulename_post($a)    // Called whenever the page is accessed via the \"post\" method\nmodulename_content($a) // called to generate the central page content. This function should return a string \n                       // consisting of the central page content.\n</code></pre> <p>Your module functions have access to the URL path as if they were standalone programs in the Unix operating system. For instance if you visit the page</p> <pre><code>https://yoursite/randplace/something/somewhere/whatever\n</code></pre> <p>we will create an argc/argv list for use by your module functions</p> <pre><code>$x = argc(); $x will be 4, the number of path arguments after the sitename\n\nfor($x = 0; $x &lt; argc(); $x ++)\n    echo $x . ' ' . argv($x);\n\n\n0 randplace\n1 something\n2 somewhere\n3 whatever\n</code></pre> <p>Porting Friendica Plugins</p> <p>$Projectname uses a similar plugin architecture to the Friendica project. The authentication, identity, and permissions systems are completely different. Many Friendica plugins can be ported reasonably easily by renaming a few functions - and then ensuring that the permissions model is adhered to. The functions which need to be renamed are:</p> <ul> <li> <p>Friendica's pluginname_install() is pluginname_load()</p> </li> <li> <p>Friendica's pluginname_uninstall() is pluginname_unload()</p> </li> </ul> <p>$Projectname has _install and _uninstall functions but these are used differently.</p> <ul> <li> <p>Friendica's \"plugin_settings\" hook is called \"feature_settings\"</p> </li> <li> <p>Friendica's \"plugin_settings_post\" hook is called \"feature_settings_post\"</p> </li> </ul> <p>Changing these will often allow your plugin to function, but please double check all your permission and identity code because the concepts behind it are completely different in $Projectname. Many structured data names (especially DB schema columns) are also quite different. </p>"},{"location":"dev/plugins/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"dev/themes/","title":"Creating a Derived Theme","text":"<p>Lesson 1</p> <p>A derived theme takes most of the settings from its \"parent\" theme and lets you change a few things to your liking without creating an entire theme package. </p> <p>To create a derived theme, first choose a name. For our example we'll call our theme 'mytheme'. Hopefully you'll be a bit more creative. But throughout this document, wherever you see 'mytheme', replace that with the name you chose.</p> <p>Directory Structure</p> <p>First you need to create a theme directory structure. We'll keep it simple. We need a php directory and a css directory. Here are the Unix/Linux commands to do this. Assume that 'mywebsite' is your top level $Projectname folder. </p> <pre><code>cd mywebsite\nmkdir view/theme/mytheme\nmkdir view/theme/mytheme/css\nmkdir view/theme/mytheme/php\n</code></pre> <p>Great. Now we need a couple of files. The first one is your theme info file, which describes the theme.</p> <p>It will be called view/theme/mytheme/php/theme.php (clever name huh?)</p> <p>Inside it, put the following information - edit as needed</p> <pre><code>&lt;?php\n\n/**\n *   * Name: Mytheme\n *   * Description: Sample Derived theme\n *   * Version: 1.0\n *   * Author: Your Name\n *   * Compat: Red [*]\n *\n */\n\nfunction mytheme_init(&amp;$a) {\n\n    App::$theme_info['extends'] = 'redbasic';\n\n\n}\n</code></pre> <p>Remember to rename the mytheme_init function with your theme name. In this case we will be extending the theme 'redbasic'. </p> <p>Now create another file. We call this a PCSS file, but it's really a PHP file.</p> <p>The file is called view/theme/mytheme/php/style.php</p> <p>In it, put the following:</p> <pre><code>&lt;?php\n\nrequire_once('view/theme/redbasic/php/style.php');\n\necho @file_get_contents('view/theme/mytheme/css/style.css');\n</code></pre> <p>That's it. This tells the software to read the PCSS information for the redbasic theme first, and then read our CSS file which will just consist of changes we want to make from our parent theme (redbasic). </p> <p>Now create the actual CSS file for your theme.  Put it in view/theme/mytheme/css/style.css (where we just told the software to look for it). For our example, we'll just change the body background color so you can see that it works. You can use any CSS you'd like. </p> <pre><code>body {\n    background-color: #DDD;\n}\n</code></pre> <p>You've just successfully created a derived theme. This needs to be enabled in the admin \"themes\" panel, and then anybody on the site can use it by selecting it in Settings-&gt;Display Settings as their default theme.  </p> <p>Lesson 2</p> <p>If you want to use the redbasic schemas for your derived theme, you have to do a bit more.</p> <p>Do everything as above, but don't create view/theme/mytheme/php/style.php, but copy instead  view/theme/redbasic/php/style.php to view/theme/mytheme/php/style.php. Modify that file and remove (or comment out) these two lines:</p> <pre><code>if(local_channel() &amp;&amp; App::$channel &amp;&amp; App::$channel['channel_theme'] != 'redbasic')\n    set_pconfig(local_channel(), 'redbasic', 'schema', '---');\n</code></pre> <p>Also add this line at the bottom:</p> <pre><code>echo @file_get_contents('view/theme/mytheme/css/style.css');\n</code></pre> <p>To show the schema selector you have to copy view/theme/redbasic/tpl/theme_settings.tpl to  view/theme/mytheme/tpl/theme_settings.tpl. Modify that file and replace the lines:</p> <pre><code>{{if $theme == redbasic}}\n{{include file=\"field_select.tpl\" field=$schema}}\n{{/if}}\n</code></pre> <p>with:</p> <pre><code>{{include file=\"field_select.tpl\" field=$schema}}\n</code></pre>"},{"location":"dev/themes/#include-docmacrosmain_footerbb","title":"include doc/macros/main_footer.bb;","text":""},{"location":"member/","title":"Overview","text":"<p>While many of Hubzilla's features and capabilities will be familiar to those who have used social networking sites and blogging software before, there are also some new concepts and features that most people have not yet encountered. Some of the new ideas are related to the decentralised nature of the grid, others to the advanced permission system needed to protect your data. This guide will help you understand how to create, configure and use your nomadic identity.</p>"},{"location":"member/AdvancedSearch/","title":"AdvancedSearch","text":""},{"location":"member/AdvancedSearch/#advanced-directory-search","title":"Advanced Directory Search","text":"<p>Advanced Directory Search is enabled in \"Expert Mode\" from your Settings =&gt; Additional features page.</p> <p>On the Directory page an option named \"Advanced\" will apear in the \"Find Channels\" widget (typically in the sidebar). Clicking \"Advanced\" will open another search box for entering advanced search requests.</p> <p>Advanced requests include</p> <ul> <li> <p>name=xxx  [Channel name contains xxx]</p> </li> <li> <p>address=xxx [Channel address (webbie) contains xxx]</p> </li> <li> <p>locale=xxx [Locale (typically 'city') contains xxx]</p> </li> <li> <p>region=xxx [Region (state/territory) contains xxx]</p> </li> <li> <p>postcode=xxx [Postcode or zip code contains xxx]</p> </li> <li> <p>country=xxx [Country name contains xxx]</p> </li> <li> <p>gender=xxx [Gender contains xxx]</p> </li> <li> <p>marital=xxx [Marital status contains xxx]</p> </li> <li> <p>sexual=xxx [Sexual preference contains xxx]</p> </li> <li> <p>keywords=xxx [Keywords contain xxx]</p> </li> </ul> <p>There are many reasons why a match may not return what you're looking for, as many channels do not provide detailed information in their default (public) profile, and many of these fields allow free-text input in several languages - and this may be difficult to match precisely. For instance you may have better results finding somebody in the USA with 'country=u' (along with some odd channels from Deutschland and Bulgaria and Australia) because this could be represented in a profile as US, U.S.A, USA, United States, etc...</p> <p>Future revisions of this tool may try to smooth over some of these difficulties. </p> <p>Requests may be joined together with 'and', 'or', and 'and not'. </p> <p>Terms containing spaces must be quoted.</p> <p>Example:       name=\"charlie brown\" and country=canada and not gender=female</p>"},{"location":"member/NSFW/","title":"NSFW","text":""},{"location":"member/NSFW/#content-warningnsfw","title":"Content warning/NSFW","text":"<p>Content warnings and hiding certain content is done with Hubzilla using the \u2018NSFW\u2019 app. While with other services in the Fediverse you have to rely on the authors of posts possibly hiding \u2018sensitive\u2019 content behind a content warning (a content or trigger warning), with Hubzilla you have this functionality in your own hands as a recipient. With the NSFW app, you can create filters that ensure that posts that match the filter rules are collapsed. The content of the post is only displayed when you click on the button.</p> <p></p> <p>Here you can enter keywords and even regular expressions that the posting will be searched for. If one of the words or a text pattern is found, the content in the stream will be collapsed. It is also possible to filter by language (lang=xx or lang!=xx). If a phrase that matches one of the filters entered is found in a posting, the posting will initially be hidden from you behind a content warning.</p> <p></p> <p></p>"},{"location":"member/account_settings/","title":"Account settings","text":"<p>You can use the account settings to change your account details.</p> <p></p>"},{"location":"member/accounts_profiles_channels_basics/","title":"Accounts, Profiles and Channels","text":"<p>Once you have registered an account at the grid you have also created a profile and a channel. </p> <p>Account You have one account. This consists of your email account and your password. With your account you access your profile and your channel.</p> <p>Think of your account as the way you authenticate at one $Projectname site. It lets you do things, such as creating profiles and channels with which you can connect to other people.</p> <p>Profile You have surely registered with some other internet services, such as forums or online communities. For all of them you provided some information about yourself, such as date of birth, country, age and the likes.</p> <p>If you like you can see your profile here: [baseurl]/profile/[webname] and edit it by clicking on the pencil icon next to your avatar image.</p> <p>Unlike other services hubzilla offers you the advantage of creating many more profiles. That way you are able to distinguish between profiles targeted specially at everyone (your public profile), your work mates, your family and your partner.</p> <p>Think of your profile as the basic information about yourself you tell other people.</p> <p>Channel</p> <p>During the registration you created your first channel. Yes, besides several profiles you are able to have several channels. This might be a bit confusing in the beginning, but let's clear things up. You already have created one channel. You can use this one for the public, to communicate with people about every day life. But perhaps you are an avid book reader and many people are bored by that. So  you open a second channel just for the book lovers, where you all can talk about books as much as you like. Obviously this is a new stream of posts, with a new profile (... or new profiles ...) and completely different contacts. Some connections might exist in both channels, but there will be some that are exclusive to only one of both. You yourself just switch between both of them just like you would in real life switch when talking to people you meet on the street or people you meet specially to talk about books. You can even connect to yourself, or better: to your other channel. :)</p> <p>Think of a channel as different spaces dedicated to different topics where you meet with different people.</p>"},{"location":"member/additional_features/","title":"Additional features (hidden settings)","text":"<p>The \u2018Additional Features\u2019 settings are not accessible in their entirety either via the menu or via an icon. However, all the individual feature settings can also be accessed in the respective app via the cogwheel next to the main menu (avatar picture). These are settings for additional functions in all possible areas of Hubzilla. To access the settings, you have to append the URL of the hub <code>/settings/features</code> to the browser, e.g. <code>https://klacker.org/settings/features</code>.</p> <p></p> <p>The default settings for all of these options are set by the hub administrator. This default setting can be overridden by the user in the \u2018Additional Functions\u2019. For each option, the administrator also has the option of locking the default setting to prevent changes. The user can still flip the switch for the option, but the selection is not saved and the option is reset to the default setting.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"member/addressbook/","title":"Addressbook","text":""},{"location":"member/addressbook/#address-book-carddav","title":"Address book (CardDAV)","text":"<p>Hubzilla offers you address management with the \u2018CardDAV\u2019 app. You can create as many address books as you like.</p> <p></p> <p>The entries are stored in vCards format.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>The app also allows you to import address books or individual vCards from a file.</p> <p></p> <p>Address books are generally private and cannot be shared - not even via remote authorisation.</p>"},{"location":"member/apps/","title":"Apps","text":""},{"location":"member/apps/#apps","title":"Apps","text":"<p>A freshly installed Hubzilla instance has a number of basic functionalities. However, there are many features that are not part of the basic installation and are not immediately available for a newly created channel.</p> <p>The majority of functions are realised as \u2018applications\u2019 (or \u2018apps\u2019 for short). You can access the apps using the \u2018app menu\u2019, which is symbolised by the \u2018\u22ee\u2019 button (and is located on the far right of the navigation bar on most hubs). You can also pin frequently used apps to the navigation bar so that you don't have to open the app menu every time you call them up.</p> <p>How many and which apps are available to you depends on how the administrator has configured the hub.</p>"},{"location":"member/apps/#app-management","title":"App management","text":"<p>You can manage the apps for your channel using app management. You can also access this in the app menu under the lowest menu item \u2018+ Apps\u2019</p> <p>After calling up the app management, the apps already installed are displayed.</p> <p>You can now switch between \u2018Installed apps\u2019 and \u2018Available apps\u2019 in the left-hand sidebar.</p>"},{"location":"member/apps/#available-apps","title":"Available apps","text":"<p>In the available apps, you will find all the apps available on your hub. Some of them are already installed. You can use the button next to the app to install apps or update apps that are already installed.</p> <p></p>"},{"location":"member/apps/#installed-apps","title":"Installed apps","text":"<p>The Installed apps tab contains all the apps that are installed for your channel. To the right of each app there are two or three buttons with icons: a star icon, a pinhead icon and, if applicable, a cogwheel icon.</p> <p></p> <p>The star symbol is used to make the app accessible as a menu item in the app menu.</p> <p></p> <p></p> <p>You can pin the app in the navigation bar using the pin symbol.</p> <p></p> <p>If there is a dialogue for app-specific settings for an app, you can access this via the button with the cogwheel symbol.</p> <p></p>"},{"location":"member/apps/#manage-apps","title":"Manage apps","text":"<p>There is also a button labelled \u2018Manage apps\u2019 at the top of the installed apps tab. This button takes you to the \u2018Manage apps\u2019 page, where you can uninstall apps and also edit installed apps within certain limits.</p> <p></p> <p>It is also possible to create your own apps there (only for advanced users!).</p>"},{"location":"member/apps/#sorting-apps-in-the-menu","title":"Sorting apps in the menu","text":"<p>You can easily sort the apps you have added to the app menu using drag-and-drop and specify your preferred order.</p> <p></p>"},{"location":"member/article/","title":"Article","text":""},{"location":"member/article/#article","title":"Article","text":"<p>The article is a macroblogging post type at Hubzilla and is suitable for real blog posts, for example. Unlike normal posts, which are distributed throughout the entire network (including the Fediverse), articles remain on your own hub. They are only accessible to users of other instances and users who do not have an account in the Fediverse via their URL. Of course, the URL can be shared so that the article will still be known in the Fediverse and can be accessed. You can create an article using the app (app menu \u22ee) \u2018Article\u2019. When you open it, all created articles are displayed and you have the option to create a new article (\u2018Add article\u2019).</p> <p></p> <p>Creating an article is similar to creating a normal post. However, the input form has an additional field: \u2018Link to page\u2019.</p> <p>Here you can enter an easy-to-read link name. If you leave this field empty, a name will be assigned automatically (longer and more \u2018cryptic\u2019).</p> <p></p> <p>If you have filled in the optional \u2018Summary\u2019 field, only the summary of an article will initially be displayed, just like a normal post.</p> <p></p> <p>If you click on \u2018View article\u2019, the article itself will be displayed.</p> <p></p> <p>The direct link to the article is composed as follows: <code>URL-of-your-hub/articles/channel-name/link-to-page</code></p> <p></p>"},{"location":"member/bbcode/","title":"Bbcode","text":""},{"location":"member/bbcode/#text-decoration","title":"Text Decoration","text":"BBcode syntax Rendered text <code>[b]bold[/b]</code> bold <code>[i]italic[/i]</code> italic <code>[u]underlined[/u]</code> underlined <code>[s]strike[/s]</code> ~~strike~~ <code>[color=red]red[/color]</code> <code>[hl]highlighted[/hl]</code> <code>[font=courier]some text[/font]</code> <code>[quote]quote[/quote]</code> <code>[quote=Author]Author? Me? No, no, no...[/quote]</code> <code>[size=small]small text[/size]</code><code>[size=xx-large]xx-large text[/size]</code><code>[size=20]20px exactly[/size]</code>Size options include: xx-small, small, medium, large, xx-large <code>Add a horizontal bar [hr] Like this</code> <code>This is [center]centered[/center] text</code>"},{"location":"member/bbcode/#code-blocks","title":"Code blocks","text":"<p>Code can be rendered generically in a block or inline format (depending  on if there are new line characters in the text), or you can specify a  supported language for enhanced syntax highlighting. Syntax highlighting requires a suitable rendering plugin such as hilite. Supported languages with the hilite plugin include php, css, mysql, sql, abap, diff, html, perl, ruby, vbscript, avrc, dtd, java, xml, cpp, python, javascript, js, json, sh .  </p> <p>If a rendering plugin is not installed or an unsupported language is  specified, the output for syntax highlighted code blocks is the same as  the block format code tag. </p> BBcode syntax Output <code>[code]function bbcode() { }[/code]</code> <code>function bbcode() { }</code> <code>[code=php]function bbcode() {  $variable = true;  if( $variable ) {    echo \"true\";  } }[/code]</code> <code>[nobb][nobb]This is how [i]you[/i] can  [u]show[/u] how to use  [hl]BBcode[/hl] syntax[/nobb][/nobb]</code> This is how [i]you[/i] can [u]show[/u] how to use [hl]BBcode[/hl] syntax"},{"location":"member/bbcode/#lists","title":"Lists","text":"BBcode syntax Rendered list <code>[ul] [*] First list element [*] Second list element [/ul]</code> - First list element- Second list element <code>[ol] [*] First list element [*] Second list element [/ol]</code> 1. First list element2. Second list element <code>[list=A] [*] First list element [*] Second list element [/list]</code>             The list type options are <code>1, i, I, a, A</code>. A. First list elementB. Second list element <code>[dl terms=\"b\"] [*= First element term] First element description [*= Second element term] Second element description [/dl]</code>          The terms style options can be any combination of:  bbold iitalic uunderline mmonospace llarge hhorizontal \u2014 like this defintion list First element termFirst element description Second element termSecond element description"},{"location":"member/bbcode/#tables","title":"Tables","text":"BBcode syntax Rendered table <code>[table border=0] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table]</code> <code>[table border=1] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table]</code> <code>[table] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table]</code>"},{"location":"member/bbcode/#links-and-embedded-content","title":"Links and Embedded Content","text":"BBcode syntax Output <code>[video]video URL[/video] [audio]audio URL[/audio]</code> VIDEOAUDIO <code>[video='URL_TO_POSTER']video_link[/video]</code> <code>[url=https://hubzilla.org]Hubzilla[/url]</code> Hubzilla <code>An image [img]https://example.org/image.jpg[/img]  in some text</code>"},{"location":"member/bbcode/#hubzilla-spezific-codes","title":"Hubzilla spezific codes","text":"BBcode syntax Output Magic-auth version of [url] tag           <code>[zrl=https://hubzilla.org]Identity-aware link[/zrl]</code> Magic-auth version of [img] tag           <code>[zmg]https://hubzilla.org/some/photo.jpg[/zmg]</code> Image is only viewable by those authenticated and with permission. Observer-dependent output:<code>[observer=1]Text to display if observer IS authenticated[/observer]</code> <code>[observer=0]Text to display if observer IS NOT authenticated[/observer]</code> <code>[observer.language=en]Text to display if observer language is English[/observer]</code> <code>[observer.language!=de]Text to display if observer language is not German[/observer]</code> <code>[observer.url]</code> channel URL of observer <code>[observer.baseurl]</code> website of observer <code>[observer.name]</code> name of observer <code>[observer.webname]</code> short name in the url of the observer <code>[observer.address]</code> address (Nomad/Zot-id) of observer <code>[observer.photo]</code> profile photo of observer <code>What is a spoiler?               [spoiler]Text you want to hide.[/spoiler]</code> What is a spoiler? Click to open/close <code>[toc data-toc='div.page-body' data-toc-headings='h1,h2']</code>  Create a table of content in a webpage or wiki page. Please refer to the original jQuery toc to get more explanations.    Optional param: 'data-toc'. If omitted the default is 'body'    Optional param: 'data-toc-headings'. If omitted the default is 'h1,h2,h3' <code>[rpost=title]Text to post[/rpost]</code>  The observer will be returned to their home hub to enter a post with the specified title and body. Both are optional [baseurl]/rpost?f=&amp;title=title&amp;body=Text+to+post This requires the qrator plugin. <code>[qr]text to post[/qr]</code> This requires a suitable map plugin such as openstreetmap.          <code>[map]</code> Generate an inline map using the current browser coordinates of the poster, if browser location is enabled This requires a suitable map plugin such as openstreetmap.          <code>[map=latitude,longitude]</code> Generate a map using global coordinates. This requires a suitable map plugin such as openstreetmap.          <code>[map]Place Name[/map]</code> Generate a map for a given named location. The first matching location  is returned. For instance \"Sydney\" will usually return Sydney, Australia and not Sydney, Nova Scotia, Canada unless the more precise location is specified. It is highly recommended to use the post preview utility to  ensure you have the correct location before submitting the post. <code>[\u00a9]</code> \u00a9"},{"location":"member/blocking_channels/","title":"Blocking channels","text":""},{"location":"member/blocking_channels/#blockingignoringarchivinghiding-channels","title":"Blocking/ignoring/archiving/hiding channels","text":"<p>Channels in your address book can have the status \u2018 blocked\u2019, \u2018 ignored\u2019,\u2018 archived\u2019 or \u2018 hidden\u2019. There is a filter on your connection page that displays the channels with these statuses.</p> <p></p> <p>You can change the status of a channel on the pages for editing connections.</p> <p>The meaning:</p> <p>Blocked: The channel cannot read your items, regardless of permissions, and it cannot write to your channel.</p> <p>Ignored: The channel can read your items if it is authorised to do so, but it cannot write to your channel.</p> <p>Hidden: The channel is not displayed in the connection list of your profile. No one can see that you are connected to it. Note: It is still visible to your other connections, for example in replies to posts.</p> <p>Archived: If a channel cannot be reached for 30 days, it is automatically marked as archived. This means that all data is retained, but the channel is no longer queried for new information and is removed from the auto-complete. If you find out later that the channel is online again, you can remove it manually from the archive.</p>"},{"location":"member/bookmarks/","title":"Bookmarks","text":""},{"location":"member/bookmarks/#bookmarks","title":"Bookmarks","text":"<p>Bookmarks specify a link that can be saved in your bookmarks folder. They use the character string <code>#^</code> followed by the link. These are often generated automatically. If the administrator of the Hub has installed the \u2018bookmarker\u2019 add-on, this sequence is converted into a bookmark symbol when the post or comment is viewed online.</p> <p></p> <p></p> <p>If you click on the icon, the bookmark is saved. If the bookmark add-in is not installed, the post drop-down menu contains a link to save the bookmark or bookmarks.</p> <p>To use bookmarks, you must install the \u2018Bookmarks\u2019 app.</p> <p>The app will then list all the bookmarks you have set.</p> <p>To add a bookmark independently of a link in the stream or a post, you can call up the page <code>&lt;URL_your_hub&gt;</code>/rbmark, which provides you with a mask for manually entering a bookmark.</p> <p></p> <p>You can also create a bookmarklet and place it in the bookmark bar of your web browser, for example:</p> <pre><code>javascript:javascript:(function(){var%20url=location.href;var%20title=document.title||url;window.open('[observer.baseurl]/rbmark?&amp;url='+encodeURIComponent(url)+'&amp;title='+encodeURIComponent(title)+'&amp;source=bookmarklet','_blank','menubar=no,height=390,width=600,toolbar=no,scrollbars=no,status=no,dialog=1');})();\n</code></pre> <p>Important: Replace the expression <code>[observer.baseurl]</code> with the URL of your hub, e.g. if you have your channel on Klackerhub, you simply have to enter <code>https://klacker.org</code> for <code>[observer.baseurl]</code>.</p> <p>Now you can add any website you visit to your channel's bookmarks by clicking on the bookmarklet.</p>"},{"location":"member/calendar/","title":"Calendar","text":""},{"location":"member/calendar/#calendar","title":"Calendar","text":"<p>The \u2018Calendar\u2019 app can be used to manage appointments. After opening the app, a calendar overview (one month) is displayed.</p> <p></p> <p>Clicking on a day allows you to create an event. In the  input mask (shortened view, can be expanded by clicking on \u2018more\u2019 ) you can now enter the essential contents.</p> <p></p> <p></p> <p>You may also define detailed permissions for these entries, so that you can record private appointments and public/shared appointments in one and the same calendar.</p> <p></p>"},{"location":"member/calendar/#caldav-access-with-android","title":"CalDAV access with Android","text":"<p>You can synchronise your Android calendar with your hub. Use the \u2018URL\u2019 and \u2018Username\u2019 to log in. The base URL is <code>&lt;your-hub-URL&gt;/cdav</code>, and the username is your channel name (without the leading \u2018@\u2019 and without the hub address \u2018<code>@&lt;your-hub&gt;</code>\u2019). To share your calendar, visit <code>&lt;your-hub-URL&gt;/cdav/calendar</code>.</p>"},{"location":"member/channel_locations/","title":"Channel locations","text":""},{"location":"member/channel_locations/#manage-channel-locations","title":"Manage Channel locations","text":"<p>If the current channel has clones on other hubs, the menu will show an additional entry, \u2018Manage Channel locations\u2019. This allows you to specify the hub on which the main channel (primary channel) is located (this also determines the part of the handle after the \u2018@\u2019). You can also delete clones from here. However, for channels on third-party servers, it is recommended that you delete the channel on the actual hub. Deleting from the clone management should only be used if the clone's hub no longer exists.</p> <p></p>"},{"location":"member/channel_roles/","title":"Channel roles","text":""},{"location":"member/channel_roles/#channel-roles","title":"Channel roles","text":"<p>When you create a new channel, you will be asked to select an permission role depending on how you want to use this channel. The most popular permission roles are the social network roles. You have many more choices comparable to Facebook groups and pages, collaborative spaces, news feeds and more. These roles automatically configure various system variables, from the permissions granted to friends to the default privacy and visibility settings. Advanced configurations are available to customise each of these parameters to your needs, but our experience has been that most users prefer to set it and forget it. Below are some of the different roles that are currently available and how they affect your privacy and interaction options.</p> <p>There are four channel roles:</p> <ul> <li>Public</li> <li>Personal</li> <li>Community Forum</li> <li>Customised</li> </ul>"},{"location":"member/channel_roles/#public","title":"Public","text":"<p>The channel is a very permissive social network profile that is compatible with other federated social networks. Privacy is a lower priority than ease of access and connection with others. Anyone on the network can comment on your public posts and send you private messages. By default, posts and published articles are public, but you can override and restrict this when you create the article. You are listed in the directory. Your online presence and connections are visible to others. This mode can increase your susceptibility to unsolicited messages and spam. The \u2018classic\u2019 social media account.</p>"},{"location":"member/channel_roles/#personal","title":"Personal","text":"<p>By default, posts and published items are public, but you can override and restrict this when creating the item. You are listed in the directory. Your online presence and connections are visible to others. Only your direct connections can comment on your public posts and send you private messages.</p>"},{"location":"member/channel_roles/#community-forum","title":"Community Forum","text":"<p>The channel is a typical forum. By default, posts and published articles are public. Members can post articles via !mention or wall-to-wall. The posting of photos and other published articles is blocked. The channel is visible in the directory. Members are added automatically.</p> <p>In order to be able to view media as a forum user, some of which may have restricted authorisations, it is necessary to activate the option \u2018Enable OCAP access\u2019 in your own user channel under Settings \u2192 Privacy settings (<code>&lt;hub&gt;/settings/privacy</code>).</p>"},{"location":"member/channel_roles/#custom","title":"Custom","text":"<p>This is the most precise setting for channel rights. All rights can be set in fine granularity. Caution: If you select the wrong settings here, you can render your channel unusable. Fortunately, the rights can also be changed again so that such malfunctions can be rectified. It makes sense to consider the effects of each individual permission for yourself as the channel owner, but also for other users.</p> <p>The following settings are possible for each control point:</p> <ul> <li>Only me</li> <li>Only those you explicitly authorise</li> <li>Accepted connections</li> <li>Any connections</li> <li>Everyone on this website</li> <li>All Hubzilla members</li> <li>Anyone authenticated</li> <li>Anyone on the Internet</li> </ul> <p>To edit the custom role, select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue will appear, drawing your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens.</p>"},{"location":"member/channel_settings/","title":"Channel settings","text":""},{"location":"member/channel_settings/#channel-settings","title":"Channel settings","text":"<p>If you access the settings via the menu item, the channel settings are displayed by default. The basic settings are used to set the properties and functions of the currently selected (used) channel. In addition to the channel role, you can also define the standard for automatically created directories in the cloud (these are generated, for example, when you upload an image as an attachment in a post).</p> <p>It is also possible to delete the channel (red \u2018Delete channel\u2019 button).</p> <p>Important note: It is not possible to create a new channel on this hub under the name of the deleted channel (not even by cloning). This is to protect against \u2018identity misuse\u2019. If you still want to reinstall a channel with this name for important reasons, you can contact the admin of the hub, explain the reasons (so that they can be sure that you have a legitimate interest) and ask them to remove the block. Only he can do this with a few simple steps in the database.</p> <p>You can also set the expiry period for imported content from other channels and control this import using two filters.</p> <p></p> <p>The notification settings allow you to specify exactly whether you want to be notified of certain events and actions. And whether you also want the notification to be sent by email.</p> <p></p>"},{"location":"member/channels/","title":"Channels","text":""},{"location":"member/channels/#channels","title":"Channels","text":"<p>Channels are simply collections of content that are stored in one place. A channel can stand for anything. It can represent you, a website, a forum, photo albums, anything. For most people, their first channel is \u2018Me\u2019. The most important functions for a channel that represents \u2018me\u2019 are:</p> <ul> <li>Secure and private \u2018spam-free\u2019 communication</li> <li>Identity and \u2018single sign-on\u2019 across the entire network</li> <li>Privacy controls and authorisations that extend to the entire network</li> <li>Directory services (like a phone book)</li> </ul> <p>In short, a channel that represents you is \u2018me on the Internet\u2019. With one account at a hub, several different channels can be created and used, each with its own individual configuration.</p>"},{"location":"member/chat_rooms/","title":"Chat rooms","text":""},{"location":"member/chat_rooms/#chat-rooms","title":"Chat Rooms","text":"<p>The \u2018Chat Rooms\u2019 app allows you to set up chat rooms for instant messaging within a hub and to chat with other channels within the hub.</p> <p>If you access the app from the app menu, your own chat rooms will be displayed. To create a new chat room, click on the \u2018Add Room\u2019 button.</p> <p></p> <p>Here you have to give the chat a name and you can choose how many minutes the chat content will expire after. It is also possible to use the privacy tool (\ud83d\udd12) to determine who is authorised to see and use the chat room. The URL to the chat room is displayed in the browser and is also available via the link to the chat room in the left sidebar. Now you can share the URL with another user in your hub and start a chat with them.</p> <p></p>"},{"location":"member/clone/","title":"Clone","text":""},{"location":"member/clone/#clone","title":"Clone","text":"<p>Hubzilla channels have a so-called \u2018nomadic identity\u2019. This is a speciality of the Nomad protocol, on which Hubzilla is based and with which Hubzilla hubs communicate with each other.</p> <p>The nomadic identity makes it possible to create clones of your own channel, which greatly increases your resistance to censorship and outages.</p> <p>If you have cloned your channel, it is no problem if your \u2018home hub\u2019 fails or does not work correctly. You can seamlessly continue to participate in the Fediverse with a channel clone located on another hub. All channel clones are automatically synchronised in the background.</p> <p>To create a clone of your channel, you need an account on another Hubzilla hub. There are now several ways to create a clone of your channel on this other hub.</p> <p>You can use the \u2018Channel Export\u2019 app to export the channel on your \u2018home hub\u2019.</p> <p></p> <p>By clicking on the \u2018Export channel\u2019 button, you can export your identity and your social graph to a file that you can download. Since files, websites, wikis, calendars and chat rooms are always restricted to your own hub (i.e. the respective server), you can also use the \u2018Channel export\u2019 app to download archives of this data locally. Now log in to the new hub and either select the \u2018Channels\u2019 menu item in the main menu (your profile picture; top left) and then the \u2018+ Create new\u2019 button on the channel selection page that appears, or go directly to the channel creation page at <code>&lt;URL-of-your-hub&gt;/new_channel</code>.</p> <p></p> <p>On this page, however, you do not enter any information for creating a new channel, but instead select the link \u2018import an existing channel from another server\u2019 at the bottom of the dialogue.</p> <p></p> <p>The dialogue for importing the channel now opens.</p> <p></p> <p>Click on the \u2018File to upload: Browse...\u2019 button to open a file dialogue where you can select the previously saved channel file.</p> <p>As an alternative to this method, you can also clone your channel directly from the source, i.e. the originating hub. To do this, you must enter the handle of the channel to be cloned, the e-mail address for logging in to the source hub, and the corresponding password in the channel import dialogue. In addition, you can use a switch to select whether files and objects from the source hub should also be imported (provided that your new hub allows this and the storage limit is sufficient).</p> <p>In the dialogue, you can also specify whether the new hub should be your \u2018primary hub\u2019. This means that the new channel (the one you are now creating) will be your primary channel. This affects the handle of your channel, which will now end with the URL of the new hub.</p> <p>As a rule, unless you want to move completely to a different hub, you leave the switch at \u2018No\u2019 and the primary hub remains the one it currently is (the handle remains unchanged).</p> <p>If you would like a different channel name (short name), you can enter it in an additional input field. If you leave the field empty, the channel short name remains unchanged.</p> <p>Note: If the channel short name is already in use on the new hub (or has been blocked because an identical channel already existed there but was deleted), the system will automatically modify the short name.</p> <p>Finally, click on \u2018Submit\u2019 and do NOT leave the page until the import is complete. Depending on the size of the source channel, this may take some time.</p> <p>You can manage your clones at any time via Settings \u2192 Manage clone addresses. You can define which is the \u2018primary hub\u2019 and you can delete clones, although it is recommended that you delete cloned channels directly on the respective hub.</p> <p></p>"},{"location":"member/cloud_storage/","title":"Cloud storage","text":""},{"location":"member/cloud_storage/#cloud-storage","title":"Cloud storage","text":"<p>Your files are visible to everyone who is allowed to view them on the internet at <code>&lt;URL-of-your-hub&gt;/cloud/&lt;your-channel-name&gt;</code>. If the viewer has sufficient rights, they can also create new files and folders/directories. This option should only be used for smaller files and photos (up to a few megabytes), as it uses the internal memory. Please use WebDAV to upload larger files (videos, music, etc.). These files can still be accessed via the web access.</p> <p>With WebDAV, you can copy files directly into or out of your computer's operating system, with your cloud files appearing like a virtual drive. This should be used to upload large files such as video and audio files. The URL for the cloud directory is <code>&lt;URL-of-your-hub&gt;/dav/</code>.</p> <p>If, depending on the DAV file system integration (depending on the operating system used and possibly the application), a username is required, this is the channel short name (i.e. without the leading \u2018@\u2019 and without the following \u2018@hub address\u2019). A possibly required password corresponds to your login password.</p>"},{"location":"member/comanche/","title":"Comanche","text":""},{"location":"member/comanche/#comanche-page-description-language","title":"Comanche page description language","text":"<p>Comanche is a BBCode-like markup language that can be used to create elaborate and complex web pages by assembling them from a series of components, some of which are pre-built and others that can be defined on the fly. Comanche uses a page description language to create these pages. Comanche primarily selects which content should appear in the various areas of the page. The various areas have names, and these names may change depending on the layout template selected.</p>"},{"location":"member/comanche/#page-templates","title":"Page templates","text":"<p>There are currently five layout templates, unless your website offers additional layouts.</p> <p>Standard template</p> <p>The default template defines a \u2018nav\u2019 area at the top, \u2018aside\u2019 as a sidebar with a fixed width, \u2018content\u2019 for the main content area and \u2018footer\u2019 for a page footer.</p> <p>Full template</p> <p>The full template corresponds to the default template except that there is no \u2018aside\u2019 area.</p> <p>Choklet</p> <p>The Choklet template offers a range of fluid layout styles that can be set to taste:</p> <ul> <li>(default flavour) - a two-column layout similar to the default template, but more flexible</li> <li>bannertwo - a two-column layout with a banner area, compatible with the default template on small displays</li> <li>three - three-column layout (adds a \u2018right_aside\u2019 area to the standard template)</li> <li>edgestwo - two-column layout with fixed margins</li> <li>edgesthree - three-column layout with fixed margins</li> <li>full - three-column layout with fixed margins and the addition of a \u2018header\u2019 area below the navigation bar</li> </ul> <p>Redable</p> <p>A template for reading longer texts in full screen mode (i.e. without a navigation bar). Three columns: aside, content and right_aside. For maximum readability, it is advisable to use only the middle content column.</p> <p>Zen</p> <p>Gives you the freedom to do everything yourself. Just a blank page with a content area. To select a layout template, use the \u2018template\u2019 tag.</p> <pre><code>[template]full[/template]\n</code></pre> <p>To select the template \u2018choklet\u2019 with the flavour \u2018three\u2019:</p> <pre><code>[template=three]choklet[/template]\n</code></pre> <p>The default template is used if no other template is specified. The template can use arbitrary names for the content regions. You will use \u2018region\u2019 tags to decide what content should be placed in which regions. Three \u2018macros\u2019 have been defined for your use.</p> <pre><code>$htmlhead - replaced with the site head content.\n$nav - replaced with the site navigation bar content.\n$content - replaced with the main page content.\n</code></pre> <p>By default, <code>$nav</code> is inserted into the \u2018nav\u2019 page area and <code>$content</code> into the \u2018content\u2019 area. You only need to use these macros if you want to change the order of the elements or move them to other areas. To select a theme for your page, use the \u2018theme\u2019 tag.</p> <pre><code>[theme]suckerberg[/theme]\n</code></pre> <p>This selects the theme \u2018suckerberg\u2019. By default, the theme preferred by your channel is used.</p> <pre><code>[theme=passion]suckerberg[/theme]\n</code></pre> <p>This selects the theme named \u2018suckerberg\u2019 and chooses the \u2018passion\u2019 scheme (theme variant). Alternatively, it is also possible to use compressed theme notation.</p> <pre><code>[theme]suckerberg:passion[/theme]\n</code></pre> <p>The compressed notation is not part of Comanche itself, but it is recognised by the Hubzilla platform as a theme specifier.</p> <p>Navbar</p> <pre><code>[navbar]tucson[/navbar]\n</code></pre> <p>Use the \u2018tucson\u2019 template for the navigation bar and CSS rules. By default, the \u2018default\u2019 template is used for the navigation bar.</p> <p>Regions</p> <p>Each region has a name, as mentioned above. You specify the region you are interested in with a \u2018region\u2019 tag containing the name. Any content you want to place in that region should be placed between the opening region tag and the closing tag.</p> <pre><code>[region=htmlhead]....content goes here....[/region]\n[region=aside]....content goes here....[/region]\n[region=nav]....content goes here....[/region]\n[region=content]....content goes here....[/region]\n</code></pre> <p>CSS and Javascript</p> <p>We have the option of including Javascript and CSS libraries in the htmlhead section. Currently we use jquery (js), bootstrap (css/js) and foundation (css/js). This overwrites the htmlhead of the selected theme.</p> <pre><code>[region=htmlhead]\n   [css]bootstrap[/css]\n   [js]jquery[/js]\n   [js]bootstrap[/js]\n[/region]\n</code></pre> <p>Menus and blocks</p> <p>The website creation tools allow you to create menus and blocks in addition to page content. These provide a set of existing content that can be placed in the areas and order you specify. Each of these elements has a name that you set when you create the menu or block.</p> <pre><code>[menu]mymenu[/menu]\n</code></pre> <p>This places the menu \u2018mymenu\u2019 at this point on the page, which must be within an area.</p> <pre><code>[menu=horizontal]mymenu[/menu]\n</code></pre> <p>This places the menu named \u2018mymenu\u2019 at this point on the page, which must be within an area. It also assigns the class \u2018horizontal\u2019 to the menu. The class \u2018horizontal\u2019 is defined in the redbasic theme. It may or may not be available in other themes.</p> <pre><code>[menu][var=wrap]none[/var]mymenu[/menu]\n</code></pre> <p>The <code>[var=wrap]none[/var]</code> variable in a block removes the enclosing div element from the menu.</p> <pre><code>[block]contributors[/block]\n</code></pre> <p>This places a block named \u2018contributors\u2019 in this region.</p> <pre><code>[block=someclass]contributors[/block]\n</code></pre> <p>This places a block named \u2018contributors\u2019 in this region. In addition, the class \u2018someclass\u2019 is applied to the block. This replaces the default block classes \u2018bblock widget\u2019.</p> <pre><code>[block][var=wrap]none[/var]contributors[/block]\n</code></pre> <p>The variable <code>[var=wrap]none[/var]</code> in a block removes the enclosing div element from the block.</p> <p>Widgets</p> <p>Widgets are executable applications provided by the system that you can place on your page. Some widgets require arguments that you can use to customise the widget to your purpose. System widgets are listed here. Widgets can also be created by plugins, themes or your website administrator to provide additional functions. Widgets and arguments are specified with the tags \u2018widget\u2019 and \u2018var\u2019.</p> <pre><code>[widget=recent_visitors][var=count]24[/var][/widget]\n</code></pre> <p>This loads the \u2018recent_visitors\u2019 widget and sets the \u2018count\u2019 argument to \u201824\u2019.</p> <p>Comments</p> <p>The \u2018comment\u2019 tag is used to delimit comments. These comments are not displayed on the rendered page.</p> <pre><code>[comment]This is a comment[/comment]\n</code></pre> <p>Conditional execution</p> <p>You can use an \u2018if\u2019 construct to make decisions. These are currently based on the system configuration variable or the current observer.</p> <pre><code>[if $config.system.foo]\n  ... the configuration variable system.foo evaluates to \u2018true\u2019.\n[else]\n  ... the configuration variable system.foo evaluates to \u2018false\u2019.\n[/if]\n\n[if $observer]\n  ... this content will only be show to authenticated viewers\n[/if]\n</code></pre> <p>The \u2018else\u2019 clause is optional. In addition to the Boolean evaluation, several tests are supported.</p> <pre><code>[if $config.system.foo == bar]\n  ... the configuration variable system.foo is equal to the string \u2018bar\u2019\n[/if]\n[if $config.system.foo != bar]\n  ... the configuration variable system.foo is not equal to the string \u2018bar\u2019\n[/if]\n[if $config.system.foo {} bar ]...\n the configuration variable system.foo is a simple array containing a value \u2018bar\u2019\n[/if]\n[if $config.system.foo {*} bar]...\n the configuration variable system.foo is a simple array containing a key named \u2018bar\u2019\n[/if]\n</code></pre> <p>Complex example</p> <pre><code>[comment]use an existing page template which provides a banner region plus 3 columns beneath it[/comment]\n\n[template]3-column-with-header[/template]\n\n[comment]Use the \"darknight\" theme[/comment]\n\n[theme]darkknight[/theme]\n\n[comment]Use the existing site navigation menu[/comment]\n\n[region=nav]$nav[/region]\n\n[region=side]\n\n    [comment]Use my chosen menu and a couple of widgets[/comment]\n\n    [menu]myfavouritemenu[/menu]\n\n    [widget=recent_visitors]\n        [var=count]24[/var]\n        [var=names_only]1[/var]\n    [/widget]\n\n    [widget=tagcloud][/widget]\n    [block]donate[/block]\n\n[/region]\n\n\n\n[region=middle]\n\n    [comment]Show the normal page content[/comment]\n\n    $content\n\n[/region]\n\n\n\n[region=right]\n\n   [comment]Show my condensed channel \"wall\" feed and allow interaction if the observer is allowed to interact[/comment]\n\n    [widget]channel[/widget]\n\n[/region]\n</code></pre>"},{"location":"member/commenting/","title":"Commenting","text":""},{"location":"member/commenting/#commenting","title":"Commenting","text":"<p>If you want to comment on a post, i.e. reply to it, click in the field at the bottom of the post (\u2018Comment\u2019). This opens the comment editor, which is similar to the post editor. However, there are no fields for a title, a summary or categories. Below the input field for the content of the comment there are again buttons for certain formatting (not all that are available in the post editor, because not everything is possible in a comment) and on the right again a button for a preview, as well as a \u2018Submit\u2019 button to publish the comment.</p> <p></p> <p>You can also mark up the text in the comment content field with Markdown, bbCode and HTML. As there is no field for a summary, it is not possible to use this for a content warning regarding the comment. However, this can be achieved using bbCode by inserting the content warning in <code>[summary][/summary]</code>. This initially hides all of the following content, which can then be displayed by clicking on it.</p>"},{"location":"member/connecting_with_channels/","title":"Connecting with channels","text":""},{"location":"member/connecting_with_channels/#connecting-with-channels","title":"Connecting with channels","text":"<p>Connections in Hubzilla can have many different meanings. A connection is more precisely defined as a set of permissions that you have granted to another person. In traditional social networks, all connections are given the same permissions or at most two levels (friends and \u2018followers\u2019). In Hubzilla, a separate set of permissions can be set/customised depending on the situation and the relationship you have with the other channel. You can allow someone to see your posts, but not your photos. You can also deny them permission to comment on your posts or send private messages to you. But let's make it simple: you want to be friends with someone you know from social networks. How do you do that?</p> <p>You can view the directory. The directory is available on all Hubzilla sites, so if you search from your own site, you'll get results from across the network. You can search by name, interest, location and keyword. If you already know someone's \u2018handle\u2019, you can contact them directly. A handle looks just like an email address (e.g. <code>bob@example.com)</code> but refers to a person in the open social network. In order to establish a connection, a compatible network protocol must be used. By default, this software supports the Nomad protocol, but other protocols can be provided via plugins/add-ons. For more information on connecting to channels on other networks, see below.</p>"},{"location":"member/connecting_with_channels/#how-to-connect-to-other-hubzilla-channels","title":"How to connect to other Hubzilla channels:","text":"<p>Visit the desired channel's profile by clicking on their photo in the directory, stream or comments and it will open their channel homepage in the channel viewer. On the left side of the screen you will normally see a link labelled \u2018Connect\u2019. Click on it and you're done. Depending on the settings of the channel you want to connect to, you may have to wait for the channel to approve your connection, but no further action is required on your part. Once you have initiated the connection, you will be redirected to the connection editor. Here you can assign specific authorisations for this channel if you want to make changes.</p> <p>You can also create a connection to any channel by going to the \u2018Connections\u2019 page of your website or directory and entering the \u2018Handle\u2019 in the \u2018Add new connection\u2019 field. Use this method if someone tells you their handle and you want to connect to them. The process is the same as when connecting via the \u2018Connect\u2019 button - you will then be redirected to the connection editor to set the authorisations.</p>"},{"location":"member/connecting_with_channels/#this-is-how-you-establish-a-connection-to-channels-in-other-networks","title":"This is how you establish a connection to channels in other networks:","text":"<p>The process for connecting to \u2018channels\u2019 on other networks (such as GNU Social, Mastodon, Misskey, Pleroma and Diaspora) is similar - enter their \u2018handle\u2019 in the \u2018+Add\u2019 field on the \u2018Connections\u2019 page. However, before you do this, please visit the App Management in the app menu and make sure that the appropriate protocol (Diaspora, GNU-Social/OStatus or ActivityPub) is deployed in your hub and enabled for your channel. These networks/protocols do not support account migration and location independence. So if you change location or clone your channel elsewhere, communication with these connections may fail. For this reason, these protocols are not enabled by default, but only with your consent. Enabling these protocols is an important decision between communicating with friends on these networks and account resilience in case your server goes down.</p> <p>Some communication networks offer more than one protocol. For example, you can connect to someone who uses both the \u2018ostatus\u2019 and \u2018activitypub\u2019 protocols for communication. In general, the \u2018activitypub\u2019 protocol provides a better experience than the \u2018ostatus\u2019 protocol, but Hubzilla often chooses the first protocol it detects, and that may not be what you want. You can connect to someone using a specific protocol by putting the protocol name in square brackets before their \u2018handle\u2019. For example</p> <p><code>[activitypub]https://foo.bar/foobar</code></p> <p><code>[ostatus]foobar@foo.bar</code></p> <p><code>[diaspora]foobar@foo.bar[zot]foobar@foo.bar</code></p> <p><code>[feed]https://foo.bar/foobar</code></p>"},{"location":"member/connecting_with_channels/#how-to-connect-to-rss-feeds","title":"How to connect to RSS feeds:","text":"<p>Your hub administrator can allow you to connect to RSS feeds. The procedure for connecting to an RSS feed is the same, except that you enter (or paste) the URL of the feed into the \u2018Add new connection\u2019 field. The options may be restricted by your hub administrator because connections to feeds can sometimes cause high system loads.</p>"},{"location":"member/connection_editor/","title":"Connection editor","text":""},{"location":"member/connection_editor/#connection-editor","title":"Connection editor","text":"<p>If you click on the \u2018Edit\u2019 button for a contact in the \u2018Connections\u2019 app, the connection editor opens. You can use the editor to assign a specific contact role to a contact. If required, you can use the \u2018Contact Roles\u2019 button to display the existing roles and also create new roles. Another button (Compare authorisations) allows you to compare the assigned authorisations with those of the standard authorisation role.</p> <p></p> <p>You can use the \u2018Privacy groups\u2019 tab to assign a contact to one or more privacy groups.</p> <p></p> <p>You can use the \u2018Profiles\u2019 tab to specify which of your profiles (if you have created several) is displayed to the contact.</p> <p></p> <p>With the content filters, you can filter out posts from a contact with certain content or use filters to specify that only posts with defined content end up in the stream.</p> <p></p> <p>You can use the contact tools to</p> <ul> <li>block the contact,</li> <li>ignore,</li> <li>archive,</li> <li>hide</li> </ul> <p>or</p> <ul> <li>delete.</li> </ul> <p></p>"},{"location":"member/connections/","title":"Connections","text":""},{"location":"member/connections/#connections","title":"Connections","text":"<p>You can use the \u2018Connections\u2019 app to display all your connections.</p> <p></p> <p>In the overview, for each connection</p> <ul> <li>the channel name</li> <li>the date of the connection</li> <li>the channel address (handle)</li> <li>the network of the contact (ActivityPub, Zot (Nomad), RSS, Diaspora...)</li> <li>you can use a filter next to it to display the channel's recent activities in the stream</li> <li>the profile picture</li> <li>and a coloured dot (traffic light colours) indicates the rights granted by the contact (if you rest the mouse pointer over the coloured dot, the rights granted are displayed)</li> </ul> <p>can be seen.</p> <p>A label is also displayed which shows the type of connection or warns that (in the case of clones) there is no connection at this location. There is an \u2018Edit\u2019 button on the right of each contact entry, with which you can edit the connection using the connection editor.</p>"},{"location":"member/content_filters/","title":"Content filters","text":""},{"location":"member/content_filters/#content-filters","title":"Content Filters","text":"<p>Content Filter allows you to filter incoming content from all  sources or from specific connections. The filtering may be based on  words, tags, regular expressions, or language.</p> <p>You can set global filters for all incoming content in the stream settings.</p> <p></p> <p>You can also set individual filters for each of your Connections. Select  \"Edit\" for any connection, then look under Content filter.</p> <p></p> <p>If you add filters under Do not import posts with this text, (\"deny filtering\") these are applied first. Any matching content will be removed.</p> <p>Then, any filters under Only import posts with this text (\"accept filtering\") are applied. Only matching content will be kept, and everything that doesn't match will be removed.</p> <p>Generally speaking, you will be using one or the other; and rarely if ever using both at the same time. </p>"},{"location":"member/content_filters/#basic-filters","title":"Basic Filters","text":"<p>TEXT</p> <p>Any text that doesn't start with one of the following: '#', '$', '?', '/', '@', 'lang=', 'lang!=' performs a case-insensitive text match.</p> <p>Example: <code>apple</code> (matches \"apple\", \"APPLE\", \"Apples\", \"pineapple\", \"applesauce\", etc.)</p> <p>Example: <code>low sub</code> (matches \"low sub\", \"low sub-zero\", \"Yellow Submarine\", etc.)</p> <p>NOTE: Beware of using short character sequences that will match many  dissimilar words. You may want to use REGULAR EXPRESSIONS (see below).</p> <p>LANGUAGE</p> <p>lang= Match language (if it can be identified) Example: <code>lang=de</code> (matches German-language content)</p> <p>lang!= Match anything except this language (if it can be identified) Example: <code>lang!=en</code> (matches non-English content)</p> <p>HASHTAG</p> <p># Match hashtag Example: <code>#cats</code></p> <p>#&gt;n Match greater than total number of hashtags Example: <code>#&gt;10</code></p> <p>MENTION</p> <p>@ Match mention Example: <code>@alice</code></p> <p>@&gt;n Match greater than total number of mentions Example: <code>@&gt;10</code></p> <p>CATEGORY</p> <p>$ Match category. Example: <code>$Science</code></p> <p>ITEMS AND FIELDS</p> <p>? Discussed below under Advanced Filters</p> <p>REGULAR EXPRESSIONS (REGEX)</p> <p>/ Match a \"regular expression\". See numerous online help sites such as Regular-Expressions.info and regexr.com for regex assistance.</p> <p>Example: <code>/gr[ae]y/</code> (matches \"gray\" and \"grey\") Example: <code>/\\b[Ww]ar\\b/</code> (matches the whole words \"war\" and \"War\", but not \"wars\", \"warning\", \"software\", etc.)</p>"},{"location":"member/content_filters/#advanced-filters","title":"Advanced Filters","text":"<p>ITEMS</p> <p>? You may perform a string/numeric/array/boolean match on the database fields of an item (a post, comment, etc). A complete listing is beyond the  scope of this document, but see <code>install/schema_mysql.sql</code> and search for <code>CREATE TABLE IF NOT EXISTS</code>item``. Here is a sampling:</p> <ul> <li><code>body</code> (content of the message)</li> <li><code>verb</code> (usually the same as the ActivityPub activity type, e.g. Create, Listen)</li> <li><code>obj_type</code> (usually the same as the ActivityPub object.type, e.g. Note, Event)</li> <li><code>item_thread_top</code> (first post in a thread, boolean)</li> <li><code>item_private</code> (0 = public message, 1 = restricted message, 2 = direct message)</li> <li><code>ua</code> (User-Agent string of delivery agent - custom item attribute that is not in the database)</li> <li>...etc...</li> </ul> <p>Available comparison operators are:</p> <ul> <li><code>?foo ~= baz</code> -- item.foo contains the string 'baz'</li> <li><code>?foo == baz</code> -- item.foo is the string 'baz'</li> <li><code>?foo != baz</code> -- item.foo is not the string 'baz'</li> <li><code>?foo // regex</code> -- item.foo matches the regular expression 'regex' - automatically  wrapped in forward slashes unless you wrap it with some other character, for instance '=regex='.</li> <li><code>?foo &gt;= 3</code> -- item.foo is greater than or equal to 3</li> <li><code>?foo &gt; 3</code> -- item.foo is greater than 3</li> <li><code>?foo &lt;= 3</code> -- item.foo is less than or equal to 3</li> <li><code>?foo &lt; 3</code> -- item.foo is less than 3</li> <li><code>?foo {} baz</code> -- 'baz' is an array element in item.foo</li> <li><code>?foo {*} baz</code> -- 'baz' is an array key in item.foo</li> <li><code>?foo</code> -- true condition for item.foo</li> <li><code>?!foo</code> -- false condition for item.foo (The values 0, '', an empty array, and an unset value will all evaluate to false)</li> </ul> <p>Example: <code>?verb == Announce</code> (matches ActivityPub \"boosts\")</p> <p>FIELDS</p> <p>?+ ActivityPub/ActivityStreams object match. This is literally the copied object attribute from the incoming activity.</p> <p>Supports all the operators listed above. </p> <p>Examples: </p> <p><code>?+type == Question</code> -- matches ActivityPub polls </p> <p><code>?+attributedTo ~= spammer</code> -- matches ActivityPub attributedTo: https://o3r56t3c.example.com/u/cryptospammer2355</p>"},{"location":"member/conversation_features/","title":"Conversation features","text":""},{"location":"member/conversation_features/#conversation-features","title":"Conversation features","text":"<p>You can use this dialogue to define certain conversation features for a post:</p> <ul> <li>Allow emoji reactions</li> <li>Allow dislikes</li> <li>Allow local marking (asterisks)</li> <li>Allow replies to comments</li> </ul>"},{"location":"member/create_channels/","title":"Create channels","text":""},{"location":"member/create_channels/#create-channels","title":"Create channels","text":"<p>Once you have created your account, you will be presented with the \u2018Add Channel\u2019 screen. Normally, your first channel will be one that represents you - so it's a good idea to use your own name (or a pseudonym) as your channel name. The channel name should be considered the title or short description of your channel. The \u2018Choose a short nickname\u2019 field is similar to a \u2018Username\u2019. With what you enter here, you create a channel address (also known as a \u2018handle\u2019 in Fediverse) that other people can use to connect to you and that you can use to log in to other websites. This address looks like an email address and has the form <code>&lt;nickname&gt;@&lt;your_hub&gt;.</code></p> <p>Note: In other Fediverse services, the handle is preceded by an \u2018@\u2019. With Hubzilla, this character must be omitted if you want to connect to another user or search for a handle, as an example.</p> <p>You can create additional channels via the \u2018Channel manager\u2019 link.</p> <p>As soon as you have done this, your channel is ready for use. Under <code>&lt;your_hub&gt;/channel/&lt;nickname&gt;</code> you will find your channel \u2018Stream\u2019. Your most recent activities are displayed here in reverse chronological order.</p>"},{"location":"member/delete/","title":"Delete","text":""},{"location":"member/delete/#delete","title":"Delete","text":"<p>This function can be used to delete posts from the stream. A normal user does not have this option in the global stream. Only an administrator can remove posts from this stream.</p>"},{"location":"member/delete_account/","title":"Delete account","text":""},{"location":"member/delete_account/#deleting-your-account","title":"Deleting your account","text":"<p>If you wish to delete your account, i.e. all access to the hub, use the settings in the main menu (top left; profile picture): Settings \u2192 Account settings.</p> <p>At the top of the page, you will see a button labelled \u2018Remove account\u2019. Click on it and your account (account) will be deleted, including all content, after you enter your account password (for security purposes).</p> <p></p>"},{"location":"member/deleting_channel/","title":"Deleting channel","text":""},{"location":"member/deleting_channel/#deleting-a-channel","title":"Deleting a channel","text":"<p>If you want to delete your channel, use the settings in the main menu (top left; profile picture): Settings \u2192 Channel settings. At the top of the page, you will see a button labelled \u2018Remove channel\u2019. Click on it and your channel, including all content, will be deleted after you enter your account password (for security purposes).</p> <p></p> <p>Note: It is no longer possible to create a new channel with the same name on this hub. This is because the channel nickname is locked in the database to prevent impersonation. However, if you need to restore the old channel (by cloning) on the hub, please ask the administrator to delete the locked nickname from the Hubzilla database.</p>"},{"location":"member/diaspora_compat/","title":"Diaspora compat","text":""},{"location":"member/diaspora_compat/#diaspora-compatibility","title":"Diaspora Compatibility","text":"<p>The Diaspora Protocol addon allows a site to communicate using the Diaspora protocol, which allows communications and connections to be made with Diaspora members (and also Friendica members, since that network also provides the Diaspora Protocol). </p> <p>This addon is available in the 'basic' and 'standard' server configurations. It is not available with and the plugin is disabled completely when you are using the 'pro' server configuration. The reason for this is that the Diaspora protocol is not very sophisticated and many $projectname features do not work well with it.</p> <p>Members will have to be aware of limitations of the protocol or limit their own activities to those which are compatible with Diaspora. The 'pro' server configuration is free from these limitations and you may use all of the project features and abilities without regard for how they translate to other networks. Many features are unique to Hubzilla and are supported by the Nomad protocol, which is our native communications language between servers/hubs.</p> <p>If you are using a configuration which allows direct Diaspora communications you should be aware of the limitations presented here.  </p> <ul> <li>Private mail retraction (unsend) is not possible for Diaspora connections.</li> <li>Private posts and their associated comments are sent in plaintext email notifications in Diaspora and Friendica. This is a major privacy issue and affects any private communications you have where any member of the conversation is on another network. Be aware of it.</li> <li>Access control only works on posts and comments. Diaspora members will get permission denied trying to access any other access controlled hubzilla objects such as files, photos, webpages, chatrooms, etc. In the case of private photos that are linked to posts, they will see a \"prohibited sign\" instead of the photo. Diaspora has no concept of private media and provides an illusion of photo privacy by using obscured URLs rather than protecting the photo from snooping by unauthorised viewers. </li> </ul> <p>There is no workaround except to make your media resources public (to everybody on the internet).</p> <ul> <li>Edited posts will not be delivered. Diaspora members will see the original post/comment without edits. There is no mechanism in the protocol to update an existing post. We cannot delete it and submit another invisibly because the message-id will change and we need to keep the same message-id on our own network. The only workaround is to delete the post/comment and do it over. (If this is a post, this will delete any existing likes/comments). We may eventually provide a way to delete the out of date copy only from Diaspora and keep it intact on networks that can handle edits.</li> <li>Nomadic identity ($projectname 'standard' only) will not work with Diaspora. We may eventually provide an option which will allow you to \"start sharing\" from all of your clones when you make the first connection. The Diaspora person does not have to accept this, but it will allow your communications to continue if they accept this connection. Without this option, if you go to another server from where you made the connection originally or you make the connection before creating the clone, you will need to connect with them again from the new location.</li> <li>Post expiration is not supported on Diaspora. We may provide you an option to not send expiring posts to that network. In the future this may be provided with a remote delete request.</li> <li>End-to-end encryption is not supported. We will translate these posts into a lock icon, which can never be unlocked from the Diaspora side.</li> <li>Message verification will eventually be supported.</li> <li>Multiple profiles are not supported. Diaspora members can only see your default profile.</li> <li>Birthday events will not appear in Diaspora. Other events will be translated and sent as a post, but all times will either be in the origination channel's timezone or in GMT. We do not know the recipient's timezone because Diaspora doesn't have this concept.</li> <li>We currently allow tags to be hijacked by default. An option is provided to allow you to prevent the other end of the network from hijacking your tags and point them at its own resources.</li> <li>Community tags will not work. We will send a tagging activity as a comment. It won't do anything.</li> <li>Privacy tags (@!somebody) will not be available to Diaspora members. These tags may have to be stripped or obscured to prevent them from being hijacked - which could result in privacy issues.</li> <li>Plus-tagged hubzilla forums should work from Diaspora.</li> <li>You cannot use Diaspora channels as channel sources.</li> <li>Dislikes of posts will be converted to comments and you will have the option to send these as comments or not send them to Diaspora (which does not provide dislike). Currently they are not sent.</li> <li>We will do the same for both likes and dislikes of comments. They can either be sent as comments or you will have the ability to prevent them from being transmitted to Diaspora. Currently they are not sent.</li> <li>Emojis are currently untranslated.</li> <li>\"observer tags\" will be converted to empty text.</li> <li>Embedded apps will be translated into links.</li> <li>Embedded page design elements (work in progress) will be either stripped or converted to an error message.</li> <li>Diaspora members will not appear in the directory.</li> <li>There are differences in oembed compatibility between the networks. Some embedded resources will turn into a link on one side or the other.</li> </ul>"},{"location":"member/direct_messages/","title":"Direct messages","text":""},{"location":"member/direct_messages/#direct-messages","title":"Direct messages","text":"<p>Direct messages are messages that are addressed to one or more individual connections. They are accessible via the network stream. A filter for direct messages has been added to the stream filter widget for quick access.</p> <p>If you want to send a direct message to one (or more) other users (direct messages can only be read by the recipients and the sender), you write a normal post and address it exclusively to the recipient(s) using a special mention. This is done with the private mention (privacy tag). A privacy tag is a name that is preceded by the two characters <code>@!</code> and which, in addition to marking these channels, also changes the data protection authorisations of the post so that only these are taken into account.</p> <p>You do not need to use a privacy tag to reply to a DN \u2018privately\u2019, i.e. as a DN. You simply reply directly to the incoming DN, which distributes the reply to all original recipients.</p> <p>As an alternative to the privacy tag, you can also select channels or privacy groups from the privacy tool (\ud83d\udd12). This is the more complicated way, but it also works. However, the use of a privacy tag overwrites any selection made in the privacy tool. So if you write a post that is to be sent as a direct message, you can omit the privacy tag and instead click on the padlock symbol next to the \u2018Share\u2019 button to access the authorisation settings.</p>"},{"location":"member/directory/","title":"Directory","text":""},{"location":"member/directory/#directory","title":"Directory","text":"<p>Hubzilla offers a channel directory via the app (in the app menu \u22ee). The Hubzilla Grid channels are listed in the directory.</p> <p></p> <p>The directory options in the left sidebar can be used to filter the scope of the directory. For example, you can restrict the listing to channels from your own hub.</p> <p>There is also a keyword cloud in the left sidebar, which you can use to find channels with corresponding interests/focal points.</p> <p>There is also a search field in the left sidebar to find channels by name / name components or interests (keywords).</p> <p>You can then connect directly to a channel found by clicking on the corresponding button.</p>"},{"location":"member/display_settings/","title":"Display settings","text":""},{"location":"member/display_settings/#display-settings","title":"Display settings","text":"<p>The display settings can be used to customise the design of the channel. In addition, you can determine which content is displayed, within certain limits. In the design settings, you can select from the installed themes and set your design scheme for the topic.</p> <p></p> <p>With the custom design settings, it is possible to adjust the colour scheme to your own preferences and to define corner rounding, standard sizes and standard dimensions for avatars. The default settings are initially displayed in simplified form, and only allow you to set the dark mode, choose a narrow navigation bar, set the width of the content area and adjust the font size.</p> <p></p> <p>If you set the \u2018Show advanced settings\u2019 switch to \u2018Yes\u2019 and submit the selection, the advanced settings will be displayed, where you can set colours, avatar dimensions and background images.</p> <p></p> <p>The content settings allow you to select various parameters (e.g. the time until the view is updated) and to switch off the display of the \u2018links for new members\u2019 that are displayed when new channels are created.</p> <p></p>"},{"location":"member/encryption/","title":"Encryption","text":""},{"location":"member/encryption/#builtin-automatic-encryption","title":"Builtin Automatic Encryption","text":"<p>Full disclosure: The encryption hubzilla uses per default is not absolutely waterproof. There are known procedures to circumvent it. But this takes a lot of effort and needs to be done individually for each channel. And to make this clear: Other services store your messages in plaintext, therefore we regard this approach as a significant improvement for your privacy. Plus you are always free to use further encryption and password protection if you so desire.</p> <p>To explain this in more detail: </p> <ul> <li>each channel has its key pair</li> <li>every non-public post is automatically encrypted</li> <li>optional password protect content via crypto-javascript browser-to-browser encryption (needs to be enabled in settings) Full disclosure: A rogue hub admin could injects malicious javascript-code (e.g. keylogging-abilities) into the code. Encrypt our stuff out of band with GPG, become a hub administrator yourself or use other means of communication if this worries you.</li> </ul> <p>So what is the scope of security? Full disclosure: This might be great, but it is not perfect. - every non-public post is automatically encrypted but persons who have access to the site's database and files may be able to decrypt everything by using these keys which obviously need to be stored on the server. To be clear: The encrypion keys are different for every channel and it is quite an effort to do this. And again: Other services store your messages in plain text unencrypted. So this is quite a significant win for your privacy.</p> <p>We believe that the NSA-level dragnet plaintext extracting mass surveillance is probably not possible due to the design of the Nomad protocol. Dedicated attacks including hacking into one hub to obtain the server logs and database only partly reveal what is going on between people communication between different hubs. We believe that this makes it much more expensive for state-level attackers to access your content in hubzilla.</p> <p>We gladly accept help improving the security of the system and auditing it as well.</p>"},{"location":"member/files/","title":"Files","text":""},{"location":"member/files/#files","title":"Files","text":"<p>Hubzilla provides cloud functionality. This means that you have a directory for each channel in which you can create further subdirectories and store files. You can define precise access rights for each directory, and even for each individual file. These can range from visibility for the general public, to visibility for members of certain groups, to individual approval for individual members of your own connections. It is even possible to share files with people who do not have a Hubzilla identity. This is done using guest access tokens.</p> <p>Creating and deleting directories and creating and deleting files is really easy. You can access your cloud storage via the \u2018app menu\u2019 (\u22ee) \u2192 Files. You can also upload images via the files section, which is also possible via the \u2018Photos\u2019 section.</p> <p>The files can be displayed in a list view</p> <p></p> <p>or in a tile view</p> <p></p> <p>You can create new directories/folders with the \u2018Create\u2019 button. When creating a folder, you can also immediately define the permissions for the new folder (\ud83d\udd13).</p> <p>With the \u2018+ Add files\u2019 button, you can upload files to your cloud. Here, too, you can set the access permissions directly.</p> <p>To set or change access rights (permissions) for directories or files at a later time, click on the context menu (\ufe19) of the file or directory. You can also perform various file operations here.</p> <p></p> <p>If you attach a file using the \u2018\ud83d\udcce\u2019 button when creating a post or comment, this file will be stored in a new directory (sample: <code>year-month</code>) in the cloud, if one is created.</p>"},{"location":"member/follow_conversation/","title":"Follow conversation","text":""},{"location":"member/follow_conversation/#follow-unfollow-conversation","title":"Follow / unfollow conversation","text":"<p>With Follow conversation / Unfollow conversation you can switch whether you want to follow a thread, i.e. whether you want to receive notifications about comments/replies, likes, dislikes, emoji reactions or that the post has been shared or re-shared.</p>"},{"location":"member/gallery/","title":"Gallery","text":""},{"location":"member/gallery/#gallery","title":"Gallery","text":"<p>The \u2018Gallery\u2019 app is a simple photo gallery that displays all your images from the cloud storage. The displayed images are scaled appropriately, which can lead to a slightly blurred display for smaller images. It is more practical to use the \u2018Photos\u2019 app.</p> <p></p>"},{"location":"member/guest_access/","title":"Guest access","text":""},{"location":"member/guest_access/#guest-access","title":"Guest access","text":"<p>If you would like to share private content (i.e. content that is not accessible to the public) with people who do not have a Hubzilla account, you have the option of realising this using guest access.</p> <p>With guest access, you create a (possibly temporary) access that enables the user who logs in with this data to access your publicly accessible content, but also non-public content that you specifically release for guest access.</p> <p>If you call up the \u2018Guest access\u2019 app, a web form is displayed with which you can set up such guest access. You enter a login name of your choice. Hubzilla has already automatically generated a password for the guest access. You can now give these two pieces of information to the person you want to give access to content.</p> <p>In the \u2018Expires\u2019 field, you can also enter an expiry date after which the guest access will be automatically deleted. If you leave this field empty, the guest access will be created without a time limit. It will then never expire automatically and may have to be deleted manually.</p> <p>You can also define a contact role for the guest access.</p> <p>All guest accounts are listed in the left-hand sidebar. If you select a guest account there, you can edit or delete it again (even before the deadline expires).</p> <p>As soon as a guest account has been created, it also appears in the \u2018Authorisation settings\u2019 (privacy tool) under \u2018User-defined selection\u2019. You can use this to explicitly authorise individual private content for the guest account (but of course also for other contacts) so that the guest can access the content.</p>"},{"location":"member/important_apps/","title":"Important apps","text":""},{"location":"member/important_apps/#important-apps","title":"Important apps","text":"<p>If you want to use your channel mainly for social networking, there are some apps that are not installed or activated by default, some of which are essential.</p> <p>To participate in the entire Fediverse, you need to install the \u2018ActivityPub Protocol\u2019 app.</p> <p>To make it easier to find worthwhile contacts and find out what is happening in the Fediverse, you can install and use the \u2018Public stream\u2019 app.</p> <p>The \u2018NSFW\u2019 app, with which you can create and use your own content warning filters, is also useful and recommended.</p> <p>You should also install the \u2018Superblock\u2019 app, which allows you to completely block certain users. The \u2018Privacy Groups\u2019 app is also important. This makes it possible to create contact groups and filter them, as well as to communicate with the contacts in the groups.</p> <p>Please note: The \u2018Public stream\u2019 app is only available for installation if the hub administrator has activated this stream.</p>"},{"location":"member/insert_images/","title":"Insert images","text":""},{"location":"member/insert_images/#insert-images","title":"Insert images","text":"<p>There are various ways to insert images into posts and comments.</p>"},{"location":"member/insert_images/#in-the-post-editor","title":"In the post editor","text":"<p>There are two buttons in the post editor that allow you to insert images: \u2018Embed image\u2019 and \u2018Attach/upload file\u2019.</p> <p>With \u2018Embed image\u2019, you can insert an image that already exists in the cloud into the post. The image must therefore either be available or you can upload it for precisely this purpose, e.g. using the \u2018Files\u2019 app.</p> <p></p> <p>If you select this button, an overview of the available image files opens and you only have to select and click on the appropriate image. Please note: After selecting the image to be inserted, the selection window must be closed again. It does not close automatically after inserting an image so that you have the option of inserting several images in one go. </p> <p>Once selected, the image, scaled to its original size, is inserted as a clickable link to the source file using the bbCode tags <code>[zrl][zmg][/zmg][/zrl]</code> at the end of the previous post (not at the current text cursor position).</p> <p></p> <p>With \u2018Attach/upload file\u2019 an image can be uploaded directly from your own device and embedded at the end of the post.</p> <p></p> <p>A file selection dialogue opens where you can select and upload the image on your own device. It is uploaded to an automatically created subdirectory in the cloud and inserted at the end of the previous post using the bbCode tags <code>[zrl][zmg][/zmg][/zrl]</code>.</p> <p>Please note: With this method, the image is not scaled to its original size but displayed as a smaller preview image if there is no continuous text. As a result, you may see a chequered background around the image.</p> <p></p>"},{"location":"member/insert_images/#in-the-comment-editor","title":"In the comment editor","text":"<p>The comment editor only offers the option of uploading and embedding an image. The button for inserting an existing image does not exist there.</p> <p></p> <p>If you still want to insert an existing image, you must do this manually using the tags <code>[img][/img]</code> or <code>[img=URL][/img]</code>. To do this, you need to know the URL of the image. In this way, you can also insert images from external sources on the web.</p> <p>If you use <code>[img=WIDTHxHEIGHT][/img]</code>, you can scale the image.</p>"},{"location":"member/insert_images/#alt-text","title":"Alt text","text":"<p>If you want an alternative text (alt text) to be displayed when the image cannot be displayed or - as a pop-up - when you move the mouse pointer over the image, you can place it between the two tags <code>[img=URL]ALT_TEXT[/img]</code>. If you have embedded the image in a post using the first method (\u2018Embed image\u2019), you have to do it yourself. You have to replace the scaling that was inserted in the opening zmg tag with the URL of the image and replace the automatically inserted image URL between the opening and closing zmg tag with the alt text.</p> <p>Example:</p> <p>The image was embedded and the code <code>[zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=520x520]https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png[/zmg][/zrl]</code> was created automatically, then it must be changed to insert the alt text \u2018Hubzilla icon on red background\u2019, for example: <code>[zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png520x520]Hubzilla icon on red background[/zmg][/zrl]</code></p> <p></p>"},{"location":"member/interact/","title":"Interact","text":""},{"location":"member/interact/#interact-with-posts","title":"Interact with posts","text":"<p>You can interact with posts that you see in the stream. This is one of the purposes of social networks. You can comment on such a post, but there are also other ways of interacting. The buttons for this can be found at the bottom right of the post.</p> <p></p> <p>You can \u2018like\u2019 \ud83d\udd92 or \u2018dislike\u2019 a post \ud83d\udd93 or you can react to a post with an emoji:</p> <p></p> <p>Further functions can be found in the \u2699 menu.</p> <p></p>"},{"location":"member/link_to_source/","title":"Link to source","text":""},{"location":"member/link_to_source/#link-to-source","title":"Link to source","text":"<p>Link to source\u2019 takes you to the actual source of a post. You end up at the original post on the instance of the post creator.</p>"},{"location":"member/mentions/","title":"Mentions","text":""},{"location":"member/mentions/#mentions","title":"Mentions","text":"<p>Channels (users) are labelled by simply prefixing their name (handle) with the @ sign. <code>@Jack</code> When you mention someone, an autocomplete field is created from which you can select your immediate connections. Select accordingly.</p> <p>If the contact is authorised to receive your posting, they will receive a tag notification.</p> <p>If the addressee is not in your contact list, you must write out the handle after the \u2018@\u2019 sign. If the recipient also authorises mentions of third parties, they will also be notified of the mention.</p>"},{"location":"member/permissions/","title":"Permissions","text":""},{"location":"member/permissions/#permissions","title":"Permissions","text":"<p>Permissions are a core element of Hubzilla. They allow very fine-grained options for making content accessible, hiding it or restricting its use. They are also used to make direct messages possible by using authorisations to determine who can see the post (direct messages are nothing else) and who cannot.</p>"},{"location":"member/permissions_channel_roles/","title":"Permissions channel roles","text":""},{"location":"member/permissions_channel_roles/#permissions-user-defined-channel-roles","title":"Permissions - User-defined channel roles","text":"<p>Channel roles define which rights are granted when interacting with a channel. They can be accessed under \u2018Settings\u2019 \u2192 \u2018Channel settings\u2019.</p> <p>The role for a channel can be defined here. Channel roles also have an influence on contact roles because individual rights that are specified and inherited from the channel roles overwrite your own settings there. To truly customise the role permissions of your channel, you must select \u2018User-defined\u2019 as the channel role.</p> <p>The other roles (\u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019) are predefined authorisation roles (see: Channel roles).</p> <p>With the customised channel roles, you can define who can perform the following interactions and how:</p> <ul> <li>Can see my channel stream and my posts</li> <li>Can send me the posts from their channel</li> <li>Can see my default profile</li> <li>Can see my connections</li> <li>Can see my file and image folders</li> <li>Can upload/modify my file and image folders</li> <li>Can see the web pages of my channel</li> <li>Can see my wiki pages</li> <li>Can create/edit web pages in my channel</li> <li>Can edit my wiki pages</li> <li>Can publish posts on my channel page (\u2018wall\u2019)</li> <li>Can send me direct messages</li> <li>Can like/dislike profiles and profile stuff</li> <li>Can chat with me</li> <li>Can quote/mirror my public posts in other channels</li> <li>Can administer my channel</li> </ul> <p>The following authorisations are then available for these interactions:</p> <ul> <li>Only me</li> <li>Only those you explicitly allow</li> <li>Accepted connections</li> <li>Any connections</li> <li>Everyone on this website</li> <li>All Hubzilla members</li> <li>Anyone authenticated</li> <li>Anyone on the Internet</li> </ul> <p>To edit the custom role, select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue appears, which draws your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens.</p> <p>Important note: The user-defined roles should be set with caution and harbour the risk that the channel will no longer behave as desired with certain configurations.</p>"},{"location":"member/permissions_contact_roles/","title":"Permissions contact roles","text":""},{"location":"member/permissions_contact_roles/#permissions-contact-roles","title":"Permissions - Contact roles","text":"<p>Contact roles are used to create roles (i.e. a collection of rights and options) for contacts. These roles can then be assigned to a contact or all contacts in a privacy group (not the group itself). This restricts or extends the possibilities of contacts.</p> <p>The \u2018Contact roles\u2019 app can be used to create roles that correspond to the channel roles. This permission role can then be assigned to individual contacts or all contacts in a privacy group in the contact editor or privacy group editor.</p> <p>After creation, each channel automatically has the \u2018Standard\u2019 contact role (\u2018System role - not editable\u2019). New contacts are automatically assigned this contact role (unless you create your own contact role, change this default setting and assign the new, customised role to new contacts in future). The default contact role includes authorisations based on the selected channel role. In addition to the rights granted by the channel role, some other rights are granted so that the channel behaves as you would expect based on the channel role (e.g. \u2018Public\u2019 is most similar to a \u2018normal\u2019 social network channel).</p> <p></p> <p>Note: Some of the rights of a channel role (whether standard or self-created) are inherited from the channel role. These rights cannot be revoked in the contact role. The contact role is a whitelist in which only additional rights can be granted.</p> <p>You can assign a contact role to a contact in the connection editor. This dialogue also appears when you add a new contact. By default, the contact role for which the \u2018Automatically assign this role to new contacts\u2019 switch has been activated is selected here.</p> <p></p> <p>For channels without self-defined contact roles, this is always \u2018Standard\u2019. There is also a \u2018Contact Roles\u2019 button in the connection editor which takes you to the contact role editor if you want to create a new contact role for the contact.</p>"},{"location":"member/permissions_content/","title":"Permissions content","text":""},{"location":"member/permissions_content/#permissions-for-content","title":"Permissions for content","text":"<p>If you share content on Hubzilla, i.e. publish posts, upload images or texts, enter appointments in the calendar, you can define exactly who has access to this content. You can access the permission settings for content via a button (\"Privacy Tool\") with a padlock symbol \ud83d\udd12or \ud83d\udd13.</p> <p>For sharing posts: </p> <p>For creating folders/directories in the cloud storage: </p> <p>For uploading files: </p> <p>For sharing dates/events: </p> <p>There are also corresponding permission setting options for websites, wiki pages and various other content.</p> <p>If you click on the icon, the permissions dialogue opens, which you can use to set the permissions for other users (this is usually about the visibility of content).</p> <p></p> <p>You have the choice between</p> <ul> <li>Public - As the name suggests, the content is visible to everyone on the Internet. So even for users who do not use a Fediverse service.</li> <li>Only me - Here, only the user who created the content can see it. They \u2018share\u2019 it with themselves.</li> <li>Privacy groups - The content is visible to all users who are in one of your privacy groups.</li> <li>Customised selection - Here you can specify exactly who can see the content. It is also possible to combine privacy groups and individual contacts by selecting \u2018Allow\u2019 or \u2018Deny\u2019 for the respective entry.</li> </ul> <p></p> <p>Important note: Once permissions for postings have been set, they can no longer be changed! A posting is immediately distributed to an indeterminable number of other servers, so that permissions cannot be subsequently granted or withdrawn, whereas permissions for other content such as files, images, etc. can be subsequently edited because this content is only stored on your own instance (hub) and only the reference to the content is passed on when it is shared.</p>"},{"location":"member/photos/","title":"Photos","text":""},{"location":"member/photos/#photos","title":"Photos","text":"<p>The Photos app is a special management/viewing tool for images uploaded to your own cloud. It displays thumbnails instead of tiles or file names, which makes it easier to find specific images.</p> <p></p> <p>Clicking on the image will take you to the image view. There are two control icons here to switch to the next or previous photo.</p> <p></p> <p>There is also a \u2018Photo tools\u2019 button that allows you to set the image as a profile picture or banner and to edit the image using a menu.</p> <p></p> <p>Clicking on the image again will open a full-size view.</p> <p></p>"},{"location":"member/posting/","title":"Posting","text":""},{"location":"member/posting/#posting","title":"Posting","text":"<p>If you would like to write and share a post (publish, although the circle of recipients or those who can see the post may be restricted), you can usually do this via the \u2018Share\u2019 field located above the stream. Click on this field to open the post editor.</p> <p>At the top is the field for the post title (optional), below this is the field for the summary (also optional), if the administrator of your hub allows this function. The summary can also be used for the purpose of a content warning. Below the field for the summary is a field for categories (if activated by the admin).  Below this is the text field in which you can create the post content. Depending on the Hub settings, you can use plain text, Markdown, bbCode or HTML for formatting the text.</p> <p>At the bottom of the post editor there are some buttons for easier formatting of the content and for inserting elements and using additional functions: bold, italic, underline, quote, code, attach/upload file, insert link, insert image (an image that already exists under Files), insert location, set expiry date for the post, set publication date, encrypt text, vote (poll) on/off, deactivate comments. To the right of this is another block with buttons. Here you can display a preview of the post, specify whether the post should be published on other networks, make the authorisation settings (who can see the post) and finally publish it using the \u2018Share\u2019 button.</p> <p></p> <p>You can also access the post editor by selecting the corresponding menu item in the app menu (top right \u22ee) or the corresponding icon in the navigation bar (if you have pinned the \u2018Write post\u2019 app).</p>"},{"location":"member/privacy_groups/","title":"Privacy groups","text":""},{"location":"member/privacy_groups/#privacy-groups","title":"Privacy Groups","text":"<p>The \u2018Privacy Groups\u2019 app allows you to create groups to which you can assign contacts. On the one hand, they serve to filter the stream (so you can only display posts from users who are in a privacy group) and, on the other hand, they allow you to grant certain groups rights to content with regard to permissions.</p> <p>The first function is easy to understand. If you have contacts (a contact can be in several groups) in a group and you select a specific group in the left sidebar in the stream view, only posts from contacts in that group will be displayed. This function thus acts as a stream filter.</p> <p>The second function is also easy to grasp, but rather unusual for many Fediverse users, since it only exists in this form in Hubzilla and related services (Streams, Friendica etc.). As the name \u2018Privacy Groups\u2019 suggests, this is also about restricted communication. If you select a group as the authorisation when composing a post, the post is only distributed to the contacts contained in that group and only they can see it. It is also not possible for the recipients (group members) to share such a post publicly. This allows for closed group communication.</p> <p>When you open the app, existing groups are displayed in the left sidebar and the input form for creating a new group is displayed in the main view.</p> <p></p> <p>If you select one of the groups in the sidebar, you can edit it.</p> <p></p> <p></p> <p>Membership for contacts can also be set here. Clicking on an entry toggles the membership between \u2018Not in group\u2019 and \u2018Group membership\u2019. This way, you can remove members from a group or add users as group members. Adding a contact to a group can also be done in the \u2018Connections\u2019 app using the contacts tool:</p> <p></p> <p>To add a new group, click on the \u2018+ Add new group\u2019 entry in the sidebar.</p>"},{"location":"member/privacy_settings/","title":"Privacy settings","text":""},{"location":"member/privacy_settings/#privacy-settings","title":"Privacy settings","text":"<p>In the privacy settings, you can determine whether your posts may be indexed by search engines, whether you accept contact requests automatically (without manual approval), whether all messages in which you are mentioned are automatically accepted, whether comments from users who are not among your contacts are submitted for moderation (approved/rejected) or deleted, and whether you allow OCAP access.</p> <p></p>"},{"location":"member/profiles/","title":"Profiles","text":""},{"location":"member/profiles/#profiles","title":"Profiles","text":"<p>Hubzilla has unlimited profiles. You can use different profiles to show different \u2018sides of yourself\u2019 to different target groups. This is not the same as having different channels. Different channels allow for completely different information. You can have a channel for yourself, a channel for your sports team, a channel for your website or something else. A profile allows for fine-grained \u2018\u2019sides\u2018\u2019 of each channel. Different profiles could be compared to different business cards of a person. Depending on the purpose, different information is given on each business card. For example, your standard public profile could read: \u2018Hi, I'm Fred and I like to laugh\u2019. You can show your close friends a profile that says \u2018and I also like to throw dwarfs\u2019.</p> <p>You always have a profile that is referred to as your \u2018standard\u2019 or \u2018public\u2019 profile. This profile is always accessible to the general public and cannot be hidden (there may be rare exceptions on privately run or unaffiliated sites). You can and should limit the information you make available in your public profile. If you want your friends to be able to find you, it is helpful if you include the following information in your public profile...</p> <ul> <li>Your real name or at least a nickname that everyone knows</li> <li>A photo of you</li> <li>Your location on earth, at least at country level.</li> </ul> <p>If you also want to meet people who share general interests with you, please take a moment to add some \u2018keywords\u2019 to your profile. For example, \u2018music, linux, photography\u2019 or something similar. You can add as many keywords as you like.</p> <p>Select \u2018Edit profiles\u2019 from the menu on your Hubzilla site. You can edit an existing profile, change the profile photo, add things to a profile or create a new profile. You can also create a \u2018clone\u2019 of an existing profile if you only want to change a few things but don't want to re-enter all the information. To do this, click on the profile you want to clone and select \u2018Clone this profile\u2019.</p> <p>In the list of your profiles, you can also select the contacts who can see a particular profile. Simply click on \u2018Edit visibility\u2019 next to the profile in question (only available for profiles that are not your default profile) and then click on specific connections to add them to or remove them from the group of people who can see this profile.</p> <p>Once a profile has been selected, the person viewing your profile will see the private profile you have assigned. If the person is not authenticated, they will see your public profile. There is a setting that allows you to publish your profile in a directory and ensure that it can be found by others. You can change this setting on the \u2018Settings\u2019 page.</p> <p>If you do not want others to find you without telling them your channel address, you can leave your profile unpublished.</p>"},{"location":"member/protection_of_privacy/","title":"Protection of privacy","text":""},{"location":"member/protection_of_privacy/#tips-for-protecting-your-privacy","title":"Tips for protecting your privacy","text":"<p>If you attach great importance to your privacy and still want to participate in Fediverse, you need to think carefully about what you want to reveal about yourself before and during the creation of a personal channel. This is the case with every Fediverse service. With Hubzilla, however, there is another important aspect. You not only have to ask yourself the question \u2018What?\u2019, but also \u2018To whom?\u2019 and \u2018Which?\u2019.</p> <p>With Hubzilla, you not only determine what you disclose about yourself, but also who you allow to see the information and content. And who you allow to interact with what.</p> <p>The advantage is that you are not dependent on a \u2018rule set\u2019, but can define different rules for different applications and different contacts.</p> <p>A typical use case would be that you want to participate in Fediverse in the normal way that you are familiar with from other social networks.</p> <p>When creating a channel, you must make the first relevant decision: the channel role.</p> <p>Here you can choose between \u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019 and \u2018 Customised\u2019.</p> <p>Apart from the \u2018Community Forum\u2019, which is intended for other applications, you have the choice between three roles.</p> <ol> <li>With the \u2018Public\u2019 role, you allow others to</li> <li>see your channel stream (i.e. the posts that you share publicly) and your posts in general,</li> <li>see your standard profile,</li> <li>see your connections,</li> <li>see your file and image folders,</li> <li>see the web pages of your channel,</li> <li>see the wiki pages of your channel,</li> <li>comment on, like or dislike your posts,</li> <li>send you direct messages,</li> <li>like or dislike your profiles and profile content and</li> <li>chat with you.</li> </ol> <p>These role-based rules reflect the \u2018normal\u2019 use of a social network quite well.</p> <ol> <li>The \u2018Personal\u2019 role is similar and only denies some of the permissions of the \u2018Public\u2019 role. It allows others to</li> <li>see your channel stream (i.e. the posts that you share publicly) and your posts in general,</li> <li>see your default profile,</li> <li>./.</li> <li>see your file and image folders,</li> <li>see the web pages of your channel,</li> <li>see the wiki pages of your channel,</li> <li>./.</li> <li>./.</li> <li>./.</li> <li>./.</li> </ol> <p>Interaction by other users is restricted with this profile, as they are not allowed to comment on, like or dislike your posts (the latter also not in relation to your profile/profile content). They are also not allowed to send you direct messages or chat with you.</p> <p>The \u2018User-defined\u2019 role allows you to define all authorisations individually. Caution is advised here, as inappropriate rules can make a channel halfway \u2018unusable\u2019.</p> <p>For the intended use as a \u2018typical social network account\u2019, we recommend selecting the \u2018Public\u2019 or \u2018Personal\u2019 role.</p> <p>If you would rather opt for the \u2018Personal\u2019 role, but would still like to allow further interaction with certain users (friends, family, colleagues, etc.), you do not have to use the \u2018Public\u2019 role.</p> <p>Hubzilla works with whitelists (permission lists) for authorisations. The channel role therefore defines the basic authorisations. You cannot subsequently revoke these (apart from defining access rights in the specific individual case of a content) using other mechanisms.</p> <p>However, you can add various authorisations to the whitelist using different contact roles. For example, you could create a \u2018Family\u2019 contact role in which - in addition to the authorisations granted by the \u2018Personal\u2019 role - further authorisations (e.g. commenting, linking, disliking and sending direct messages) are granted. If you now assign this contact role to your contacts that you define as \u2018Family\u2019 in this example, your family members - unlike everyone else - can write comments, give you a thumbs up or thumbs down and communicate with you non-publicly (direct message).</p> <p>You can create as many contact roles as you like for different purposes and contacts and grant additional authorisations in addition to those of the channel role. But(!): You cannot revoke any authorisation from the channel role there.</p> <p>It is therefore advisable not to be too generous with the channel role and to select it accordingly, depending on the purpose of the channel. By selecting \u2018User-defined\u2019, for example, you could define an even more restrictive channel role than \u2018Personal\u2019 and then define further authorisations for certain users with the contact roles (only recommended if you are really familiar with the authorisation system).</p> <p>Another aspect of privacy is the profile information. For \u2018typical\u2019 use as a social network account, some information should be disclosed in the profile. Otherwise, other users will not have the idea of connecting with you. Or they want to connect with another user, but the other user refuses because they have no information about you (unless they know you and your channel name). So some information should go in there.</p> <p>As much as necessary, as little as possible.</p> <p>You should fill your standard profile, which every channel has, with information according to exactly this principle.</p> <p>However, Hubzilla allows you to create multiple profiles. In such profiles, you can then enter further information that may be of interest for certain connections. You then have the option of releasing such special profiles for certain connections. The information is therefore not visible and public to everyone, but is only available to the selected users.</p>"},{"location":"member/public_stream/","title":"Public stream","text":""},{"location":"member/public_stream/#public-stream","title":"Public Stream","text":"<p>If the administrator of a hub has activated the public stream, you as a user can install and activate the \u2018Public stream\u2019 app.</p> <p>While all posts and activities from yourself and all your connections appear in the \u2018normal\u2019 stream, the public stream is more comprehensive.</p> <p>There are two options:</p> <ol> <li>If the administrator has restricted the public stream to their own hub, all public posts and activities from the streams of all users who have an account on this hub will appear there.</li> <li>If the administrator has not restricted the public stream to their own hub, all public posts from all channels of their own hub, public content that arrives at their own hub (e.g. comments on posts by hub users that originate from other instances) and randomly collected content from channels that are known to their own hub (i.e. all contacts from all channels on their own hub) will be displayed.</li> </ol> <p>The public stream is not unmoderated. The administrator of a hub has the option of deleting posts from the public stream (\u2018Admin delete\u2019). These posts are then actually deleted from the public stream of their own hub. They also do not appear in the public stream view of other channels of the hub.</p>"},{"location":"member/registration/","title":"Registration","text":""},{"location":"member/registration/#login-registration","title":"Login / Registration","text":"<p>Not all Hubzilla sites allow open registration. If registration is allowed, you will see a \u2018Register\u2019 link right next to the login prompt on the site's homepage. Following this link will take you to the site's registration page. On some sites, you may be redirected to another site that lists hubs where registration is allowed. Since all Hubzilla sites are connected, it does not matter where your account is located.</p> <p>Your e-mail address Please enter a valid e-mail address. Your email address will never be published. This address will be used to activate your account, to send (optional) email notifications for incoming messages or articles and to recover lost passwords.</p> <p>Password Enter a password of your choice and repeat it in the second field to ensure that it has been entered correctly. As Hubzilla offers a decentralised identity, you can use your account to log in to many other websites.</p> <p>Terms of Use Click on the link to read the website's terms of use. Once you have read them, confirm them by ticking the box in the registration form.</p> <p>Log in Once you have entered the required information, click on the \u2018Register\u2019 button. Some websites may require administrator approval before registration can be processed, in which case you will be notified. Please check your email (including your spam folder) for approval of your registration.</p>"},{"location":"member/repeat/","title":"Repeat","text":""},{"location":"member/repeat/#repeat","title":"Repeat","text":"<p>By repeating posts, the post is distributed to your own connections. Comments end up in the original post (in contrast to shared posts).</p> <p>This behaviour corresponds to \u2018boosting\u2019, as we know it from Mastodon or other Fediverse services, for example.</p>"},{"location":"member/save_to_folder/","title":"Save to folder","text":""},{"location":"member/save_to_folder/#save-to-folder","title":"Save to folder","text":"<p>If you want to remember postings for later, you can do this by marking them (star). However, if you have a large number of postings marked in this way, it can easily become confusing. It is more practical to save such posts in different \u2018folders\u2019. These are categorised markings. If you select \u2018Save in folder\u2019, a dialogue window opens to select the folder.</p> <p></p> <p>You can enter a folder name in the text field. If folders already exist, a double click in the text field will display a selection list of the existing folders so that you can select one of them.</p> <p></p> <p>If you have placed a post in a folder, you can recognise this by the folder symbol (including folder name) at the bottom left of the post.</p> <p></p> <p>This icon can also be used to remove a post from a folder by clicking on the \u2018X\u2019 in the icon.</p> <p></p> <p>In the stream view, you will find the entry \u2018Saved folders\u2019 in the left sidebar. If you click on it, all existing folders are displayed. If you now select a folder, all the posts that you have saved in this folder will be displayed in (reverse) chronological order in the stream. This feature is comparable to the \u2018clips\u2019 (= categorised bookmarks) as known from Misskey and the Forkeys.</p>"},{"location":"member/search/","title":"Search","text":""},{"location":"member/search/#search","title":"Search","text":"<p>To quickly find information, you can use the search function. To do so, click on the icon in the navigation bar.</p> <p></p> <p></p> <p>This searches the entire hub. You can search for hashtags, handles and text.</p> <p>In the channel view, there is also a search field in the left sidebar. It only searches the stream of your own channel. Searches that have been performed in this widget can also be saved by clicking on the floppy disc symbol next to the search field. The saved search is then displayed in a list of search terms below the search field and can be repeated at any time with a single click.</p> <p></p>"},{"location":"member/settings/","title":"Settings","text":""},{"location":"member/settings/#settings","title":"Settings","text":"<p>Hubzilla allows a wide range of settings for behaviour, appearance, features, channels, etc. You can access most settings via the main menu, where you will find the Settings menu item.</p> <p></p> <p></p> <p>Various categories of settings are provided:</p> <ul> <li>Account settings</li> <li>Channel settings</li> <li>Privacy settings</li> <li>Display settings</li> <li>Manage locations - if clones of your channel exist</li> </ul> <p>If you are in the stream view, you will see a small cogwheel (\u2699) next to the main menu, which you can use to access the</p> <ul> <li>stream settings</li> </ul> <p>There are also hidden settings</p> <ul> <li>Additional functions</li> </ul> <p>which you cannot access via the menu or an icon.</p>"},{"location":"member/share/","title":"Share","text":""},{"location":"member/share/#share","title":"Share","text":"<p>When posts are shared (forwarded), a post by another user is posted again on your own channel. A new conversation is created in your own channel. Comments are added to the new conversation and not to the original one. Sharing posts only works from the stream or your own channel, but not from a \u2018third-party\u2019 channel.</p>"},{"location":"member/show_source_code/","title":"Show source code","text":""},{"location":"member/show_source_code/#show-source-code","title":"Show source code","text":"<p>You can use this function to display the source code of a post. The content is therefore not rendered in formatted form, but includes the text including all markup tags (Markdown, bbCode, HTML). The function therefore seems to be more for advanced or very curious users.</p> <p>However, it does contain a feature that can be helpful for everyone.</p> <p>In addition to the internal post ID, there are two hyperlinks: \u2018plink\u2019 and \u2018llink\u2019.</p> <p></p> <p>\u2018plink\u2019 means \u201cpermalink\u201d and corresponds to the link to the source. \u2018llink\u2019 means \u201clocal link\u201d and refers to the location of the post on your own instance (hub). Clicking on it does not cause you to leave your own instance, but displays the post in the single view.</p>"},{"location":"member/stream_settings/","title":"Stream settings","text":""},{"location":"member/stream_settings/#stream-settings","title":"Stream settings","text":"<p>The stream settings are not accessed via Main Menu \u2192 Settings, but via the small cogwheel symbol (\u2699) next to the main menu, which appears there as soon as you open the stream view.</p> <p></p> <p>The stream settings can be used to select the display of the stream and the features available there (e.g. stream filters, saving search queries, etc.).</p> <p></p>"},{"location":"member/superblock/","title":"Superblock","text":""},{"location":"member/superblock/#superblock","title":"Superblock","text":"<p>The \u2018Superblock\u2019 app is a moderation method for your own stream. While Hubzilla's normal functionality only allows you to block users you are connected to using the contact tool, Superblock works regardless of whether you are connected to a contact or not.</p> <p>If you notice a user in the stream with whom you are not connected (because their posts are shared by a contact from your own address book) and - for whatever reason - you do not want to have any posts from this Fediverse user in the stream, you can achieve this with the \u2018Superblock\u2019 app.</p> <p>To do this, click on the small white triangle in the avatar of the user you want to block.</p> <p>A pull-down menu opens, which contains the menu item \u2018Block completely\u2019 at the bottom. Clicking on this menu item places the user in the superblock list. Posts from this user will no longer appear in their own stream. Affected posts are immediately hidden in the stream. In addition, this user will no longer be able to read your posts, regardless of their authorisations, nor will they be able to post to your channel.</p> <p>If you select the \u2018Superblock\u2019 app in the app menu (top right \u22ee), a list of all blocked contacts is displayed.</p> <p>A \u2018rubbish bin icon\u2019 is displayed next to each contact. Click on this icon to remove the user from the block list. The user can then follow you again, see your posts and also comment on them and their posts will also appear in the stream again (e.g. by sharing a contact).</p> <p>Superblock is not installed and activated by default for new channels.</p>"},{"location":"member/tags/","title":"Tags","text":""},{"location":"member/tags/#tags","title":"Tags","text":"<p>Tags (also called thematic tags, hashtags or topical tags) Tags are displayed by prefixing the tag name with the \u2018#\u2019 character. This creates a link in the post to a generalised website search for the specified term. For example, #cars will provide a search link for all posts that mention \u2018cars\u2019 on your website. Topical tags are usually at least three characters long. Shorter search terms are unlikely to return search results, but this depends on the database configuration.</p> <p>Thematic tags are also usually not linked if they are purely numeric, e.g. #1. If you wish to use a numeric hashtag, please include descriptive text such as #2012-elections or enclose the entire tag in double quotes (e.g. #\"2012\u2033). Double quotes are also required if the tag contains spaces (#\"My Tag\") and may be required if the tag contains punctuation (#\"EndsWithPeriod.\" Or #\"Exciting !!!\").</p>"},{"location":"member/the_grid/","title":"The grid","text":""},{"location":"member/the_grid/#the-grid","title":"The grid","text":"<p>The \u2018Grid\u2019 is the name given to the network of all Hubzilla hubs that communicate with each other via the Nomad protocol. The grid is effectively a subset of the Fediverse and includes all Hubzilla servers.</p>"},{"location":"member/the_stream/","title":"The stream","text":""},{"location":"member/the_stream/#the-stream","title":"The stream","text":"<p>The stream is the list of posts, comments and boosts from users in the Fediverse. It is sorted in reverse chronological order (the most recent posts appear at the top). Exactly which posts are shown here depends largely on your authorisation settings. The stream (also known as the \u2018timeline\u2019 in other Fediverse services) can be filtered using various filters: by direct messages, events, polls, privacy groups, forums, flagged posts, your own posts, saved folders and names. The stream in the Fediverse is not created by algorithms that select supposedly interesting content for the user, but is determined exclusively by the user himself. In Fediverse, you, the user, are the algorithm for the stream.</p>"},{"location":"member/toggle_star_status/","title":"Toggle star status","text":""},{"location":"member/toggle_star_status/#toggle-star-status","title":"Toggle Star Status","text":"<p>Switching the marking star should not be confused with \u2018starring\u2019 (= favouriting) other feed services (e.g. Mastodon). While \u2018starring\u2019 in these services represents a positive evaluation of the post, which corresponds most closely to a \u2018link\u2019, marking with a star in Hubzilla is comparable to setting a bookmark. By toggling (one click sets the star, another removes it again), the post is set as a kind of bookmark for the user. You can recognise a \u2018starred\u2019 post by the star symbol at the bottom left.</p> <p></p> <p>In the stream view, you will find the entry \u2018Marked posts\u2019 in the left sidebar. If you click on it, all marked posts are displayed in (reverse) chronological order in the stream.</p>"},{"location":"member/websites/","title":"Websites","text":""},{"location":"member/websites/#websites","title":"Websites","text":"<p>The Websites app allows you to create static websites in your channel. Websites remain on your hub and are not federated. However, you can share the link to the website and enable all users in the Fediverse to visit your website.</p> <p>When you open the app, you will be taken to the website overview. The pages will be accessible at <code>&lt;your-instance-URL&gt;/page/&lt;your-channel-name&gt;/&lt;page-link-title&gt;</code>.</p> <p></p> <p>In the left sidebar, there is a widget with the design tools for \u2018blocks\u2019, \u2018menus\u2019, \u2018layouts\u2019 and \u2018pages\u2019. Below that, there is another widget that allows you to export and import web pages.</p> <p>The centre section lists the existing web pages. You can edit, share and delete them. There is also a button to create a new web page: \u2018Create\u2019.</p> <p>When you click on this button, the web page editor opens.</p> <p></p> <p>You now have the choice of how you want to design the website: with bbCode, with HTML, with Markdown, with plain text or with the Comanche layout language.</p> <p>You can also specify which layout (if you have created one or more using the layout design tool) should be used to display the web page.</p> <p>Next is the input field for the optional page title, as well as (also optional) a summary, and (mandatory) the page URL.</p> <p>Below that is the text editor for the content of the website.</p> <p>If you just want to create a very simple website with formatting and other markup elements, it is sufficient to create it in the website editor using plain text, HTML, bbCode or Markdown. This way you get a website without a special layout (without sidebars, without menus etc.).</p> <p>For more sophisticated websites, it is recommended that you work with blocks, layouts and menus.</p>"},{"location":"member/websites/#blocks","title":"Blocks","text":"<p>Blocks can be parts of web pages. The basic HTML code of a block looks like this</p> <pre><code>  &lt;div&gt;\n    block content\n  &lt;/div&gt;\n</code></pre> <p>If a block has the content type text/html, it can also contain menu items. The example content of</p> <pre><code>  &lt;p&gt;HTML block content&lt;/p&gt; \n  [menu]menuname[/menu]\n</code></pre> <p>will produce HTML like this</p> <pre><code>  &lt;div&gt;\n        &lt;p&gt;HTML block content&lt;/p&gt;\n&lt;div&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\u2018#\u2019&gt;Link 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\u2018#\u2019&gt;Link 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\u2018#\u2019&gt;Link 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n&lt;/p&gt;\n</code></pre> <p>A block can also contain the actual content of the website via the <code>$content</code> macro. To do this, create a block with only</p> <pre><code>  $content\n</code></pre> <p>as content. For a block to appear on the website, it must be defined within a region in the page layout.</p> <pre><code>  [region=aside]\n    [block]blockname[/block]\n  [/region]\n</code></pre> <p>The appearance of the block can be manipulated in the page layout. You can assign your own classes</p> <pre><code>    [region=aside]\n   [block=myclass]blockname[/block]\n  [/region]\n</code></pre> <p>will produce the following HTML</p> <pre><code>  &lt;div class=\u2018myclass\u2019&gt;\n    Block Content\n  &lt;/div&gt;\n</code></pre> <p>The wrap variable can be used to free a block from its enclosing <code>&lt;div&gt;&lt;/div&gt;</code>tag</p> <pre><code>  [region=aside]\n   [block][var=wrap]none[/var]blockname[/block]\n    [/region]\n</code></pre> <p>This HTML is generated</p> <pre><code>Block content\n</code></pre> <p>With the block editor, blocks can be created just as easily as web pages.</p> <p></p>"},{"location":"member/websites/#menus","title":"Menus","text":"<p>The menu editor is used to easily create navigation menus.</p> <p></p> <p>The menu must be assigned a unique name (this name can be used to reference it later in the website and in blocks). Entering a title is optional. You can also choose whether the menu is available for adding bookmarks. This feature makes it possible to add links marked as bookmarks from the stream to the menu with a single click.</p> <p>Click \u2018Submit and continue\u2019 to create the menu.</p> <p></p> <p>The dialogue for adding a menu entry will now open. You must enter a name for the menu entry (\u2018Name of the link\u2019) and the destination of the link. This can be a URL or the name of another menu (which is then integrated as a submenu).</p> <p>You can influence the sorting of the menu entries by entering a number at \u2018Order in list\u2019.</p> <p>If the URL is an external link to a source on another hub, you can ensure that you are authenticated at the target and that restricted content is available if necessary by setting the \u2018Use Magic-Auth if available\u2019 switch.</p> <p>You can also specify whether links should open in a new window or tab.</p> <p>Click on \u2018Submit and proceed\u2019 to create further entries. \u2018Submit and finish\u2019 ends the entry of menu items. Menus can, however, be edited and added to at any time.</p>"},{"location":"member/websites/#layouts","title":"Layouts","text":"<p>Layouts are used to define the general structure of web pages. They are designed using the Comanche page description language, a variant of bbCode. You have to give the layout a name. The definition of the layout is then entered in the text field. This is also where you can define the contents of the various regions.</p> <p></p>"},{"location":"member/wikis/","title":"Wikis","text":""},{"location":"member/wikis/#wikis","title":"Wikis","text":"<p>The \u2018Wiki\u2019 app makes it possible to create wikis in your own channel. Wiki pages are not federated and remain on your own hub.</p> <p>The wiki app offers simple, classic wiki functionality. Wiki posts can be created as plain text, Markdown text or BBcode text.</p> <p></p> <p>To view (or edit) a wiki, select the corresponding wiki from the list on this page. If you want to create a new wiki, click on the button \u2018+ Create new\u2019. An input form will open in which you enter the name of the wiki and define the content type (as standard). You can use a switch to determine that only the selected content type (text, Markdown, BBcode) must be used for all wiki entries. You can also use a switch to turn the creation of a status post about wiki creation on or off.</p> <p></p> <p>You can also set up detailed permission rights for a wiki. Click on \u2018Submit\u2019 to create the wiki and open the home page. The default view of a wiki page is always \u2018View\u2019, in which the text is rendered according to the source code. You can switch to the \u2018Edit\u2019 view using the tabs at the top to access the editor mode. If you have edited the page and then switch back to View, the changes will be displayed immediately. If you want to save the page, enter a suitable comment in the input field below the text and click on \u2018Save\u2019. The wiki page has been created. Using the third tab, labelled \u2018History\u2019, you can view the changes made to the wiki page and, if you wish, undo changes. This is a wiki-typical form of version control.</p> <p></p> <p></p> <p>As you create more wiki pages, they will be listed in the left sidebar, from where they can also be accessed.</p> <p>For collaborative editing of a wiki, it is necessary to grant the users who are allowed to work on the wiki appropriate rights. In the case of a Public, Personal or Community Forum channel, this is done by means of a corresponding contact role in which the editing of the wiki pages is authorised. This permission is not granted by default for the channel roles mentioned (permission can be granted for a user-defined channel role, but it then applies generally and cannot be withdrawn again using a contact role).</p> <p>If you want to exclude individual wikis from this, you must restrict their visibility via the permission settings of the wiki (padlock). </p>"},{"location":"project/","title":"Hubzilla Governance","text":"<p>Governance relates to the management of a project and particularly how this relates to conflict resolution.</p>"},{"location":"project/#community-governance","title":"Community Governance","text":"<p>The project is maintained and decisions made by the 'community'. The governance structure is still evolving. Until the structure is finalised, decisions are made in the following order:</p> <ul> <li> <p>Lazy Consensus: If a project proposal is made to one of the community governance forums and there are no serious objections in a \"reasonable\" amount of time from date of proposal (we usually provide 2-3 days for all interested parties to weigh in), no vote needs to be taken and the proposal will be considered approved. Some concerns may be raised at this time, but if these are addressed during discussion and work-arounds provided, it will still be considered approved. </p> </li> <li> <p>Veto: Senior developers with a significant history of project commits may veto any decision. The decision may not proceed until the veto is removed or an alternative proposal is presented.</p> </li> <li> <p>Community Vote: A decision which does not have a clear mandate or clear consensus, but is not vetoed, can be taken to a community vote. At present this is a simple popular vote in one of the applicable community forums.  At this time, popular vote decides the outcome. This may change in the future if the community adopts a 'council' governance model. This document will be updated at that time with the updated governance rules. </p> </li> </ul> <p>Community Voting does not always provide a pleasant outcome and can generate polarised factions in the community (hence the reason why other models are under consideration). If the proposal is 'down voted' there are still several things which can be done and the proposal re-submitted with slightly different parameters (convert to an addon, convert to an optional feature which is disabled by default, etc.). If interest in the feature is high and the vote is \"close\", it can generate lots of bad feelings amongst the losing voters. On such close votes, it is [b]strongly recommended[/b] that the proposer take steps to address any concerns that were raised and re-submit.</p>"},{"location":"project/#privacy-policy","title":"Privacy Policy","text":"<p>Q: Who can see my content?</p> <p>A: By default ANYBODY on the internet, UNLESS you restrict it. Hubzilla allows you to choose the privacy level you desire. Restricted content will NOT be visible to \"spy networks\" and advertisers. It will be protected against eavesdropping by outsiders - to the best of our ability. Hub administrators with sufficient skills and patience MAY be able to eavesdrop on some private communications but they must expend effort to do so. Privacy modes exist within Hubzilla which are even resistant to eavesdropping by skilled and determined hub administrators.    </p> <p>Q: Can my content be censored?</p> <p>A: Hubzilla (the network) CANNOT censor your content. Server and hub administrators are subject to local laws and MAY remove objectionable content from their site/hub. Anybody MAY become a hub administrator, including you; and therefore publish content which might otherwise be censored. You still MAY be subject to local laws.   </p>"},{"location":"project/#definitions","title":"Definitions","text":"<p>Hubzilla </p> <p>Otherwise referred to as \"the network\", Hubzilla is a collection of individual computers/servers (aka hubs) which connect together to form a larger cooperative network. </p> <p>hub </p> <p>An individual computer or server connected to Hubzilla. These are provided by a hub administrator and may be public or private, paid or free.</p> <p>hub administrator</p> <p>The system operator of an individual hub. </p>"},{"location":"project/#policies","title":"Policies","text":""},{"location":"project/#public-information","title":"Public Information","text":"<p>Any information or anything posted by you within Hubzilla MAY be public or visible to anybody on the internet. To the extent possible, Hubzilla allows you to protect content and restrict who can view it.</p> <p>Your profile photo, your channel name, and the location (URL or network address) of your channel are visible to anybody on the internet and privacy controls will not affect the display of these items. </p> <p>You MAY additionally provide other profile information. Any information which you provide in your \"default\" or public profile MAY be transmitted to other hubs in Hubzilla and additionally MAY be displayed in the channel directory. You can restrict the viewing of this profile information. It may be restricted only to members of your hub, or only connections (friends), or other limited sets of viewers as you desire. If you wish for your profile to be restricted, you must set the appropriate privacy setting, or simply DO NOT provide additional information. </p>"},{"location":"project/#content","title":"Content","text":"<p>Content you provide (status posts, photos, files, etc.) belongs to you. Hubzilla default is to publish content openly and visible to anybody on the internet (PUBLIC). You MAY control this in your channel settings and restrict the default permissions or you MAY restrict the visibility of any single published item separately (PRIVATE). Hubzilla developers will ensure that restricted content is ONLY visible to those in the restriction list - to the best of their ability. </p> <p>Content (especially status posts) that you share with other networks or that you have made visible to anybody on the internet (PUBLIC) cannot easily be taken back once it has been published. It MAY be shared with other networks and made available through RSS/Atom feeds. It may also be syndicated on other Hubzilla sites. It MAY appear on other networks and websites and be visible in internet searches. If you do not wish this default behaviour please adjust your channel settings and restrict who can see your content. </p>"},{"location":"project/#comments-and-forum-posts","title":"Comments and Forum posts","text":"<p>Comments to posts that were created by others and posts which are designated as forum posts belong to you as the creator/author, but the distribution of these posts is not under your direct control, and you relinquish SOME rights to these items. These posts/comments MAY be re-distributed to others, and MAY be visible to anybody on the internet. In the case of comments, the creator of the \"first message\" in the thread (conversation) to which you are replying controls the distribution of all comments and replies to that message. They \"own\" and therefore have certain rights with regard to the entire conversation (including all comments contained within it). You can still edit or delete the comment, but the conversation owner also has rights to edit, delete, re-distribute, and backup/restore any or all the content from the conversation. </p>"},{"location":"project/#private-information","title":"Private Information","text":"<p>Hubzilla developers will ensure that any content you provide which is designated as PRIVATE will be protected against eavesdropping - to the best of their ability. Private channel content CAN be seen in the database of every involved hub administrator, but private messages are obscured in the database. The latter means that it is very difficult, but NOT impossible for this content to be seen by a hub administrator. Private channel content and private messages are also stripped from email notifications. End to end encryption is provided as an optional feature and this CANNOT be seen, even by a determined administrator.  </p>"},{"location":"project/#identity-privacy","title":"Identity Privacy","text":"<p>Privacy for your identity is another aspect. Because you have a decentralized identity in Hubzilla, your privacy extends beyond your home hub. If you want to have complete control of your privacy and security you should run your own hub on a dedicated server. For many people, this is complicated and may stretch their technical abilities. So let's list a few precautions you can make to assure your privacy as much as possible.</p> <p>A decentralized identity has a lot of advantages and gives you al lot of interesting features, but you should be aware of the fact that your identity is known by other hubs in Hubzilla network. One of those advantages is that other channels can serve you customized content and allow you to see private things (such as private photos which others wish to share with you). Because of this those channels need to know who you are. But we understand that sometimes those other channels know more from you than you might desire. For instance the plug-in Visage that can tell a channel owner the last time you visit their profile. You can easily OPT-OUT of this low level and we think, harmless tracking.</p> <ul> <li> <p>You can enable Do Not Track (DNT) in your web browser. We respect this new privacy policy proposal. All modern browsers support DNT. You will find it in the privacy settings of your browsers or else you can consult the web browser's manual. This will not affect the functionality of Hubzilla. This setting is probably enough for most people.</p> </li> <li> <p>You can disable publication of your channel in our channel directory. If you want people to find your channel, you should give your channel address directly to them. We think this is a good indication that you prefer extra privacy and automatically enable \"Do Not Track\" if this is the case.</p> </li> <li> <p>You can have a blocked hub. That means that all channels and content on that hub is not public, and not visible to the outside world. This is something only your hub administrator can do. We also respect this and automatically enable \"Do Not Track\" if it is set.</p> </li> </ul>"},{"location":"project/#censorship","title":"Censorship","text":"<p>Hubzilla is a global network which is inclusive of all religions and cultures. This does not imply that every member of the network feels the same way you do on contentious issues, and some people may be STRONGLY opposed to the content you post. In general, if you wish to post something that you know may nor be universally acceptable, the best approach is to restrict the audience using privacy controls to a small circle of friends. </p> <p>Hubzilla as a network provider is unable to censor content. However, hub administrators MAY censor any content which appears on their hub to comply with local laws or even personal judgement. Their decision is final. If you have issues with any hub administrator, you may move your account and postings to another site which is more in line with your expectations. Please check (periodically) the Terms of Service of your hub to learn about any rules or guidelines. If your content consists of material which is illegal or may cause issues, you are STRONGLY encouraged to host your own (become a hub administrator). You may still find that your content is blocked on some hubs, but Hubzilla as a network cannot block it from being posted.</p> <p>Hubzilla RECOMMENDS that hub administrators provide a grace period of 1-2 days between warning an account holder of content that needs to be removed and physically removing or disabling the account. This will give the content owner an opportunity to export their channel meta-data and import it to another site. In rare cases the content may be of such a nature to justify the immediate termination of the account. This is a hub decision, not a Hubzilla decision. </p> <p>If you typically and regularly post content of an adult or offensive nature, you are STRONGLY encouraged to mark your account \"NSFW\" (Not Safe For Work). This will prevent the display of your profile photo in the directory except to viewers that have chosen to disable \"safe mode\". If your profile photo is found by directory administrators to be adult or offensive, the directory administrator MAY flag your profile photo as NSFW. There is currently no official mechanism to contest or reverse this decision, which is why you SHOULD mark your own account NSFW if it is likely to be inappropriate for general audiences. </p>"},{"location":"project/credits/","title":"Credits","text":"<p>Thanks to all who have helped and contributed to the project and its predecessors over the years.  It is possible we missed in your name but this is unintentional. We also thank the community and  its members for providing valuable input and without whom this entire effort would be meaningless. </p> <p>It is also worth acknowledging the contributions and solutions to problems which arose from  discussions amongst members and developers of other somewhat related and competing projects;  even if we have had our occasional disagreements. </p> <ul> <li>Mike Macgirvin</li> <li>Fabio Comuni </li> <li>Simon L'nu </li> <li>marijus </li> <li>Tobias Diekershoff </li> <li>fabrixxm </li> <li>tommy tomson </li> <li>Simon </li> <li>zottel </li> <li>Christian Vogeley </li> <li>jeroenpraat </li> <li>Michael Vogel </li> <li>erik </li> <li>Zach Prezkuta </li> <li>Paolo T </li> <li>Michael Meer </li> <li>Michael </li> <li>Abinoam P. Marques Jr </li> <li>Tobias H\u00f6\u00dfl </li> <li>Alexander Kampmann </li> <li>Olaf Conradi </li> <li>Paolo Tacconi </li> <li>tobiasd </li> <li>Devlon Duthie </li> <li>Zvi ben Yaakov (a.k.a rdc) </li> <li>Alexandre Hannud Abdo </li> <li>Olivier Migeot </li> <li>Chris Case </li> <li>Klaus Weidenbach </li> <li>Michael Johnston </li> <li>olivierm </li> <li>Vasudev Kamath </li> <li>pixelroot </li> <li>Max Weller </li> <li>duthied </li> <li>Martin Schmitt </li> <li>Sebastian Egbers </li> <li>Erkan Yilmaz </li> <li>sasiflo </li> <li>Stefan Parviainen </li> <li>Haakon Meland Eriksen </li> <li>Oliver Hartmann (23n) </li> <li>Erik Lundin </li> <li>habeascodice </li> <li>sirius </li> <li>Charles </li> <li>Tony Baldwin </li> <li>Hauke Zuehl </li> <li>Keith Fernie </li> <li>Anne Walk </li> <li>toclimb </li> <li>Daniel Frank </li> <li>Matthew Exon </li> <li>Michal Supler </li> <li>Tobias Luther </li> <li>U-SOUND\\mike </li> <li>mrjive </li> <li>nostupidzone </li> <li>tonnerkiller </li> <li>Antoine G </li> <li>Christian Drechsler </li> <li>Ludovic Grossard </li> <li>RedmatrixCanada </li> <li>Stanislav Lechev [0xAF] </li> <li>aweiher </li> <li>bufalo1973 </li> <li>dsp1986 </li> <li>felixgilles </li> <li>ike </li> <li>maase2 </li> <li>mycocham </li> <li>ndurchx </li> <li>pafcu </li> <li>Sim\u00f3 Albert i Beltran </li> <li>Manuel Reva </li> <li>Manuel Jim\u00e9nez Friaza </li> <li>Gustav Wall aka \"neue medienordnung plus\" </li> </ul>"},{"location":"start/","title":"Index","text":""},{"location":"start/#overview","title":"Overview","text":"<p>Hubzilla is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support Hubzilla. Many will but please review the requirements and confirm these with your hosting provider prior to installation.</p> <p>We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working.</p>"},{"location":"start/#where-to-find-more-help","title":"Where to find more help","text":"<p>If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker. Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues.</p>"},{"location":"start/docker/","title":"Installation using Docker","text":"<p>It is possible to install Hubzilla comfortably and conveniently as a Docker container.</p>"},{"location":"start/docker/#option-1-saiwalhubzilla-docker","title":"Option 1: saiwal/hubzilla-docker","text":"<p>The key features are:</p> <ul> <li>Fully functional Hubzilla instance with just a few commands.</li> <li>Prebuilt images available via dockerhub for amd64, arm/v7, arm64.</li> <li>Continuous Updates: The Docker image is built to allow for easy updates whenever new changes are made to the Hubzilla core or its dependencies.</li> <li>SMTP Integration: Built-in support for sending emails using ssmtp, making it easy to configure email notifications for your Hubzilla instance.</li> </ul> <p>The repository for the container is located here: saiwal/hubzilla-docker</p>"},{"location":"start/docker/#building-the-image-from-scratch","title":"Building the image from scratch","text":"<ul> <li>Clone the Repository:</li> </ul> <pre><code>git clone https://github.com/skprg/hubzilla-docker.git\ncd hubzilla-docker\n</code></pre> <ul> <li> <p>Configure Your Environment: Update the docker-compose.yml file with your SMTP and other settings.</p> <p>Build and Run the Container:</p> </li> </ul> <pre><code>docker-compose up --build -d\n</code></pre>"},{"location":"start/docker/#using-prebuilt-image","title":"Using prebuilt image","text":"<ul> <li>Replace the following lines in docker-compose.yml <pre><code>    build:\n      context: .\n      dockerfile: Dockerfile\n</code></pre> with <pre><code>    image: ghcr.io/skprg/hubzilla-docker:latest\n</code></pre></li> <li>Run the container: <pre><code>docker compose up -d\n</code></pre></li> </ul> <p>Access Your Hubzilla Instance: Navigate to http://localhost (or the appropriate URL) to view your Hubzilla instance.</p>"},{"location":"start/docker/#option-2-dhitchenorhubzilla","title":"Option 2: dhitchenor/hubzilla","text":"<p>Another dockjer deployment is provided at https://github.com/dhitchenor/hubzilla</p> <p>Features: * Automatic setup * Integral addons, preinstalled * env file for easy configuration/toggling of features</p> <p>Instructions and details are available at the repository.</p>"},{"location":"start/manual_install/","title":"Manual installation on an existing server","text":""},{"location":"start/manual_install/#unpack-the-hubzilla-files-into-the-root-of-your-web-server-document-area","title":"Unpack the Hubzilla files into the root of your web server document area","text":"<p>If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess.</p> <p>If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file.  This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be:</p> <pre><code>git clone https://framagit.org/hubzilla/core.git mywebsite\n</code></pre> <p>and then you can pick up the latest changes at any time with:</p> <pre><code>git pull\n</code></pre> <p>make sure folders <code>store/[data]/smarty3</code> and <code>store</code> exist and are writable by the webserver:</p> <pre><code>mkdir -p \"store/[data]/smarty3\"\nchmod -R 777 store\n\nThis permission (777) is very dangerous and if you have sufficient\nprivilege and knowledge you should make these directories writeable\nonly by the webserver and, if different, the user that will run the\ncron job (see below). In many shared hosting environments this may be\ndifficult without opening a trouble ticket with your provider. The\nabove permissions will allow the software to work, but are not\noptimal.\n</code></pre> <p>The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function:</p> <ul> <li><code>addon</code></li> <li><code>extend</code></li> <li><code>view/theme</code></li> <li><code>widget</code></li> </ul>"},{"location":"start/manual_install/#official-addons","title":"Official addons","text":""},{"location":"start/manual_install/#installation","title":"Installation","text":"<p>Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames:</p> <pre><code>cd mywebsite\nutil/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons\n</code></pre>"},{"location":"start/manual_install/#updating","title":"Updating","text":"<p>For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository::</p> <pre><code>cd mywebsite\nutil/update_addon_repo hzaddons\n</code></pre> <p>Create searchable representations of the online documentation. You may do this any time that the documentation is updated :</p> <pre><code>cd mywebsite\nutil/importdoc\n</code></pre>"},{"location":"start/prep/","title":"Prep","text":""},{"location":"start/prep/#before-you-begin","title":"Before you begin","text":""},{"location":"start/prep/#choose-a-domain-name-or-subdomain-name-for-your-server","title":"Choose a domain name or subdomain name for your server","text":"<p>Hubzilla can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports.</p>"},{"location":"start/prep/#decide-if-you-will-use-ssl-and-obtain-an-ssl-certificate-before-software-installation","title":"Decide if you will use SSL and obtain an SSL certificate before software installation","text":"<p>You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates!</p> <p>Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate.</p> <p>This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement.</p> <p>Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt.</p> <p>If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection.  If you do not use SSL, your webserver MUST NOT listen on port 443 at all.</p> <p>If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms.</p>"},{"location":"start/script_install/","title":"Automated installation on an existing server using a shell script","text":"<p>There is a shell script in (<code>.homeinstall/hubzilla-setup.sh</code>) that will install Hubzilla and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary.</p>"},{"location":"start/script_install/#requirements","title":"Requirements","text":"<p>The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9:</p> <ul> <li> <p>Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3)</p> </li> <li> <p>Internet connection and router at home</p> </li> <li>Mini-PC / Raspi connected to your router</li> <li>USB drive for backups</li> <li>Fresh installation of Debian on your mini-pc</li> <li>Router with open ports 80 and 443 for your Debian</li> </ul>"},{"location":"start/script_install/#overview-of-installation-steps","title":"Overview of installation steps","text":"<ol> <li><code>apt-get install git</code></li> <li><code>mkdir -p /var/www/html</code></li> <li><code>cd /var/www/html</code></li> <li><code>git clone https://framagit.org/hubzilla/core.git .</code></li> <li><code>nano .homeinstall/hubzilla-config.txt</code></li> <li><code>cd .homeinstall/</code></li> <li><code>./hubzilla-setup.sh</code></li> <li><code>service apache2 reload</code></li> <li>Open your domain with a browser and step throught the initial configuration of $Projectname.</li> </ol>"}]}