{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About What is Hubzilla? Hubzilla is a decentralised communication network with the aim of providing communication options that circumvent censorship, respect privacy and are therefore free from the restrictions imposed by today's commercial communication giants. These primarily provide spy networks for paying customers of all kinds and monopolise and centralise the entire Internet - which was not originally among the revolutionary goals that led to the World Wide Web. Hubzilla is free, open source and free of charge. It was developed to run on a Raspberry Pi as well as on the largest AMD and Intel Xeon multiprocessor servers. It can be used for communication between a few individuals or connect many thousands of people and more. Another goal is to be independent of skills and resources. Hubzilla is as easy to use for the ordinary computer user as it is for system administrators and developers. How you use it depends on how you want to use it. Hubzilla is written in PHP, making it easy to install on any of today's hosting platforms, including self-hosting at home, on shared servers or on virtual and dedicated servers. In other words, Hubzilla can run on any platform that has a web server, a MySQL-compatible database and PHP. Hubzilla offers some unique goodies: One-click identification: you can access other servers in the Hubzilla network by simply clicking on a link to them. Authentication is easily done automatically behind the scenes. Forget all the different usernames for different sites and passwords - Hubzilla does it all for you. Clone: You can clone your online identity (or, as we say, a channel). It is no longer tied to a specific server, domain or IP address. Simply import it to another Hubzilla server (or Hubzilla hub, as we call it) - directly online or using a previously generated export. If your primary hub is suddenly no longer online, no problem, your contacts, posts and messages are still automatically available and accessible under your cloned identity. (*: only posts and messages created after the moment of cloning) Privacy: Hubzilla identities (Nomad IDs) can be deleted, backed up/downloaded and cloned. You have full control over your data. If you decide to delete all your data and your Nomad ID, all you have to do is click on a link and it will be deleted from the server immediately. No questions asked, no fuss. Hubzilla Features Built-in Social When you post announcements on your website, they are automatically broadcast to your followers on the Fediverse, Mastodon, and more. You can also interact with them via your website. Groups & Forums Building a community is important for your business or nonprofit organization. You can add public, private, and moderated discussion groups & forums. These work across nearly all fediverse platforms. Cloud Storage You can store documents directly on your website, and share them with others. Public, private, or restricted access. With the files being stored on your domain name, they will know it comes from you. Federated Single Sign On You can use your Hubzilla online identity to log into other websites that support Magic Signon (OpenWebAuth). That way you don't have to create a new account on every website, forum, membership site, or app. Nomadic Identity Clone your online identity and content to multiple sites using the Nomad protocol and mirror any changes in near real time. All your friends and all your content are available on any of your cloned instances - at any time.","title":"About"},{"location":"#about","text":"","title":"About"},{"location":"#what-is-hubzilla","text":"Hubzilla is a decentralised communication network with the aim of providing communication options that circumvent censorship, respect privacy and are therefore free from the restrictions imposed by today's commercial communication giants. These primarily provide spy networks for paying customers of all kinds and monopolise and centralise the entire Internet - which was not originally among the revolutionary goals that led to the World Wide Web. Hubzilla is free, open source and free of charge. It was developed to run on a Raspberry Pi as well as on the largest AMD and Intel Xeon multiprocessor servers. It can be used for communication between a few individuals or connect many thousands of people and more. Another goal is to be independent of skills and resources. Hubzilla is as easy to use for the ordinary computer user as it is for system administrators and developers. How you use it depends on how you want to use it. Hubzilla is written in PHP, making it easy to install on any of today's hosting platforms, including self-hosting at home, on shared servers or on virtual and dedicated servers. In other words, Hubzilla can run on any platform that has a web server, a MySQL-compatible database and PHP. Hubzilla offers some unique goodies: One-click identification: you can access other servers in the Hubzilla network by simply clicking on a link to them. Authentication is easily done automatically behind the scenes. Forget all the different usernames for different sites and passwords - Hubzilla does it all for you. Clone: You can clone your online identity (or, as we say, a channel). It is no longer tied to a specific server, domain or IP address. Simply import it to another Hubzilla server (or Hubzilla hub, as we call it) - directly online or using a previously generated export. If your primary hub is suddenly no longer online, no problem, your contacts, posts and messages are still automatically available and accessible under your cloned identity. (*: only posts and messages created after the moment of cloning) Privacy: Hubzilla identities (Nomad IDs) can be deleted, backed up/downloaded and cloned. You have full control over your data. If you decide to delete all your data and your Nomad ID, all you have to do is click on a link and it will be deleted from the server immediately. No questions asked, no fuss.","title":"What is Hubzilla?"},{"location":"#hubzilla-features","text":"","title":"Hubzilla Features"},{"location":"#built-in-social","text":"When you post announcements on your website, they are automatically broadcast to your followers on the Fediverse, Mastodon, and more. You can also interact with them via your website.","title":"Built-in Social"},{"location":"#groups-forums","text":"Building a community is important for your business or nonprofit organization. You can add public, private, and moderated discussion groups & forums. These work across nearly all fediverse platforms.","title":"Groups &amp; Forums"},{"location":"#cloud-storage","text":"You can store documents directly on your website, and share them with others. Public, private, or restricted access. With the files being stored on your domain name, they will know it comes from you.","title":"Cloud Storage"},{"location":"#federated-single-sign-on","text":"You can use your Hubzilla online identity to log into other websites that support Magic Signon (OpenWebAuth). That way you don't have to create a new account on every website, forum, membership site, or app.","title":"Federated Single Sign On"},{"location":"#nomadic-identity","text":"Clone your online identity and content to multiple sites using the Nomad protocol and mirror any changes in near real time. All your friends and all your content are available on any of your cloned instances - at any time.","title":"Nomadic Identity"},{"location":"admin/","text":"Overview $Projectname is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support $Projectname. Many will but please review the requirements and confirm these with your hosting provider prior to installation. We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working. Where to find more help If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker . Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues. Before you begin Choose a domain name or subdomain name for your server $Projectname can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports. Decide if you will use SSL and obtain an SSL certificate before software installation You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates! Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate. This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement. Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt. If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection. If you do not use SSL, your webserver MUST NOT listen on port 443 at all. If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms. Deployment There are several ways to deploy a new hub. Manual installation on an existing server Automated installation on an existing server using a shell script Automated deployment using an OpenShift virtual private server (VPS) Requirements Apache with mod-rewrite enabled and \"AllowOverride All\" so you can use a local .htaccess file. Some folks have successfully used nginx and lighttpd. Example config scripts are available for these platforms in doc/install. Apache and nginx have the most support. PHP 8.1 or later. Note that on some shared hosting environments, the command line version of PHP might differ from the webserver version PHP command line access with register_argc_argv set to true in the php.ini file, and with no hosting provider restrictions on the use of exec() and proc_open(). curl, gd (with at least jpeg and png support), pdo-mysql (or pdo-postgres), mbstring, zip, and openssl extensions. The imagick extension is not required, but recommended. xml extension is required if you want webdav to work. some form of email server or email gateway such that PHP mail() works. A supported database server. The supported databases are: Mysql version 8.0.22 or later MariaDB version 10.4 or later PostgreSQL version 12 or later ability to schedule jobs with cron. Installation into a top-level domain or sub-domain (without a directory/path component in the URL) is REQUIRED. Manual Installation Unpack the $Projectname files into the root of your web server document area If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess. If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file. This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be: git clone https://framagit.org/hubzilla/core.git mywebsite and then you can pick up the latest changes at any time with: git pull make sure folders store/[data]/smarty3 and store exist and are writable by the webserver: mkdir -p \"store/[data]/smarty3\" chmod -R 777 store This permission (777) is very dangerous and if you have sufficient privilege and knowledge you should make these directories writeable only by the webserver and, if different, the user that will run the cron job (see below). In many shared hosting environments this may be difficult without opening a trouble ticket with your provider. The above permissions will allow the software to work, but are not optimal. The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function: addon extend view/theme widget Official addons Installation Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames: cd mywebsite util/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons Updating For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository:: cd mywebsite util/update_addon_repo hzaddons Create searchable representations of the online documentation. You may do this any time that the documentation is updated : cd mywebsite util/importdoc Automated installation via the .homeinstall shell script There is a shell script in ( .homeinstall/hubzilla-setup.sh ) that will install $Projectname and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary. Requirements The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9: Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3) Internet connection and router at home Mini-PC / Raspi connected to your router USB drive for backups Fresh installation of Debian on your mini-pc Router with open ports 80 and 443 for your Debian Overview of installation steps apt-get install git mkdir -p /var/www/html cd /var/www/html git clone https://framagit.org/hubzilla/core.git . nano .homeinstall/hubzilla-config.txt cd .homeinstall/ ./hubzilla-setup.sh service apache2 reload Open your domain with a browser and step throught the initial configuration of $Projectname. Recommended Addons We recommend the following addons be installed on all public sites: nsfw - hide inappropriate posts/comments superblock - block content from offensive channels Federation Addons Several web communities have begun to converge using common protocols. The protocols involved are somewhat limited in their abilities. The GNU-Social protocol for instance offers no privacy modes, and the Diaspora protocol is somewhat restrictive in what kinds of communications are allowed. All comments must be signed in a very unique manner by the original author. The ActivityPub protocol is also being considered and may be supported at a future date. No other existing protocol supports nomadic location as used by this project. This presents some support challenges as some features work with some networks and don't work with others. Nevertheless the federation protocols allow connections to be made to a much larger community of people worldwide. They are provided as addons. diaspora - The Diaspora Protocol used by Diaspora and Friendica. You should enable 'Diaspora Statistics' (statistics) first to enable all the available features. gnusoc - The GNU-Social Protocol, used by GNU-Social, Mastodon and several other communities. This addon requires you first install the 'pubsubhubbub' service (also an addon). Each member of your site must choose whether or not to allow these protocols individually as they may conflict with several desirable core features and abilities of this software (such as channel migration and cloning). They do this from their 'Settings -> Feature/Addon Settings' page. The administrator may also set the following: util/config system.diaspora_allowed 1 util/config system.gnusoc_allowed 1 and enable these protocols automatically for all newly created channels. Service Classes Service classes allow you to set limits on system resources by limiting what individual accounts can do, including file storage and top-level post limits. Define custom service classes according to your needs in the .htconfig.php file. For example, create a standard and premium class using the following lines: // Service classes App::$config['system']['default_service_class']='standard'; // this is the default service class that is attached to every new account // configuration for standard service class App::$config['service_class']['standard'] = array('photo_upload_limit'=>2097152, // total photo storage limit per channel (here 2MB) 'total_identities' =>1, // number of channels an account can create 'total_items' =>0, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected 'total_pages' =>100, // number of pages a channel can create 'total_channels' =>100, // number of channels the user can add, other users can still add this channel, even if the limit is reached 'attach_upload_limit' =>2097152, // total attachment storage limit per channel (here 2MB) 'chatters_inroom' =>20); // configuration for premium service class App::$config['service_class']['premium'] = array('photo_upload_limit'=>20000000000, // total photo storage limit per channel (here 20GB) 'total_identities' =>20, // number of channels an account can create 'total_items' =>20000, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected 'total_pages' =>400, // number of pages a channel can create 'total_channels' =>2000, // number of channels the user can add, other users can still add this channel, even if the limit is reached 'attach_upload_limit' =>20000000000, // total attachment storage limit per channel (here 20GB) 'chatters_inroom' =>100); To apply a service class to an existing account, use the command line utility from the web root: util/service_class list service classes util/config system default_service_class firstclass set the default service class to 'firstclass' util/service_class firstclass list the services that are part of 'firstclass' service class util/service_class firstclass photo_upload_limit 10000000 set firstclass total photo disk usage to 10 million bytes util/service_class --account=5 firstclass set account id 5 to service class 'firstclass' (with confirmation) util/service_class --channel=blogchan firstclass set the account that owns channel 'blogchan' to service class 'firstclass' (with confirmation) Service class limit options photo_upload_limit - maximum total bytes for photos total_items - maximum total toplevel posts total_pages - maximum comanche pages total_identities - maximum number of channels owned by account total_channels - maximum number of connections total_feeds - maximum number of rss feed connections attach_upload_limit - maximum file upload storage (bytes) minimum_feedcheck_minutes - lowest setting allowed for polling rss feeds chatrooms - maximum chatrooms chatters_inroom - maximum chatters per room access_tokens - maximum number of Guest Access Tokens per channel Theme management Repo management example Navigate to your hub web root root@hub:/root# cd /var/www 2. Add the theme repo and give it a name root@hub:/var/www# util/add_theme_repo https://github.com/DeadSuperHero/redmatrix-themes.git DeadSuperHero 3. Update the repo by using root@hub:/var/www# util/update_theme_repo DeadSuperHero Channel Directory Keywords There is a \"tag cloud\" of keywords that can appear on the channel directory page. If you wish to hide these keywords, which are drawn from the directory server, you can use the config tool: util/config system disable_directory_keywords 1 If your hub is in the standalone mode because you do not wish to connect to the global grid, you may instead ensure the the directory_server system option is empty: util/config system directory_server \"\" Administration Site Administration Administration of the website is commonly done through the admin webpage located at /admin on your website. In order to access this page you must have administration rights to the server. Administration rights are granted to the first account to register on your site, provided the email address of that account exactly matches the email address you provided as the administrator's email address during setup. There are several ways that this can fail and leave the system without an administrator account, for instance if the first account that was created provided a different email address than the administrator email address that was supplied during setup. For security reasons there is no web page or interface on the system which will give you administrator access. If you need to correct a situation where a system has no administrator account it must be done by editing the account table in the database. There is no other way. To do this, you will need to locate the entry in the account table which belongs to the desired administrator, and set 'account_roles' for that entry to 4096. You will then be able to access the admin page from your system's profile menu or directly via /admin . A hub can have multiple admins and there is no limit to how administrators you can have. Repeat the above process for every account you wish to provide with administration rights. Troubleshooting Log files The system logfile is an extremely useful resource for tracking down things that go wrong. This can be enabled in the admin/log configuration page. A loglevel setting of LOGGER_DEBUG is preferred for stable production sites. Most things that go wrong with communications or storage are listed here. A setting of LOGGER_DATA provides much more detail, but may fill your disk. In either case we recommend the use of logrotate on your operating system to cycle logs and discard older entries. At the bottom of your .htconfig.php file are several lines (commented out) which enable PHP error logging. This reports issues with code syntax and executing the code and is the first place you should look for issues which result in a \"white screen\" or blank page. This is typically the result of code/syntax problems. Database errors are reported to the system logfile, but we've found it useful to have a file in your top-level directory called dbfail.out which only collects database related issues. If the file exists and is writable, database errors will be logged to it as well as to the system logfile. In the case of \"500\" errors, the issues may often be logged in your webserver logs, often /var/log/apache2/error.log or something similar. Consult your operating system documentation. There are three different log facilities. The first is the database failure log . This is only used if you create a file called specifically dbfail.out in the root folder of your website and make it write-able by the web server. If we have any database failed queries, they are all reported here. They generally indicate typos in our queries, but also occur if the database server disconnects or tables get corrupted. On rare occasions we'll see race conditions in here where two processes tried to create an xchan or cache entry with the same ID. Any other errors (especially persistent errors) should be investigated. The second is the PHP error log . This is created by the language processor and only reports issues in the language environment. Again these can be syntax errors or programming errors, but these generally are fatal and result in a \"white screen of death\"; e.g. PHP terminates. You should probably look at this file if something goes wrong that doesn't result in a white screen of death, but it isn't uncommon for this file to be empty for days on end. There are some lines at the bottom of the supplied .htconfig.php file; which if uncommented will enable a PHP error log ( extremely useful for finding the source of white screen failures). This isn't done by default due to potential issues with logfile ownership and write permissions and the fact that there is no logfile rotation by default. The third is the \"application log\" . This is used by $Projectname to report what is going on in the program and usually reports any difficulties or unexpected data we received. It also occasionally reports \"heartbeat\" status messages to indicate that we reached a certain point in a script. This is the most important log file to us, as we create it ourself for the sole purpose of reporting the status of background tasks and anything that seems weird or out of place. It may not be fatal, but maybe just unexpected. If you're performing a task and there's a problem, let us know what is in this file when the problem occurred. (Please don't send me 100M dumps you'll only piss me off). Just a few relevant lines so I can rule out a few hundred thousand lines of code and concentrate on where the problem starts showing up. These are your site logs, not mine. We report serious issues at any log level. I highly recommend DEBUG log level for most sites - which provides a bit of additional info and doesn't create huge logfiles. When there's a problem which defies all attempts to track, you might wish to use DATA log level for a short period of time to capture all the detail of what structures we were dealing with at the time. This log level will use a lot of space so is recommended only for brief periods or for developer test sites. I recommend configuring logrotate for both the php log and the application log. I usually have a look at dbfail.out every week or two, fix any issues reported and then starting over with a fresh file. Likewise with the PHP logfile. I refer to it once in a while to see if there's something that needs fixing. If something goes wrong, and it's not a fatal error, I look at the application logfile. Often I will tail -f logfile.out While repeating an operation that has problems. Often I'll insert extra logging statements in the code if there isn't any hint what's going wrong. Even something as simple as \"got here\" or printing out the value of a variable that might be suspect. You can do this too - in fact I encourage you to do so. Once you've found what you need to find, you can git checkout file.php To immediately clear out all the extra logging stuff you added. Use the information from this log and any detail you can provide from your investigation of the problem to file your bug report - unless your analysis points to the source of the problem. In that case, just fix it. Rotating log files Enable the logrot addon in the official hubzilla-addons repo Create a directory in your web root called log with webserver write permissions Go to the logrot admin settings and enter this folder name as well as the max size and number of retained log files. Reporting issues When reporting issues, please try to provide as much detail as may be necessary for developers to reproduce the issue and provide the complete text of all error messages. We encourage you to try to the best of your abilities to use these logs combined with the source code in your possession to troubleshoot issues and find their cause. The community is often able to help, but only you have access to your site logfiles and it is considered a security risk to share them. If a code issue has been uncovered, please report it on the project bugtracker (https://framagit.org/hubzilla/core/issues). Again provide as much detail as possible to avoid us going back and forth asking questions about your configuration or how to duplicate the problem, so that we can get right to the problem and figure out what to do about it. You are also welcome to offer your own solutions and submit patches. In fact we encourage this as we are all volunteers and have little spare time available. The more people that help, the easier the workload for everybody. It's OK if your solution isn't perfect. Every little bit helps and perhaps we can improve on it.","title":"Index"},{"location":"admin/#overview","text":"$Projectname is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support $Projectname. Many will but please review the requirements and confirm these with your hosting provider prior to installation. We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working.","title":"Overview"},{"location":"admin/#where-to-find-more-help","text":"If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker . Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues.","title":"Where to find more help"},{"location":"admin/#before-you-begin","text":"","title":"Before you begin"},{"location":"admin/#choose-a-domain-name-or-subdomain-name-for-your-server","text":"$Projectname can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports.","title":"Choose a domain name or subdomain name for your server"},{"location":"admin/#decide-if-you-will-use-ssl-and-obtain-an-ssl-certificate-before-software-installation","text":"You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates! Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate. This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement. Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt. If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection. If you do not use SSL, your webserver MUST NOT listen on port 443 at all. If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms.","title":"Decide if you will use SSL and obtain an SSL certificate before software installation"},{"location":"admin/#deployment","text":"There are several ways to deploy a new hub. Manual installation on an existing server Automated installation on an existing server using a shell script Automated deployment using an OpenShift virtual private server (VPS)","title":"Deployment"},{"location":"admin/#requirements","text":"Apache with mod-rewrite enabled and \"AllowOverride All\" so you can use a local .htaccess file. Some folks have successfully used nginx and lighttpd. Example config scripts are available for these platforms in doc/install. Apache and nginx have the most support. PHP 8.1 or later. Note that on some shared hosting environments, the command line version of PHP might differ from the webserver version PHP command line access with register_argc_argv set to true in the php.ini file, and with no hosting provider restrictions on the use of exec() and proc_open(). curl, gd (with at least jpeg and png support), pdo-mysql (or pdo-postgres), mbstring, zip, and openssl extensions. The imagick extension is not required, but recommended. xml extension is required if you want webdav to work. some form of email server or email gateway such that PHP mail() works. A supported database server. The supported databases are: Mysql version 8.0.22 or later MariaDB version 10.4 or later PostgreSQL version 12 or later ability to schedule jobs with cron. Installation into a top-level domain or sub-domain (without a directory/path component in the URL) is REQUIRED.","title":"Requirements"},{"location":"admin/#manual-installation","text":"","title":"Manual Installation"},{"location":"admin/#unpack-the-projectname-files-into-the-root-of-your-web-server-document-area","text":"If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess. If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file. This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be: git clone https://framagit.org/hubzilla/core.git mywebsite and then you can pick up the latest changes at any time with: git pull make sure folders store/[data]/smarty3 and store exist and are writable by the webserver: mkdir -p \"store/[data]/smarty3\" chmod -R 777 store This permission (777) is very dangerous and if you have sufficient privilege and knowledge you should make these directories writeable only by the webserver and, if different, the user that will run the cron job (see below). In many shared hosting environments this may be difficult without opening a trouble ticket with your provider. The above permissions will allow the software to work, but are not optimal. The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function: addon extend view/theme widget","title":"Unpack the $Projectname files into the root of your web server document area"},{"location":"admin/#official-addons","text":"","title":"Official addons"},{"location":"admin/#installation","text":"Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames: cd mywebsite util/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons","title":"Installation"},{"location":"admin/#updating","text":"For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository:: cd mywebsite util/update_addon_repo hzaddons Create searchable representations of the online documentation. You may do this any time that the documentation is updated : cd mywebsite util/importdoc","title":"Updating"},{"location":"admin/#automated-installation-via-the-homeinstall-shell-script","text":"There is a shell script in ( .homeinstall/hubzilla-setup.sh ) that will install $Projectname and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary.","title":"Automated installation via the .homeinstall shell script"},{"location":"admin/#requirements_1","text":"The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9: Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3) Internet connection and router at home Mini-PC / Raspi connected to your router USB drive for backups Fresh installation of Debian on your mini-pc Router with open ports 80 and 443 for your Debian","title":"Requirements"},{"location":"admin/#overview-of-installation-steps","text":"apt-get install git mkdir -p /var/www/html cd /var/www/html git clone https://framagit.org/hubzilla/core.git . nano .homeinstall/hubzilla-config.txt cd .homeinstall/ ./hubzilla-setup.sh service apache2 reload Open your domain with a browser and step throught the initial configuration of $Projectname.","title":"Overview of installation steps"},{"location":"admin/#recommended-addons","text":"We recommend the following addons be installed on all public sites: nsfw - hide inappropriate posts/comments superblock - block content from offensive channels","title":"Recommended Addons"},{"location":"admin/#federation-addons","text":"Several web communities have begun to converge using common protocols. The protocols involved are somewhat limited in their abilities. The GNU-Social protocol for instance offers no privacy modes, and the Diaspora protocol is somewhat restrictive in what kinds of communications are allowed. All comments must be signed in a very unique manner by the original author. The ActivityPub protocol is also being considered and may be supported at a future date. No other existing protocol supports nomadic location as used by this project. This presents some support challenges as some features work with some networks and don't work with others. Nevertheless the federation protocols allow connections to be made to a much larger community of people worldwide. They are provided as addons. diaspora - The Diaspora Protocol used by Diaspora and Friendica. You should enable 'Diaspora Statistics' (statistics) first to enable all the available features. gnusoc - The GNU-Social Protocol, used by GNU-Social, Mastodon and several other communities. This addon requires you first install the 'pubsubhubbub' service (also an addon). Each member of your site must choose whether or not to allow these protocols individually as they may conflict with several desirable core features and abilities of this software (such as channel migration and cloning). They do this from their 'Settings -> Feature/Addon Settings' page. The administrator may also set the following: util/config system.diaspora_allowed 1 util/config system.gnusoc_allowed 1 and enable these protocols automatically for all newly created channels.","title":"Federation Addons"},{"location":"admin/#service-classes","text":"Service classes allow you to set limits on system resources by limiting what individual accounts can do, including file storage and top-level post limits. Define custom service classes according to your needs in the .htconfig.php file. For example, create a standard and premium class using the following lines: // Service classes App::$config['system']['default_service_class']='standard'; // this is the default service class that is attached to every new account // configuration for standard service class App::$config['service_class']['standard'] = array('photo_upload_limit'=>2097152, // total photo storage limit per channel (here 2MB) 'total_identities' =>1, // number of channels an account can create 'total_items' =>0, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected 'total_pages' =>100, // number of pages a channel can create 'total_channels' =>100, // number of channels the user can add, other users can still add this channel, even if the limit is reached 'attach_upload_limit' =>2097152, // total attachment storage limit per channel (here 2MB) 'chatters_inroom' =>20); // configuration for premium service class App::$config['service_class']['premium'] = array('photo_upload_limit'=>20000000000, // total photo storage limit per channel (here 20GB) 'total_identities' =>20, // number of channels an account can create 'total_items' =>20000, // number of top level posts a channel can create. Applies only to top level posts of the channel user, other posts and comments are unaffected 'total_pages' =>400, // number of pages a channel can create 'total_channels' =>2000, // number of channels the user can add, other users can still add this channel, even if the limit is reached 'attach_upload_limit' =>20000000000, // total attachment storage limit per channel (here 20GB) 'chatters_inroom' =>100); To apply a service class to an existing account, use the command line utility from the web root: util/service_class list service classes util/config system default_service_class firstclass set the default service class to 'firstclass' util/service_class firstclass list the services that are part of 'firstclass' service class util/service_class firstclass photo_upload_limit 10000000 set firstclass total photo disk usage to 10 million bytes util/service_class --account=5 firstclass set account id 5 to service class 'firstclass' (with confirmation) util/service_class --channel=blogchan firstclass set the account that owns channel 'blogchan' to service class 'firstclass' (with confirmation) Service class limit options photo_upload_limit - maximum total bytes for photos total_items - maximum total toplevel posts total_pages - maximum comanche pages total_identities - maximum number of channels owned by account total_channels - maximum number of connections total_feeds - maximum number of rss feed connections attach_upload_limit - maximum file upload storage (bytes) minimum_feedcheck_minutes - lowest setting allowed for polling rss feeds chatrooms - maximum chatrooms chatters_inroom - maximum chatters per room access_tokens - maximum number of Guest Access Tokens per channel","title":"Service Classes"},{"location":"admin/#theme-management","text":"","title":"Theme management"},{"location":"admin/#repo-management-example","text":"Navigate to your hub web root root@hub:/root# cd /var/www 2. Add the theme repo and give it a name root@hub:/var/www# util/add_theme_repo https://github.com/DeadSuperHero/redmatrix-themes.git DeadSuperHero 3. Update the repo by using root@hub:/var/www# util/update_theme_repo DeadSuperHero","title":"Repo management example"},{"location":"admin/#channel-directory","text":"","title":"Channel Directory"},{"location":"admin/#keywords","text":"There is a \"tag cloud\" of keywords that can appear on the channel directory page. If you wish to hide these keywords, which are drawn from the directory server, you can use the config tool: util/config system disable_directory_keywords 1 If your hub is in the standalone mode because you do not wish to connect to the global grid, you may instead ensure the the directory_server system option is empty: util/config system directory_server \"\"","title":"Keywords"},{"location":"admin/#administration","text":"","title":"Administration"},{"location":"admin/#site-administration","text":"Administration of the website is commonly done through the admin webpage located at /admin on your website. In order to access this page you must have administration rights to the server. Administration rights are granted to the first account to register on your site, provided the email address of that account exactly matches the email address you provided as the administrator's email address during setup. There are several ways that this can fail and leave the system without an administrator account, for instance if the first account that was created provided a different email address than the administrator email address that was supplied during setup. For security reasons there is no web page or interface on the system which will give you administrator access. If you need to correct a situation where a system has no administrator account it must be done by editing the account table in the database. There is no other way. To do this, you will need to locate the entry in the account table which belongs to the desired administrator, and set 'account_roles' for that entry to 4096. You will then be able to access the admin page from your system's profile menu or directly via /admin . A hub can have multiple admins and there is no limit to how administrators you can have. Repeat the above process for every account you wish to provide with administration rights.","title":"Site Administration"},{"location":"admin/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"admin/#log-files","text":"The system logfile is an extremely useful resource for tracking down things that go wrong. This can be enabled in the admin/log configuration page. A loglevel setting of LOGGER_DEBUG is preferred for stable production sites. Most things that go wrong with communications or storage are listed here. A setting of LOGGER_DATA provides much more detail, but may fill your disk. In either case we recommend the use of logrotate on your operating system to cycle logs and discard older entries. At the bottom of your .htconfig.php file are several lines (commented out) which enable PHP error logging. This reports issues with code syntax and executing the code and is the first place you should look for issues which result in a \"white screen\" or blank page. This is typically the result of code/syntax problems. Database errors are reported to the system logfile, but we've found it useful to have a file in your top-level directory called dbfail.out which only collects database related issues. If the file exists and is writable, database errors will be logged to it as well as to the system logfile. In the case of \"500\" errors, the issues may often be logged in your webserver logs, often /var/log/apache2/error.log or something similar. Consult your operating system documentation. There are three different log facilities. The first is the database failure log . This is only used if you create a file called specifically dbfail.out in the root folder of your website and make it write-able by the web server. If we have any database failed queries, they are all reported here. They generally indicate typos in our queries, but also occur if the database server disconnects or tables get corrupted. On rare occasions we'll see race conditions in here where two processes tried to create an xchan or cache entry with the same ID. Any other errors (especially persistent errors) should be investigated. The second is the PHP error log . This is created by the language processor and only reports issues in the language environment. Again these can be syntax errors or programming errors, but these generally are fatal and result in a \"white screen of death\"; e.g. PHP terminates. You should probably look at this file if something goes wrong that doesn't result in a white screen of death, but it isn't uncommon for this file to be empty for days on end. There are some lines at the bottom of the supplied .htconfig.php file; which if uncommented will enable a PHP error log ( extremely useful for finding the source of white screen failures). This isn't done by default due to potential issues with logfile ownership and write permissions and the fact that there is no logfile rotation by default. The third is the \"application log\" . This is used by $Projectname to report what is going on in the program and usually reports any difficulties or unexpected data we received. It also occasionally reports \"heartbeat\" status messages to indicate that we reached a certain point in a script. This is the most important log file to us, as we create it ourself for the sole purpose of reporting the status of background tasks and anything that seems weird or out of place. It may not be fatal, but maybe just unexpected. If you're performing a task and there's a problem, let us know what is in this file when the problem occurred. (Please don't send me 100M dumps you'll only piss me off). Just a few relevant lines so I can rule out a few hundred thousand lines of code and concentrate on where the problem starts showing up. These are your site logs, not mine. We report serious issues at any log level. I highly recommend DEBUG log level for most sites - which provides a bit of additional info and doesn't create huge logfiles. When there's a problem which defies all attempts to track, you might wish to use DATA log level for a short period of time to capture all the detail of what structures we were dealing with at the time. This log level will use a lot of space so is recommended only for brief periods or for developer test sites. I recommend configuring logrotate for both the php log and the application log. I usually have a look at dbfail.out every week or two, fix any issues reported and then starting over with a fresh file. Likewise with the PHP logfile. I refer to it once in a while to see if there's something that needs fixing. If something goes wrong, and it's not a fatal error, I look at the application logfile. Often I will tail -f logfile.out While repeating an operation that has problems. Often I'll insert extra logging statements in the code if there isn't any hint what's going wrong. Even something as simple as \"got here\" or printing out the value of a variable that might be suspect. You can do this too - in fact I encourage you to do so. Once you've found what you need to find, you can git checkout file.php To immediately clear out all the extra logging stuff you added. Use the information from this log and any detail you can provide from your investigation of the problem to file your bug report - unless your analysis points to the source of the problem. In that case, just fix it.","title":"Log files"},{"location":"admin/#rotating-log-files","text":"Enable the logrot addon in the official hubzilla-addons repo Create a directory in your web root called log with webserver write permissions Go to the logrot admin settings and enter this folder name as well as the max size and number of retained log files.","title":"Rotating log files"},{"location":"admin/#reporting-issues","text":"When reporting issues, please try to provide as much detail as may be necessary for developers to reproduce the issue and provide the complete text of all error messages. We encourage you to try to the best of your abilities to use these logs combined with the source code in your possession to troubleshoot issues and find their cause. The community is often able to help, but only you have access to your site logfiles and it is considered a security risk to share them. If a code issue has been uncovered, please report it on the project bugtracker (https://framagit.org/hubzilla/core/issues). Again provide as much detail as possible to avoid us going back and forth asking questions about your configuration or how to duplicate the problem, so that we can get right to the problem and figure out what to do about it. You are also welcome to offer your own solutions and submit patches. In fact we encourage this as we are all volunteers and have little spare time available. The more people that help, the easier the workload for everybody. It's OK if your solution isn't perfect. Every little bit helps and perhaps we can improve on it.","title":"Reporting issues"},{"location":"admin/hub_snapshots/","text":"Hub Snapshot Tools Hubzilla developers frequently need to switch between branches that might have incompatible database schemas or content. The following two scripts create and restore complete snapshots of a Hubzilla instance, including both the hub web root and the entire database state. Each script requires a config file called hub-snapshot.conf residing in the same folder and containing the specific directories and database details of your hub. Config The format of the config file is very strict. There must be no spaces between the variable name and the value. Replace only the content inside the quotes with your configuration. Save this file as hub-snapshot.conf alongside the scripts. # Location of hub root. Typically this is the location of the Hubzilla repo clone. HUBROOT=\"/var/www/\" # MySQL database name DBNAME=\"hubzilla\" # MySQL database user DBUSER=\"hubzilla\" # MySQL database password DBPWD=\"akeufajeuwfb\" # The target snapshot folder where the git repo will be initialized SNAPSHOTROOT=\"/root/snapshots/hubzilla/\" Snapshot Example usage: sh hub-snapshot.sh my-hub.conf \"Commit message for the snapshot\" hub-snapshot.sh : #!/bin/bash if ! [ -f \"$1\" ]; then echo \"$1 is not a valid file. Aborting...\" exit 1 fi source \"$1\" #echo \"$DBNAME\" #echo \"$DBUSER\" #echo \"$DBPWD\" #echo \"$HUBROOT\" #echo \"$SNAPSHOTROOT\" MESSAGE=\"snapshot: $2\" if [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then echo \"Required variable is not set. Aborting...\" exit 1 fi if [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then mkdir -p \"$SNAPSHOTROOT\"/db/ fi if [ ! -d \"$SNAPSHOTROOT\"/www/ ]; then mkdir -p \"$SNAPSHOTROOT\"/www/ fi if [ ! -d \"$SNAPSHOTROOT\"/www/ ] || [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then echo \"Error creating snapshot directories. Aborting...\" exit 1 fi echo \"Export database...\" mysqldump -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" > \"$SNAPSHOTROOT\"/db/\"$DBNAME\".sql echo \"Copy hub root files...\" rsync -va --delete --exclude=.git* \"$HUBROOT\"/ \"$SNAPSHOTROOT\"/www/ cd \"$SNAPSHOTROOT\" if [ ! -d \".git\" ]; then git init fi if [ ! -d \".git\" ]; then echo \"Cannot initialize git repo. Aborting...\" exit 1 fi git add -A echo \"Commit hub snapshot...\" git commit -a -m \"$MESSAGE\" exit 0 Restore #!/bin/bash # Restore hub to a previous state. Input hub config and commit hash if ! [ -f \"$1\" ]; then echo \"$1 is not a valid file. Aborting...\" exit 1 fi source \"$1\" COMMIT=$2 if [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then echo \"Required variable is not set. Aborting...\" exit 1 fi RESTOREDIR=\"$(mktemp -d)/\" if [ ! -d \"$RESTOREDIR\" ]; then echo \"Cannot create restore directory. Aborting...\" exit 1 fi echo \"Cloning the snapshot repo...\" git clone \"$SNAPSHOTROOT\" \"$RESTOREDIR\" cd \"$RESTOREDIR\" echo \"Checkout requested snapshot...\" git checkout \"$COMMIT\" echo \"Restore hub root files...\" rsync -a --delete --exclude=.git* \"$RESTOREDIR\"/www/ \"$HUBROOT\"/ echo \"Restore hub database...\" mysql -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" < \"$RESTOREDIR\"/db/\"$DBNAME\".sql chown -R www-data:www-data \"$HUBROOT\"/{store,extend,addon,.htlog,.htconfig.php} echo \"Restored hub to snapshot $COMMIT\" echo \"Removing temporary files...\" rm -rf \"$RESTOREDIR\" exit 0","title":"Hub snapshots"},{"location":"admin/hub_snapshots/#hub-snapshot-tools","text":"Hubzilla developers frequently need to switch between branches that might have incompatible database schemas or content. The following two scripts create and restore complete snapshots of a Hubzilla instance, including both the hub web root and the entire database state. Each script requires a config file called hub-snapshot.conf residing in the same folder and containing the specific directories and database details of your hub.","title":"Hub Snapshot Tools"},{"location":"admin/hub_snapshots/#config","text":"The format of the config file is very strict. There must be no spaces between the variable name and the value. Replace only the content inside the quotes with your configuration. Save this file as hub-snapshot.conf alongside the scripts. # Location of hub root. Typically this is the location of the Hubzilla repo clone. HUBROOT=\"/var/www/\" # MySQL database name DBNAME=\"hubzilla\" # MySQL database user DBUSER=\"hubzilla\" # MySQL database password DBPWD=\"akeufajeuwfb\" # The target snapshot folder where the git repo will be initialized SNAPSHOTROOT=\"/root/snapshots/hubzilla/\"","title":"Config"},{"location":"admin/hub_snapshots/#snapshot","text":"Example usage: sh hub-snapshot.sh my-hub.conf \"Commit message for the snapshot\" hub-snapshot.sh : #!/bin/bash if ! [ -f \"$1\" ]; then echo \"$1 is not a valid file. Aborting...\" exit 1 fi source \"$1\" #echo \"$DBNAME\" #echo \"$DBUSER\" #echo \"$DBPWD\" #echo \"$HUBROOT\" #echo \"$SNAPSHOTROOT\" MESSAGE=\"snapshot: $2\" if [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then echo \"Required variable is not set. Aborting...\" exit 1 fi if [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then mkdir -p \"$SNAPSHOTROOT\"/db/ fi if [ ! -d \"$SNAPSHOTROOT\"/www/ ]; then mkdir -p \"$SNAPSHOTROOT\"/www/ fi if [ ! -d \"$SNAPSHOTROOT\"/www/ ] || [ ! -d \"$SNAPSHOTROOT\"/db/ ]; then echo \"Error creating snapshot directories. Aborting...\" exit 1 fi echo \"Export database...\" mysqldump -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" > \"$SNAPSHOTROOT\"/db/\"$DBNAME\".sql echo \"Copy hub root files...\" rsync -va --delete --exclude=.git* \"$HUBROOT\"/ \"$SNAPSHOTROOT\"/www/ cd \"$SNAPSHOTROOT\" if [ ! -d \".git\" ]; then git init fi if [ ! -d \".git\" ]; then echo \"Cannot initialize git repo. Aborting...\" exit 1 fi git add -A echo \"Commit hub snapshot...\" git commit -a -m \"$MESSAGE\" exit 0","title":"Snapshot"},{"location":"admin/hub_snapshots/#restore","text":"#!/bin/bash # Restore hub to a previous state. Input hub config and commit hash if ! [ -f \"$1\" ]; then echo \"$1 is not a valid file. Aborting...\" exit 1 fi source \"$1\" COMMIT=$2 if [ \"$DBPWD\" == \"\" -o \"$SNAPSHOTROOT\" == \"\" -o \"$DBNAME\" == \"\" -o \"$DBUSER\" == \"\" -o \"$HUBROOT\" == \"\" ]; then echo \"Required variable is not set. Aborting...\" exit 1 fi RESTOREDIR=\"$(mktemp -d)/\" if [ ! -d \"$RESTOREDIR\" ]; then echo \"Cannot create restore directory. Aborting...\" exit 1 fi echo \"Cloning the snapshot repo...\" git clone \"$SNAPSHOTROOT\" \"$RESTOREDIR\" cd \"$RESTOREDIR\" echo \"Checkout requested snapshot...\" git checkout \"$COMMIT\" echo \"Restore hub root files...\" rsync -a --delete --exclude=.git* \"$RESTOREDIR\"/www/ \"$HUBROOT\"/ echo \"Restore hub database...\" mysql -u \"$DBUSER\" -p\"$DBPWD\" \"$DBNAME\" < \"$RESTOREDIR\"/db/\"$DBNAME\".sql chown -R www-data:www-data \"$HUBROOT\"/{store,extend,addon,.htlog,.htconfig.php} echo \"Restored hub to snapshot $COMMIT\" echo \"Removing temporary files...\" rm -rf \"$RESTOREDIR\" exit 0","title":"Restore"},{"location":"admin/primary_directory/","text":"Primary Directory By default, $Projectname will use available Directories on the web, which show you channels available around the world. There are certain scenarios where you might want your own directory-server that you can connect multiple hubs to. This will limit the channels that appear in all of your hubs to only channels on hubs connected to your directory-server. Instuctions on how to set up one hub as the Primary Directory for a series of private hubs. On the hub that will be the Directory Server, open the .htconfig.php file and set: App::$config['system']['directory_mode'] = DIRECTORY_MODE_PRIMARY; By default it should already be set as DIRECTORY_MODE_NORMAL , so just edit that line to say DIRECTORY_MODE_PRIMARY Next, for each hub (including the Directory Server), from a terminal, cd into the folder where it is installed and run this : util/config system directory_realm YOURREALMNAME ( YOURREALMNAME can be whatever you want your realm-name to be) then: util/config system realm_token THEPASSWORD ( THEPASSWORD is whatever password you want for your realm) NOTE: Use the same realm-name and password for each hub Lastly, for each \"client\" hub, (from a terminal) run: util/config system directory_server https://theaddressofyourdirectoryserver.com Now when you view the directory of each hub, it should only show the channels that exist on the hubs in your realm. I have tested with two hubs so far, and it seems to be working fine. Channels created in each hub are reflected in the Primary Directory, and subsequently in the directory of all client hubs Issues When I created the first hub,it was up and running for an hour or so before I changed it to PRIMARY_MODE, and after changing it, there were a few channels from across the matrix still present in the directory. I deleted them from the xchan table and that seems to have fixed the issue.","title":"Primary Directory"},{"location":"admin/primary_directory/#primary-directory","text":"By default, $Projectname will use available Directories on the web, which show you channels available around the world. There are certain scenarios where you might want your own directory-server that you can connect multiple hubs to. This will limit the channels that appear in all of your hubs to only channels on hubs connected to your directory-server.","title":"Primary Directory"},{"location":"admin/primary_directory/#instuctions-on-how-to-set-up-one-hub-as-the-primary-directory-for-a-series-of-private-hubs","text":"On the hub that will be the Directory Server, open the .htconfig.php file and set: App::$config['system']['directory_mode'] = DIRECTORY_MODE_PRIMARY; By default it should already be set as DIRECTORY_MODE_NORMAL , so just edit that line to say DIRECTORY_MODE_PRIMARY Next, for each hub (including the Directory Server), from a terminal, cd into the folder where it is installed and run this : util/config system directory_realm YOURREALMNAME ( YOURREALMNAME can be whatever you want your realm-name to be) then: util/config system realm_token THEPASSWORD ( THEPASSWORD is whatever password you want for your realm) NOTE: Use the same realm-name and password for each hub Lastly, for each \"client\" hub, (from a terminal) run: util/config system directory_server https://theaddressofyourdirectoryserver.com Now when you view the directory of each hub, it should only show the channels that exist on the hubs in your realm. I have tested with two hubs so far, and it seems to be working fine. Channels created in each hub are reflected in the Primary Directory, and subsequently in the directory of all client hubs","title":"Instuctions on how to set up one hub as the Primary Directory for a series of private hubs."},{"location":"admin/primary_directory/#issues","text":"When I created the first hub,it was up and running for an hour or so before I changed it to PRIMARY_MODE, and after changing it, there were a few channels from across the matrix still present in the directory. I deleted them from the xchan table and that seems to have fixed the issue.","title":"Issues"},{"location":"admin/widgets/","text":"Core Widgets Some/many of these widgets have restrictions which may restrict the type of page where they may appear or may require login clock - displays the current time args: military (1 or 0) - use 24 hour time as opposed to AM/PM profile - displays a profile sidebar on pages which load profiles (pages with nickname in the URL) tagcloud - display a tagcloud of webpage items args: count - number of items to return (default 24) collections - privacy group selector for the current logged in channel args: mode - one of \"conversation\", \"group\", \"abook\" depending on module suggestions - friend suggestions for the current logged on channel follow - presents a text box for following another channel notes - private notes area for the current logged in channel if private_notes feature is enabled savedsearch - network/matrix search with save - must be logged in and savedsearch feature enabled filer - select filed items from network/matrix stream - must be logged in archive - date range selector for network and channel pages args: 'wall' - 1 or 0, limit to wall posts or network/matrix posts (default) fullprofile - same as profile currently categories - categories filter (channel page) tagcloud_wall - tagcloud for channel page only args: 'limit' - number of tags to return (default 50) catcloud_wall - tagcloud for channel page categories args: 'limit' - number of categories to return (default 50) affinity - affinity slider for network page - must be logged in settings_menu - sidebar menu for settings page, must be logged in mailmenu - sidebar menu for private message page - must be logged in design_tools - design tools menu for webpage building pages, must be logged in findpeople - tools to find other channels photo_albums - list photo albums of the current page owner with a selector menu vcard - mini profile sidebar for the person of interest (page owner, whatever) dirsafemode - directory selection tool - only on directory pages dirsort - directory selection tool - only on directory pages dirtags - directory tool - only on directory pages menu_preview - preview a menu - only on menu edit pages chatroom_list - list of chatrooms for the page owner bookmarkedchats - list of bookmarked chatrooms collected on this site for the current observer suggestedchats - \"interesting\" chatrooms chosen for the current observer item - displays a single webpage item by mid or page title args: channel_id - channel that owns the content, defualt is the profile_uid mid - message_id of webpage to display (must be webpage, not a conversation item) title - URL page title of webpage (must provide one of either title or mid) photo - display a single photo args: src - URL of photo, must be http or https zrl - use zid authenticated link style - CSS style string cover_photo - display the cover photo for the selected channel args: channel_id - channel to use, default is the profile_uid style - CSS style string (default is dynamically resized to width of region) photo_rand - display a random photo from one of your photo albums. Photo permissions are honoured args: album - album name (very strongly recommended if you have lots of photos) scale - typically 0 (original size), 1 (1024px), 2, (640px), or 3 (320px) style - CSS style string channel_id - if not your own random_block - display a random block element from your webpage design tools collection. Permissions are honoured. args: contains - only return blocks which include the contains string in the block name channel_id - if not your own tasklist - provide a task or to-do list for the currently logged-in channel. args: all - display completed tasks if all is non-zero. forums - provide a list of connected public forums with unseen counts for the current logged-in channel. activity - provide a list of authors of unread network content for the current logged-in channel. album - provides a widget containing a complete photo album from albums belonging to the page owner; this may be too large to present in a sidebar region as is best implemented as a content region widget. args: album - album name title - optional title, album name is used if not present Creating New Widgets Class Widgets To create a class-based widget named 'slugfish' create a file with the following contents: <?php namespace Zotlabs\\Widget; class Slugfish { function widget($args) { ... widget code goes here. ... The function returns a string which is the HTML content of the widget. ... $args is a named array which is passed any [var] variables from the layout editor ... For instance [widget=slugfish][var=count]3[/var][/widget] will populate $args with ... [ 'count' => 3 ] } The resultant file may be placed in widget/Slugfish/Slugfish.php , or Zotlabs/SiteWidgets/Slugfish.php . It also may be linked from a git repository using util/add_widget_repo. Traditional function based widget: If you want a widget named 'slugfish', create widget/widget_slugfish.php containing <?php function widget_slugfish($args) { .. widget code goes here. See above information for class-based widgets for details. } include doc/macros/main_footer.bb;","title":"Core Widgets"},{"location":"admin/widgets/#core-widgets","text":"Some/many of these widgets have restrictions which may restrict the type of page where they may appear or may require login clock - displays the current time args: military (1 or 0) - use 24 hour time as opposed to AM/PM profile - displays a profile sidebar on pages which load profiles (pages with nickname in the URL) tagcloud - display a tagcloud of webpage items args: count - number of items to return (default 24) collections - privacy group selector for the current logged in channel args: mode - one of \"conversation\", \"group\", \"abook\" depending on module suggestions - friend suggestions for the current logged on channel follow - presents a text box for following another channel notes - private notes area for the current logged in channel if private_notes feature is enabled savedsearch - network/matrix search with save - must be logged in and savedsearch feature enabled filer - select filed items from network/matrix stream - must be logged in archive - date range selector for network and channel pages args: 'wall' - 1 or 0, limit to wall posts or network/matrix posts (default) fullprofile - same as profile currently categories - categories filter (channel page) tagcloud_wall - tagcloud for channel page only args: 'limit' - number of tags to return (default 50) catcloud_wall - tagcloud for channel page categories args: 'limit' - number of categories to return (default 50) affinity - affinity slider for network page - must be logged in settings_menu - sidebar menu for settings page, must be logged in mailmenu - sidebar menu for private message page - must be logged in design_tools - design tools menu for webpage building pages, must be logged in findpeople - tools to find other channels photo_albums - list photo albums of the current page owner with a selector menu vcard - mini profile sidebar for the person of interest (page owner, whatever) dirsafemode - directory selection tool - only on directory pages dirsort - directory selection tool - only on directory pages dirtags - directory tool - only on directory pages menu_preview - preview a menu - only on menu edit pages chatroom_list - list of chatrooms for the page owner bookmarkedchats - list of bookmarked chatrooms collected on this site for the current observer suggestedchats - \"interesting\" chatrooms chosen for the current observer item - displays a single webpage item by mid or page title args: channel_id - channel that owns the content, defualt is the profile_uid mid - message_id of webpage to display (must be webpage, not a conversation item) title - URL page title of webpage (must provide one of either title or mid) photo - display a single photo args: src - URL of photo, must be http or https zrl - use zid authenticated link style - CSS style string cover_photo - display the cover photo for the selected channel args: channel_id - channel to use, default is the profile_uid style - CSS style string (default is dynamically resized to width of region) photo_rand - display a random photo from one of your photo albums. Photo permissions are honoured args: album - album name (very strongly recommended if you have lots of photos) scale - typically 0 (original size), 1 (1024px), 2, (640px), or 3 (320px) style - CSS style string channel_id - if not your own random_block - display a random block element from your webpage design tools collection. Permissions are honoured. args: contains - only return blocks which include the contains string in the block name channel_id - if not your own tasklist - provide a task or to-do list for the currently logged-in channel. args: all - display completed tasks if all is non-zero. forums - provide a list of connected public forums with unseen counts for the current logged-in channel. activity - provide a list of authors of unread network content for the current logged-in channel. album - provides a widget containing a complete photo album from albums belonging to the page owner; this may be too large to present in a sidebar region as is best implemented as a content region widget. args: album - album name title - optional title, album name is used if not present","title":"Core Widgets"},{"location":"admin/widgets/#creating-new-widgets","text":"","title":"Creating New Widgets"},{"location":"admin/widgets/#class-widgets","text":"To create a class-based widget named 'slugfish' create a file with the following contents: <?php namespace Zotlabs\\Widget; class Slugfish { function widget($args) { ... widget code goes here. ... The function returns a string which is the HTML content of the widget. ... $args is a named array which is passed any [var] variables from the layout editor ... For instance [widget=slugfish][var=count]3[/var][/widget] will populate $args with ... [ 'count' => 3 ] } The resultant file may be placed in widget/Slugfish/Slugfish.php , or Zotlabs/SiteWidgets/Slugfish.php . It also may be linked from a git repository using util/add_widget_repo. Traditional function based widget: If you want a widget named 'slugfish', create widget/widget_slugfish.php containing <?php function widget_slugfish($args) { .. widget code goes here. See above information for class-based widgets for details. }","title":"Class Widgets"},{"location":"admin/widgets/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"api/","text":"","title":"Index"},{"location":"api/api_albums/","text":"API albums Description: list photo albums GET /api/z/1.0/albums Output: text - textual name total - number of photos in this album url - web URL urlencode - textual name, urlencoded bin2hex - textual name using bin2hex (which is used in the web URL link) Example: { \"success\": true, \"albums\": [ { \"text\": \"/\", \"total\": \"2\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/\", \"urlencode\": \"\", \"bin2hex\": \"\" }, { \"text\": \"2016-01\", \"total\": \"6\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3031\", \"urlencode\": \"2016-01\", \"bin2hex\": \"323031362d3031\" }, { \"text\": \"2016-02\", \"total\": \"7\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3032\", \"urlencode\": \"2016-02\", \"bin2hex\": \"323031362d3032\" }, { \"text\": \"Cover Photos\", \"total\": \"5\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/436f7665722050686f746f73\", \"urlencode\": \"Cover+Photos\", \"bin2hex\": \"436f7665722050686f746f73\" }, { \"text\": \"Profile Photos\", \"total\": \"26\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/50726f66696c652050686f746f73\", \"urlencode\": \"Profile+Photos\", \"bin2hex\": \"50726f66696c652050686f746f73\" } ] }","title":"API albums"},{"location":"api/api_albums/#api-albums","text":"Description: list photo albums GET /api/z/1.0/albums Output: text - textual name total - number of photos in this album url - web URL urlencode - textual name, urlencoded bin2hex - textual name using bin2hex (which is used in the web URL link) Example: { \"success\": true, \"albums\": [ { \"text\": \"/\", \"total\": \"2\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/\", \"urlencode\": \"\", \"bin2hex\": \"\" }, { \"text\": \"2016-01\", \"total\": \"6\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3031\", \"urlencode\": \"2016-01\", \"bin2hex\": \"323031362d3031\" }, { \"text\": \"2016-02\", \"total\": \"7\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/323031362d3032\", \"urlencode\": \"2016-02\", \"bin2hex\": \"323031362d3032\" }, { \"text\": \"Cover Photos\", \"total\": \"5\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/436f7665722050686f746f73\", \"urlencode\": \"Cover+Photos\", \"bin2hex\": \"436f7665722050686f746f73\" }, { \"text\": \"Profile Photos\", \"total\": \"26\", \"url\": \"https://xyz.macgirvin.com/photos/hubzilla/album/50726f66696c652050686f746f73\", \"urlencode\": \"Profile+Photos\", \"bin2hex\": \"50726f66696c652050686f746f73\" } ] }","title":"API albums"},{"location":"api/api_filedata/","text":"API filedata Provides the ability to download a file from cloud storage in chunks GET /api/z/1.0/filedata Required: - file_id attach.hash of desired file ('begins with' match) Optional: - start starting byte of returned data in file (counting from 0) - length length (prior to base64 encoding) of chunk to download Returns: attach (DB) structure with base64 encoded 'content' comprised of the desired chunk Example: https://xyz.macgirvin.com/api/z/1.0/filedata?f=&file_id=9f5217770fd&start=0&length=48 Returns: { \"attach\": { \"id\": \"107\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"9f5217770fd55d563bd77f84d534d8e119a187514bbd391714626cd9c0e60207\", \"creator\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"filename\": \"pcxtopbm.c\", \"filetype\": \"application/octet-stream\", \"filesize\": \"3934\", \"revision\": \"0\", \"folder\": \"\", \"flags\": \"0\", \"is_dir\": \"0\", \"is_photo\": \"0\", \"os_storage\": \"1\", \"os_path\": \"\", \"display_path\": \"\", \"content\": \"LyogcGN4dG9wYm0uYyAtIGNvbnZlcnQgUEMgcGFpbnRicnVzaCAoLnBjeCkgZmls\", \"created\": \"2016-07-24 23:13:01\", \"edited\": \"2016-07-24 23:13:01\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\", \"start\": 0, \"length\": 48 } }","title":"API filedata"},{"location":"api/api_filedata/#api-filedata","text":"Provides the ability to download a file from cloud storage in chunks GET /api/z/1.0/filedata Required: - file_id attach.hash of desired file ('begins with' match) Optional: - start starting byte of returned data in file (counting from 0) - length length (prior to base64 encoding) of chunk to download Returns: attach (DB) structure with base64 encoded 'content' comprised of the desired chunk Example: https://xyz.macgirvin.com/api/z/1.0/filedata?f=&file_id=9f5217770fd&start=0&length=48 Returns: { \"attach\": { \"id\": \"107\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"9f5217770fd55d563bd77f84d534d8e119a187514bbd391714626cd9c0e60207\", \"creator\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"filename\": \"pcxtopbm.c\", \"filetype\": \"application/octet-stream\", \"filesize\": \"3934\", \"revision\": \"0\", \"folder\": \"\", \"flags\": \"0\", \"is_dir\": \"0\", \"is_photo\": \"0\", \"os_storage\": \"1\", \"os_path\": \"\", \"display_path\": \"\", \"content\": \"LyogcGN4dG9wYm0uYyAtIGNvbnZlcnQgUEMgcGFpbnRicnVzaCAoLnBjeCkgZmls\", \"created\": \"2016-07-24 23:13:01\", \"edited\": \"2016-07-24 23:13:01\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\", \"start\": 0, \"length\": 48 } }","title":"API filedata"},{"location":"api/api_files/","text":"API files List file storage (attach DB) GET /api/z/1.0/files Options: - hash return only entries matching hash (exactly) - filename return only entries matching filename (substring) - filetype return only entries matching filetype/mimetype (substring) - start start at record (default 0) - records number of records to return or 0 for unlimited Example: curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/files -d filetype=multipart/mixed Returns: { \"success\": true, \"results\": [ { \"id\": \"1\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"44ee8b2a1a7f36dea07b93b7747a2383a1bc0fdd08339e8928bfcbe45f65d939\", \"filename\": \"Profile Photos\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-02 21:51:17\", \"edited\": \"2016-01-02 21:51:17\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" }, { \"id\": \"12\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"71883f1fc64af33889229cbc79c5a056deeec5fc277d765f182f19073e1b2998\", \"filename\": \"Cover Photos\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-15 00:24:33\", \"edited\": \"2016-01-15 00:24:33\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" }, { \"id\": \"16\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"f48f7ec3278499d1dd86b72c3207beaaf4717b07df5cc9b373f14d7aad2e1bcd\", \"filename\": \"2016-01\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-22 03:24:55\", \"edited\": \"2016-01-22 03:26:57\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" } ] }","title":"API files"},{"location":"api/api_files/#api-files","text":"List file storage (attach DB) GET /api/z/1.0/files Options: - hash return only entries matching hash (exactly) - filename return only entries matching filename (substring) - filetype return only entries matching filetype/mimetype (substring) - start start at record (default 0) - records number of records to return or 0 for unlimited Example: curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/files -d filetype=multipart/mixed Returns: { \"success\": true, \"results\": [ { \"id\": \"1\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"44ee8b2a1a7f36dea07b93b7747a2383a1bc0fdd08339e8928bfcbe45f65d939\", \"filename\": \"Profile Photos\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-02 21:51:17\", \"edited\": \"2016-01-02 21:51:17\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" }, { \"id\": \"12\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"71883f1fc64af33889229cbc79c5a056deeec5fc277d765f182f19073e1b2998\", \"filename\": \"Cover Photos\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-15 00:24:33\", \"edited\": \"2016-01-15 00:24:33\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" }, { \"id\": \"16\", \"aid\": \"1\", \"uid\": \"2\", \"hash\": \"f48f7ec3278499d1dd86b72c3207beaaf4717b07df5cc9b373f14d7aad2e1bcd\", \"filename\": \"2016-01\", \"filetype\": \"multipart/mixed\", \"filesize\": \"0\", \"revision\": \"0\", \"folder\": \"\", \"os_storage\": \"1\", \"is_dir\": \"1\", \"is_photo\": \"0\", \"flags\": \"0\", \"created\": \"2016-01-22 03:24:55\", \"edited\": \"2016-01-22 03:26:57\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\" } ] }","title":"API files"},{"location":"api/api_group_members/","text":"API group_members GET /api/z/1.0/group_members Required: group_id or group_name Returns: group_member+abook+xchan (DB join) for each member of the privacy group [ { \"id\": \"1\", \"uid\": \"2\", \"gid\": \"1\", \"xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"abook_id\": \"2\", \"abook_account\": \"1\", \"abook_channel\": \"2\", \"abook_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"abook_my_perms\": \"218555\", \"abook_their_perms\": \"0\", \"abook_closeness\": \"0\", \"abook_created\": \"2016-01-02 21:16:26\", \"abook_updated\": \"2016-01-02 21:16:26\", \"abook_connected\": \"0000-00-00 00:00:00\", \"abook_dob\": \"0000-00-00 00:00:00\", \"abook_flags\": \"0\", \"abook_blocked\": \"0\", \"abook_ignored\": \"0\", \"abook_hidden\": \"0\", \"abook_archived\": \"0\", \"abook_pending\": \"0\", \"abook_unconnected\": \"0\", \"abook_self\": \"1\", \"abook_feed\": \"0\", \"abook_profile\": \"\", \"abook_incl\": \"\", \"abook_excl\": \"\", \"abook_instance\": \"\", \"xchan_hash\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"xchan_guid\": \"lql-1VnxtiO4-WF0h72wLX1Fu8szzHDOXgQaTbELwXW77k8AKFfh-hYr70vqMrc3SSvWN-Flrc5HFhRTWB7ICw\", \"xchan_guid_sig\": \"PafvEL0VpKfxATxlCqDjfOeSIMdmpr3iU7X-Sysa1h5LzDpjSXsjO37tYZL-accb1M5itLlfnW5epkTa5I4flsW21zSY1A2jCuBQUTLLGV7rNyyBy7lgqJUFvAMRx0TfXzP9lcaPqlM9T1tA6jfWOsOmkdzwofGeXBnsjGfjsO2xdGYe6vwjOU0DSavukvzDMnOayB9DekpvDnaNBTxeGLM45Skzr7ZEMcNF7TeXMbnvpfLaALYEKeQs9bGH-UgAG8fBWgzVAzeBfx_XSR1rdixjyiZGP0kq0h35SlmMPcEjliodOBFwMXqpXFB7Ibp4F6o6te2p2ErViJccQVG8VNKB6SbKNXY6bhP5zVcVsJ-vR-p4xXoYJJvzTN7yTDsGAXHOLF4ZrXbo5yi5gFAlIrTLAF2EdWQwxSGyLRWKxG8PrDkzEzX6cJJ0VRcLh5z6OI5QqQNdeghPZbshMFMJSc_ApCPi9_hI4ZfctCIOi3T6bdgTNKryLm5fhy_eqjwLAZTGP-aUBgLZpb1mf2UojBn6Ey9cCyq-0T2RWyk-FcIcbV4qJ-p_8oODqw13Qs5FYkjLr1bGBq82SuolkYrXEwQClxnrfKa4KYc2_eHAXPL01iS9zVnI1ySOCNJshB97Odpooc4wk7Nb2Fo-Q6THU9zuu0uK_-JbK7IIl6go2qA\", \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA18JB76lyP4zzL/y7BCej\\neJnfZIWZNtM3MZvI1zEVMWmmwOS+u/yH8oPwyaDk4Y/tnj8GzMPj1lCGVRcd8EJa\\nNrCMd50HODA5EsJtxpsOzRcILYjOcTtIAG1K4LtKqELi9ICAaFp0fNfa+Jf0eCek\\nvPusx2/ORhy+o23hFoSMhL86o2gmaiRnmnA3Vz4ZMG92ieJEDMXt9IA1EkIqS4y5\\nBPZfVPLD1pv8iivj+dtN1XjwplgjUbtxmU0/Ej808nHppscRIqx/XJ0XZU90oNGw\\n/wYoK2EzJlPbRsAkwNqoFrAYlr5HPpn4BJ2ebFYQgWBUraD7HwS5atsQEaxGfO21\\nlUP0+lDg9t3CXvudDj0UG1jiEKbVIGA+4aG0GN2DSC5AyRq/GRxqyay5W2vQbAZH\\nyvxPGrZFO24I65g3pjhpjEsLqZ4ilTLQoLMs0drCIcRm5RxMUo4s/LMg16lT4cEk\\n1qRtk2X0Sb1AMQQ2uRXiVtWz77QHMONEYkf6OW4SHbwcv5umvlv69NYEGfCcbgq0\\nAV7U4/BWztUz/SWj4r194CG43I9I8dmaEx9CFA/XMePIAXQUuABfe1QMOR6IxLpq\\nTHG1peZgHQKeGz4aSGrhQkZNNoOVNaZoIfcvopxcHDTZLigseEIaPPha4WFYoKPi\\nUPbZ5o8gTLc750uzrnb2jwcCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"xchan_photo_mimetype\": \"image/png\", \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/profile/l/2\", \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/profile/m/2\", \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/profile/s/2\", \"xchan_addr\": \"teller@xyz.macgirvin.com\", \"xchan_url\": \"https://xyz.macgirvin.com/channel/teller\", \"xchan_connurl\": \"https://xyz.macgirvin.com/poco/teller\", \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&url=%s\", \"xchan_connpage\": \"\", \"xchan_name\": \"Teller\", \"xchan_network\": \"zot\", \"xchan_instance_url\": \"\", \"xchan_flags\": \"0\", \"xchan_photo_date\": \"2016-10-19 01:26:50\", \"xchan_name_date\": \"2016-01-02 21:16:26\", \"xchan_hidden\": \"0\", \"xchan_orphan\": \"0\", \"xchan_censored\": \"0\", \"xchan_selfcensored\": \"0\", \"xchan_system\": \"0\", \"xchan_pubforum\": \"0\", \"xchan_deleted\": \"0\" }, { \"id\": \"12\", \"uid\": \"2\", \"gid\": \"1\", \"xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"abook_id\": \"24\", \"abook_account\": \"1\", \"abook_channel\": \"2\", \"abook_xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"abook_my_perms\": \"218555\", \"abook_their_perms\": \"218555\", \"abook_closeness\": \"80\", \"abook_created\": \"2016-01-27 00:48:43\", \"abook_updated\": \"2016-12-04 17:16:58\", \"abook_connected\": \"2016-12-04 17:16:58\", \"abook_dob\": \"0001-01-01 00:00:00\", \"abook_flags\": \"0\", \"abook_blocked\": \"0\", \"abook_ignored\": \"0\", \"abook_hidden\": \"0\", \"abook_archived\": \"0\", \"abook_pending\": \"0\", \"abook_unconnected\": \"0\", \"abook_self\": \"0\", \"abook_feed\": \"0\", \"abook_profile\": \"debb5236efb1626cfbad33ccb49892801e5f844aa04bf81f580cfa7d13204819\", \"abook_incl\": \"\", \"abook_excl\": \"\", \"abook_instance\": \"\", \"xchan_hash\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"xchan_guid\": \"d5EMLlt1tHHZ0dANoA7B5Wq9UgXoWcFS9-gXOkL_AAejcPApoQRyxfHTuu8DoTbUaO-bYmX5HPuWuK9PHyqNmA\", \"xchan_guid_sig\": \"CVWEMRPtzI1YcHfnnWHTuv3H964OAmSElgUfxMoX6RdQdxNpqb_POirpVuyP8s3W17mVCfO5V9IAjkg5iKcqCk6YcvOD_egmMy-AnM9TC1kKndQHw55CunD82Q8K_xBNSXkSROizcNkKh9DVLjJPFjW1AqtI4njkZ3EMgrWqnbFRM1qPToUoCY9zM3tEMHoAD9YX1zP90wl40LzfN-dtcNWpSBbiz9owou62uzLbN7mrCwKOMlXLjwwGswRnxIsEnb3O-FXOs8hs0mArKe9snq1-BKeD16LyzxgwlpVLElzIJZGEZGtMdIJgeRzKuBvPjsOIpQ1yAkuOpFJ3nGCM-IPOIIjAmyVl5zD3xPVcxxpZlJRn5fG1Y-gnqTgsrEQCA7M6XPWQdrdHU4akZfyUyFJDhv3uM-jon9VzrYTBw68R0WA-1Z8WafEHA4qh5OWAj85lUarwhr7iTiEckH51ypPCPs6VbT6Pw7yMaxfjFOcipashQagx0tfOlDhE5dQANOXKASFtH1J9-CZY2MQdLPQ6u54d5whuHKMGaJ0V68pnmZ2rOn7g344Ah2WCJrm17jj60QsRMorqRFj7GMdPIA1XB8Wrk88MuYOe3Dhyuu6ZWKI7YTWJS690ZVkKUqAiNHqj0W86DtaiPUc_mmGR0fHl4Gksnko3WmCFv9q2X2E\", \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAoj2xCJktBA8Ww7Hp+ZNL\\nrNuQpo8UB/bfvRkIy+yua3xpF1TuXcnAH61kyRz8vXgOu/l2CyxQbIoaGslCV5Sy\\n8JKeNXe+IilUdSSEjMIwCPfSPsYnMHsSnHWmPmclvJwEtQUKOZmW5mMuVBvXy7D2\\njomFwc69AYphdyys6eQ7Dcn6+FRBiQbyMprZ5lxyVW+O4DuXVNa3ej2ebx0gCJZ4\\ntTIlBoKwEey91dY+FyKVFjdwfNczpmL7LgmZXqcVx+MG3mYgibwdVMiXVj5X06cs\\nV9hJ5Xi+Aklsv/UWJtjw9FVt7y9TLptnhh4Ra6T/MDmnBBIAkOR7P/X8cRv078MT\\nl0IMsP0RJcDEtTLtwHFVtDs6p52KDFqclKWbqmxmxqV3OTPVYtArRGIzgnJi/5ur\\nHRr5G6Cif7QY3UowsIOf78Qvy28LwSbdymgBAWwPPKIviXWxGO+9kMWdmPSUQrWy\\nK0+7YA9P9fBUFfn9Hc+p8SJQmQ6OAqLwrDGiPSOlGaNrbEqwqLGgIpXwK+lEFcFJ\\n3SPOjJRWdR2whlMxvpwX+39+H7dWN3vSa3Al4/Sq7qW8yW2rYwf+eGyp4Z0lRR+8\\nJxFMCwZkSw5g14YdlikAPojv5V1c6KuA5ieg8G1hwyONV7A4JHPyEdPt0W0TZi6C\\nCOVkPaC3xGrguETZpJfVpwUCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"xchan_photo_mimetype\": \"image/png\", \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-4\", \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-5\", \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-6\", \"xchan_addr\": \"cloner@xyz.macgirvin.com\", \"xchan_url\": \"http://abc.macgirvin.com/channel/cloner\", \"xchan_connurl\": \"http://abc.macgirvin.com/poco/cloner\", \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&url=%s\", \"xchan_connpage\": \"\", \"xchan_name\": \"Karen\", \"xchan_network\": \"zot\", \"xchan_instance_url\": \"\", \"xchan_flags\": \"0\", \"xchan_photo_date\": \"2016-03-31 19:59:20\", \"xchan_name_date\": \"2016-01-26 23:23:42\", \"xchan_hidden\": \"0\", \"xchan_orphan\": \"0\", \"xchan_censored\": \"0\", \"xchan_selfcensored\": \"0\", \"xchan_system\": \"0\", \"xchan_pubforum\": \"0\", \"xchan_deleted\": \"0\" } ]","title":"API group_members"},{"location":"api/api_group_members/#api-group_members","text":"GET /api/z/1.0/group_members Required: group_id or group_name Returns: group_member+abook+xchan (DB join) for each member of the privacy group [ { \"id\": \"1\", \"uid\": \"2\", \"gid\": \"1\", \"xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"abook_id\": \"2\", \"abook_account\": \"1\", \"abook_channel\": \"2\", \"abook_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"abook_my_perms\": \"218555\", \"abook_their_perms\": \"0\", \"abook_closeness\": \"0\", \"abook_created\": \"2016-01-02 21:16:26\", \"abook_updated\": \"2016-01-02 21:16:26\", \"abook_connected\": \"0000-00-00 00:00:00\", \"abook_dob\": \"0000-00-00 00:00:00\", \"abook_flags\": \"0\", \"abook_blocked\": \"0\", \"abook_ignored\": \"0\", \"abook_hidden\": \"0\", \"abook_archived\": \"0\", \"abook_pending\": \"0\", \"abook_unconnected\": \"0\", \"abook_self\": \"1\", \"abook_feed\": \"0\", \"abook_profile\": \"\", \"abook_incl\": \"\", \"abook_excl\": \"\", \"abook_instance\": \"\", \"xchan_hash\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"xchan_guid\": \"lql-1VnxtiO4-WF0h72wLX1Fu8szzHDOXgQaTbELwXW77k8AKFfh-hYr70vqMrc3SSvWN-Flrc5HFhRTWB7ICw\", \"xchan_guid_sig\": \"PafvEL0VpKfxATxlCqDjfOeSIMdmpr3iU7X-Sysa1h5LzDpjSXsjO37tYZL-accb1M5itLlfnW5epkTa5I4flsW21zSY1A2jCuBQUTLLGV7rNyyBy7lgqJUFvAMRx0TfXzP9lcaPqlM9T1tA6jfWOsOmkdzwofGeXBnsjGfjsO2xdGYe6vwjOU0DSavukvzDMnOayB9DekpvDnaNBTxeGLM45Skzr7ZEMcNF7TeXMbnvpfLaALYEKeQs9bGH-UgAG8fBWgzVAzeBfx_XSR1rdixjyiZGP0kq0h35SlmMPcEjliodOBFwMXqpXFB7Ibp4F6o6te2p2ErViJccQVG8VNKB6SbKNXY6bhP5zVcVsJ-vR-p4xXoYJJvzTN7yTDsGAXHOLF4ZrXbo5yi5gFAlIrTLAF2EdWQwxSGyLRWKxG8PrDkzEzX6cJJ0VRcLh5z6OI5QqQNdeghPZbshMFMJSc_ApCPi9_hI4ZfctCIOi3T6bdgTNKryLm5fhy_eqjwLAZTGP-aUBgLZpb1mf2UojBn6Ey9cCyq-0T2RWyk-FcIcbV4qJ-p_8oODqw13Qs5FYkjLr1bGBq82SuolkYrXEwQClxnrfKa4KYc2_eHAXPL01iS9zVnI1ySOCNJshB97Odpooc4wk7Nb2Fo-Q6THU9zuu0uK_-JbK7IIl6go2qA\", \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA18JB76lyP4zzL/y7BCej\\neJnfZIWZNtM3MZvI1zEVMWmmwOS+u/yH8oPwyaDk4Y/tnj8GzMPj1lCGVRcd8EJa\\nNrCMd50HODA5EsJtxpsOzRcILYjOcTtIAG1K4LtKqELi9ICAaFp0fNfa+Jf0eCek\\nvPusx2/ORhy+o23hFoSMhL86o2gmaiRnmnA3Vz4ZMG92ieJEDMXt9IA1EkIqS4y5\\nBPZfVPLD1pv8iivj+dtN1XjwplgjUbtxmU0/Ej808nHppscRIqx/XJ0XZU90oNGw\\n/wYoK2EzJlPbRsAkwNqoFrAYlr5HPpn4BJ2ebFYQgWBUraD7HwS5atsQEaxGfO21\\nlUP0+lDg9t3CXvudDj0UG1jiEKbVIGA+4aG0GN2DSC5AyRq/GRxqyay5W2vQbAZH\\nyvxPGrZFO24I65g3pjhpjEsLqZ4ilTLQoLMs0drCIcRm5RxMUo4s/LMg16lT4cEk\\n1qRtk2X0Sb1AMQQ2uRXiVtWz77QHMONEYkf6OW4SHbwcv5umvlv69NYEGfCcbgq0\\nAV7U4/BWztUz/SWj4r194CG43I9I8dmaEx9CFA/XMePIAXQUuABfe1QMOR6IxLpq\\nTHG1peZgHQKeGz4aSGrhQkZNNoOVNaZoIfcvopxcHDTZLigseEIaPPha4WFYoKPi\\nUPbZ5o8gTLc750uzrnb2jwcCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"xchan_photo_mimetype\": \"image/png\", \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/profile/l/2\", \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/profile/m/2\", \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/profile/s/2\", \"xchan_addr\": \"teller@xyz.macgirvin.com\", \"xchan_url\": \"https://xyz.macgirvin.com/channel/teller\", \"xchan_connurl\": \"https://xyz.macgirvin.com/poco/teller\", \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&url=%s\", \"xchan_connpage\": \"\", \"xchan_name\": \"Teller\", \"xchan_network\": \"zot\", \"xchan_instance_url\": \"\", \"xchan_flags\": \"0\", \"xchan_photo_date\": \"2016-10-19 01:26:50\", \"xchan_name_date\": \"2016-01-02 21:16:26\", \"xchan_hidden\": \"0\", \"xchan_orphan\": \"0\", \"xchan_censored\": \"0\", \"xchan_selfcensored\": \"0\", \"xchan_system\": \"0\", \"xchan_pubforum\": \"0\", \"xchan_deleted\": \"0\" }, { \"id\": \"12\", \"uid\": \"2\", \"gid\": \"1\", \"xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"abook_id\": \"24\", \"abook_account\": \"1\", \"abook_channel\": \"2\", \"abook_xchan\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"abook_my_perms\": \"218555\", \"abook_their_perms\": \"218555\", \"abook_closeness\": \"80\", \"abook_created\": \"2016-01-27 00:48:43\", \"abook_updated\": \"2016-12-04 17:16:58\", \"abook_connected\": \"2016-12-04 17:16:58\", \"abook_dob\": \"0001-01-01 00:00:00\", \"abook_flags\": \"0\", \"abook_blocked\": \"0\", \"abook_ignored\": \"0\", \"abook_hidden\": \"0\", \"abook_archived\": \"0\", \"abook_pending\": \"0\", \"abook_unconnected\": \"0\", \"abook_self\": \"0\", \"abook_feed\": \"0\", \"abook_profile\": \"debb5236efb1626cfbad33ccb49892801e5f844aa04bf81f580cfa7d13204819\", \"abook_incl\": \"\", \"abook_excl\": \"\", \"abook_instance\": \"\", \"xchan_hash\": \"xuSMUYxw1djBB97qXsbrBN1nzJH_gFwQL6pS4zIy8fuusOfBxNlMiVb4h_q5tOEvpE7tYf1EsryjNciMuPIj5w\", \"xchan_guid\": \"d5EMLlt1tHHZ0dANoA7B5Wq9UgXoWcFS9-gXOkL_AAejcPApoQRyxfHTuu8DoTbUaO-bYmX5HPuWuK9PHyqNmA\", \"xchan_guid_sig\": \"CVWEMRPtzI1YcHfnnWHTuv3H964OAmSElgUfxMoX6RdQdxNpqb_POirpVuyP8s3W17mVCfO5V9IAjkg5iKcqCk6YcvOD_egmMy-AnM9TC1kKndQHw55CunD82Q8K_xBNSXkSROizcNkKh9DVLjJPFjW1AqtI4njkZ3EMgrWqnbFRM1qPToUoCY9zM3tEMHoAD9YX1zP90wl40LzfN-dtcNWpSBbiz9owou62uzLbN7mrCwKOMlXLjwwGswRnxIsEnb3O-FXOs8hs0mArKe9snq1-BKeD16LyzxgwlpVLElzIJZGEZGtMdIJgeRzKuBvPjsOIpQ1yAkuOpFJ3nGCM-IPOIIjAmyVl5zD3xPVcxxpZlJRn5fG1Y-gnqTgsrEQCA7M6XPWQdrdHU4akZfyUyFJDhv3uM-jon9VzrYTBw68R0WA-1Z8WafEHA4qh5OWAj85lUarwhr7iTiEckH51ypPCPs6VbT6Pw7yMaxfjFOcipashQagx0tfOlDhE5dQANOXKASFtH1J9-CZY2MQdLPQ6u54d5whuHKMGaJ0V68pnmZ2rOn7g344Ah2WCJrm17jj60QsRMorqRFj7GMdPIA1XB8Wrk88MuYOe3Dhyuu6ZWKI7YTWJS690ZVkKUqAiNHqj0W86DtaiPUc_mmGR0fHl4Gksnko3WmCFv9q2X2E\", \"xchan_pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAoj2xCJktBA8Ww7Hp+ZNL\\nrNuQpo8UB/bfvRkIy+yua3xpF1TuXcnAH61kyRz8vXgOu/l2CyxQbIoaGslCV5Sy\\n8JKeNXe+IilUdSSEjMIwCPfSPsYnMHsSnHWmPmclvJwEtQUKOZmW5mMuVBvXy7D2\\njomFwc69AYphdyys6eQ7Dcn6+FRBiQbyMprZ5lxyVW+O4DuXVNa3ej2ebx0gCJZ4\\ntTIlBoKwEey91dY+FyKVFjdwfNczpmL7LgmZXqcVx+MG3mYgibwdVMiXVj5X06cs\\nV9hJ5Xi+Aklsv/UWJtjw9FVt7y9TLptnhh4Ra6T/MDmnBBIAkOR7P/X8cRv078MT\\nl0IMsP0RJcDEtTLtwHFVtDs6p52KDFqclKWbqmxmxqV3OTPVYtArRGIzgnJi/5ur\\nHRr5G6Cif7QY3UowsIOf78Qvy28LwSbdymgBAWwPPKIviXWxGO+9kMWdmPSUQrWy\\nK0+7YA9P9fBUFfn9Hc+p8SJQmQ6OAqLwrDGiPSOlGaNrbEqwqLGgIpXwK+lEFcFJ\\n3SPOjJRWdR2whlMxvpwX+39+H7dWN3vSa3Al4/Sq7qW8yW2rYwf+eGyp4Z0lRR+8\\nJxFMCwZkSw5g14YdlikAPojv5V1c6KuA5ieg8G1hwyONV7A4JHPyEdPt0W0TZi6C\\nCOVkPaC3xGrguETZpJfVpwUCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"xchan_photo_mimetype\": \"image/png\", \"xchan_photo_l\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-4\", \"xchan_photo_m\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-5\", \"xchan_photo_s\": \"https://xyz.macgirvin.com/photo/9da63aa910ea14e1501ee1a749d181a6-6\", \"xchan_addr\": \"cloner@xyz.macgirvin.com\", \"xchan_url\": \"http://abc.macgirvin.com/channel/cloner\", \"xchan_connurl\": \"http://abc.macgirvin.com/poco/cloner\", \"xchan_follow\": \"https://xyz.macgirvin.com/follow?f=&url=%s\", \"xchan_connpage\": \"\", \"xchan_name\": \"Karen\", \"xchan_network\": \"zot\", \"xchan_instance_url\": \"\", \"xchan_flags\": \"0\", \"xchan_photo_date\": \"2016-03-31 19:59:20\", \"xchan_name_date\": \"2016-01-26 23:23:42\", \"xchan_hidden\": \"0\", \"xchan_orphan\": \"0\", \"xchan_censored\": \"0\", \"xchan_selfcensored\": \"0\", \"xchan_system\": \"0\", \"xchan_pubforum\": \"0\", \"xchan_deleted\": \"0\" } ]","title":"API group_members"},{"location":"api/api_item_update/","text":"API item/update Usage: POST /api/z/1.0/item/update Description: item/update posts an item (typically a conversation item or post, but can be any item) using form input. Required: body text/bbcode contents by default. Optional: $_FILES['media'] uploaded media file to include with post title title of post/item contact_allow array of xchan.xchan_hash allowed to view this item group_allow array of group.hash allowed to view this item contact_deny array of xchan.xchan_hash not allowed to view this item group_deny array of group.hash not allowed to view this item coord geographic coordinates location freefrom location expire datetime this post will expire or be removed mimetype mimetype if not text/bbcode parent item.id of parent to this post (makes it a comment) parent_mid alternate form of parent using message_id remote_xchan xchan.xchan_hash of this message author if not the channel owner consensus boolean set to true if this is a consensus or voting item (default false) nocomment boolean set to true if comments are to be disabled (default false) origin do not use this without reading the code namespace persistent identity for a remote network or service remote_id message_id of this resource on a remote network or service message_id message_id of this item (leave unset to generate one) created datetime of message creation post_id existing item.id if this is an edit operation app application or network name to display with item categories comma separated categories for this item webpage item.page_type if not 0 pagetitle for webpage and design elements, the 'page name' layout_mid item.mid of layout for this design element plink permalink for this item if different than the default verb activitystream verb for this item/activity obj_type activitystream object type for this item/activity Example: curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/item/update -d body=\"hello world\" Returns: { \"success\": true, \"item_id\": \"2245\", \"item\": { \"id\": \"2245\", \"mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"aid\": \"1\", \"uid\": \"2\", \"parent\": \"2245\", \"parent_mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"thr_parent\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"created\": \"2016-12-03 20:00:12\", \"edited\": \"2016-12-03 20:00:12\", \"expires\": \"0001-01-01 00:00:00\", \"commented\": \"2016-12-03 20:00:12\", \"received\": \"2016-12-03 20:00:12\", \"changed\": \"2016-12-03 20:00:12\", \"comments_closed\": \"0001-01-01 00:00:00\", \"owner_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"author_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"source_xchan\": \"\", \"mimetype\": \"text/bbcode\", \"title\": \"\", \"body\": \"hello world\", \"html\": \"\", \"app\": \"\", \"lang\": \"\", \"revision\": \"0\", \"verb\": \"http://activitystrea.ms/schema/1.0/post\", \"obj_type\": \"http://activitystrea.ms/schema/1.0/note\", \"obj\": \"\", \"tgt_type\": \"\", \"target\": \"\", \"layout_mid\": \"\", \"postopts\": \"\", \"route\": \"\", \"llink\": \"https://xyz.macgirvin.com/display/14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"plink\": \"https://xyz.macgirvin.com/channel/mychannel/?f=&mid=14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"resource_id\": \"\", \"resource_type\": \"\", \"attach\": \"\", \"sig\": \"sa4TOQNfHtV13HDZ1tuQGWNBpZp-nWhT2GMrZEmelXxa_IvEepD2SEsCTWOBqM8OKPJLfNy8_i-ORXjrOIIgAa_aT8cw5vka7Q0C8L9eEb_LegwQ_BtH0CXO5uT30e_8uowkwzh6kmlVg1ntD8QqrGgD5jTET_fMQOIw4gQUBh40GDG9RB4QnPp_MKsgemGrADnRk2vHO7-bR32yQ0JI-8G-eyeqGaaJmIwkHoi0vXsfjZtU7ijSLuKEBWboNjKEDU89-vQ1c5Kh1r0pmjiDk-a5JzZTYShpuhVA-vQgEcADA7wkf4lJZCYNwu3FRwHTvhSMdF0nmyv3aPFglQDky38-SAXZyQSvd7qlABHGCVVDmYrYaiq7Dh4rRENbAUf-UJFHPCVB7NRg34R8HIqmOKq1Su99bIWaoI2zuAQEVma9wLqMoFsluFhxX58KeVtlCZlro7tZ6z619-dthS_fwt0cL_2dZ3QwjG1P36Q4Y4KrCTpntn9ot5osh-HjVQ01h1I9yNCj6XPgYJ8Im3KT_G4hmMDFM7H9RUrYLl2o9XYyiS2nRrf4aJHa0UweBlAY4zcQG34bw2AMGCY53mwsSArf4Hs3rKu5GrGphuwYX0lHa7XEKMglwBWPWHI49q7-oNWr7aWwn1FnfaMfl4cQppCMtKESMNRKm_nb9Dsh5e0\", \"diaspora_meta\": \"\", \"location\": \"\", \"coord\": \"\", \"public_policy\": \"\", \"comment_policy\": \"contacts\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\", \"item_restrict\": \"0\", \"item_flags\": \"0\", \"item_private\": \"0\", \"item_origin\": \"1\", \"item_unseen\": \"0\", \"item_starred\": \"0\", \"item_uplink\": \"0\", \"item_consensus\": \"0\", \"item_wall\": \"1\", \"item_thread_top\": \"1\", \"item_notshown\": \"0\", \"item_nsfw\": \"0\", \"item_relay\": \"0\", \"item_mentionsme\": \"0\", \"item_nocomment\": \"0\", \"item_obscured\": \"0\", \"item_verified\": \"1\", \"item_retained\": \"0\", \"item_rss\": \"0\", \"item_deleted\": \"0\", \"item_type\": \"0\", \"item_hidden\": \"0\", \"item_unpublished\": \"0\", \"item_delayed\": \"0\", \"item_pending_remove\": \"0\", \"item_blocked\": \"0\" } }","title":"API item/update"},{"location":"api/api_item_update/#api-itemupdate","text":"Usage: POST /api/z/1.0/item/update Description: item/update posts an item (typically a conversation item or post, but can be any item) using form input. Required: body text/bbcode contents by default. Optional: $_FILES['media'] uploaded media file to include with post title title of post/item contact_allow array of xchan.xchan_hash allowed to view this item group_allow array of group.hash allowed to view this item contact_deny array of xchan.xchan_hash not allowed to view this item group_deny array of group.hash not allowed to view this item coord geographic coordinates location freefrom location expire datetime this post will expire or be removed mimetype mimetype if not text/bbcode parent item.id of parent to this post (makes it a comment) parent_mid alternate form of parent using message_id remote_xchan xchan.xchan_hash of this message author if not the channel owner consensus boolean set to true if this is a consensus or voting item (default false) nocomment boolean set to true if comments are to be disabled (default false) origin do not use this without reading the code namespace persistent identity for a remote network or service remote_id message_id of this resource on a remote network or service message_id message_id of this item (leave unset to generate one) created datetime of message creation post_id existing item.id if this is an edit operation app application or network name to display with item categories comma separated categories for this item webpage item.page_type if not 0 pagetitle for webpage and design elements, the 'page name' layout_mid item.mid of layout for this design element plink permalink for this item if different than the default verb activitystream verb for this item/activity obj_type activitystream object type for this item/activity Example: curl -u mychannel:mypassword https://xyz.macgirvin.com/api/z/1.0/item/update -d body=\"hello world\" Returns: { \"success\": true, \"item_id\": \"2245\", \"item\": { \"id\": \"2245\", \"mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"aid\": \"1\", \"uid\": \"2\", \"parent\": \"2245\", \"parent_mid\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"thr_parent\": \"14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"created\": \"2016-12-03 20:00:12\", \"edited\": \"2016-12-03 20:00:12\", \"expires\": \"0001-01-01 00:00:00\", \"commented\": \"2016-12-03 20:00:12\", \"received\": \"2016-12-03 20:00:12\", \"changed\": \"2016-12-03 20:00:12\", \"comments_closed\": \"0001-01-01 00:00:00\", \"owner_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"author_xchan\": \"pgcJx1IQjuPkx8aI9qheJlBMZzJz-oTPjHy3h5pWlOVOriBO_cSiUhhqwhuZ74TYJ8_ECO3pPiRMWC0q8YPCQg\", \"source_xchan\": \"\", \"mimetype\": \"text/bbcode\", \"title\": \"\", \"body\": \"hello world\", \"html\": \"\", \"app\": \"\", \"lang\": \"\", \"revision\": \"0\", \"verb\": \"http://activitystrea.ms/schema/1.0/post\", \"obj_type\": \"http://activitystrea.ms/schema/1.0/note\", \"obj\": \"\", \"tgt_type\": \"\", \"target\": \"\", \"layout_mid\": \"\", \"postopts\": \"\", \"route\": \"\", \"llink\": \"https://xyz.macgirvin.com/display/14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"plink\": \"https://xyz.macgirvin.com/channel/mychannel/?f=&mid=14135cdecf6b8e3891224e4391748722114da6668eebbcb56fe4667b60b88249@xyz.macgirvin.com\", \"resource_id\": \"\", \"resource_type\": \"\", \"attach\": \"\", \"sig\": \"sa4TOQNfHtV13HDZ1tuQGWNBpZp-nWhT2GMrZEmelXxa_IvEepD2SEsCTWOBqM8OKPJLfNy8_i-ORXjrOIIgAa_aT8cw5vka7Q0C8L9eEb_LegwQ_BtH0CXO5uT30e_8uowkwzh6kmlVg1ntD8QqrGgD5jTET_fMQOIw4gQUBh40GDG9RB4QnPp_MKsgemGrADnRk2vHO7-bR32yQ0JI-8G-eyeqGaaJmIwkHoi0vXsfjZtU7ijSLuKEBWboNjKEDU89-vQ1c5Kh1r0pmjiDk-a5JzZTYShpuhVA-vQgEcADA7wkf4lJZCYNwu3FRwHTvhSMdF0nmyv3aPFglQDky38-SAXZyQSvd7qlABHGCVVDmYrYaiq7Dh4rRENbAUf-UJFHPCVB7NRg34R8HIqmOKq1Su99bIWaoI2zuAQEVma9wLqMoFsluFhxX58KeVtlCZlro7tZ6z619-dthS_fwt0cL_2dZ3QwjG1P36Q4Y4KrCTpntn9ot5osh-HjVQ01h1I9yNCj6XPgYJ8Im3KT_G4hmMDFM7H9RUrYLl2o9XYyiS2nRrf4aJHa0UweBlAY4zcQG34bw2AMGCY53mwsSArf4Hs3rKu5GrGphuwYX0lHa7XEKMglwBWPWHI49q7-oNWr7aWwn1FnfaMfl4cQppCMtKESMNRKm_nb9Dsh5e0\", \"diaspora_meta\": \"\", \"location\": \"\", \"coord\": \"\", \"public_policy\": \"\", \"comment_policy\": \"contacts\", \"allow_cid\": \"\", \"allow_gid\": \"\", \"deny_cid\": \"\", \"deny_gid\": \"\", \"item_restrict\": \"0\", \"item_flags\": \"0\", \"item_private\": \"0\", \"item_origin\": \"1\", \"item_unseen\": \"0\", \"item_starred\": \"0\", \"item_uplink\": \"0\", \"item_consensus\": \"0\", \"item_wall\": \"1\", \"item_thread_top\": \"1\", \"item_notshown\": \"0\", \"item_nsfw\": \"0\", \"item_relay\": \"0\", \"item_mentionsme\": \"0\", \"item_nocomment\": \"0\", \"item_obscured\": \"0\", \"item_verified\": \"1\", \"item_retained\": \"0\", \"item_rss\": \"0\", \"item_deleted\": \"0\", \"item_type\": \"0\", \"item_hidden\": \"0\", \"item_unpublished\": \"0\", \"item_delayed\": \"0\", \"item_pending_remove\": \"0\", \"item_blocked\": \"0\" } }","title":"API item/update"},{"location":"api/api_xchan/","text":"API xchan An xchan is a global location independent channel and is the primary record for a network identity. It may refer to channels on other websites, networks, or services. GET /api/z/1.0/xchan Required: one of [ address, hash, guid ] as GET parameters Returns a portable xchan structure Example: https://xyz.macgirvin.com/api/z/1.0/xchan?f=&address=mike@macgirvin.com Returns: { \"hash\": \"jr54M_y2l5NgHX5wBvP0KqWcAHuW23p1ld-6Vn63_pGTZklrI36LF8vUHMSKJMD8xzzkz7s2xxCx4-BOLNPaVA\", \"guid\": \"sebQ-IC4rmFn9d9iu17m4BXO-kHuNutWo2ySjeV2SIW1LzksUkss12xVo3m3fykYxN5HMcc7gUZVYv26asx-Pg\", \"guid_sig\": \"Llenlbl4zHo6-g4sa63MlQmTP5dRCrsPmXHHFmoCHG63BLq5CUZJRLS1vRrrr_MNxr7zob_Ykt_m5xPKe5H0_i4pDj-UdP8dPZqH2fqhhx00kuYL4YUMJ8gRr5eO17vsZQ3XxTcyKewtgeW0j7ytwMp6-hFVUx_Cq08MrXas429ZrjzaEwgTfxGnbgeQYQ0R5EXpHpEmoERnZx77VaEahftmdjAUx9R4YKAp13pGYadJOX5xnLfqofHQD8DyRHWeMJ4G1OfWPSOlXfRayrV_jhnFlZjMU7vOdQwHoCMoR5TFsRsHuzd-qepbvo3pzvQZRWnTNu6oPucgbf94p13QbalYRpBXKOxdTXJrGdESNhGvhtaZnpT9c1QVqC46jdfP0LOX2xrVdbvvG2JMWFv7XJUVjLSk_yjzY6or2VD4V6ztYcjpCi9d_WoNHruoxro_br1YO3KatySxJs-LQ7SOkQI60FpysfbphNyvYMkotwUFI59G08IGKTMu3-GPnV1wp7NOQD1yzJbGGEGSEEysmEP0SO9vnN45kp3MiqbffBGc1r4_YM4e7DPmqOGM94qksOcLOJk1HNESw2dQYWxWQTBXPfOJT6jW9_crGLMEOsZ3Jcss0XS9KzBUA2p_9osvvhUKuKXbNztqH0oZIWlg37FEVsDs_hUwUJpv2Ar09k4\", \"pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA7QCwvuEIwCHjhjbpz3Oc\\ntyei/Pz9nDksNbsc44Cm8jxYGMXsTPFXDZYCcCB5rcAhPPdZSlzaPkv4vPVcMIrw\\n5cdX0tvbwa3rNTng6uFE7qkt15D3YCTkwF0Y9FVZiZ2Ko+G23QeBt9wqb9dlDN1d\\nuPmu9BLYXIT/JXoBwf0vjIPFM9WBi5W/EHGaiuqw7lt0qI7zDGw77yO5yehKE4cu\\n7dt3SakrXphL70LGiZh2XGoLg9Gmpz98t+gvPAUEotAJxIUqnoiTA8jlxoiQjeRK\\nHlJkwMOGmRNPS33awPos0kcSxAywuBbh2X3aSqUMjcbE4cGJ++/13zoa6RUZRObC\\nZnaLYJxqYBh13/N8SfH7d005hecDxWnoYXeYuuMeT3a2hV0J84ztkJX5OoxIwk7S\\nWmvBq4+m66usn6LNL+p5IAcs93KbvOxxrjtQrzohBXc6+elfLVSQ1Rr9g5xbgpub\\npSc+hvzbB6p0tleDRzwAy9X16NI4DYiTj4nkmVjigNo9v2VPnAle5zSam86eiYLO\\nt2u9YRqysMLPKevNdj3CIvst+BaGGQONlQalRdIcq8Lin+BhuX+1TBgqyav4XD9K\\nd+JHMb1aBk/rFLI9/f2S3BJ1XqpbjXz7AbYlaCwKiJ836+HS8PmLKxwVOnpLMbfH\\nPYM8k83Lip4bEKIyAuf02qkCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"photo_mimetype\": \"image/jpeg\", \"photo_l\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-4\", \"photo_m\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-5\", \"photo_s\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-6\", \"address\": \"mike@macgirvin.com\", \"url\": \"https://macgirvin.com/channel/mike\", \"connurl\": \"https://macgirvin.com/poco/mike\", \"follow\": \"https://macgirvin.com/follow?f=&url=%s\", \"connpage\": \"https://macgirvin.com/connect/mike\", \"name\": \"Mike Macgirvin\", \"network\": \"zot\", \"instance_url\": \"\", \"flags\": \"0\", \"photo_date\": \"2012-12-06 05:06:11\", \"name_date\": \"2012-12-06 04:59:13\", \"hidden\": \"1\", \"orphan\": \"0\", \"censored\": \"0\", \"selfcensored\": \"0\", \"system\": \"0\", \"pubforum\": \"0\", \"deleted\": \"0\" }","title":"API xchan"},{"location":"api/api_xchan/#api-xchan","text":"An xchan is a global location independent channel and is the primary record for a network identity. It may refer to channels on other websites, networks, or services. GET /api/z/1.0/xchan Required: one of [ address, hash, guid ] as GET parameters Returns a portable xchan structure Example: https://xyz.macgirvin.com/api/z/1.0/xchan?f=&address=mike@macgirvin.com Returns: { \"hash\": \"jr54M_y2l5NgHX5wBvP0KqWcAHuW23p1ld-6Vn63_pGTZklrI36LF8vUHMSKJMD8xzzkz7s2xxCx4-BOLNPaVA\", \"guid\": \"sebQ-IC4rmFn9d9iu17m4BXO-kHuNutWo2ySjeV2SIW1LzksUkss12xVo3m3fykYxN5HMcc7gUZVYv26asx-Pg\", \"guid_sig\": \"Llenlbl4zHo6-g4sa63MlQmTP5dRCrsPmXHHFmoCHG63BLq5CUZJRLS1vRrrr_MNxr7zob_Ykt_m5xPKe5H0_i4pDj-UdP8dPZqH2fqhhx00kuYL4YUMJ8gRr5eO17vsZQ3XxTcyKewtgeW0j7ytwMp6-hFVUx_Cq08MrXas429ZrjzaEwgTfxGnbgeQYQ0R5EXpHpEmoERnZx77VaEahftmdjAUx9R4YKAp13pGYadJOX5xnLfqofHQD8DyRHWeMJ4G1OfWPSOlXfRayrV_jhnFlZjMU7vOdQwHoCMoR5TFsRsHuzd-qepbvo3pzvQZRWnTNu6oPucgbf94p13QbalYRpBXKOxdTXJrGdESNhGvhtaZnpT9c1QVqC46jdfP0LOX2xrVdbvvG2JMWFv7XJUVjLSk_yjzY6or2VD4V6ztYcjpCi9d_WoNHruoxro_br1YO3KatySxJs-LQ7SOkQI60FpysfbphNyvYMkotwUFI59G08IGKTMu3-GPnV1wp7NOQD1yzJbGGEGSEEysmEP0SO9vnN45kp3MiqbffBGc1r4_YM4e7DPmqOGM94qksOcLOJk1HNESw2dQYWxWQTBXPfOJT6jW9_crGLMEOsZ3Jcss0XS9KzBUA2p_9osvvhUKuKXbNztqH0oZIWlg37FEVsDs_hUwUJpv2Ar09k4\", \"pubkey\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA7QCwvuEIwCHjhjbpz3Oc\\ntyei/Pz9nDksNbsc44Cm8jxYGMXsTPFXDZYCcCB5rcAhPPdZSlzaPkv4vPVcMIrw\\n5cdX0tvbwa3rNTng6uFE7qkt15D3YCTkwF0Y9FVZiZ2Ko+G23QeBt9wqb9dlDN1d\\nuPmu9BLYXIT/JXoBwf0vjIPFM9WBi5W/EHGaiuqw7lt0qI7zDGw77yO5yehKE4cu\\n7dt3SakrXphL70LGiZh2XGoLg9Gmpz98t+gvPAUEotAJxIUqnoiTA8jlxoiQjeRK\\nHlJkwMOGmRNPS33awPos0kcSxAywuBbh2X3aSqUMjcbE4cGJ++/13zoa6RUZRObC\\nZnaLYJxqYBh13/N8SfH7d005hecDxWnoYXeYuuMeT3a2hV0J84ztkJX5OoxIwk7S\\nWmvBq4+m66usn6LNL+p5IAcs93KbvOxxrjtQrzohBXc6+elfLVSQ1Rr9g5xbgpub\\npSc+hvzbB6p0tleDRzwAy9X16NI4DYiTj4nkmVjigNo9v2VPnAle5zSam86eiYLO\\nt2u9YRqysMLPKevNdj3CIvst+BaGGQONlQalRdIcq8Lin+BhuX+1TBgqyav4XD9K\\nd+JHMb1aBk/rFLI9/f2S3BJ1XqpbjXz7AbYlaCwKiJ836+HS8PmLKxwVOnpLMbfH\\nPYM8k83Lip4bEKIyAuf02qkCAwEAAQ==\\n-----END PUBLIC KEY-----\\n\", \"photo_mimetype\": \"image/jpeg\", \"photo_l\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-4\", \"photo_m\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-5\", \"photo_s\": \"https://xyz.macgirvin.com/photo/350b74555c04429148f2e12775f6c403-6\", \"address\": \"mike@macgirvin.com\", \"url\": \"https://macgirvin.com/channel/mike\", \"connurl\": \"https://macgirvin.com/poco/mike\", \"follow\": \"https://macgirvin.com/follow?f=&url=%s\", \"connpage\": \"https://macgirvin.com/connect/mike\", \"name\": \"Mike Macgirvin\", \"network\": \"zot\", \"instance_url\": \"\", \"flags\": \"0\", \"photo_date\": \"2012-12-06 05:06:11\", \"name_date\": \"2012-12-06 04:59:13\", \"hidden\": \"1\", \"orphan\": \"0\", \"censored\": \"0\", \"selfcensored\": \"0\", \"system\": \"0\", \"pubforum\": \"0\", \"deleted\": \"0\" }","title":"API xchan"},{"location":"api/group/","text":"API group GET /api/z/1.0/group Description: list privacy groups Returns: DB tables of all privacy groups. To use with API group_members, provide either 'group_id' from the id element returned in this call, or 'group_name' from the gname returned in this call. [ { \"id\": \"1\", \"hash\": \"966c946394f3e2627bbb8a55026b5725e582407098415c02f85232de3f3fde76Friends\", \"uid\": \"2\", \"visible\": \"0\", \"deleted\": \"0\", \"gname\": \"Friends\" }, { \"id\": \"2\", \"hash\": \"852ebc17f8c3ed4866f2162e384ded0f9b9d1048f93822c0c84196745f6eec66Family\", \"uid\": \"2\", \"visible\": \"1\", \"deleted\": \"0\", \"gname\": \"Family\" }, { \"id\": \"3\", \"hash\": \"cc3cb5a7f9818effd7c7c80a58b09a189b62efa698a74319117babe33ee30ab9Co-workers\", \"uid\": \"2\", \"visible\": \"0\", \"deleted\": \"0\", \"gname\": \"Co-workers\" } ]","title":"API group"},{"location":"api/group/#api-group","text":"GET /api/z/1.0/group Description: list privacy groups Returns: DB tables of all privacy groups. To use with API group_members, provide either 'group_id' from the id element returned in this call, or 'group_name' from the gname returned in this call. [ { \"id\": \"1\", \"hash\": \"966c946394f3e2627bbb8a55026b5725e582407098415c02f85232de3f3fde76Friends\", \"uid\": \"2\", \"visible\": \"0\", \"deleted\": \"0\", \"gname\": \"Friends\" }, { \"id\": \"2\", \"hash\": \"852ebc17f8c3ed4866f2162e384ded0f9b9d1048f93822c0c84196745f6eec66Family\", \"uid\": \"2\", \"visible\": \"1\", \"deleted\": \"0\", \"gname\": \"Family\" }, { \"id\": \"3\", \"hash\": \"cc3cb5a7f9818effd7c7c80a58b09a189b62efa698a74319117babe33ee30ab9Co-workers\", \"uid\": \"2\", \"visible\": \"0\", \"deleted\": \"0\", \"gname\": \"Co-workers\" } ]","title":"API group"},{"location":"dev/","text":"Documentation This is an automatically generated documentation for Documentation . Namespaces \\Zotlabs\\Access Classes Class Description AccessList PermissionLimits PermissionRoles Permissions \\Zotlabs\\ActivityStreams Classes Class Description ASObject Activity Actor AssertionMethod Collection CollectionPage IntransitiveActivity Link OrderedCollection OrderedCollectionPage According to the specification, OrderedCollectionPage extends both OrderedCollection and CollectionPage, but PHP is still a bit awkward when it comes to multiple inheritance. Rather than try and do this with traits, we'll just include the CollectionPage elements here - as this only consists of three properties. Place Profile PublicKey Question Relationship Signature Tombstone UnhandledElementException \\Zotlabs\\Daemon Classes Class Description Addon Cache_embeds Cache_query Channel_purge Checksites Cli_suggest Content_importer Convo Cron Cron_daily Cron_weekly Cronhooks CurlAuth Deliver Deliver_hooks Delxitems Directory Expire Externals Fetchparents File_importer Gprobe Importdoc Importfile Master Notifier Onedirsync Onepoll Poller Queue Thumbnail Xchan_photo Zotconvo \\Zotlabs\\Entity Classes Class Description Account Channel Item \\Zotlabs\\Extend Classes Class Description Hook Route Widget \\Zotlabs\\Identity Classes Class Description BasicId OAuth2Server OAuth2Storage ProfilePhoto \\Zotlabs\\Lib Classes Class Description AConfig ASCache A wrapper for the cache api ASCollection Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged). AbConfig AccessList Activity ActivityStreams Api_router BaseObject Cache cache api Chatroom Config Connect Crypto DB_Upgrade Upgrade the database schema if necessary. DReport Enotify ExtendedZip Description of ExtendedZip Hashpath IConfig Img_filesize JSalmon JcsEddsa2022 Keyutils Keyutils Convert RSA keys between various formats LDSignatures Libsync Libzot Libzotdir Mailer A class for sending emails. MarkdownSoap MessageFilter Multibase PConfig Permcat PermissionDescription Encapsulates information the ACL dialog requires to describe permission settings for an item with an empty ACL. Queue QueueWorker SConfig Share SvgSanitizer SVGSantiizer System Techlevels Text ThreadItem A thread item ThreadListener ThreadStream A list of threads Verify Webfinger XConfig ZotURL Zotfinger \\Zotlabs\\Lib\\Traits Traits Trait Description HelpHelperTrait \\Zotlabs\\Module Classes Class Description Achievements Base controller class for Modules. Acl Base controller class for Modules. Activity Base controller class for Modules. Admin Base controller class for Modules. Affinity Base controller class for Modules. Album Base controller class for Modules. Api Base controller class for Modules. Appman Base controller class for Modules. Apporder Base controller class for Modules. Apps Base controller class for Modules. Apschema Base controller class for Modules. Attach Base controller class for Modules. Attach_edit Base controller class for Modules. Authorize Base controller class for Modules. Authtest Base controller class for Modules. Block Base controller class for Modules. Blocks Base controller class for Modules. Bookmarks Base controller class for Modules. Branchtopic Base controller class for Modules. Cal Base controller class for Modules. Cdav Base controller class for Modules. Changeaddr Base controller class for Modules. Channel Base controller class for Modules. Channel_calendar Base controller class for Modules. Chanview Base controller class for Modules. Chat Base controller class for Modules. Chatsvc Base controller class for Modules. Cloud Base controller class for Modules. Cloud_tiles Base controller class for Modules. Common Base controller class for Modules. Connect Base controller class for Modules. Connections Base controller class for Modules. Connedit Base controller class for Modules. Contactedit Base controller class for Modules. Contactgroup Base controller class for Modules. Conversation Base controller class for Modules. Cover_photo Base controller class for Modules. Dav Base controller class for Modules. Defperms Base controller class for Modules. Dircensor Base controller class for Modules. Directory Base controller class for Modules. Dirsearch Base controller class for Modules. Display Base controller class for Modules. Dreport Base controller class for Modules. Editblock Base controller class for Modules. Editlayout Base controller class for Modules. Editpost Base controller class for Modules. Editwebpage Base controller class for Modules. Email_resend Base controller class for Modules. Email_validation Base controller class for Modules. Embed Base controller class for Modules. Embedphotos Base controller class for Modules. Emoji Base controller class for Modules. Event Base controller class for Modules. Fbrowser Base controller class for Modules. Feed Base controller class for Modules. Fhubloc_id_url Base controller class for Modules. Fhublocs Base controller class for Modules. File_upload Base controller class for Modules. Filer Base controller class for Modules. Filerm Base controller class for Modules. Filestorage Base controller class for Modules. Follow Base controller class for Modules. Getfile Base controller class for Modules. Go Base controller class for Modules. Group Base controller class for Modules. Hashtags Base controller class for Modules. Hcard Base controller class for Modules. Help You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resources or use our include mechanism to include it on your local page. Home Base controller class for Modules. Hostxrd Base controller class for Modules. Hq Base controller class for Modules. Id Base controller class for Modules. Impel Base controller class for Modules. Import Base controller class for Modules. Import_items Base controller class for Modules. Import_progress Base controller class for Modules. Invite module: invitexv2.php Item This is the POST destination for most all locally posted text stuff. This function handles status, wall-to-wall status, local comments, and remote coments that are posted on this site (as opposed to being delivered in a feed). Lang Base controller class for Modules. Layouts Base controller class for Modules. Like Base controller class for Modules. Linkinfo Base controller class for Modules. Lockview Base controller class for Modules. Locs Base controller class for Modules. Login Base controller class for Modules. Logout Base controller class for Modules. Lostpass Base controller class for Modules. Magic Base controller class for Modules. Manage Base controller class for Modules. Manifest Base controller class for Modules. Menu Base controller class for Modules. Mitem Base controller class for Modules. Moderate Base controller class for Modules. Network Base controller class for Modules. New_channel Base controller class for Modules. Notes Base controller class for Modules. Notifications Base controller class for Modules. Notify Base controller class for Modules. OAuth2TestVehicle The OAuth2TestVehicle class is a way to test the registration of an OAuth2 client app. It allows you to walk through the steps of registering a client, requesting an authorization code for that client, and then requesting an access token for use in authentication against the Hubzilla API endpoints. Oauth Base controller class for Modules. Oauth2 Base controller class for Modules. Oauthinfo Base controller class for Modules. Ochannel Base controller class for Modules. Oembed Base controller class for Modules. Oep Base controller class for Modules. Oexchange Base controller class for Modules. Ofeed Base controller class for Modules. Online Base controller class for Modules. Outbox Base controller class for Modules. Owa OpenWebAuth verifier and token generator See spec/OpenWebAuth/Home.md Requests to this endpoint should be signed using HTTP Signatures using the 'Authorization: Signature' authentication method If the signature verifies a token is returned. Page Base controller class for Modules. Pconfig Base controller class for Modules. Pdledit Base controller class for Modules. Pdledit_gui Base controller class for Modules. Permcat Base controller class for Modules. Permcats Base controller class for Modules. Photo Base controller class for Modules. Photos Base controller class for Modules. Pin Base controller class for Modules. Poco Base controller class for Modules. Poster Base controller class for Modules. Pretheme Base controller class for Modules. Profile Base controller class for Modules. Profile_photo Base controller class for Modules. Profiles Base controller class for Modules. Profperm Base controller class for Modules. Pubsites Base controller class for Modules. Pubstream Base controller class for Modules. Randprof Base controller class for Modules. Rbmark remote bookmark React Base controller class for Modules. Regate Base controller class for Modules. Regdir With args, register a directory server for this realm. Register Base controller class for Modules. Regmod Base controller class for Modules. Regver Base controller class for Modules. Removeaccount Base controller class for Modules. Removeme Base controller class for Modules. Rmagic Base controller class for Modules. Rpost remote post Search Base controller class for Modules. Search_ac Base controller class for Modules. Service_limits Base controller class for Modules. Settings Base controller class for Modules. Share Base controller class for Modules. Sharedwithme Base controller class for Modules. Siteinfo Base controller class for Modules. Sitelist Base controller class for Modules. Smilies Base controller class for Modules. Snap Base controller class for Modules. Sources Base controller class for Modules. Sse Base controller class for Modules. Sse_bs Base controller class for Modules. Sslify Base controller class for Modules. Starred Base controller class for Modules. Subthread Base controller class for Modules. Suggest Base controller class for Modules. Tagger Base controller class for Modules. Tagrm Base controller class for Modules. Tasks Base controller class for Modules. Theme_info Base controller class for Modules. Thing Base controller class for Modules. Token Base controller class for Modules. Tokens Base controller class for Modules. Totp_check Base controller class for Modules. Uexport Base controller class for Modules. Update Base controller class for Modules. Userinfo Base controller class for Modules. View load view/theme/$current_theme/style.php with Hubzilla context Viewconnections Base controller class for Modules. Viewsrc Base controller class for Modules. Vote Base controller class for Modules. Wall_attach Base controller class for Modules. Wall_upload Base controller class for Modules. Webfinger Base controller class for Modules. Webpages Base controller class for Modules. Well_known Base controller class for Modules. Wfinger Base controller class for Modules. Xchan Base controller class for Modules. Xpoco Base controller class for Modules. Xrd Base controller class for Modules. Xref Base controller class for Modules. Z6trans Base controller class for Modules. Zot Base controller class for Modules. Zot_probe Base controller class for Modules. Zotfeed Base controller class for Modules. \\Zotlabs\\Module\\Admin Classes Class Description Account_edit Accounts Addons Channels Dbsync Features Logs Profs Queue Queueworker Base controller class for Modules. Security Site \\Zotlabs\\Module\\Settings Classes Class Description Account Calendar Channel Channel_home Connections Conversation Directory Display Editor Events Featured Features Manage Multifactor Network Photos Privacy Profiles \\Zotlabs\\Photo Classes Class Description PhotoDriver PhotoGd PhotoImagick \\Zotlabs\\Render Classes Class Description SimpleTemplate SmartyInterface SmartyTemplate Theme Interfaces Interface Description TemplateEngine \\Zotlabs\\Storage Classes Class Description BasicAuth CalDAVClient Directory File ZotOauth2Pdo \\Zotlabs\\Text Classes Class Description Tagadelic \\Zotlabs\\Thumbs Classes Class Description Epubthumb Thumbnail creation for epub files. Mp3audio Pdf Text Video \\Zotlabs\\Update Classes Class Description _1000 _1001 _1002 _1003 _1004 _1005 _1006 _1007 _1008 _1009 _1010 _1011 _1012 _1013 _1014 _1015 _1016 _1017 _1018 _1019 _1020 _1021 _1022 _1023 _1024 _1025 _1026 _1027 _1028 _1029 _1030 _1031 _1032 _1033 _1034 _1035 _1036 _1037 _1038 _1039 _1040 _1041 _1042 _1043 _1044 _1045 _1046 _1047 _1048 _1049 _1050 _1051 _1052 _1053 _1054 _1055 _1056 _1057 _1058 _1059 _1060 _1061 _1062 _1063 _1064 _1065 _1066 _1067 _1068 _1069 _1070 _1071 _1072 _1073 _1074 _1075 _1076 _1077 _1078 _1079 _1080 _1081 _1082 _1083 _1084 _1085 _1086 _1087 _1088 _1089 _1090 _1091 _1092 _1093 _1094 _1095 _1096 _1097 _1098 _1099 _1100 _1101 _1102 _1103 _1104 _1105 _1106 _1107 _1108 _1109 _1110 _1111 _1112 _1113 _1114 _1115 _1116 _1117 _1118 _1119 _1120 _1121 _1122 _1123 _1124 _1125 _1126 _1127 _1128 _1129 _1130 _1131 _1132 _1133 _1134 _1135 _1136 _1137 _1138 _1139 _1140 _1141 _1142 _1143 _1144 _1145 _1146 _1147 _1148 _1149 _1150 _1151 _1152 _1153 _1154 _1155 _1156 _1157 _1158 _1159 _1160 _1161 _1162 _1163 _1164 _1165 _1166 _1167 _1168 _1169 _1170 _1171 _1172 _1173 _1174 _1175 _1176 _1177 _1178 _1179 _1180 _1181 _1182 _1183 _1184 _1185 _1186 _1187 _1188 _1189 _1190 _1191 _1192 _1193 _1194 _1195 _1196 _1197 _1198 _1199 _1200 _1201 _1202 _1203 _1204 _1205 _1206 _1207 _1208 _1209 _1210 _1211 _1212 _1213 _1214 _1215 _1216 _1217 _1218 _1219 _1220 _1221 _1222 _1223 _1224 _1225 _1226 _1227 _1228 _1229 _1230 _1231 _1232 _1233 _1234 _1235 _1236 _1237 _1238 _1239 _1240 _1241 _1242 _1243 _1244 _1245 _1246 _1247 _1248 _1249 _1250 _1251 _1252 _1253 _1254 _1255 _1256 _1257 _1258 _1259 _1260 _1261 _1262 _1263 \\Zotlabs\\Web Classes Class Description Controller Base controller class for Modules. HTTPHeaders HTTPSig HttpMeta Router We have already parsed the server path into App::$argc and App::$argv Session SessionHandler SessionRedis SubModule WebServer \\Zotlabs\\Widget Classes Class Description Activity Activity_filter Activity_order * Name: Activity order * Description: Order the network stream by posted date, last commented or by date unthreaded * Requires: network Admin Affinity Album Appcategories Appcloud Appstore Archive Bookmarkedchats Catcloud * Name: Category cloud * Description: Display category links in a cloud * Requires: channel, cards, articles Catcloud_wall Categories Cdav Channel_activities Chatroom_list Chatroom_members Clock Common_friends Cover_photo Design_tools Dirsort Dirtags Filer Findpeople Follow Forums Fullprofile Helpindex Hq_controls Item Menu_preview Messages Newmember Notes Notifications Permcats Photo Photo_albums Photo_rand Pinned * Name: Pinned items * Description: Display pinned items * Author: Max Kostikov * Requires: disabled_for_pdledit_gui Portfolio Privacygroups Profile Pubtagcloud Random_block Rating Savedsearch Settings_menu Sitesearch Suggestedchats Suggestions Tagcloud * Name: Tag cloud * Description: Display hashtags of your network items in a cloud * Requires: network, hq Tagcloud_wall Tasklist Tokens Vcard Website_portation_tools Zcard \\Zotlabs\\Zot6 Classes Class Description Receiver Zot6Handler Interfaces Interface Description IHandler Automatically generated on 2025-03-15","title":"Documentation"},{"location":"dev/#documentation","text":"This is an automatically generated documentation for Documentation .","title":"Documentation"},{"location":"dev/#namespaces","text":"","title":"Namespaces"},{"location":"dev/#zotlabsaccess","text":"","title":"\\Zotlabs\\Access"},{"location":"dev/#classes","text":"Class Description AccessList PermissionLimits PermissionRoles Permissions","title":"Classes"},{"location":"dev/#zotlabsactivitystreams","text":"","title":"\\Zotlabs\\ActivityStreams"},{"location":"dev/#classes_1","text":"Class Description ASObject Activity Actor AssertionMethod Collection CollectionPage IntransitiveActivity Link OrderedCollection OrderedCollectionPage According to the specification, OrderedCollectionPage extends both OrderedCollection and CollectionPage, but PHP is still a bit awkward when it comes to multiple inheritance. Rather than try and do this with traits, we'll just include the CollectionPage elements here - as this only consists of three properties. Place Profile PublicKey Question Relationship Signature Tombstone UnhandledElementException","title":"Classes"},{"location":"dev/#zotlabsdaemon","text":"","title":"\\Zotlabs\\Daemon"},{"location":"dev/#classes_2","text":"Class Description Addon Cache_embeds Cache_query Channel_purge Checksites Cli_suggest Content_importer Convo Cron Cron_daily Cron_weekly Cronhooks CurlAuth Deliver Deliver_hooks Delxitems Directory Expire Externals Fetchparents File_importer Gprobe Importdoc Importfile Master Notifier Onedirsync Onepoll Poller Queue Thumbnail Xchan_photo Zotconvo","title":"Classes"},{"location":"dev/#zotlabsentity","text":"","title":"\\Zotlabs\\Entity"},{"location":"dev/#classes_3","text":"Class Description Account Channel Item","title":"Classes"},{"location":"dev/#zotlabsextend","text":"","title":"\\Zotlabs\\Extend"},{"location":"dev/#classes_4","text":"Class Description Hook Route Widget","title":"Classes"},{"location":"dev/#zotlabsidentity","text":"","title":"\\Zotlabs\\Identity"},{"location":"dev/#classes_5","text":"Class Description BasicId OAuth2Server OAuth2Storage ProfilePhoto","title":"Classes"},{"location":"dev/#zotlabslib","text":"","title":"\\Zotlabs\\Lib"},{"location":"dev/#classes_6","text":"Class Description AConfig ASCache A wrapper for the cache api ASCollection Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged). AbConfig AccessList Activity ActivityStreams Api_router BaseObject Cache cache api Chatroom Config Connect Crypto DB_Upgrade Upgrade the database schema if necessary. DReport Enotify ExtendedZip Description of ExtendedZip Hashpath IConfig Img_filesize JSalmon JcsEddsa2022 Keyutils Keyutils Convert RSA keys between various formats LDSignatures Libsync Libzot Libzotdir Mailer A class for sending emails. MarkdownSoap MessageFilter Multibase PConfig Permcat PermissionDescription Encapsulates information the ACL dialog requires to describe permission settings for an item with an empty ACL. Queue QueueWorker SConfig Share SvgSanitizer SVGSantiizer System Techlevels Text ThreadItem A thread item ThreadListener ThreadStream A list of threads Verify Webfinger XConfig ZotURL Zotfinger","title":"Classes"},{"location":"dev/#zotlabslibtraits","text":"","title":"\\Zotlabs\\Lib\\Traits"},{"location":"dev/#traits","text":"Trait Description HelpHelperTrait","title":"Traits"},{"location":"dev/#zotlabsmodule","text":"","title":"\\Zotlabs\\Module"},{"location":"dev/#classes_7","text":"Class Description Achievements Base controller class for Modules. Acl Base controller class for Modules. Activity Base controller class for Modules. Admin Base controller class for Modules. Affinity Base controller class for Modules. Album Base controller class for Modules. Api Base controller class for Modules. Appman Base controller class for Modules. Apporder Base controller class for Modules. Apps Base controller class for Modules. Apschema Base controller class for Modules. Attach Base controller class for Modules. Attach_edit Base controller class for Modules. Authorize Base controller class for Modules. Authtest Base controller class for Modules. Block Base controller class for Modules. Blocks Base controller class for Modules. Bookmarks Base controller class for Modules. Branchtopic Base controller class for Modules. Cal Base controller class for Modules. Cdav Base controller class for Modules. Changeaddr Base controller class for Modules. Channel Base controller class for Modules. Channel_calendar Base controller class for Modules. Chanview Base controller class for Modules. Chat Base controller class for Modules. Chatsvc Base controller class for Modules. Cloud Base controller class for Modules. Cloud_tiles Base controller class for Modules. Common Base controller class for Modules. Connect Base controller class for Modules. Connections Base controller class for Modules. Connedit Base controller class for Modules. Contactedit Base controller class for Modules. Contactgroup Base controller class for Modules. Conversation Base controller class for Modules. Cover_photo Base controller class for Modules. Dav Base controller class for Modules. Defperms Base controller class for Modules. Dircensor Base controller class for Modules. Directory Base controller class for Modules. Dirsearch Base controller class for Modules. Display Base controller class for Modules. Dreport Base controller class for Modules. Editblock Base controller class for Modules. Editlayout Base controller class for Modules. Editpost Base controller class for Modules. Editwebpage Base controller class for Modules. Email_resend Base controller class for Modules. Email_validation Base controller class for Modules. Embed Base controller class for Modules. Embedphotos Base controller class for Modules. Emoji Base controller class for Modules. Event Base controller class for Modules. Fbrowser Base controller class for Modules. Feed Base controller class for Modules. Fhubloc_id_url Base controller class for Modules. Fhublocs Base controller class for Modules. File_upload Base controller class for Modules. Filer Base controller class for Modules. Filerm Base controller class for Modules. Filestorage Base controller class for Modules. Follow Base controller class for Modules. Getfile Base controller class for Modules. Go Base controller class for Modules. Group Base controller class for Modules. Hashtags Base controller class for Modules. Hcard Base controller class for Modules. Help You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resources or use our include mechanism to include it on your local page. Home Base controller class for Modules. Hostxrd Base controller class for Modules. Hq Base controller class for Modules. Id Base controller class for Modules. Impel Base controller class for Modules. Import Base controller class for Modules. Import_items Base controller class for Modules. Import_progress Base controller class for Modules. Invite module: invitexv2.php Item This is the POST destination for most all locally posted text stuff. This function handles status, wall-to-wall status, local comments, and remote coments that are posted on this site (as opposed to being delivered in a feed). Lang Base controller class for Modules. Layouts Base controller class for Modules. Like Base controller class for Modules. Linkinfo Base controller class for Modules. Lockview Base controller class for Modules. Locs Base controller class for Modules. Login Base controller class for Modules. Logout Base controller class for Modules. Lostpass Base controller class for Modules. Magic Base controller class for Modules. Manage Base controller class for Modules. Manifest Base controller class for Modules. Menu Base controller class for Modules. Mitem Base controller class for Modules. Moderate Base controller class for Modules. Network Base controller class for Modules. New_channel Base controller class for Modules. Notes Base controller class for Modules. Notifications Base controller class for Modules. Notify Base controller class for Modules. OAuth2TestVehicle The OAuth2TestVehicle class is a way to test the registration of an OAuth2 client app. It allows you to walk through the steps of registering a client, requesting an authorization code for that client, and then requesting an access token for use in authentication against the Hubzilla API endpoints. Oauth Base controller class for Modules. Oauth2 Base controller class for Modules. Oauthinfo Base controller class for Modules. Ochannel Base controller class for Modules. Oembed Base controller class for Modules. Oep Base controller class for Modules. Oexchange Base controller class for Modules. Ofeed Base controller class for Modules. Online Base controller class for Modules. Outbox Base controller class for Modules. Owa OpenWebAuth verifier and token generator See spec/OpenWebAuth/Home.md Requests to this endpoint should be signed using HTTP Signatures using the 'Authorization: Signature' authentication method If the signature verifies a token is returned. Page Base controller class for Modules. Pconfig Base controller class for Modules. Pdledit Base controller class for Modules. Pdledit_gui Base controller class for Modules. Permcat Base controller class for Modules. Permcats Base controller class for Modules. Photo Base controller class for Modules. Photos Base controller class for Modules. Pin Base controller class for Modules. Poco Base controller class for Modules. Poster Base controller class for Modules. Pretheme Base controller class for Modules. Profile Base controller class for Modules. Profile_photo Base controller class for Modules. Profiles Base controller class for Modules. Profperm Base controller class for Modules. Pubsites Base controller class for Modules. Pubstream Base controller class for Modules. Randprof Base controller class for Modules. Rbmark remote bookmark React Base controller class for Modules. Regate Base controller class for Modules. Regdir With args, register a directory server for this realm. Register Base controller class for Modules. Regmod Base controller class for Modules. Regver Base controller class for Modules. Removeaccount Base controller class for Modules. Removeme Base controller class for Modules. Rmagic Base controller class for Modules. Rpost remote post Search Base controller class for Modules. Search_ac Base controller class for Modules. Service_limits Base controller class for Modules. Settings Base controller class for Modules. Share Base controller class for Modules. Sharedwithme Base controller class for Modules. Siteinfo Base controller class for Modules. Sitelist Base controller class for Modules. Smilies Base controller class for Modules. Snap Base controller class for Modules. Sources Base controller class for Modules. Sse Base controller class for Modules. Sse_bs Base controller class for Modules. Sslify Base controller class for Modules. Starred Base controller class for Modules. Subthread Base controller class for Modules. Suggest Base controller class for Modules. Tagger Base controller class for Modules. Tagrm Base controller class for Modules. Tasks Base controller class for Modules. Theme_info Base controller class for Modules. Thing Base controller class for Modules. Token Base controller class for Modules. Tokens Base controller class for Modules. Totp_check Base controller class for Modules. Uexport Base controller class for Modules. Update Base controller class for Modules. Userinfo Base controller class for Modules. View load view/theme/$current_theme/style.php with Hubzilla context Viewconnections Base controller class for Modules. Viewsrc Base controller class for Modules. Vote Base controller class for Modules. Wall_attach Base controller class for Modules. Wall_upload Base controller class for Modules. Webfinger Base controller class for Modules. Webpages Base controller class for Modules. Well_known Base controller class for Modules. Wfinger Base controller class for Modules. Xchan Base controller class for Modules. Xpoco Base controller class for Modules. Xrd Base controller class for Modules. Xref Base controller class for Modules. Z6trans Base controller class for Modules. Zot Base controller class for Modules. Zot_probe Base controller class for Modules. Zotfeed Base controller class for Modules.","title":"Classes"},{"location":"dev/#zotlabsmoduleadmin","text":"","title":"\\Zotlabs\\Module\\Admin"},{"location":"dev/#classes_8","text":"Class Description Account_edit Accounts Addons Channels Dbsync Features Logs Profs Queue Queueworker Base controller class for Modules. Security Site","title":"Classes"},{"location":"dev/#zotlabsmodulesettings","text":"","title":"\\Zotlabs\\Module\\Settings"},{"location":"dev/#classes_9","text":"Class Description Account Calendar Channel Channel_home Connections Conversation Directory Display Editor Events Featured Features Manage Multifactor Network Photos Privacy Profiles","title":"Classes"},{"location":"dev/#zotlabsphoto","text":"","title":"\\Zotlabs\\Photo"},{"location":"dev/#classes_10","text":"Class Description PhotoDriver PhotoGd PhotoImagick","title":"Classes"},{"location":"dev/#zotlabsrender","text":"","title":"\\Zotlabs\\Render"},{"location":"dev/#classes_11","text":"Class Description SimpleTemplate SmartyInterface SmartyTemplate Theme","title":"Classes"},{"location":"dev/#interfaces","text":"Interface Description TemplateEngine","title":"Interfaces"},{"location":"dev/#zotlabsstorage","text":"","title":"\\Zotlabs\\Storage"},{"location":"dev/#classes_12","text":"Class Description BasicAuth CalDAVClient Directory File ZotOauth2Pdo","title":"Classes"},{"location":"dev/#zotlabstext","text":"","title":"\\Zotlabs\\Text"},{"location":"dev/#classes_13","text":"Class Description Tagadelic","title":"Classes"},{"location":"dev/#zotlabsthumbs","text":"","title":"\\Zotlabs\\Thumbs"},{"location":"dev/#classes_14","text":"Class Description Epubthumb Thumbnail creation for epub files. Mp3audio Pdf Text Video","title":"Classes"},{"location":"dev/#zotlabsupdate","text":"","title":"\\Zotlabs\\Update"},{"location":"dev/#classes_15","text":"Class Description _1000 _1001 _1002 _1003 _1004 _1005 _1006 _1007 _1008 _1009 _1010 _1011 _1012 _1013 _1014 _1015 _1016 _1017 _1018 _1019 _1020 _1021 _1022 _1023 _1024 _1025 _1026 _1027 _1028 _1029 _1030 _1031 _1032 _1033 _1034 _1035 _1036 _1037 _1038 _1039 _1040 _1041 _1042 _1043 _1044 _1045 _1046 _1047 _1048 _1049 _1050 _1051 _1052 _1053 _1054 _1055 _1056 _1057 _1058 _1059 _1060 _1061 _1062 _1063 _1064 _1065 _1066 _1067 _1068 _1069 _1070 _1071 _1072 _1073 _1074 _1075 _1076 _1077 _1078 _1079 _1080 _1081 _1082 _1083 _1084 _1085 _1086 _1087 _1088 _1089 _1090 _1091 _1092 _1093 _1094 _1095 _1096 _1097 _1098 _1099 _1100 _1101 _1102 _1103 _1104 _1105 _1106 _1107 _1108 _1109 _1110 _1111 _1112 _1113 _1114 _1115 _1116 _1117 _1118 _1119 _1120 _1121 _1122 _1123 _1124 _1125 _1126 _1127 _1128 _1129 _1130 _1131 _1132 _1133 _1134 _1135 _1136 _1137 _1138 _1139 _1140 _1141 _1142 _1143 _1144 _1145 _1146 _1147 _1148 _1149 _1150 _1151 _1152 _1153 _1154 _1155 _1156 _1157 _1158 _1159 _1160 _1161 _1162 _1163 _1164 _1165 _1166 _1167 _1168 _1169 _1170 _1171 _1172 _1173 _1174 _1175 _1176 _1177 _1178 _1179 _1180 _1181 _1182 _1183 _1184 _1185 _1186 _1187 _1188 _1189 _1190 _1191 _1192 _1193 _1194 _1195 _1196 _1197 _1198 _1199 _1200 _1201 _1202 _1203 _1204 _1205 _1206 _1207 _1208 _1209 _1210 _1211 _1212 _1213 _1214 _1215 _1216 _1217 _1218 _1219 _1220 _1221 _1222 _1223 _1224 _1225 _1226 _1227 _1228 _1229 _1230 _1231 _1232 _1233 _1234 _1235 _1236 _1237 _1238 _1239 _1240 _1241 _1242 _1243 _1244 _1245 _1246 _1247 _1248 _1249 _1250 _1251 _1252 _1253 _1254 _1255 _1256 _1257 _1258 _1259 _1260 _1261 _1262 _1263","title":"Classes"},{"location":"dev/#zotlabsweb","text":"","title":"\\Zotlabs\\Web"},{"location":"dev/#classes_16","text":"Class Description Controller Base controller class for Modules. HTTPHeaders HTTPSig HttpMeta Router We have already parsed the server path into App::$argc and App::$argv Session SessionHandler SessionRedis SubModule WebServer","title":"Classes"},{"location":"dev/#zotlabswidget","text":"","title":"\\Zotlabs\\Widget"},{"location":"dev/#classes_17","text":"Class Description Activity Activity_filter Activity_order * Name: Activity order * Description: Order the network stream by posted date, last commented or by date unthreaded * Requires: network Admin Affinity Album Appcategories Appcloud Appstore Archive Bookmarkedchats Catcloud * Name: Category cloud * Description: Display category links in a cloud * Requires: channel, cards, articles Catcloud_wall Categories Cdav Channel_activities Chatroom_list Chatroom_members Clock Common_friends Cover_photo Design_tools Dirsort Dirtags Filer Findpeople Follow Forums Fullprofile Helpindex Hq_controls Item Menu_preview Messages Newmember Notes Notifications Permcats Photo Photo_albums Photo_rand Pinned * Name: Pinned items * Description: Display pinned items * Author: Max Kostikov * Requires: disabled_for_pdledit_gui Portfolio Privacygroups Profile Pubtagcloud Random_block Rating Savedsearch Settings_menu Sitesearch Suggestedchats Suggestions Tagcloud * Name: Tag cloud * Description: Display hashtags of your network items in a cloud * Requires: network, hq Tagcloud_wall Tasklist Tokens Vcard Website_portation_tools Zcard","title":"Classes"},{"location":"dev/#zotlabszot6","text":"","title":"\\Zotlabs\\Zot6"},{"location":"dev/#classes_18","text":"Class Description Receiver Zot6Handler","title":"Classes"},{"location":"dev/#interfaces_1","text":"Interface Description IHandler Automatically generated on 2025-03-15","title":"Interfaces"},{"location":"dev/filesync/","text":"File Sync and Clone File cloning across multiple instances of a channel is a very hard problem, due to the nature of PHP memory allocation. This needs to be handled dramatically differently than cloning or syncing of other information. (Processing one large video file or 40-50 photos could exhaust memory). Therefore we can't easily just dump all the data to a dump file and sequentially process it. Loading the dump file itself is likely to exhaust memory. There are also two primary operations we are considering. The first is the hardest - saving and then importing all your channel information into a new channel clone. The second is synchronising file changes as they occur across two or more \"active\" clones. For the first cut at this tool we will concentrate on the second case, while trying to maintain some measure of compatibility with the first case so that we can re-use the same tools. Meta Data First we need the metadata for the file in order to precisely re-construct its structure on another site. This requires the following information: 'attach' structure (without file contents - which is the default) for the file itself and its parent directories so that we can re-create its precise place in the file system, since we do not know if the parent directory has been imported previously or ever. 'photo' structure for any photo elements which were created as a result of uploading this file into the system. This typically contains several different 'scales' or thumbnail images, some of which may be cropped for profile photo use or cover photo use. We need to retain the cropping information which is not present in the metadata, but only in the stored data. The actual thumbnail image data may or may not be included in the metadata. A cover photo of large scale (scale #7) could potentially cause memory issues. Not as bad as a 100M video, but if you have several of these they could add up. 'item' entries which are linked to this file. These can be file share activities, the \"parent item\" linked to photos, and any attached conversation items (photo likes, comments, etc.) All of these items will require URL replacement and re-signing of the item as they are relocated to another site. File Data Then we have the actual file data we need to reconstruct the file. This needs to be stored separately from the meta-data to avoid memory exhaustion when processing. The actual file data can be used to reconstruct the attach structure and the first four photo scales. If this is a photo, we need access to the \"#4 scale\" (profile photo) and the #7 scale (cover photo) as they were originally cropped. All other thumbnails can be generated from these. File Sync We will consider this operation first because it is probably the most straightforward to implement. When a photo is added to or removed or changed from the source system, we will send a clone sync packet to all known clones containing the metadata - but no file data . We can only send one sync packet per file operation that needs to be synced. The receiving end will create and perform URL translation on all the metadata structures and store them. Then it will need to fetch the actual data. Assuming CURL supports streaming, an authenticated request is sent to the original site and the original file is requested and streamed directly to disk (bypassing all processing). If photo scale #4 or scale #7 is required, these are requested and stored into their respective structures. We're assuming in this case that the cover photo large scale will not exhaust memory. If CURL cannot be made to support streaming, request packets need to be queued and sent to the origination site to obtain \"chunks\" of the file and re-assembled once all chunks have been retrieved. The authenticated request depends on the mechanism. For CURL streaming, some signed secret with a timestamp will probably need to be generated and posted to the file origination site. Then the data can be retrieved with minimal internal processing and dumped directly to disk using stdio buffering. In the case of a zot request, the zot request packet will be validated, however scheduling chunk batches and re-assembling them could be tricky. File Backup/Restore This is much more complicated as we do not have an authenticate web server to request data from. The metadata can be mostly the same, but we need some form of signalling that we will not be fetching the file via the web. This will likely require a client side process to parse each metadata file and locate a file on disk which it is associated with. Then the data would need to be streamed to the destination server with a special endpoint designed for this task. A java app might be the best option here to retain platform neutrality. Another option would be to use WebDAV for this step. The metadata files would be uploaded first, and then the data files. If a data file corresponded to an existing metadata file, the metadata would be processed; the file stored appropriately, and the metadata file then removed. In this case, photos of scales 4 and 7 would need to be provided in the metadata. Optionally, this step could also be performed with a filesystem local to the destination server. This would be the highest performance, and a suite of shell-based tools (in the case of Linux) could perform the \"client-side\" of the task. The complexity of this task mandates careful planning into how the data is organised and stored and if necessary backed up remotely or transmitted for backup by the source website. Backward Compatibility There are some obvious issues with making data available for backup or cloning which existed on the system prior to the existence of restore/sync tools. To keep the tools themselves relatively uncomplicated (to the extent possible given the constraints) backward compatibility may have to be preformed by dedicated plugin or addon.","title":"File Sync and Clone"},{"location":"dev/filesync/#file-sync-and-clone","text":"File cloning across multiple instances of a channel is a very hard problem, due to the nature of PHP memory allocation. This needs to be handled dramatically differently than cloning or syncing of other information. (Processing one large video file or 40-50 photos could exhaust memory). Therefore we can't easily just dump all the data to a dump file and sequentially process it. Loading the dump file itself is likely to exhaust memory. There are also two primary operations we are considering. The first is the hardest - saving and then importing all your channel information into a new channel clone. The second is synchronising file changes as they occur across two or more \"active\" clones. For the first cut at this tool we will concentrate on the second case, while trying to maintain some measure of compatibility with the first case so that we can re-use the same tools.","title":"File Sync and Clone"},{"location":"dev/filesync/#meta-data","text":"First we need the metadata for the file in order to precisely re-construct its structure on another site. This requires the following information: 'attach' structure (without file contents - which is the default) for the file itself and its parent directories so that we can re-create its precise place in the file system, since we do not know if the parent directory has been imported previously or ever. 'photo' structure for any photo elements which were created as a result of uploading this file into the system. This typically contains several different 'scales' or thumbnail images, some of which may be cropped for profile photo use or cover photo use. We need to retain the cropping information which is not present in the metadata, but only in the stored data. The actual thumbnail image data may or may not be included in the metadata. A cover photo of large scale (scale #7) could potentially cause memory issues. Not as bad as a 100M video, but if you have several of these they could add up. 'item' entries which are linked to this file. These can be file share activities, the \"parent item\" linked to photos, and any attached conversation items (photo likes, comments, etc.) All of these items will require URL replacement and re-signing of the item as they are relocated to another site.","title":"Meta Data"},{"location":"dev/filesync/#file-data","text":"Then we have the actual file data we need to reconstruct the file. This needs to be stored separately from the meta-data to avoid memory exhaustion when processing. The actual file data can be used to reconstruct the attach structure and the first four photo scales. If this is a photo, we need access to the \"#4 scale\" (profile photo) and the #7 scale (cover photo) as they were originally cropped. All other thumbnails can be generated from these.","title":"File Data"},{"location":"dev/filesync/#file-sync","text":"We will consider this operation first because it is probably the most straightforward to implement. When a photo is added to or removed or changed from the source system, we will send a clone sync packet to all known clones containing the metadata - but no file data . We can only send one sync packet per file operation that needs to be synced. The receiving end will create and perform URL translation on all the metadata structures and store them. Then it will need to fetch the actual data. Assuming CURL supports streaming, an authenticated request is sent to the original site and the original file is requested and streamed directly to disk (bypassing all processing). If photo scale #4 or scale #7 is required, these are requested and stored into their respective structures. We're assuming in this case that the cover photo large scale will not exhaust memory. If CURL cannot be made to support streaming, request packets need to be queued and sent to the origination site to obtain \"chunks\" of the file and re-assembled once all chunks have been retrieved. The authenticated request depends on the mechanism. For CURL streaming, some signed secret with a timestamp will probably need to be generated and posted to the file origination site. Then the data can be retrieved with minimal internal processing and dumped directly to disk using stdio buffering. In the case of a zot request, the zot request packet will be validated, however scheduling chunk batches and re-assembling them could be tricky.","title":"File Sync"},{"location":"dev/filesync/#file-backuprestore","text":"This is much more complicated as we do not have an authenticate web server to request data from. The metadata can be mostly the same, but we need some form of signalling that we will not be fetching the file via the web. This will likely require a client side process to parse each metadata file and locate a file on disk which it is associated with. Then the data would need to be streamed to the destination server with a special endpoint designed for this task. A java app might be the best option here to retain platform neutrality. Another option would be to use WebDAV for this step. The metadata files would be uploaded first, and then the data files. If a data file corresponded to an existing metadata file, the metadata would be processed; the file stored appropriately, and the metadata file then removed. In this case, photos of scales 4 and 7 would need to be provided in the metadata. Optionally, this step could also be performed with a filesystem local to the destination server. This would be the highest performance, and a suite of shell-based tools (in the case of Linux) could perform the \"client-side\" of the task. The complexity of this task mandates careful planning into how the data is organised and stored and if necessary backed up remotely or transmitted for backup by the source website.","title":"File Backup/Restore"},{"location":"dev/filesync/#backward-compatibility","text":"There are some obvious issues with making data available for backup or cloning which existed on the system prior to the existence of restore/sync tools. To keep the tools themselves relatively uncomplicated (to the extent possible given the constraints) backward compatibility may have to be preformed by dedicated plugin or addon.","title":"Backward Compatibility"},{"location":"dev/join/","text":"Developer Guide Here is how you can join us. First, get yourself a working git package on the system where you will be doing development. Create your own github account. You may fork/clone the $Projectname repository from https://framagit.org/hubzilla/core.git . Follow the instructions provided here: http://help.github.com/fork-a-repo/ to create and use your own tracking fork on framagit Then go to your framagit page and create a \"Pull request\" when you are ready to notify us to merge your work. Translations Our translations are managed through Transifex. If you wish to help out translating $Projectname to another language, sign up on transifex.com, visit https://www.transifex.com/projects/p/hubzilla/ and request to join one of the existing language teams or create a new one. Notify one of the core developers when you have a translation update which requires merging, or ask about merging it yourself if you're comfortable with git and PHP. We have a string file called 'messages.po' which is gettext compliant and a handful of email templates, and from there we automatically generate the application's language files. Translations - More Info Important Please pull in any changes from the project repository and merge them with your work before issuing a pull request. We reserve the right to reject any patch which results in a large number of merge conflicts. This is especially true in the case of language translations - where we may not be able to understand the subtle differences between conflicting versions. Also - test your changes . Don't assume that a simple fix won't break something else. If possible get an experienced Red developer to review the code. Licensing All code contributed to the project falls under the MIT license, unless otherwise specified. We will accept third-party code which falls under MIT, BSD and LGPL, but copyleft licensing (GPL, and AGPL) is only permitted in addons. It must be possible to completely remove the GPL (copyleft) code from the main project without breaking anything. Coding Style In the interests of consistency we adopt the following code styling. We may accept patches using other styles, but where possible please try to provide a consistent code style. We aren't going to argue or debate the merits of this style, and it is irrelevant what project 'xyz' uses. This is not project 'xyz'. This is a baseline to try and keep the code readable now and in the future. All comments should be in English. We use doxygen to generate documentation. This hasn't been consistently applied, but learning it and using it are highly encouraged. Indentation is accomplished primarily with tabs using a tab-width of 4. String concatenation and operators should be separated by whitespace. e.g. \"$foo = $bar . 'abc';\" instead of \"$foo=$bar.'abc';\" Generally speaking, we use single quotes for string variables and double quotes for SQL statements. \"Here documents\" should be avoided. Sometimes using double quoted strings with variable replacement is the most efficient means of creating the string. In most cases, you should be using single quotes. Use whitespace liberally to enhance readability. When creating arrays with many elements, we will often set one key/value pair per line, indented from the parent line appropriately. Lining up the assignment operators takes a bit more work, but also increases readability. Generally speaking, opening braces go on the same line as the thing which opens the brace. They are the last character on the line. Closing braces are on a line by themselves. include doc/macros/main_footer.bb;","title":"Developer Guide"},{"location":"dev/join/#developer-guide","text":"Here is how you can join us. First, get yourself a working git package on the system where you will be doing development. Create your own github account. You may fork/clone the $Projectname repository from https://framagit.org/hubzilla/core.git . Follow the instructions provided here: http://help.github.com/fork-a-repo/ to create and use your own tracking fork on framagit Then go to your framagit page and create a \"Pull request\" when you are ready to notify us to merge your work. Translations Our translations are managed through Transifex. If you wish to help out translating $Projectname to another language, sign up on transifex.com, visit https://www.transifex.com/projects/p/hubzilla/ and request to join one of the existing language teams or create a new one. Notify one of the core developers when you have a translation update which requires merging, or ask about merging it yourself if you're comfortable with git and PHP. We have a string file called 'messages.po' which is gettext compliant and a handful of email templates, and from there we automatically generate the application's language files. Translations - More Info Important Please pull in any changes from the project repository and merge them with your work before issuing a pull request. We reserve the right to reject any patch which results in a large number of merge conflicts. This is especially true in the case of language translations - where we may not be able to understand the subtle differences between conflicting versions. Also - test your changes . Don't assume that a simple fix won't break something else. If possible get an experienced Red developer to review the code. Licensing All code contributed to the project falls under the MIT license, unless otherwise specified. We will accept third-party code which falls under MIT, BSD and LGPL, but copyleft licensing (GPL, and AGPL) is only permitted in addons. It must be possible to completely remove the GPL (copyleft) code from the main project without breaking anything. Coding Style In the interests of consistency we adopt the following code styling. We may accept patches using other styles, but where possible please try to provide a consistent code style. We aren't going to argue or debate the merits of this style, and it is irrelevant what project 'xyz' uses. This is not project 'xyz'. This is a baseline to try and keep the code readable now and in the future. All comments should be in English. We use doxygen to generate documentation. This hasn't been consistently applied, but learning it and using it are highly encouraged. Indentation is accomplished primarily with tabs using a tab-width of 4. String concatenation and operators should be separated by whitespace. e.g. \"$foo = $bar . 'abc';\" instead of \"$foo=$bar.'abc';\" Generally speaking, we use single quotes for string variables and double quotes for SQL statements. \"Here documents\" should be avoided. Sometimes using double quoted strings with variable replacement is the most efficient means of creating the string. In most cases, you should be using single quotes. Use whitespace liberally to enhance readability. When creating arrays with many elements, we will often set one key/value pair per line, indented from the parent line appropriately. Lining up the assignment operators takes a bit more work, but also increases readability. Generally speaking, opening braces go on the same line as the thing which opens the brace. They are the last character on the line. Closing braces are on a line by themselves.","title":"Developer Guide"},{"location":"dev/join/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/schema/","text":"Red development - a guide to the schema system A schema, in a nutshell, is a collection of settings for a bunch of variables to define certain elements of a theme. A schema is loaded as though it were part of config.php and has access to all the same information. Importantly, this means it is identity aware, and can be used to do some interesting things. One could, for example, restrict options by service class, or present different options to different members. By default, we filter only by whether or not expert mode is enabled. If expert mode is enabled, all options are presented to the member. If it is not, only scheme, background image, font face, and iconset are available as choices. A schema is loaded after the member's personal settings. Therefore, to allow a member to overwrite a particular aspect of a schema you would use the following syntax: if (! $foo) $foo = 'bar'; However, there are circumstances - particularly with positional elements - where it may be desirable (or necessary) to override a member's settings. In this case, the syntax is even simpler: $foo = 'bar'; Members will not thank you for this, however, so only use it when it is required. If no personal options are set, and no schema is selected, we will first try to load a schema with the file name \"default.php\". This file should never be included with a theme. If it is, merge conflicts will occur as people update their code. Rather, this should be defined by administrators on a site by site basis. default.php and default.css MUST be symlinks to existing scheme files. You schema does not need to - and should not - contain all of these values. Only the values that differ from the defaults should be listed. This gives you some very powerful options with very few lines of code. Note the options available differ with each theme. The options available with the Redbasic theme are as follows: nav_colour The colour of the navigation bar. Options are red, black and silver. Alternatively, one can set $nav_bg_1, $nav_bg_2, $nav_bg_3 and $nav_bg_4 to provide gradient and hover effects. banner_colour The font colour of the banner element. Accepts an RGB or Hex value. bgcolour Set the body background colour. Accepts an RGB or Hex value. background_image Sets a background image. Accepts a URL or path. item_colour Set the background colour of items. Accepts an RGB or Hex value. item_opacity Set the opacity of items. Accepts a value from 0.01 to 1 toolicon_colour Set the colour of tool icons. Accepts an RGB or Hex value. toolicon_activecolour Set the colour of active or hovered icon tools. font_size Set the size of fonts in items and posts. Accepts px or em. body_font_size Sets the size of fonts at the body level. Accepts px or em. font_colour Sets the font colour. Accepts an RGB or Hex value. radius Set the radius of corners. Accepts a numeral, and is always in px. shadow Set the size of shadows shown with inline images. Accepts a numerical value. Note shadows are not applied to smileys. converse_width Set the maximum width of the content region in px. nav_min_opacity top_photo reply_photo If a your_schema_name.css file is found, the content of this file will be attached to the end of style.css. This gives the schem developer the possiblity to override any style component. include doc/macros/main_footer.bb;","title":"Red development - a guide to the schema system"},{"location":"dev/schema/#red-development-a-guide-to-the-schema-system","text":"A schema, in a nutshell, is a collection of settings for a bunch of variables to define certain elements of a theme. A schema is loaded as though it were part of config.php and has access to all the same information. Importantly, this means it is identity aware, and can be used to do some interesting things. One could, for example, restrict options by service class, or present different options to different members. By default, we filter only by whether or not expert mode is enabled. If expert mode is enabled, all options are presented to the member. If it is not, only scheme, background image, font face, and iconset are available as choices. A schema is loaded after the member's personal settings. Therefore, to allow a member to overwrite a particular aspect of a schema you would use the following syntax: if (! $foo) $foo = 'bar'; However, there are circumstances - particularly with positional elements - where it may be desirable (or necessary) to override a member's settings. In this case, the syntax is even simpler: $foo = 'bar'; Members will not thank you for this, however, so only use it when it is required. If no personal options are set, and no schema is selected, we will first try to load a schema with the file name \"default.php\". This file should never be included with a theme. If it is, merge conflicts will occur as people update their code. Rather, this should be defined by administrators on a site by site basis. default.php and default.css MUST be symlinks to existing scheme files. You schema does not need to - and should not - contain all of these values. Only the values that differ from the defaults should be listed. This gives you some very powerful options with very few lines of code. Note the options available differ with each theme. The options available with the Redbasic theme are as follows: nav_colour The colour of the navigation bar. Options are red, black and silver. Alternatively, one can set $nav_bg_1, $nav_bg_2, $nav_bg_3 and $nav_bg_4 to provide gradient and hover effects. banner_colour The font colour of the banner element. Accepts an RGB or Hex value. bgcolour Set the body background colour. Accepts an RGB or Hex value. background_image Sets a background image. Accepts a URL or path. item_colour Set the background colour of items. Accepts an RGB or Hex value. item_opacity Set the opacity of items. Accepts a value from 0.01 to 1 toolicon_colour Set the colour of tool icons. Accepts an RGB or Hex value. toolicon_activecolour Set the colour of active or hovered icon tools. font_size Set the size of fonts in items and posts. Accepts px or em. body_font_size Sets the size of fonts at the body level. Accepts px or em. font_colour Sets the font colour. Accepts an RGB or Hex value. radius Set the radius of corners. Accepts a numeral, and is always in px. shadow Set the size of shadows shown with inline images. Accepts a numerical value. Note shadows are not applied to smileys. converse_width Set the maximum width of the content region in px. nav_min_opacity top_photo reply_photo If a your_schema_name.css file is found, the content of this file will be attached to the end of style.css. This gives the schem developer the possiblity to override any style component.","title":"Red development - a guide to the schema system"},{"location":"dev/schema/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/translations/","text":"Translating $Projectname Translation Process The strings used in the UI of $Projectname is translated at Transifex and then included in the git repository at github. If you want to help with translation for any language, be it correcting terms or translating $Projectname to a currently not supported language, please register an account at transifex.com and contact the Redmatrix translation team there. Translating $Projectname is simple. Just use the online tool at transifex. If you don't want to deal with git & co. that is fine, we check the status of the translations regularly and import them into the source tree at github so that others can use them. We do not include every translation from transifex in the source tree to avoid a scattered and disturbed overall experience. As an uneducated guess we have a lower limit of 50% translated strings before we include the language. This limit is judging only by the amount of translated strings under the assumption that the most prominent strings for the UI will be translated first by a translation team. If you feel your translation useable before this limit, please contact us and we will probably include your teams work in the source tree. If you want to get your work into the source tree yourself, feel free to do so and contact us with and question that arises. The process is simple and $Projectname ships with all the tools necessary. The location of the translated files in the source tree is /view/LNG-CODE/ where LNG-CODE is the language code used, e.g. de for German or fr for French. For the email templates (the *.tpl files) just place them into the directory and you are done. The translated strings come as a \"hmessages.po\" file from transifex which needs to be translated into the PHP file $Projectname uses. To do so, place the file in the directory mentioned above and use the \"po2php\" utility from the util directory of your $Projectname installation. Assuming you want to convert the German localization which is placed in view/de/hmessages.po you would do the following. Navigate at the command prompt to the base directory of your $Projectname installation Execute the po2php script, which will place the translation in the hstrings.php file that is used by $Projectname. $> php util/po2php.php view/de/hmessages.po The output of the script will be placed at view/de/hstrings.php where froemdoca os expecting it, so you can test your translation mmediately. Visit your $Projectname page to check if it still works in the language you just translated. If not try to find the error, most likely PHP will give you a hint in the log/warnings.about the error. For debugging you can also try to \"run\" the file with PHP. This should not give any output if the file is ok but might give a hint for searching the bug in the file. $> php view/de/hstrings.php commit the two files with a meaningful commit message to your git repository, push it to your fork of the $Projectname repository at github and issue a pull request for that commit. Utilities Additional to the po2php script there are some more utilities for translation in the \"util\" directory of the $Projectname source tree. If you only want to translate $Projectname into another language you wont need any of these tools most likely but it gives you an idea how the translation process of $Projectname works. For further information see the utils/README file. Known Problems $Projectname uses the language setting of the visitors browser to determain the language for the UI. Most of the time this works, but there are some known quirks. the early translations are based on the friendica translations, if you some rough translations please let us know or fix them at Transifex. Links include doc/macros/main_footer.bb;","title":"Translating $Projectname"},{"location":"dev/translations/#translating-projectname","text":"","title":"Translating $Projectname"},{"location":"dev/translations/#translation-process","text":"The strings used in the UI of $Projectname is translated at Transifex and then included in the git repository at github. If you want to help with translation for any language, be it correcting terms or translating $Projectname to a currently not supported language, please register an account at transifex.com and contact the Redmatrix translation team there. Translating $Projectname is simple. Just use the online tool at transifex. If you don't want to deal with git & co. that is fine, we check the status of the translations regularly and import them into the source tree at github so that others can use them. We do not include every translation from transifex in the source tree to avoid a scattered and disturbed overall experience. As an uneducated guess we have a lower limit of 50% translated strings before we include the language. This limit is judging only by the amount of translated strings under the assumption that the most prominent strings for the UI will be translated first by a translation team. If you feel your translation useable before this limit, please contact us and we will probably include your teams work in the source tree. If you want to get your work into the source tree yourself, feel free to do so and contact us with and question that arises. The process is simple and $Projectname ships with all the tools necessary. The location of the translated files in the source tree is /view/LNG-CODE/ where LNG-CODE is the language code used, e.g. de for German or fr for French. For the email templates (the *.tpl files) just place them into the directory and you are done. The translated strings come as a \"hmessages.po\" file from transifex which needs to be translated into the PHP file $Projectname uses. To do so, place the file in the directory mentioned above and use the \"po2php\" utility from the util directory of your $Projectname installation. Assuming you want to convert the German localization which is placed in view/de/hmessages.po you would do the following. Navigate at the command prompt to the base directory of your $Projectname installation Execute the po2php script, which will place the translation in the hstrings.php file that is used by $Projectname. $> php util/po2php.php view/de/hmessages.po The output of the script will be placed at view/de/hstrings.php where froemdoca os expecting it, so you can test your translation mmediately. Visit your $Projectname page to check if it still works in the language you just translated. If not try to find the error, most likely PHP will give you a hint in the log/warnings.about the error. For debugging you can also try to \"run\" the file with PHP. This should not give any output if the file is ok but might give a hint for searching the bug in the file. $> php view/de/hstrings.php commit the two files with a meaningful commit message to your git repository, push it to your fork of the $Projectname repository at github and issue a pull request for that commit.","title":"Translation Process"},{"location":"dev/translations/#utilities","text":"Additional to the po2php script there are some more utilities for translation in the \"util\" directory of the $Projectname source tree. If you only want to translate $Projectname into another language you wont need any of these tools most likely but it gives you an idea how the translation process of $Projectname works. For further information see the utils/README file.","title":"Utilities"},{"location":"dev/translations/#known-problems","text":"$Projectname uses the language setting of the visitors browser to determain the language for the UI. Most of the time this works, but there are some known quirks. the early translations are based on the friendica translations, if you some rough translations please let us know or fix them at Transifex.","title":"Known Problems"},{"location":"dev/translations/#links","text":"","title":"Links"},{"location":"dev/translations/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/zot/","text":"Zot - A High Level Overview Here's a high level description of how zot works. In this example, \"Indigo\" is going to send a public message from his website at \"podunk.edu\". \"Nickordo\" is a recipient on another site (\"example.com\"). Indigo first posts his message at podunk.edu. podunk.edu looks up who should receive the message and finds Nickordo. Nickordo usually posts from example.com so we add that destination to our list of recipients. We may also add other destinations for nickordo and anybody else that is following Indigo's posts. In this example we find that we only have one known recipient at one known location. We send a packet to example.com: { \"type\":\"notify\", \"sender\":{ \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\", \"url\":\"http:\\/\\/podunk.edu\", \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\" }, \"callback\":\"\\/post\", \"version\":1, \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\" } This packet says the following: I'm Indigo and here is proof. I'm posting from podunk.edu and here is proof. I've got a package for you. The tracking number is \"1eaa6613....\". Example.com accepts this packet and says \"whoa, hold on - I don't know you. I want to prove who you are.\" So Example.com connects to podunk.edu through a \"well-known URL\" that we use for this purpose and looks up the \"guid\" mentioned above. It should return a bunch of information, one item of which is a public key. Example.com uses this key to verify the signatures in the message to verify that indeed there is a person named Indigo at podunk.edu. We only need to do this once. (Note that Indigo can post from any location. All we have to do is prove that it's Indigo and that Indigo can prove that he's posting from another site.) Then example.com disconnects and flags that there's a message waiting at podunk.edu. Either immediately, or whenever the urge hits (depending on how important Indigo is to anybody on this site), example.com \"calls\" podunk.edu. It says something like this: { \"type\":\"pickup\", \"url\":\"http:\\/\\/example.com\", \"callback_sig\":\"teE1_fLIqfyeCuZY4iS7sNU8jUlUuqYOYBiHLarkC99I9K-uSr8DAwVW8ZPZRK-uYdxRMuKFb6cumF_Gt9XjecCPBM8HkoXHOi_VselzJkxPwor4ZPtWYWWaFtRfcAm794LrWjdz62zdESTQd2JJIZWbrli1sUhK801BF3n0Ye6-X1MWhy9EUTVlNimOeRipcuD_srMhUcAXOEbLlrugZ8ovy2YBe6YOXkS8jj0RSFjsOduXAoVhQmNpcobSYsDvaQS3e3MvE6-oXE602zGQhuNLr7DIMt9PCdAeQo-ZM-DHlZGCkGk4O2oQFCXFzGPqLUMWDACGJfTfIWGoh_EJqT_SD5b_Yi_Wk9S1lj7vb-lmxe5JuIf7ezWzHoBT8vswnZxPYlidH2i9wapdzij9il_qqcCWWHIp7q_XkY_Zj52Z4r4gdmiqM-8y1c_1SDX7hrJFRwqL_PKFbEvyi5nMWTEzqp55Tay5Woiv19STK_H_8ufFfD9AOkYnk6rIOMsk9dn3a5tAFpDRyRndXkBWAXwiJjiND2zjue7BFu7Ty40THXcfYRh1a5XrAXcaGeYuagg-8J9tAufu9_LY3qGazFg8kRBVMOn4M8DRKSIhKj7z4MnbYL0s09gREojy4jqWO3VkaOjP2jUGzoPuUDLasudE1ehWFq0K_MTQNavgmp8\", \"callback\":\"http:\\/\\/example.com\\/post\", \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\", \"secret_sig\":\"O7nB4_UJHBXi28Suwl9LBZF9hI_9KGVTgehnUlWF1oYMNRnBbVHB9lzUfAoalvp3STbU3xJbtD_S58tv6MfV7J5j2V_S1W5ex3dulmDGB8Pt_7Fe5mbEPmjQFcfv3Eg5dUjYIuDl0TDScfrHyImj7RZIWHbwd7wWVoMzzDa_o33klpYmKZCBvObCh55bRrlFkXZs_dRuOiPwkfX0C6_XES4OyOIYl45V30rdhmf-STrf4L9dKYy_axQ12RIwRcKychvVLwlUJn3bn9lgNXRRU_HTne-09OPcJbUOdcD3DkFoKOxMULBNKPHzsCau0ICYug7S0EP6LpCom_mW78s08LyVA1vYeFZjevBCiGecj57yIAQDYi6_rpWJfihYaWHRN0oqtScUR4Bdf0bQbEHxMs4zAtrOAxfyJCbi6U1pfnGgzXzB9ulOYGnVGNTF7Ey4K7FOZIBtk0ILY2JfvBUaVvVs8ttagOOHmhWhnbCvrnOFlkNdlce7zoJCSUJENUOCYmTRfwB_Jno5fAzRnrsYU3_Z-l1mzniU_OmUPz8mPEh7PwhkqAiVlyaM-q15gn7l2lAIDk9kp2X_iCme7v4V0ADN_DbpaI_0-6mPw5HLbKrCsA-sxlSMB4DO4lDCHYkauj0l25sbfroRWB_hax1O4Q0oWyOlVJLUqEC5nuUJCCE\" } What this message says is: This is example.com, I have proof, and I'm here to pick up a package. Here's the tracking number, and here's proof that this is the tracking number you presumably sent to example.com. Good enough. Podunk.edu checks out the story and indeed, it is example.com, and yes, there's a package waiting with that tracking number. Here's the package... { \"success\":1, \"pickup\":{ \"notify\":{ \"type\":\"notify\", \"sender\":{ \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\", \"url\":\"http:\\/\\/z.podunk.edu\", \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\" }, \"callback\":\"\\/post\", \"version\":1, \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\" }, \"message\":{ \"message_id\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"message_top\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"message_parent\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"created\":\"2012-11-20 04:04:16\", \"edited\":\"2012-11-20 04:04:16\", \"title\":\"\", \"body\":\"Hi Nickordo\", \"app\":\"\", \"verb\":\"post\", \"object_type\":\"\", \"target_type\":\"\", \"permalink\":\"\", \"location\":\"\", \"longlat\":\"\", \"owner\":{ \"name\":\"Indigo\", \"address\":\"indigo@podunk.edu\", \"url\":\"http:\\/\\/podunk.edu\", \"photo\":{ \"mimetype\":\"image\\/jpeg\", \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\" }, \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\" }, \"author\":{ \"name\":\"Indigo\", \"address\":\"indigo@podunk.edu\", \"url\":\"http:\\/\\/podunk.edu\", \"photo\":{ \"mimetype\":\"image\\/jpeg\", \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\" }, \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\" } } } } And that's the package (the original message). Example.com converts this into a form suitable for viewing by Nickordo and notifies Nickordo that there's a new message. Podunk.edu might discover that there are other packages waiting for example.com. If this happens it may also send any and all other waiting packages at this time. Each has the original tracking number attached. include doc/macros/main_footer.bb;","title":"Zot - A High Level Overview"},{"location":"dev/zot/#zot-a-high-level-overview","text":"Here's a high level description of how zot works. In this example, \"Indigo\" is going to send a public message from his website at \"podunk.edu\". \"Nickordo\" is a recipient on another site (\"example.com\"). Indigo first posts his message at podunk.edu. podunk.edu looks up who should receive the message and finds Nickordo. Nickordo usually posts from example.com so we add that destination to our list of recipients. We may also add other destinations for nickordo and anybody else that is following Indigo's posts. In this example we find that we only have one known recipient at one known location. We send a packet to example.com: { \"type\":\"notify\", \"sender\":{ \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\", \"url\":\"http:\\/\\/podunk.edu\", \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\" }, \"callback\":\"\\/post\", \"version\":1, \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\" } This packet says the following: I'm Indigo and here is proof. I'm posting from podunk.edu and here is proof. I've got a package for you. The tracking number is \"1eaa6613....\". Example.com accepts this packet and says \"whoa, hold on - I don't know you. I want to prove who you are.\" So Example.com connects to podunk.edu through a \"well-known URL\" that we use for this purpose and looks up the \"guid\" mentioned above. It should return a bunch of information, one item of which is a public key. Example.com uses this key to verify the signatures in the message to verify that indeed there is a person named Indigo at podunk.edu. We only need to do this once. (Note that Indigo can post from any location. All we have to do is prove that it's Indigo and that Indigo can prove that he's posting from another site.) Then example.com disconnects and flags that there's a message waiting at podunk.edu. Either immediately, or whenever the urge hits (depending on how important Indigo is to anybody on this site), example.com \"calls\" podunk.edu. It says something like this: { \"type\":\"pickup\", \"url\":\"http:\\/\\/example.com\", \"callback_sig\":\"teE1_fLIqfyeCuZY4iS7sNU8jUlUuqYOYBiHLarkC99I9K-uSr8DAwVW8ZPZRK-uYdxRMuKFb6cumF_Gt9XjecCPBM8HkoXHOi_VselzJkxPwor4ZPtWYWWaFtRfcAm794LrWjdz62zdESTQd2JJIZWbrli1sUhK801BF3n0Ye6-X1MWhy9EUTVlNimOeRipcuD_srMhUcAXOEbLlrugZ8ovy2YBe6YOXkS8jj0RSFjsOduXAoVhQmNpcobSYsDvaQS3e3MvE6-oXE602zGQhuNLr7DIMt9PCdAeQo-ZM-DHlZGCkGk4O2oQFCXFzGPqLUMWDACGJfTfIWGoh_EJqT_SD5b_Yi_Wk9S1lj7vb-lmxe5JuIf7ezWzHoBT8vswnZxPYlidH2i9wapdzij9il_qqcCWWHIp7q_XkY_Zj52Z4r4gdmiqM-8y1c_1SDX7hrJFRwqL_PKFbEvyi5nMWTEzqp55Tay5Woiv19STK_H_8ufFfD9AOkYnk6rIOMsk9dn3a5tAFpDRyRndXkBWAXwiJjiND2zjue7BFu7Ty40THXcfYRh1a5XrAXcaGeYuagg-8J9tAufu9_LY3qGazFg8kRBVMOn4M8DRKSIhKj7z4MnbYL0s09gREojy4jqWO3VkaOjP2jUGzoPuUDLasudE1ehWFq0K_MTQNavgmp8\", \"callback\":\"http:\\/\\/example.com\\/post\", \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\", \"secret_sig\":\"O7nB4_UJHBXi28Suwl9LBZF9hI_9KGVTgehnUlWF1oYMNRnBbVHB9lzUfAoalvp3STbU3xJbtD_S58tv6MfV7J5j2V_S1W5ex3dulmDGB8Pt_7Fe5mbEPmjQFcfv3Eg5dUjYIuDl0TDScfrHyImj7RZIWHbwd7wWVoMzzDa_o33klpYmKZCBvObCh55bRrlFkXZs_dRuOiPwkfX0C6_XES4OyOIYl45V30rdhmf-STrf4L9dKYy_axQ12RIwRcKychvVLwlUJn3bn9lgNXRRU_HTne-09OPcJbUOdcD3DkFoKOxMULBNKPHzsCau0ICYug7S0EP6LpCom_mW78s08LyVA1vYeFZjevBCiGecj57yIAQDYi6_rpWJfihYaWHRN0oqtScUR4Bdf0bQbEHxMs4zAtrOAxfyJCbi6U1pfnGgzXzB9ulOYGnVGNTF7Ey4K7FOZIBtk0ILY2JfvBUaVvVs8ttagOOHmhWhnbCvrnOFlkNdlce7zoJCSUJENUOCYmTRfwB_Jno5fAzRnrsYU3_Z-l1mzniU_OmUPz8mPEh7PwhkqAiVlyaM-q15gn7l2lAIDk9kp2X_iCme7v4V0ADN_DbpaI_0-6mPw5HLbKrCsA-sxlSMB4DO4lDCHYkauj0l25sbfroRWB_hax1O4Q0oWyOlVJLUqEC5nuUJCCE\" } What this message says is: This is example.com, I have proof, and I'm here to pick up a package. Here's the tracking number, and here's proof that this is the tracking number you presumably sent to example.com. Good enough. Podunk.edu checks out the story and indeed, it is example.com, and yes, there's a package waiting with that tracking number. Here's the package... { \"success\":1, \"pickup\":{ \"notify\":{ \"type\":\"notify\", \"sender\":{ \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\", \"url\":\"http:\\/\\/z.podunk.edu\", \"url_sig\":\"T8Bp7j5DHHhQDCFcAHXfuhUfGk2P3inPbImwaXXF1xJd3TGgluoXyyKDx6WDm07x0hqbupoAoZB1qBP3_WfvWiJVAK4N1FD77EOYttUEHZ7L43xy5PCpojJQmkppGbPJc2jnTIc_F1vvGvw5fv8gBWZvPqTdb6LWF6FLrzwesZpi7j2rsioZ3wyUkqb5TDZaNNeWQrIEYXrEnWkRI_qTSOzx0dRTsGO6SpU1fPWuOOYMZG8Nh18nay0kLpxReuHCiCdxjXRVvk5k9rkcMbDBJcBovhiSioPKv_yJxcZVBATw3z3TTE95kGi4wxCEenxwhSpvouwa5b0hT7NS4Ay70QaxoKiLb3ZjhZaUUn4igCyZM0h6fllR5I6J_sAQxiMYD0v5ouIlb0u8YVMni93j3zlqMWdDUZ4WgTI7NNbo8ug9NQDHd92TPmSE1TytPTgya3tsFMzwyq0LZ0b-g-zSXWIES__jKQ7vAtIs9EwlPxqJXEDDniZ2AJ6biXRYgE2Kd6W_nmI7w31igwQTms3ecXe5ENI3ckEPUAq__llNnND7mxp5ZrdXzd5HHU9slXwDShYcW3yDeQLEwAVomTGSFpBrCX8W77n9hF3JClkWaeS4QcZ3xUtsSS81yLrp__ifFfQqx9_Be89WVyIOoF4oydr08EkZ8zwlAsbZLG7eLXY\" }, \"callback\":\"\\/post\", \"version\":1, \"secret\":\"1eaa6613699be6ebb2adcefa5379c61a3678aa0df89025470fac871431b70467\" }, \"message\":{ \"message_id\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"message_top\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"message_parent\":\"10b049ce384cbb2da9467319bc98169ab36290b8bbb403aa0c0accd9cb072e76@podunk.edu\", \"created\":\"2012-11-20 04:04:16\", \"edited\":\"2012-11-20 04:04:16\", \"title\":\"\", \"body\":\"Hi Nickordo\", \"app\":\"\", \"verb\":\"post\", \"object_type\":\"\", \"target_type\":\"\", \"permalink\":\"\", \"location\":\"\", \"longlat\":\"\", \"owner\":{ \"name\":\"Indigo\", \"address\":\"indigo@podunk.edu\", \"url\":\"http:\\/\\/podunk.edu\", \"photo\":{ \"mimetype\":\"image\\/jpeg\", \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\" }, \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\" }, \"author\":{ \"name\":\"Indigo\", \"address\":\"indigo@podunk.edu\", \"url\":\"http:\\/\\/podunk.edu\", \"photo\":{ \"mimetype\":\"image\\/jpeg\", \"src\":\"http:\\/\\/podunk.edu\\/photo\\/profile\\/m\\/5\" }, \"guid\":\"kgVFf_1_SSbyqH-BNWjWuhAvJ2EhQBTUdw-Q1LwwssAntr8KTBgBSzNVzUm9_RwuDpxI6X8me_QQhZMf7RfjdA\", \"guid_sig\":\"PT9-TApzpm7QtMxC63MjtdK2nUyxNI0tUoWlOYTFGke3kNdtxSzSvDV4uzq_7SSBtlrNnVMAFx2_1FDgyKawmqVtRPmT7QSXrKOL2oPzL8Hu_nnVVTs_0YOLQJJ0GYACOOK-R5874WuXLEept5-KYg0uShifsvhHnxnPIlDM9lWuZ1hSJTrk3NN9Ds6AKpyNRqf3DUdz81-Xvs8I2kj6y5vfFtm-FPKAqu77XP05r74vGaWbqb1r8zpWC7zxXakVVOHHC4plG6rLINjQzvdSFKCQb5R_xtGsPPfvuE24bv4fvN4ZG2ILvb6X4Dly37WW_HXBqBnUs24mngoTxFaPgNmz1nDQNYQu91-ekX4-BNaovjDx4tP379qIG3-NygHTjFoOMDVUvs-pOPi1kfaoMjmYF2mdZAmVYS2nNLWxbeUymkHXF8lT_iVsJSzyaRFJS1Iqn7zbvwH1iUBjD_pB9EmtNmnUraKrCU9eHES27xTwD-yaaH_GHNc1XwXNbhWJaPFAm35U8ki1Le4WbUVRluFx0qwVqlEF3ieGO84PMidrp51FPm83B_oGt80xpvf6P8Ht5WvVpytjMU8UG7-js8hAzWQeYiK05YTXk-78xg0AO6NoNe_RSRk05zYpF6KlA2yQ_My79rZBv9GFt4kUfIxNjd9OiV1wXdidO7Iaq_Q\" } } } } And that's the package (the original message). Example.com converts this into a form suitable for viewing by Nickordo and notifies Nickordo that there's a new message. Podunk.edu might discover that there are other packages waiting for example.com. If this happens it may also send any and all other waiting packages at this time. Each has the original tracking number attached.","title":"Zot - A High Level Overview"},{"location":"dev/zot/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/classes/Zotlabs/Access/AccessList/","text":"AccessList Full name: \\Zotlabs\\Access\\AccessList Constants Constant Visibility Type Value REQUIRED_KEYS_CONSTRUCTOR private ['channel_allow_cid', 'channel_allow_gid', 'channel_deny_cid', 'channel_deny_gid'] REQUIRED_KEYS_SET private ['allow_cid', 'allow_gid', 'deny_cid', 'deny_gid'] Properties allow_cid private string $allow_cid allow_gid private string $allow_gid deny_cid private string $deny_cid deny_gid private string $deny_gid explicit private bool $explicit Methods __construct public __construct(array $channel): mixed Parameters: Parameter Type Description $channel array A channel array, where these entries are evaluated: \\e string \\b channel_allow_cid => string of allowed cids \\e string \\b channel_allow_gid => string of allowed gids \\e string \\b channel_deny_cid => string of denied cids \\e string \\b channel_deny_gid => string of denied gids validate_input_array private validate_input_array(array $arr, array $required_keys): void Parameters: Parameter Type Description $arr array $required_keys array get_explicit public get_explicit(): bool set public set(array $arr, bool $explicit = true): void Parameters: Parameter Type Description $arr array * \\e string \\b allow_cid => string of allowed cids * \\e string \\b allow_gid => string of allowed gids * \\e string \\b deny_cid => string of denied cids * \\e string \\b deny_gid => string of denied gids $explicit bool (optional) default true get public get(): array Return Value: An associative array with: * \\e string \\b allow_cid => string of allowed cids * \\e string \\b allow_gid => string of allowed gids * \\e string \\b deny_cid => string of denied cids * \\e string \\b deny_gid => string of denied gids set_from_array public set_from_array(array $arr, bool $explicit = true): void Parameters: Parameter Type Description $arr array An associative array with: \\e array&#124;string \\b contact_allow => array with cids or comma-seperated string \\e array&#124;string \\b group_allow => array with gids or comma-seperated string \\e array&#124;string \\b contact_deny => array with cids or comma-seperated string \\e array&#124;string \\b group_deny => array with gids or comma-seperated string $explicit bool (optional) default true is_private public is_private(): bool Return Value: Return true if any of allow_ deny_ values is set. Automatically generated on 2025-03-15","title":"AccessList"},{"location":"dev/classes/Zotlabs/Access/AccessList/#accesslist","text":"Full name: \\Zotlabs\\Access\\AccessList","title":"AccessList"},{"location":"dev/classes/Zotlabs/Access/AccessList/#constants","text":"Constant Visibility Type Value REQUIRED_KEYS_CONSTRUCTOR private ['channel_allow_cid', 'channel_allow_gid', 'channel_deny_cid', 'channel_deny_gid'] REQUIRED_KEYS_SET private ['allow_cid', 'allow_gid', 'deny_cid', 'deny_gid']","title":"Constants"},{"location":"dev/classes/Zotlabs/Access/AccessList/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Access/AccessList/#allow_cid","text":"private string $allow_cid","title":"allow_cid"},{"location":"dev/classes/Zotlabs/Access/AccessList/#allow_gid","text":"private string $allow_gid","title":"allow_gid"},{"location":"dev/classes/Zotlabs/Access/AccessList/#deny_cid","text":"private string $deny_cid","title":"deny_cid"},{"location":"dev/classes/Zotlabs/Access/AccessList/#deny_gid","text":"private string $deny_gid","title":"deny_gid"},{"location":"dev/classes/Zotlabs/Access/AccessList/#explicit","text":"private bool $explicit","title":"explicit"},{"location":"dev/classes/Zotlabs/Access/AccessList/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Access/AccessList/#__construct","text":"public __construct(array $channel): mixed Parameters: Parameter Type Description $channel array A channel array, where these entries are evaluated: \\e string \\b channel_allow_cid => string of allowed cids \\e string \\b channel_allow_gid => string of allowed gids \\e string \\b channel_deny_cid => string of denied cids \\e string \\b channel_deny_gid => string of denied gids","title":"__construct"},{"location":"dev/classes/Zotlabs/Access/AccessList/#validate_input_array","text":"private validate_input_array(array $arr, array $required_keys): void Parameters: Parameter Type Description $arr array $required_keys array","title":"validate_input_array"},{"location":"dev/classes/Zotlabs/Access/AccessList/#get_explicit","text":"public get_explicit(): bool","title":"get_explicit"},{"location":"dev/classes/Zotlabs/Access/AccessList/#set","text":"public set(array $arr, bool $explicit = true): void Parameters: Parameter Type Description $arr array * \\e string \\b allow_cid => string of allowed cids * \\e string \\b allow_gid => string of allowed gids * \\e string \\b deny_cid => string of denied cids * \\e string \\b deny_gid => string of denied gids $explicit bool (optional) default true","title":"set"},{"location":"dev/classes/Zotlabs/Access/AccessList/#get","text":"public get(): array Return Value: An associative array with: * \\e string \\b allow_cid => string of allowed cids * \\e string \\b allow_gid => string of allowed gids * \\e string \\b deny_cid => string of denied cids * \\e string \\b deny_gid => string of denied gids","title":"get"},{"location":"dev/classes/Zotlabs/Access/AccessList/#set_from_array","text":"public set_from_array(array $arr, bool $explicit = true): void Parameters: Parameter Type Description $arr array An associative array with: \\e array&#124;string \\b contact_allow => array with cids or comma-seperated string \\e array&#124;string \\b group_allow => array with gids or comma-seperated string \\e array&#124;string \\b contact_deny => array with cids or comma-seperated string \\e array&#124;string \\b group_deny => array with gids or comma-seperated string $explicit bool (optional) default true","title":"set_from_array"},{"location":"dev/classes/Zotlabs/Access/AccessList/#is_private","text":"public is_private(): bool Return Value: Return true if any of allow_ deny_ values is set. Automatically generated on 2025-03-15","title":"is_private"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/","text":"PermissionLimits Full name: \\Zotlabs\\Access\\PermissionLimits See Also: \\Zotlabs\\Access\\Permissions - Methods Std_Limits public static Std_Limits(): array This method is static . Set public static Set(int $channel_id, string $perm, int $perm_limit): mixed This method is static . Parameters: Parameter Type Description $channel_id int $perm string $perm_limit int one of PERMS_* constants Get public static Get(int $channel_id, string $perm = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $channel_id int $perm string (optional) Automatically generated on 2025-03-15","title":"PermissionLimits"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#permissionlimits","text":"Full name: \\Zotlabs\\Access\\PermissionLimits See Also: \\Zotlabs\\Access\\Permissions -","title":"PermissionLimits"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#std_limits","text":"public static Std_Limits(): array This method is static .","title":"Std_Limits"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#set","text":"public static Set(int $channel_id, string $perm, int $perm_limit): mixed This method is static . Parameters: Parameter Type Description $channel_id int $perm string $perm_limit int one of PERMS_* constants","title":"Set"},{"location":"dev/classes/Zotlabs/Access/PermissionLimits/#get","text":"public static Get(int $channel_id, string $perm = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $channel_id int $perm string (optional) Automatically generated on 2025-03-15","title":"Get"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/","text":"PermissionRoles Full name: \\Zotlabs\\Access\\PermissionRoles See Also: \\Zotlabs\\Access\\Permissions - Methods version public static version(): \\Zotlabs\\Access\\number This method is static . role_perms public static role_perms(mixed $role): mixed This method is static . Parameters: Parameter Type Description $role mixed new_custom_perms public static new_custom_perms(mixed $uid, mixed $perm, mixed $abooks): mixed This method is static . Parameters: Parameter Type Description $uid mixed $perm mixed $abooks mixed roles public static roles(): array This method is static . channel_roles public static channel_roles(): array This method is static . Automatically generated on 2025-03-15","title":"PermissionRoles"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#permissionroles","text":"Full name: \\Zotlabs\\Access\\PermissionRoles See Also: \\Zotlabs\\Access\\Permissions -","title":"PermissionRoles"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#version","text":"public static version(): \\Zotlabs\\Access\\number This method is static .","title":"version"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#role_perms","text":"public static role_perms(mixed $role): mixed This method is static . Parameters: Parameter Type Description $role mixed","title":"role_perms"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#new_custom_perms","text":"public static new_custom_perms(mixed $uid, mixed $perm, mixed $abooks): mixed This method is static . Parameters: Parameter Type Description $uid mixed $perm mixed $abooks mixed","title":"new_custom_perms"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#roles","text":"public static roles(): array This method is static .","title":"roles"},{"location":"dev/classes/Zotlabs/Access/PermissionRoles/#channel_roles","text":"public static channel_roles(): array This method is static . Automatically generated on 2025-03-15","title":"channel_roles"},{"location":"dev/classes/Zotlabs/Access/Permissions/","text":"Permissions Full name: \\Zotlabs\\Access\\Permissions Methods version public static version(): \\Zotlabs\\Access\\number This method is static . Perms public static Perms(string $filter = &#039;&#039;): array This method is static . Parameters: Parameter Type Description $filter string (optional) only passed to hook permissions_list Return Value: Associative array with permissions and short description. BlockedAnonPerms public static BlockedAnonPerms(): array This method is static . Return Value: Associative array with permissions and short description. FilledPerms public static FilledPerms(array $arr): array This method is static . Parameters: Parameter Type Description $arr array OPerms public static OPerms(array $arr): array This method is static . Parameters: Parameter Type Description $arr array associative perms array 'view_stream' => 1 Return Value: Indexed array with elements that look like * \\e string \\b name the perm name (e.g. view_stream) * \\e int \\b value the value of the perm (e.g. 1) FilledAutoperms public static FilledAutoperms(int $channel_id): bool|array This method is static . Parameters: Parameter Type Description $channel_id int PermsCompare public static PermsCompare(array $p1, array $p2): bool This method is static . Parameters: Parameter Type Description $p1 array The perms that have to exist in $p2 $p2 array The perms to compare against Return Value: true if all perms from $p1 exist also in $p2 connect_perms public static connect_perms(int $channel_id): array This method is static . Parameters: Parameter Type Description $channel_id int A channel id Return Value: Associative array with * \\e array \\b perms Permission array * \\e int \\b automatic 0 or 1 Automatically generated on 2025-03-15","title":"Permissions"},{"location":"dev/classes/Zotlabs/Access/Permissions/#permissions","text":"Full name: \\Zotlabs\\Access\\Permissions","title":"Permissions"},{"location":"dev/classes/Zotlabs/Access/Permissions/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Access/Permissions/#version","text":"public static version(): \\Zotlabs\\Access\\number This method is static .","title":"version"},{"location":"dev/classes/Zotlabs/Access/Permissions/#perms","text":"public static Perms(string $filter = &#039;&#039;): array This method is static . Parameters: Parameter Type Description $filter string (optional) only passed to hook permissions_list Return Value: Associative array with permissions and short description.","title":"Perms"},{"location":"dev/classes/Zotlabs/Access/Permissions/#blockedanonperms","text":"public static BlockedAnonPerms(): array This method is static . Return Value: Associative array with permissions and short description.","title":"BlockedAnonPerms"},{"location":"dev/classes/Zotlabs/Access/Permissions/#filledperms","text":"public static FilledPerms(array $arr): array This method is static . Parameters: Parameter Type Description $arr array","title":"FilledPerms"},{"location":"dev/classes/Zotlabs/Access/Permissions/#operms","text":"public static OPerms(array $arr): array This method is static . Parameters: Parameter Type Description $arr array associative perms array 'view_stream' => 1 Return Value: Indexed array with elements that look like * \\e string \\b name the perm name (e.g. view_stream) * \\e int \\b value the value of the perm (e.g. 1)","title":"OPerms"},{"location":"dev/classes/Zotlabs/Access/Permissions/#filledautoperms","text":"public static FilledAutoperms(int $channel_id): bool|array This method is static . Parameters: Parameter Type Description $channel_id int","title":"FilledAutoperms"},{"location":"dev/classes/Zotlabs/Access/Permissions/#permscompare","text":"public static PermsCompare(array $p1, array $p2): bool This method is static . Parameters: Parameter Type Description $p1 array The perms that have to exist in $p2 $p2 array The perms to compare against Return Value: true if all perms from $p1 exist also in $p2","title":"PermsCompare"},{"location":"dev/classes/Zotlabs/Access/Permissions/#connect_perms","text":"public static connect_perms(int $channel_id): array This method is static . Parameters: Parameter Type Description $channel_id int A channel id Return Value: Associative array with * \\e array \\b perms Permission array * \\e int \\b automatic 0 or 1 Automatically generated on 2025-03-15","title":"connect_perms"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/","text":"ASObject Full name: \\Zotlabs\\ActivityStreams\\ASObject Parent class: \\Zotlabs\\Lib\\BaseObject Properties id public $id type public $type attachment public $attachment attributedTo public $attributedTo audience public $audience content public $content context public $context name public $name endTime public $endTime generator public $generator icon public $icon image public $image inReplyTo public $inReplyTo location public $location preview public $preview published public $published replies public $replies startTime public $startTime summary public $summary tag public $tag updated public $updated url public $url to public $to bto public $bto cc public $cc bcc public $bcc mediaType public $mediaType duration public $duration source public $source signature public $signature proof public $proof sensitive public $sensitive replyTo public $replyTo wall public $wall isContainedConversation public $isContainedConversation expires public $expires canReply public $canReply canSearch public $canSearch directMessage public $directMessage commentPolicy public $commentPolicy Methods getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"ASObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#asobject","text":"Full name: \\Zotlabs\\ActivityStreams\\ASObject Parent class: \\Zotlabs\\Lib\\BaseObject","title":"ASObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#id","text":"public $id","title":"id"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#type","text":"public $type","title":"type"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#attachment","text":"public $attachment","title":"attachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#attributedto","text":"public $attributedTo","title":"attributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#audience","text":"public $audience","title":"audience"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#content","text":"public $content","title":"content"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#context","text":"public $context","title":"context"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#name","text":"public $name","title":"name"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#endtime","text":"public $endTime","title":"endTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#generator","text":"public $generator","title":"generator"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#icon","text":"public $icon","title":"icon"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#image","text":"public $image","title":"image"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#inreplyto","text":"public $inReplyTo","title":"inReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#location","text":"public $location","title":"location"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#preview","text":"public $preview","title":"preview"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#published","text":"public $published","title":"published"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#replies","text":"public $replies","title":"replies"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#starttime","text":"public $startTime","title":"startTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#summary","text":"public $summary","title":"summary"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#tag","text":"public $tag","title":"tag"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#updated","text":"public $updated","title":"updated"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#url","text":"public $url","title":"url"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#to","text":"public $to","title":"to"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#bto","text":"public $bto","title":"bto"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#cc","text":"public $cc","title":"cc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#bcc","text":"public $bcc","title":"bcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#mediatype","text":"public $mediaType","title":"mediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#duration","text":"public $duration","title":"duration"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#source","text":"public $source","title":"source"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#signature","text":"public $signature","title":"signature"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#proof","text":"public $proof","title":"proof"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#sensitive","text":"public $sensitive","title":"sensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#replyto","text":"public $replyTo","title":"replyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#wall","text":"public $wall","title":"wall"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#iscontainedconversation","text":"public $isContainedConversation","title":"isContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#expires","text":"public $expires","title":"expires"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#canreply","text":"public $canReply","title":"canReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#cansearch","text":"public $canSearch","title":"canSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#directmessage","text":"public $directMessage","title":"directMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#commentpolicy","text":"public $commentPolicy","title":"commentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/ASObject/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/","text":"Activity Full name: \\Zotlabs\\ActivityStreams\\Activity Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties actor public $actor object public $object target public $target result public $result origin public $origin instrument public $instrument Methods getActor public getActor(): mixed setActor public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $actor mixed getObject public getObject(): mixed setObject public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $object mixed getTarget public getTarget(): mixed setTarget public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $target mixed getResult public getResult(): mixed setResult public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $result mixed getOrigin public getOrigin(): mixed setOrigin public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $origin mixed getInstrument public getInstrument(): mixed setInstrument public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $instrument mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Activity"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#activity","text":"Full name: \\Zotlabs\\ActivityStreams\\Activity Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Activity"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#actor","text":"public $actor","title":"actor"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#object","text":"public $object","title":"object"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#target","text":"public $target","title":"target"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#result","text":"public $result","title":"result"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#origin","text":"public $origin","title":"origin"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#instrument","text":"public $instrument","title":"instrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getactor","text":"public getActor(): mixed","title":"getActor"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setactor","text":"public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $actor mixed","title":"setActor"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getobject","text":"public getObject(): mixed","title":"getObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setobject","text":"public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $object mixed","title":"setObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettarget","text":"public getTarget(): mixed","title":"getTarget"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settarget","text":"public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $target mixed","title":"setTarget"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getresult","text":"public getResult(): mixed","title":"getResult"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setresult","text":"public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $result mixed","title":"setResult"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getorigin","text":"public getOrigin(): mixed","title":"getOrigin"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setorigin","text":"public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $origin mixed","title":"setOrigin"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getinstrument","text":"public getInstrument(): mixed","title":"getInstrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setinstrument","text":"public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\Activity Parameters: Parameter Type Description $instrument mixed","title":"setInstrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Activity/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/","text":"Actor Full name: \\Zotlabs\\ActivityStreams\\Actor Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties inbox public $inbox outbox public $outbox followers public $followers following public $following permissions public $permissions endpoints public $endpoints publicKey public $publicKey preferredUsername public $preferredUsername alsoKnownAs public $alsoKnownAs movedTo public $movedTo copiedTo public $copiedTo discoverable public $discoverable manuallyApprovesFollowers public $manuallyApprovesFollowers webfinger public $webfinger canSearch public $canSearch indexable public $indexable assertionMethod public $assertionMethod gateways public $gateways openwebauth public $openwebauth authredirect public $authredirect Methods getAlsoKnownAs public getAlsoKnownAs(): mixed setAlsoKnownAs public setAlsoKnownAs(mixed $alsoKnownAs): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $alsoKnownAs mixed getMovedTo public getMovedTo(): mixed getCopiedTo public getCopiedTo(): mixed setCopiedTo public setCopiedTo(mixed $copiedTo): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $copiedTo mixed setMovedTo public setMovedTo(mixed $movedTo): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $movedTo mixed getDiscoverable public getDiscoverable(): mixed setDiscoverable public setDiscoverable(mixed $discoverable): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $discoverable mixed getManuallyApprovesFollowers public getManuallyApprovesFollowers(): mixed setManuallyApprovesFollowers public setManuallyApprovesFollowers(mixed $manuallyApprovesFollowers): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $manuallyApprovesFollowers mixed getPreferredUsername public getPreferredUsername(): mixed setPreferredUsername public setPreferredUsername(mixed $preferredUsername): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $preferredUsername mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $type mixed getInbox public getInbox(): mixed setInbox public setInbox(mixed $inbox): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $inbox mixed getOutbox public getOutbox(): mixed setOutbox public setOutbox(mixed $outbox): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $outbox mixed getFollowers public getFollowers(): mixed setFollowers public setFollowers(mixed $followers): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $followers mixed getFollowing public getFollowing(): mixed setFollowing public setFollowing(mixed $following): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $following mixed getEndpoints public getEndpoints(): mixed setEndpoints public setEndpoints(mixed $endpoints): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $endpoints mixed getPublicKey public getPublicKey(): mixed setPublicKey public setPublicKey(mixed $publicKey): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $publicKey mixed getWebfinger public getWebfinger(): mixed setWebfinger public setWebfinger(mixed $webfinger): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $webfinger mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $canSearch mixed getIndexable public getIndexable(): mixed setIndexable public setIndexable(mixed $indexable): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $indexable mixed getAssertionMethod public getAssertionMethod(): mixed setAssertionMethod public setAssertionMethod(mixed $assertionMethod): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $assertionMethod mixed getGateways public getGateways(): mixed setGateways public setGateways(mixed $gateways): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $gateways mixed getPermissions public getPermissions(): mixed setPermissions public setPermissions(mixed $permissions): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $permissions mixed getOpenwebauth public getOpenwebauth(): mixed setOpenwebauth public setOpenwebauth(mixed $openwebauth): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $openwebauth mixed getAuthredirect public getAuthredirect(): mixed setAuthredirect public setAuthredirect(mixed $authredirect): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $authredirect mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Actor"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#actor","text":"Full name: \\Zotlabs\\ActivityStreams\\Actor Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Actor"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#inbox","text":"public $inbox","title":"inbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#outbox","text":"public $outbox","title":"outbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#followers","text":"public $followers","title":"followers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#following","text":"public $following","title":"following"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#permissions","text":"public $permissions","title":"permissions"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#endpoints","text":"public $endpoints","title":"endpoints"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#publickey","text":"public $publicKey","title":"publicKey"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#preferredusername","text":"public $preferredUsername","title":"preferredUsername"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#alsoknownas","text":"public $alsoKnownAs","title":"alsoKnownAs"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#movedto","text":"public $movedTo","title":"movedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#copiedto","text":"public $copiedTo","title":"copiedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#discoverable","text":"public $discoverable","title":"discoverable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#manuallyapprovesfollowers","text":"public $manuallyApprovesFollowers","title":"manuallyApprovesFollowers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#webfinger","text":"public $webfinger","title":"webfinger"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#cansearch","text":"public $canSearch","title":"canSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#indexable","text":"public $indexable","title":"indexable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#assertionmethod","text":"public $assertionMethod","title":"assertionMethod"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gateways","text":"public $gateways","title":"gateways"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#openwebauth","text":"public $openwebauth","title":"openwebauth"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#authredirect","text":"public $authredirect","title":"authredirect"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getalsoknownas","text":"public getAlsoKnownAs(): mixed","title":"getAlsoKnownAs"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setalsoknownas","text":"public setAlsoKnownAs(mixed $alsoKnownAs): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $alsoKnownAs mixed","title":"setAlsoKnownAs"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmovedto","text":"public getMovedTo(): mixed","title":"getMovedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcopiedto","text":"public getCopiedTo(): mixed","title":"getCopiedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcopiedto","text":"public setCopiedTo(mixed $copiedTo): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $copiedTo mixed","title":"setCopiedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmovedto","text":"public setMovedTo(mixed $movedTo): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $movedTo mixed","title":"setMovedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdiscoverable","text":"public getDiscoverable(): mixed","title":"getDiscoverable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setdiscoverable","text":"public setDiscoverable(mixed $discoverable): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $discoverable mixed","title":"setDiscoverable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmanuallyapprovesfollowers","text":"public getManuallyApprovesFollowers(): mixed","title":"getManuallyApprovesFollowers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmanuallyapprovesfollowers","text":"public setManuallyApprovesFollowers(mixed $manuallyApprovesFollowers): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $manuallyApprovesFollowers mixed","title":"setManuallyApprovesFollowers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpreferredusername","text":"public getPreferredUsername(): mixed","title":"getPreferredUsername"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpreferredusername","text":"public setPreferredUsername(mixed $preferredUsername): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $preferredUsername mixed","title":"setPreferredUsername"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getinbox","text":"public getInbox(): mixed","title":"getInbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setinbox","text":"public setInbox(mixed $inbox): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $inbox mixed","title":"setInbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getoutbox","text":"public getOutbox(): mixed","title":"getOutbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setoutbox","text":"public setOutbox(mixed $outbox): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $outbox mixed","title":"setOutbox"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getfollowers","text":"public getFollowers(): mixed","title":"getFollowers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setfollowers","text":"public setFollowers(mixed $followers): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $followers mixed","title":"setFollowers"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getfollowing","text":"public getFollowing(): mixed","title":"getFollowing"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setfollowing","text":"public setFollowing(mixed $following): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $following mixed","title":"setFollowing"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getendpoints","text":"public getEndpoints(): mixed","title":"getEndpoints"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setendpoints","text":"public setEndpoints(mixed $endpoints): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $endpoints mixed","title":"setEndpoints"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpublickey","text":"public getPublicKey(): mixed","title":"getPublicKey"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpublickey","text":"public setPublicKey(mixed $publicKey): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $publicKey mixed","title":"setPublicKey"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getwebfinger","text":"public getWebfinger(): mixed","title":"getWebfinger"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setwebfinger","text":"public setWebfinger(mixed $webfinger): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $webfinger mixed","title":"setWebfinger"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getindexable","text":"public getIndexable(): mixed","title":"getIndexable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setindexable","text":"public setIndexable(mixed $indexable): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $indexable mixed","title":"setIndexable"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getassertionmethod","text":"public getAssertionMethod(): mixed","title":"getAssertionMethod"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setassertionmethod","text":"public setAssertionMethod(mixed $assertionMethod): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $assertionMethod mixed","title":"setAssertionMethod"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getgateways","text":"public getGateways(): mixed","title":"getGateways"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setgateways","text":"public setGateways(mixed $gateways): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $gateways mixed","title":"setGateways"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpermissions","text":"public getPermissions(): mixed","title":"getPermissions"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpermissions","text":"public setPermissions(mixed $permissions): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $permissions mixed","title":"setPermissions"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getopenwebauth","text":"public getOpenwebauth(): mixed","title":"getOpenwebauth"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setopenwebauth","text":"public setOpenwebauth(mixed $openwebauth): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $openwebauth mixed","title":"setOpenwebauth"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getauthredirect","text":"public getAuthredirect(): mixed","title":"getAuthredirect"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setauthredirect","text":"public setAuthredirect(mixed $authredirect): \\Zotlabs\\ActivityStreams\\Actor Parameters: Parameter Type Description $authredirect mixed","title":"setAuthredirect"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcansearch_1","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcansearch_1","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getid_1","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setid_1","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettype_1","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settype_1","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Actor/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/","text":"AssertionMethod Full name: \\Zotlabs\\ActivityStreams\\AssertionMethod Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties id public $id type public $type controller public $controller publicKeyMultibase public $publicKeyMultibase Methods getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $type mixed getController public getController(): mixed setController public setController(mixed $controller): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $controller mixed getPublicKeyMultibase public getPublicKeyMultibase(): mixed setPublicKeyMultibase public setPublicKeyMultibase(mixed $publicKeyMultibase): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $publicKeyMultibase mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"AssertionMethod"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#assertionmethod","text":"Full name: \\Zotlabs\\ActivityStreams\\AssertionMethod Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"AssertionMethod"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#id","text":"public $id","title":"id"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#type","text":"public $type","title":"type"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#controller","text":"public $controller","title":"controller"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#publickeymultibase","text":"public $publicKeyMultibase","title":"publicKeyMultibase"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontroller","text":"public getController(): mixed","title":"getController"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontroller","text":"public setController(mixed $controller): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $controller mixed","title":"setController"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpublickeymultibase","text":"public getPublicKeyMultibase(): mixed","title":"getPublicKeyMultibase"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpublickeymultibase","text":"public setPublicKeyMultibase(mixed $publicKeyMultibase): \\Zotlabs\\ActivityStreams\\AssertionMethod Parameters: Parameter Type Description $publicKeyMultibase mixed","title":"setPublicKeyMultibase"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getid_1","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setid_1","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettype_1","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settype_1","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/AssertionMethod/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/","text":"Collection Full name: \\Zotlabs\\ActivityStreams\\Collection Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties totalItems public int $totalItems current public string $current first public string $first last public string $last items public array $items collectionOf public mixed $collectionOf Methods getTotalItems public getTotalItems(): int setTotalItems public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed getCurrent public getCurrent(): string setCurrent public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed getFirst public getFirst(): string setFirst public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed getLast public getLast(): string setLast public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed getItems public getItems(): array setItems public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed getCollectionOf public getCollectionOf(): mixed setCollectionOf public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Collection"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#collection","text":"Full name: \\Zotlabs\\ActivityStreams\\Collection Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Collection"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#totalitems","text":"public int $totalItems","title":"totalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#current","text":"public string $current","title":"current"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#first","text":"public string $first","title":"first"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#last","text":"public string $last","title":"last"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#items","text":"public array $items","title":"items"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#collectionof","text":"public mixed $collectionOf","title":"collectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettotalitems","text":"public getTotalItems(): int","title":"getTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settotalitems","text":"public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed","title":"setTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcurrent","text":"public getCurrent(): string","title":"getCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcurrent","text":"public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed","title":"setCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getfirst","text":"public getFirst(): string","title":"getFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setfirst","text":"public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed","title":"setFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getlast","text":"public getLast(): string","title":"getLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setlast","text":"public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed","title":"setLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getitems","text":"public getItems(): array","title":"getItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setitems","text":"public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed","title":"setItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcollectionof","text":"public getCollectionOf(): mixed","title":"getCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcollectionof","text":"public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed","title":"setCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Collection/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/","text":"CollectionPage Full name: \\Zotlabs\\ActivityStreams\\CollectionPage Parent class: \\Zotlabs\\ActivityStreams\\Collection Properties partOf public $partOf next public $next prev public $prev startIndex public $startIndex Methods getPartOf public getPartOf(): mixed setPartOf public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $partOf mixed getNext public getNext(): mixed setNext public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $next mixed getPrev public getPrev(): mixed setPrev public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $prev mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed getTotalItems public getTotalItems(): int setTotalItems public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed getCurrent public getCurrent(): string setCurrent public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed getFirst public getFirst(): string setFirst public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed getLast public getLast(): string setLast public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed getItems public getItems(): array setItems public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed getCollectionOf public getCollectionOf(): mixed setCollectionOf public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"CollectionPage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#collectionpage","text":"Full name: \\Zotlabs\\ActivityStreams\\CollectionPage Parent class: \\Zotlabs\\ActivityStreams\\Collection","title":"CollectionPage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#partof","text":"public $partOf","title":"partOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#next","text":"public $next","title":"next"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#prev","text":"public $prev","title":"prev"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#startindex","text":"public $startIndex","title":"startIndex"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpartof","text":"public getPartOf(): mixed","title":"getPartOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpartof","text":"public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $partOf mixed","title":"setPartOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getnext","text":"public getNext(): mixed","title":"getNext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setnext","text":"public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $next mixed","title":"setNext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getprev","text":"public getPrev(): mixed","title":"getPrev"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setprev","text":"public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\CollectionPage Parameters: Parameter Type Description $prev mixed","title":"setPrev"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#gettotalitems","text":"public getTotalItems(): int","title":"getTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#settotalitems","text":"public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed","title":"setTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcurrent","text":"public getCurrent(): string","title":"getCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcurrent","text":"public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed","title":"setCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getfirst","text":"public getFirst(): string","title":"getFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setfirst","text":"public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed","title":"setFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getlast","text":"public getLast(): string","title":"getLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setlast","text":"public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed","title":"setLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getitems","text":"public getItems(): array","title":"getItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setitems","text":"public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed","title":"setItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#getcollectionof","text":"public getCollectionOf(): mixed","title":"getCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/CollectionPage/#setcollectionof","text":"public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"setCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/","text":"IntransitiveActivity Full name: \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties actor public $actor target public $target result public $result origin public $origin instrument public $instrument Methods getActor public getActor(): mixed setActor public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $actor mixed getTarget public getTarget(): mixed setTarget public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $target mixed getResult public getResult(): mixed setResult public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $result mixed getOrigin public getOrigin(): mixed setOrigin public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $origin mixed getInstrument public getInstrument(): mixed setInstrument public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $instrument mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"IntransitiveActivity"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#intransitiveactivity","text":"Full name: \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"IntransitiveActivity"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#actor","text":"public $actor","title":"actor"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#target","text":"public $target","title":"target"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#result","text":"public $result","title":"result"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#origin","text":"public $origin","title":"origin"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#instrument","text":"public $instrument","title":"instrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getactor","text":"public getActor(): mixed","title":"getActor"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setactor","text":"public setActor(mixed $actor): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $actor mixed","title":"setActor"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettarget","text":"public getTarget(): mixed","title":"getTarget"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settarget","text":"public setTarget(mixed $target): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $target mixed","title":"setTarget"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getresult","text":"public getResult(): mixed","title":"getResult"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setresult","text":"public setResult(mixed $result): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $result mixed","title":"setResult"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getorigin","text":"public getOrigin(): mixed","title":"getOrigin"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setorigin","text":"public setOrigin(mixed $origin): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $origin mixed","title":"setOrigin"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getinstrument","text":"public getInstrument(): mixed","title":"getInstrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setinstrument","text":"public setInstrument(mixed $instrument): \\Zotlabs\\ActivityStreams\\IntransitiveActivity Parameters: Parameter Type Description $instrument mixed","title":"setInstrument"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/IntransitiveActivity/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/","text":"Link Full name: \\Zotlabs\\ActivityStreams\\Link Parent class: \\Zotlabs\\Lib\\BaseObject Properties type public $type href public $href rel public $rel mediaType public $mediaType name public $name hreflang public $hreflang height public $height width public $width preview public $preview Methods getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $type mixed getHref public getHref(): mixed setHref public setHref(mixed $href): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $href mixed getRel public getRel(): mixed setRel public setRel(mixed $rel): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $rel mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $mediaType mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $name mixed getHreflang public getHreflang(): mixed setHreflang public setHreflang(mixed $hreflang): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $hreflang mixed getHeight public getHeight(): mixed setHeight public setHeight(mixed $height): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $height mixed getWidth public getWidth(): mixed setWidth public setWidth(mixed $width): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $width mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $preview mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"Link"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#link","text":"Full name: \\Zotlabs\\ActivityStreams\\Link Parent class: \\Zotlabs\\Lib\\BaseObject","title":"Link"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#type","text":"public $type","title":"type"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#href","text":"public $href","title":"href"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#rel","text":"public $rel","title":"rel"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#mediatype","text":"public $mediaType","title":"mediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#name","text":"public $name","title":"name"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#hreflang","text":"public $hreflang","title":"hreflang"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#height","text":"public $height","title":"height"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#width","text":"public $width","title":"width"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#preview","text":"public $preview","title":"preview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gethref","text":"public getHref(): mixed","title":"getHref"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#sethref","text":"public setHref(mixed $href): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $href mixed","title":"setHref"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getrel","text":"public getRel(): mixed","title":"getRel"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setrel","text":"public setRel(mixed $rel): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $rel mixed","title":"setRel"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#gethreflang","text":"public getHreflang(): mixed","title":"getHreflang"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#sethreflang","text":"public setHreflang(mixed $hreflang): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $hreflang mixed","title":"setHreflang"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getheight","text":"public getHeight(): mixed","title":"getHeight"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setheight","text":"public setHeight(mixed $height): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $height mixed","title":"setHeight"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getwidth","text":"public getWidth(): mixed","title":"getWidth"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setwidth","text":"public setWidth(mixed $width): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $width mixed","title":"setWidth"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\Link Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Link/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/","text":"OrderedCollection Full name: \\Zotlabs\\ActivityStreams\\OrderedCollection Parent class: \\Zotlabs\\ActivityStreams\\Collection Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed getTotalItems public getTotalItems(): int setTotalItems public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed getCurrent public getCurrent(): string setCurrent public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed getFirst public getFirst(): string setFirst public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed getLast public getLast(): string setLast public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed getItems public getItems(): array setItems public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed getCollectionOf public getCollectionOf(): mixed setCollectionOf public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"OrderedCollection"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#orderedcollection","text":"Full name: \\Zotlabs\\ActivityStreams\\OrderedCollection Parent class: \\Zotlabs\\ActivityStreams\\Collection","title":"OrderedCollection"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#gettotalitems","text":"public getTotalItems(): int","title":"getTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#settotalitems","text":"public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed","title":"setTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcurrent","text":"public getCurrent(): string","title":"getCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcurrent","text":"public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed","title":"setCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getfirst","text":"public getFirst(): string","title":"getFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setfirst","text":"public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed","title":"setFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getlast","text":"public getLast(): string","title":"getLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setlast","text":"public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed","title":"setLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getitems","text":"public getItems(): array","title":"getItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setitems","text":"public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed","title":"setItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#getcollectionof","text":"public getCollectionOf(): mixed","title":"getCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollection/#setcollectionof","text":"public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"setCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/","text":"OrderedCollectionPage According to the specification, OrderedCollectionPage extends both OrderedCollection and CollectionPage, but PHP is still a bit awkward when it comes to multiple inheritance. Rather than try and do this with traits, we'll just include the CollectionPage elements here - as this only consists of three properties. Full name: \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parent class: \\Zotlabs\\ActivityStreams\\OrderedCollection Properties partOf public $partOf next public $next prev public $prev startIndex public $startIndex Methods getPartOf public getPartOf(): mixed setPartOf public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $partOf mixed getNext public getNext(): mixed setNext public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $next mixed getPrev public getPrev(): mixed setPrev public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $prev mixed getStartIndex public getStartIndex(): mixed setStartIndex public setStartIndex(mixed $startIndex): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $startIndex mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed getTotalItems public getTotalItems(): int setTotalItems public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed getCurrent public getCurrent(): string setCurrent public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed getFirst public getFirst(): string setFirst public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed getLast public getLast(): string setLast public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed getItems public getItems(): array setItems public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed getCollectionOf public getCollectionOf(): mixed setCollectionOf public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"OrderedCollectionPage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#orderedcollectionpage","text":"According to the specification, OrderedCollectionPage extends both OrderedCollection and CollectionPage, but PHP is still a bit awkward when it comes to multiple inheritance. Rather than try and do this with traits, we'll just include the CollectionPage elements here - as this only consists of three properties. Full name: \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parent class: \\Zotlabs\\ActivityStreams\\OrderedCollection","title":"OrderedCollectionPage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#partof","text":"public $partOf","title":"partOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#next","text":"public $next","title":"next"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#prev","text":"public $prev","title":"prev"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#startindex","text":"public $startIndex","title":"startIndex"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpartof","text":"public getPartOf(): mixed","title":"getPartOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpartof","text":"public setPartOf(mixed $partOf): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $partOf mixed","title":"setPartOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getnext","text":"public getNext(): mixed","title":"getNext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setnext","text":"public setNext(mixed $next): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $next mixed","title":"setNext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getprev","text":"public getPrev(): mixed","title":"getPrev"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setprev","text":"public setPrev(mixed $prev): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $prev mixed","title":"setPrev"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getstartindex","text":"public getStartIndex(): mixed","title":"getStartIndex"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setstartindex","text":"public setStartIndex(mixed $startIndex): \\Zotlabs\\ActivityStreams\\OrderedCollectionPage Parameters: Parameter Type Description $startIndex mixed","title":"setStartIndex"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#gettotalitems","text":"public getTotalItems(): int","title":"getTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#settotalitems","text":"public setTotalItems(mixed $totalItems): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $totalItems mixed","title":"setTotalItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcurrent","text":"public getCurrent(): string","title":"getCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcurrent","text":"public setCurrent(mixed $current): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $current mixed","title":"setCurrent"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getfirst","text":"public getFirst(): string","title":"getFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setfirst","text":"public setFirst(mixed $first): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $first mixed","title":"setFirst"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getlast","text":"public getLast(): string","title":"getLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setlast","text":"public setLast(mixed $last): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $last mixed","title":"setLast"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getitems","text":"public getItems(): array","title":"getItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setitems","text":"public setItems(mixed $items): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $items mixed","title":"setItems"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#getcollectionof","text":"public getCollectionOf(): mixed","title":"getCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/OrderedCollectionPage/#setcollectionof","text":"public setCollectionOf(mixed $collectionOf): \\Zotlabs\\ActivityStreams\\Collection Parameters: Parameter Type Description $collectionOf mixed Automatically generated on 2025-03-15","title":"setCollectionOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/","text":"Place Full name: \\Zotlabs\\ActivityStreams\\Place Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties accuracy public $accuracy altitude public $altitude latitude public $latitude longitude public $longitude radius public $radius units public $units Methods getAccuracy public getAccuracy(): mixed setAccuracy public setAccuracy(mixed $accuracy): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $accuracy mixed getAltitude public getAltitude(): mixed setAltitude public setAltitude(mixed $altitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $altitude mixed getLatitude public getLatitude(): mixed setLatitude public setLatitude(mixed $latitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $latitude mixed getLongitude public getLongitude(): mixed setLongitude public setLongitude(mixed $longitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $longitude mixed getRadius public getRadius(): mixed setRadius public setRadius(mixed $radius): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $radius mixed getUnits public getUnits(): mixed setUnits public setUnits(mixed $units): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $units mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Place"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#place","text":"Full name: \\Zotlabs\\ActivityStreams\\Place Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Place"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#accuracy","text":"public $accuracy","title":"accuracy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#altitude","text":"public $altitude","title":"altitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#latitude","text":"public $latitude","title":"latitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#longitude","text":"public $longitude","title":"longitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#radius","text":"public $radius","title":"radius"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#units","text":"public $units","title":"units"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaccuracy","text":"public getAccuracy(): mixed","title":"getAccuracy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaccuracy","text":"public setAccuracy(mixed $accuracy): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $accuracy mixed","title":"setAccuracy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaltitude","text":"public getAltitude(): mixed","title":"getAltitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaltitude","text":"public setAltitude(mixed $altitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $altitude mixed","title":"setAltitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlatitude","text":"public getLatitude(): mixed","title":"getLatitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlatitude","text":"public setLatitude(mixed $latitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $latitude mixed","title":"setLatitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlongitude","text":"public getLongitude(): mixed","title":"getLongitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlongitude","text":"public setLongitude(mixed $longitude): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $longitude mixed","title":"setLongitude"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getradius","text":"public getRadius(): mixed","title":"getRadius"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setradius","text":"public setRadius(mixed $radius): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $radius mixed","title":"setRadius"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getunits","text":"public getUnits(): mixed","title":"getUnits"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setunits","text":"public setUnits(mixed $units): \\Zotlabs\\ActivityStreams\\Place Parameters: Parameter Type Description $units mixed","title":"setUnits"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Place/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/","text":"Profile Full name: \\Zotlabs\\ActivityStreams\\Profile Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties describes public $describes Methods getDescribes public getDescribes(): mixed setDescribes public setDescribes(mixed $describes): \\Zotlabs\\ActivityStreams\\Profile Parameters: Parameter Type Description $describes mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Profile"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#profile","text":"Full name: \\Zotlabs\\ActivityStreams\\Profile Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Profile"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#describes","text":"public $describes","title":"describes"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdescribes","text":"public getDescribes(): mixed","title":"getDescribes"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setdescribes","text":"public setDescribes(mixed $describes): \\Zotlabs\\ActivityStreams\\Profile Parameters: Parameter Type Description $describes mixed","title":"setDescribes"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Profile/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/","text":"PublicKey Full name: \\Zotlabs\\ActivityStreams\\PublicKey Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties owner public $owner signatureAlgorithm public $signatureAlgorithm publicKeyPem public $publicKeyPem Methods getOwner public getOwner(): mixed setOwner public setOwner(mixed $owner): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $owner mixed getSignatureAlgorithm public getSignatureAlgorithm(): mixed setSignatureAlgorithm public setSignatureAlgorithm(mixed $signatureAlgorithm): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $signatureAlgorithm mixed getPublicKeyPem public getPublicKeyPem(): mixed setPublicKeyPem public setPublicKeyPem(mixed $publicKeyPem): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $publicKeyPem mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"PublicKey"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#publickey","text":"Full name: \\Zotlabs\\ActivityStreams\\PublicKey Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"PublicKey"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#owner","text":"public $owner","title":"owner"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#signaturealgorithm","text":"public $signatureAlgorithm","title":"signatureAlgorithm"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#publickeypem","text":"public $publicKeyPem","title":"publicKeyPem"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getowner","text":"public getOwner(): mixed","title":"getOwner"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setowner","text":"public setOwner(mixed $owner): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $owner mixed","title":"setOwner"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsignaturealgorithm","text":"public getSignatureAlgorithm(): mixed","title":"getSignatureAlgorithm"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsignaturealgorithm","text":"public setSignatureAlgorithm(mixed $signatureAlgorithm): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $signatureAlgorithm mixed","title":"setSignatureAlgorithm"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpublickeypem","text":"public getPublicKeyPem(): mixed","title":"getPublicKeyPem"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpublickeypem","text":"public setPublicKeyPem(mixed $publicKeyPem): \\Zotlabs\\ActivityStreams\\PublicKey Parameters: Parameter Type Description $publicKeyPem mixed","title":"setPublicKeyPem"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/PublicKey/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/","text":"Question Full name: \\Zotlabs\\ActivityStreams\\Question Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties oneOf public $oneOf anyOf public $anyOf closed public $closed Methods getOneOf public getOneOf(): mixed setOneOf public setOneOf(mixed $oneOf): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $oneOf mixed getAnyOf public getAnyOf(): mixed setAnyOf public setAnyOf(mixed $anyOf): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $anyOf mixed getClosed public getClosed(): mixed setClosed public setClosed(mixed $closed): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $closed mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Question"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#question","text":"Full name: \\Zotlabs\\ActivityStreams\\Question Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Question"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#oneof","text":"public $oneOf","title":"oneOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#anyof","text":"public $anyOf","title":"anyOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#closed","text":"public $closed","title":"closed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getoneof","text":"public getOneOf(): mixed","title":"getOneOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setoneof","text":"public setOneOf(mixed $oneOf): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $oneOf mixed","title":"setOneOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getanyof","text":"public getAnyOf(): mixed","title":"getAnyOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setanyof","text":"public setAnyOf(mixed $anyOf): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $anyOf mixed","title":"setAnyOf"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getclosed","text":"public getClosed(): mixed","title":"getClosed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setclosed","text":"public setClosed(mixed $closed): \\Zotlabs\\ActivityStreams\\Question Parameters: Parameter Type Description $closed mixed","title":"setClosed"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Question/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/","text":"Relationship Full name: \\Zotlabs\\ActivityStreams\\Relationship Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties subject public $subject object public $object relationship public $relationship Methods getSubject public getSubject(): mixed setSubject public setSubject(mixed $subject): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $subject mixed getObject public getObject(): mixed setObject public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $object mixed getRelationship public getRelationship(): mixed setRelationship public setRelationship(mixed $relationship): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $relationship mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Relationship"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#relationship","text":"Full name: \\Zotlabs\\ActivityStreams\\Relationship Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Relationship"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#subject","text":"public $subject","title":"subject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#object","text":"public $object","title":"object"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#relationship_1","text":"public $relationship","title":"relationship"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsubject","text":"public getSubject(): mixed","title":"getSubject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsubject","text":"public setSubject(mixed $subject): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $subject mixed","title":"setSubject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getobject","text":"public getObject(): mixed","title":"getObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setobject","text":"public setObject(mixed $object): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $object mixed","title":"setObject"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getrelationship","text":"public getRelationship(): mixed","title":"getRelationship"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setrelationship","text":"public setRelationship(mixed $relationship): \\Zotlabs\\ActivityStreams\\Relationship Parameters: Parameter Type Description $relationship mixed","title":"setRelationship"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Relationship/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/","text":"Signature Full name: \\Zotlabs\\ActivityStreams\\Signature Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties nonce public $nonce creator public $creator signatureValue public $signatureValue Methods getCreator public getCreator(): mixed setCreator public setCreator(mixed $creator): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $creator mixed getSignatureValue public getSignatureValue(): mixed setSignatureValue public setSignatureValue(mixed $signatureValue): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $signatureValue mixed getNonce public getNonce(): mixed setNonce public setNonce(mixed $nonce): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $nonce mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Signature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#signature","text":"Full name: \\Zotlabs\\ActivityStreams\\Signature Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Signature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#nonce","text":"public $nonce","title":"nonce"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#creator","text":"public $creator","title":"creator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#signaturevalue","text":"public $signatureValue","title":"signatureValue"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcreator","text":"public getCreator(): mixed","title":"getCreator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcreator","text":"public setCreator(mixed $creator): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $creator mixed","title":"setCreator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsignaturevalue","text":"public getSignatureValue(): mixed","title":"getSignatureValue"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsignaturevalue","text":"public setSignatureValue(mixed $signatureValue): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $signatureValue mixed","title":"setSignatureValue"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getnonce","text":"public getNonce(): mixed","title":"getNonce"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setnonce","text":"public setNonce(mixed $nonce): \\Zotlabs\\ActivityStreams\\Signature Parameters: Parameter Type Description $nonce mixed","title":"setNonce"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Signature/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/","text":"Tombstone Full name: \\Zotlabs\\ActivityStreams\\Tombstone Parent class: \\Zotlabs\\ActivityStreams\\ASObject Properties formerType public $formerType deleted public $deleted Methods getFormerType public getFormerType(): mixed setFormerType public setFormerType(mixed $formerType): \\Zotlabs\\ActivityStreams\\Tombstone Parameters: Parameter Type Description $formerType mixed getDeleted public getDeleted(): mixed setDeleted public setDeleted(mixed $deleted): \\Zotlabs\\ActivityStreams\\Tombstone Parameters: Parameter Type Description $deleted mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed getDirectMessage public getDirectMessage(): mixed setDirectMessage public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed getSignature public getSignature(): mixed setSignature public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed getProof public getProof(): mixed setProof public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed getSensitive public getSensitive(): mixed setSensitive public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed getReplyTo public getReplyTo(): mixed setReplyTo public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed getWall public getWall(): mixed setWall public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed getIsContainedConversation public getIsContainedConversation(): mixed setIsContainedConversation public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed getCanReply public getCanReply(): mixed setCanReply public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed getCanSearch public getCanSearch(): mixed setCanSearch public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed getType public getType(): mixed setType public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed getAttachment public getAttachment(): mixed setAttachment public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed getAttributedTo public getAttributedTo(): mixed setAttributedTo public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed getAudience public getAudience(): mixed setAudience public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed getContent public getContent(): mixed setContent public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed getContext public getContext(): mixed setContext public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed getName public getName(): mixed setName public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed getEndTime public getEndTime(): mixed setEndTime public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed getGenerator public getGenerator(): mixed setGenerator public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed getIcon public getIcon(): mixed setIcon public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed getImage public getImage(): mixed setImage public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed getInReplyTo public getInReplyTo(): mixed setInReplyTo public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed getPreview public getPreview(): mixed setPreview public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed getPublished public getPublished(): mixed setPublished public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed getReplies public getReplies(): mixed setReplies public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed getStartTime public getStartTime(): mixed setStartTime public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed getTag public getTag(): mixed setTag public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed getUpdated public getUpdated(): mixed setUpdated public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed getUrl public getUrl(): mixed setUrl public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed getTo public getTo(): mixed setTo public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed getBto public getBto(): mixed setBto public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed getCc public getCc(): mixed setCc public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed getBcc public getBcc(): mixed setBcc public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed getMediaType public getMediaType(): mixed setMediaType public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed getDuration public getDuration(): mixed setDuration public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed getSource public getSource(): mixed setSource public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"Tombstone"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#tombstone","text":"Full name: \\Zotlabs\\ActivityStreams\\Tombstone Parent class: \\Zotlabs\\ActivityStreams\\ASObject","title":"Tombstone"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#formertype","text":"public $formerType","title":"formerType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#deleted","text":"public $deleted","title":"deleted"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getformertype","text":"public getFormerType(): mixed","title":"getFormerType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setformertype","text":"public setFormerType(mixed $formerType): \\Zotlabs\\ActivityStreams\\Tombstone Parameters: Parameter Type Description $formerType mixed","title":"setFormerType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdeleted","text":"public getDeleted(): mixed","title":"getDeleted"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setdeleted","text":"public setDeleted(mixed $deleted): \\Zotlabs\\ActivityStreams\\Tombstone Parameters: Parameter Type Description $deleted mixed","title":"setDeleted"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed","title":"setLdContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getdirectmessage","text":"public getDirectMessage(): mixed","title":"getDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setdirectmessage","text":"public setDirectMessage(mixed $directMessage): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $directMessage mixed","title":"setDirectMessage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsignature","text":"public getSignature(): mixed","title":"getSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsignature","text":"public setSignature(mixed $signature): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $signature mixed","title":"setSignature"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getproof","text":"public getProof(): mixed","title":"getProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setproof","text":"public setProof(mixed $proof): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $proof mixed","title":"setProof"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsensitive","text":"public getSensitive(): mixed","title":"getSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsensitive","text":"public setSensitive(mixed $sensitive): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $sensitive mixed","title":"setSensitive"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getreplyto","text":"public getReplyTo(): mixed","title":"getReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setreplyto","text":"public setReplyTo(mixed $replyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replyTo mixed","title":"setReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setwall","text":"public setWall(mixed $wall): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getiscontainedconversation","text":"public getIsContainedConversation(): mixed","title":"getIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setiscontainedconversation","text":"public setIsContainedConversation(mixed $isContainedConversation): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $isContainedConversation mixed","title":"setIsContainedConversation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcanreply","text":"public getCanReply(): mixed","title":"getCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcanreply","text":"public setCanReply(mixed $canReply): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canReply mixed","title":"setCanReply"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcansearch","text":"public getCanSearch(): mixed","title":"getCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcansearch","text":"public setCanSearch(mixed $canSearch): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $canSearch mixed","title":"setCanSearch"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcommentpolicy","text":"public setCommentPolicy(mixed $commentPolicy): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $commentPolicy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setid","text":"public setId(mixed $id): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#settype","text":"public setType(mixed $type): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getattachment","text":"public getAttachment(): mixed","title":"getAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setattachment","text":"public setAttachment(mixed $attachment): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attachment mixed","title":"setAttachment"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getattributedto","text":"public getAttributedTo(): mixed","title":"getAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setattributedto","text":"public setAttributedTo(mixed $attributedTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $attributedTo mixed","title":"setAttributedTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getaudience","text":"public getAudience(): mixed","title":"getAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setaudience","text":"public setAudience(mixed $audience): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $audience mixed","title":"setAudience"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcontent","text":"public getContent(): mixed","title":"getContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcontent","text":"public setContent(mixed $content): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $content mixed","title":"setContent"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcontext","text":"public getContext(): mixed","title":"getContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcontext","text":"public setContext(mixed $context): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $context mixed","title":"setContext"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setname","text":"public setName(mixed $name): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getendtime","text":"public getEndTime(): mixed","title":"getEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setendtime","text":"public setEndTime(mixed $endTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $endTime mixed","title":"setEndTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getgenerator","text":"public getGenerator(): mixed","title":"getGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setgenerator","text":"public setGenerator(mixed $generator): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $generator mixed","title":"setGenerator"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#geticon","text":"public getIcon(): mixed","title":"getIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#seticon","text":"public setIcon(mixed $icon): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $icon mixed","title":"setIcon"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getimage","text":"public getImage(): mixed","title":"getImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setimage","text":"public setImage(mixed $image): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $image mixed","title":"setImage"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getinreplyto","text":"public getInReplyTo(): mixed","title":"getInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setinreplyto","text":"public setInReplyTo(mixed $inReplyTo): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $inReplyTo mixed","title":"setInReplyTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getpreview","text":"public getPreview(): mixed","title":"getPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setpreview","text":"public setPreview(mixed $preview): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $preview mixed","title":"setPreview"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getpublished","text":"public getPublished(): mixed","title":"getPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setpublished","text":"public setPublished(mixed $published): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $published mixed","title":"setPublished"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getreplies","text":"public getReplies(): mixed","title":"getReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setreplies","text":"public setReplies(mixed $replies): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $replies mixed","title":"setReplies"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getstarttime","text":"public getStartTime(): mixed","title":"getStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setstarttime","text":"public setStartTime(mixed $startTime): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $startTime mixed","title":"setStartTime"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#gettag","text":"public getTag(): mixed","title":"getTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#settag","text":"public setTag(mixed $tag): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $tag mixed","title":"setTag"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getupdated","text":"public getUpdated(): mixed","title":"getUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setupdated","text":"public setUpdated(mixed $updated): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $updated mixed","title":"setUpdated"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#geturl","text":"public getUrl(): mixed","title":"getUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#seturl","text":"public setUrl(mixed $url): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $url mixed","title":"setUrl"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getto","text":"public getTo(): mixed","title":"getTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setto","text":"public setTo(mixed $to): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $to mixed","title":"setTo"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getbto","text":"public getBto(): mixed","title":"getBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setbto","text":"public setBto(mixed $bto): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bto mixed","title":"setBto"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getcc","text":"public getCc(): mixed","title":"getCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setcc","text":"public setCc(mixed $cc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $cc mixed","title":"setCc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getbcc","text":"public getBcc(): mixed","title":"getBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setbcc","text":"public setBcc(mixed $bcc): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $bcc mixed","title":"setBcc"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getmediatype","text":"public getMediaType(): mixed","title":"getMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setmediatype","text":"public setMediaType(mixed $mediaType): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $mediaType mixed","title":"setMediaType"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getduration","text":"public getDuration(): mixed","title":"getDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setduration","text":"public setDuration(mixed $duration): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $duration mixed","title":"setDuration"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#getsource","text":"public getSource(): mixed","title":"getSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/Tombstone/#setsource","text":"public setSource(mixed $source): \\Zotlabs\\ActivityStreams\\ASObject Parameters: Parameter Type Description $source mixed Automatically generated on 2025-03-15","title":"setSource"},{"location":"dev/classes/Zotlabs/ActivityStreams/UnhandledElementException/","text":"UnhandledElementException Full name: \\Zotlabs\\ActivityStreams\\UnhandledElementException Parent class: Exception Automatically generated on 2025-03-15","title":"UnhandledElementException"},{"location":"dev/classes/Zotlabs/ActivityStreams/UnhandledElementException/#unhandledelementexception","text":"Full name: \\Zotlabs\\ActivityStreams\\UnhandledElementException Parent class: Exception Automatically generated on 2025-03-15","title":"UnhandledElementException"},{"location":"dev/classes/Zotlabs/Daemon/Addon/","text":"Addon Full name: \\Zotlabs\\Daemon\\Addon Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Addon"},{"location":"dev/classes/Zotlabs/Daemon/Addon/#addon","text":"Full name: \\Zotlabs\\Daemon\\Addon","title":"Addon"},{"location":"dev/classes/Zotlabs/Daemon/Addon/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Addon/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/","text":"Cache_embeds Full name: \\Zotlabs\\Daemon\\Cache_embeds Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cache_embeds"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/#cache_embeds","text":"Full name: \\Zotlabs\\Daemon\\Cache_embeds","title":"Cache_embeds"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cache_embeds/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/","text":"Cache_query Full name: \\Zotlabs\\Daemon\\Cache_query Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cache_query"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/#cache_query","text":"Full name: \\Zotlabs\\Daemon\\Cache_query","title":"Cache_query"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cache_query/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/","text":"Channel_purge Full name: \\Zotlabs\\Daemon\\Channel_purge Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Channel_purge"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/#channel_purge","text":"Full name: \\Zotlabs\\Daemon\\Channel_purge","title":"Channel_purge"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Channel_purge/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/","text":"Checksites Full name: \\Zotlabs\\Daemon\\Checksites Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Checksites"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/#checksites","text":"Full name: \\Zotlabs\\Daemon\\Checksites","title":"Checksites"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Checksites/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/","text":"Cli_suggest Full name: \\Zotlabs\\Daemon\\Cli_suggest Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cli_suggest"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/#cli_suggest","text":"Full name: \\Zotlabs\\Daemon\\Cli_suggest","title":"Cli_suggest"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cli_suggest/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/","text":"Content_importer Full name: \\Zotlabs\\Daemon\\Content_importer Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Content_importer"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/#content_importer","text":"Full name: \\Zotlabs\\Daemon\\Content_importer","title":"Content_importer"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Content_importer/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Convo/","text":"Convo Full name: \\Zotlabs\\Daemon\\Convo Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Convo"},{"location":"dev/classes/Zotlabs/Daemon/Convo/#convo","text":"Full name: \\Zotlabs\\Daemon\\Convo","title":"Convo"},{"location":"dev/classes/Zotlabs/Daemon/Convo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Convo/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cron/","text":"Cron Full name: \\Zotlabs\\Daemon\\Cron Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cron"},{"location":"dev/classes/Zotlabs/Daemon/Cron/#cron","text":"Full name: \\Zotlabs\\Daemon\\Cron","title":"Cron"},{"location":"dev/classes/Zotlabs/Daemon/Cron/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cron/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/","text":"Cron_daily Full name: \\Zotlabs\\Daemon\\Cron_daily Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cron_daily"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/#cron_daily","text":"Full name: \\Zotlabs\\Daemon\\Cron_daily","title":"Cron_daily"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cron_daily/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/","text":"Cron_weekly Full name: \\Zotlabs\\Daemon\\Cron_weekly Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cron_weekly"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/#cron_weekly","text":"Full name: \\Zotlabs\\Daemon\\Cron_weekly","title":"Cron_weekly"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cron_weekly/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/","text":"Cronhooks Full name: \\Zotlabs\\Daemon\\Cronhooks Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Cronhooks"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/#cronhooks","text":"Full name: \\Zotlabs\\Daemon\\Cronhooks","title":"Cronhooks"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Cronhooks/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/","text":"CurlAuth Full name: \\Zotlabs\\Daemon\\CurlAuth Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"CurlAuth"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/#curlauth","text":"Full name: \\Zotlabs\\Daemon\\CurlAuth","title":"CurlAuth"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/CurlAuth/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/","text":"Deliver Full name: \\Zotlabs\\Daemon\\Deliver Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Deliver"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/#deliver","text":"Full name: \\Zotlabs\\Daemon\\Deliver","title":"Deliver"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Deliver/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/","text":"Deliver_hooks Full name: \\Zotlabs\\Daemon\\Deliver_hooks Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Deliver_hooks"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/#deliver_hooks","text":"Full name: \\Zotlabs\\Daemon\\Deliver_hooks","title":"Deliver_hooks"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Deliver_hooks/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/","text":"Delxitems Full name: \\Zotlabs\\Daemon\\Delxitems Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Delxitems"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/#delxitems","text":"Full name: \\Zotlabs\\Daemon\\Delxitems","title":"Delxitems"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Delxitems/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Directory/","text":"Directory Full name: \\Zotlabs\\Daemon\\Directory Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Directory"},{"location":"dev/classes/Zotlabs/Daemon/Directory/#directory","text":"Full name: \\Zotlabs\\Daemon\\Directory","title":"Directory"},{"location":"dev/classes/Zotlabs/Daemon/Directory/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Directory/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Expire/","text":"Expire Full name: \\Zotlabs\\Daemon\\Expire Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Expire"},{"location":"dev/classes/Zotlabs/Daemon/Expire/#expire","text":"Full name: \\Zotlabs\\Daemon\\Expire","title":"Expire"},{"location":"dev/classes/Zotlabs/Daemon/Expire/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Expire/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Externals/","text":"Externals Full name: \\Zotlabs\\Daemon\\Externals Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Externals"},{"location":"dev/classes/Zotlabs/Daemon/Externals/#externals","text":"Full name: \\Zotlabs\\Daemon\\Externals","title":"Externals"},{"location":"dev/classes/Zotlabs/Daemon/Externals/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Externals/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/","text":"Fetchparents Full name: \\Zotlabs\\Daemon\\Fetchparents Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Fetchparents"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/#fetchparents","text":"Full name: \\Zotlabs\\Daemon\\Fetchparents","title":"Fetchparents"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Fetchparents/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/","text":"File_importer Full name: \\Zotlabs\\Daemon\\File_importer Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"File_importer"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/#file_importer","text":"Full name: \\Zotlabs\\Daemon\\File_importer","title":"File_importer"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/File_importer/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/","text":"Gprobe Full name: \\Zotlabs\\Daemon\\Gprobe Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Gprobe"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/#gprobe","text":"Full name: \\Zotlabs\\Daemon\\Gprobe","title":"Gprobe"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Gprobe/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/","text":"Importdoc Full name: \\Zotlabs\\Daemon\\Importdoc Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed update_docs_dir public static update_docs_dir(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed Automatically generated on 2025-03-15","title":"Importdoc"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#importdoc","text":"Full name: \\Zotlabs\\Daemon\\Importdoc","title":"Importdoc"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Importdoc/#update_docs_dir","text":"public static update_docs_dir(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed Automatically generated on 2025-03-15","title":"update_docs_dir"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/","text":"Importfile Full name: \\Zotlabs\\Daemon\\Importfile Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Importfile"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/#importfile","text":"Full name: \\Zotlabs\\Daemon\\Importfile","title":"Importfile"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Importfile/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Master/","text":"Master Full name: \\Zotlabs\\Daemon\\Master Methods Summon public static Summon(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed Release public static Release(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Master"},{"location":"dev/classes/Zotlabs/Daemon/Master/#master","text":"Full name: \\Zotlabs\\Daemon\\Master","title":"Master"},{"location":"dev/classes/Zotlabs/Daemon/Master/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Master/#summon","text":"public static Summon(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"Summon"},{"location":"dev/classes/Zotlabs/Daemon/Master/#release","text":"public static Release(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Release"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/","text":"Notifier Full name: \\Zotlabs\\Daemon\\Notifier Properties deliveries public static $deliveries This property is static . recipients public static $recipients This property is static . env_recips public static $env_recips This property is static . packet_type public static $packet_type This property is static . encoding public static $encoding This property is static . encoded_item public static $encoded_item This property is static . channel public static $channel This property is static . private public static $private This property is static . Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Notifier"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#notifier","text":"Full name: \\Zotlabs\\Daemon\\Notifier","title":"Notifier"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#deliveries","text":"public static $deliveries This property is static .","title":"deliveries"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#recipients","text":"public static $recipients This property is static .","title":"recipients"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#env_recips","text":"public static $env_recips This property is static .","title":"env_recips"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#packet_type","text":"public static $packet_type This property is static .","title":"packet_type"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#encoding","text":"public static $encoding This property is static .","title":"encoding"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#encoded_item","text":"public static $encoded_item This property is static .","title":"encoded_item"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#channel","text":"public static $channel This property is static .","title":"channel"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#private","text":"public static $private This property is static .","title":"private"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Notifier/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/","text":"Onedirsync Full name: \\Zotlabs\\Daemon\\Onedirsync Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Onedirsync"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/#onedirsync","text":"Full name: \\Zotlabs\\Daemon\\Onedirsync","title":"Onedirsync"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Onedirsync/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/","text":"Onepoll Full name: \\Zotlabs\\Daemon\\Onepoll Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Onepoll"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/#onepoll","text":"Full name: \\Zotlabs\\Daemon\\Onepoll","title":"Onepoll"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Onepoll/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Poller/","text":"Poller Full name: \\Zotlabs\\Daemon\\Poller Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Poller"},{"location":"dev/classes/Zotlabs/Daemon/Poller/#poller","text":"Full name: \\Zotlabs\\Daemon\\Poller","title":"Poller"},{"location":"dev/classes/Zotlabs/Daemon/Poller/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Poller/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Queue/","text":"Queue Full name: \\Zotlabs\\Daemon\\Queue Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Queue"},{"location":"dev/classes/Zotlabs/Daemon/Queue/#queue","text":"Full name: \\Zotlabs\\Daemon\\Queue","title":"Queue"},{"location":"dev/classes/Zotlabs/Daemon/Queue/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Queue/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/","text":"Thumbnail Full name: \\Zotlabs\\Daemon\\Thumbnail Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Thumbnail"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/#thumbnail","text":"Full name: \\Zotlabs\\Daemon\\Thumbnail","title":"Thumbnail"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Thumbnail/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/","text":"Xchan_photo Full name: \\Zotlabs\\Daemon\\Xchan_photo Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Xchan_photo"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/#xchan_photo","text":"Full name: \\Zotlabs\\Daemon\\Xchan_photo","title":"Xchan_photo"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Xchan_photo/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/","text":"Zotconvo Full name: \\Zotlabs\\Daemon\\Zotconvo Methods run public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"Zotconvo"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/#zotconvo","text":"Full name: \\Zotlabs\\Daemon\\Zotconvo","title":"Zotconvo"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Daemon/Zotconvo/#run","text":"public static run(mixed $argc, mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argc mixed $argv mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Entity/Account/","text":"Account Full name: \\Zotlabs\\Entity\\Account Parent class: \\Zotlabs\\Lib\\BaseObject Properties account_id public $account_id account_parent public $account_parent account_default_channel public $account_default_channel account_salt public $account_salt account_password public $account_password account_email public $account_email account_external public $account_external account_language public $account_language account_created public $account_created account_lastlog public $account_lastlog account_flags public $account_flags account_roles public $account_roles account_reset public $account_reset account_expires public $account_expires account_expire_notified public $account_expire_notified account_service_class public $account_service_class account_level public $account_level account_password_change public $account_password_change Methods getId public getId(): mixed setId public setId(mixed $account_id): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_id mixed getParent public getParent(): mixed setParent public setParent(mixed $account_parent): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_parent mixed getDefaultChannel public getDefaultChannel(): mixed setDefaultChannel public setDefaultChannel(mixed $account_default_channel): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_default_channel mixed getSalt public getSalt(): mixed setSalt public setSalt(mixed $account_salt): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_salt mixed getPassword public getPassword(): mixed setPassword public setPassword(mixed $account_password): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_password mixed getEmail public getEmail(): mixed setEmail public setEmail(mixed $account_email): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_email mixed getExternal public getExternal(): mixed setExternal public setExternal(mixed $account_external): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_external mixed getLanguage public getLanguage(): mixed setLanguage public setLanguage(mixed $account_language): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_language mixed getCreated public getCreated(): mixed setCreated public setCreated(mixed $account_created): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_created mixed getLastlog public getLastlog(): mixed setLastlog public setLastlog(mixed $account_lastlog): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_lastlog mixed getFlags public getFlags(): mixed setFlags public setFlags(mixed $account_flags): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_flags mixed getRoles public getRoles(): mixed setRoles public setRoles(mixed $account_roles): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_roles mixed getReset public getReset(): mixed setReset public setReset(mixed $account_reset): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_reset mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $account_expires): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_expires mixed getExpireNotified public getExpireNotified(): mixed setExpireNotified public setExpireNotified(mixed $account_expire_notified): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_expire_notified mixed getServiceClass public getServiceClass(): mixed setServiceClass public setServiceClass(mixed $account_service_class): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_service_class mixed getLevel public getLevel(): mixed setLevel public setLevel(mixed $account_level): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_level mixed getPasswordChange public getPasswordChange(): mixed setPasswordChange public setPasswordChange(mixed $account_password_change): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_password_change mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"Account"},{"location":"dev/classes/Zotlabs/Entity/Account/#account","text":"Full name: \\Zotlabs\\Entity\\Account Parent class: \\Zotlabs\\Lib\\BaseObject","title":"Account"},{"location":"dev/classes/Zotlabs/Entity/Account/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_id","text":"public $account_id","title":"account_id"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_parent","text":"public $account_parent","title":"account_parent"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_default_channel","text":"public $account_default_channel","title":"account_default_channel"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_salt","text":"public $account_salt","title":"account_salt"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_password","text":"public $account_password","title":"account_password"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_email","text":"public $account_email","title":"account_email"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_external","text":"public $account_external","title":"account_external"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_language","text":"public $account_language","title":"account_language"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_created","text":"public $account_created","title":"account_created"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_lastlog","text":"public $account_lastlog","title":"account_lastlog"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_flags","text":"public $account_flags","title":"account_flags"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_roles","text":"public $account_roles","title":"account_roles"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_reset","text":"public $account_reset","title":"account_reset"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_expires","text":"public $account_expires","title":"account_expires"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_expire_notified","text":"public $account_expire_notified","title":"account_expire_notified"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_service_class","text":"public $account_service_class","title":"account_service_class"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_level","text":"public $account_level","title":"account_level"},{"location":"dev/classes/Zotlabs/Entity/Account/#account_password_change","text":"public $account_password_change","title":"account_password_change"},{"location":"dev/classes/Zotlabs/Entity/Account/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Entity/Account/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/Entity/Account/#setid","text":"public setId(mixed $account_id): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/Entity/Account/#getparent","text":"public getParent(): mixed","title":"getParent"},{"location":"dev/classes/Zotlabs/Entity/Account/#setparent","text":"public setParent(mixed $account_parent): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_parent mixed","title":"setParent"},{"location":"dev/classes/Zotlabs/Entity/Account/#getdefaultchannel","text":"public getDefaultChannel(): mixed","title":"getDefaultChannel"},{"location":"dev/classes/Zotlabs/Entity/Account/#setdefaultchannel","text":"public setDefaultChannel(mixed $account_default_channel): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_default_channel mixed","title":"setDefaultChannel"},{"location":"dev/classes/Zotlabs/Entity/Account/#getsalt","text":"public getSalt(): mixed","title":"getSalt"},{"location":"dev/classes/Zotlabs/Entity/Account/#setsalt","text":"public setSalt(mixed $account_salt): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_salt mixed","title":"setSalt"},{"location":"dev/classes/Zotlabs/Entity/Account/#getpassword","text":"public getPassword(): mixed","title":"getPassword"},{"location":"dev/classes/Zotlabs/Entity/Account/#setpassword","text":"public setPassword(mixed $account_password): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_password mixed","title":"setPassword"},{"location":"dev/classes/Zotlabs/Entity/Account/#getemail","text":"public getEmail(): mixed","title":"getEmail"},{"location":"dev/classes/Zotlabs/Entity/Account/#setemail","text":"public setEmail(mixed $account_email): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_email mixed","title":"setEmail"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexternal","text":"public getExternal(): mixed","title":"getExternal"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexternal","text":"public setExternal(mixed $account_external): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_external mixed","title":"setExternal"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlanguage","text":"public getLanguage(): mixed","title":"getLanguage"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlanguage","text":"public setLanguage(mixed $account_language): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_language mixed","title":"setLanguage"},{"location":"dev/classes/Zotlabs/Entity/Account/#getcreated","text":"public getCreated(): mixed","title":"getCreated"},{"location":"dev/classes/Zotlabs/Entity/Account/#setcreated","text":"public setCreated(mixed $account_created): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_created mixed","title":"setCreated"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlastlog","text":"public getLastlog(): mixed","title":"getLastlog"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlastlog","text":"public setLastlog(mixed $account_lastlog): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_lastlog mixed","title":"setLastlog"},{"location":"dev/classes/Zotlabs/Entity/Account/#getflags","text":"public getFlags(): mixed","title":"getFlags"},{"location":"dev/classes/Zotlabs/Entity/Account/#setflags","text":"public setFlags(mixed $account_flags): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_flags mixed","title":"setFlags"},{"location":"dev/classes/Zotlabs/Entity/Account/#getroles","text":"public getRoles(): mixed","title":"getRoles"},{"location":"dev/classes/Zotlabs/Entity/Account/#setroles","text":"public setRoles(mixed $account_roles): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_roles mixed","title":"setRoles"},{"location":"dev/classes/Zotlabs/Entity/Account/#getreset","text":"public getReset(): mixed","title":"getReset"},{"location":"dev/classes/Zotlabs/Entity/Account/#setreset","text":"public setReset(mixed $account_reset): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_reset mixed","title":"setReset"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexpires","text":"public setExpires(mixed $account_expires): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/Entity/Account/#getexpirenotified","text":"public getExpireNotified(): mixed","title":"getExpireNotified"},{"location":"dev/classes/Zotlabs/Entity/Account/#setexpirenotified","text":"public setExpireNotified(mixed $account_expire_notified): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_expire_notified mixed","title":"setExpireNotified"},{"location":"dev/classes/Zotlabs/Entity/Account/#getserviceclass","text":"public getServiceClass(): mixed","title":"getServiceClass"},{"location":"dev/classes/Zotlabs/Entity/Account/#setserviceclass","text":"public setServiceClass(mixed $account_service_class): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_service_class mixed","title":"setServiceClass"},{"location":"dev/classes/Zotlabs/Entity/Account/#getlevel","text":"public getLevel(): mixed","title":"getLevel"},{"location":"dev/classes/Zotlabs/Entity/Account/#setlevel","text":"public setLevel(mixed $account_level): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_level mixed","title":"setLevel"},{"location":"dev/classes/Zotlabs/Entity/Account/#getpasswordchange","text":"public getPasswordChange(): mixed","title":"getPasswordChange"},{"location":"dev/classes/Zotlabs/Entity/Account/#setpasswordchange","text":"public setPasswordChange(mixed $account_password_change): \\Zotlabs\\Entity\\Account Parameters: Parameter Type Description $account_password_change mixed","title":"setPasswordChange"},{"location":"dev/classes/Zotlabs/Entity/Account/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Entity/Account/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/Entity/Account/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/Entity/Account/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/Entity/Account/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/Entity/Account/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/Entity/Channel/","text":"Channel Full name: \\Zotlabs\\Entity\\Channel Parent class: \\Zotlabs\\Lib\\BaseObject Properties channel_id public $channel_id channel_account_id public $channel_account_id channel_primary public $channel_primary channel_name public $channel_name channel_parent public $channel_parent channel_address public $channel_address channel_guid public $channel_guid channel_guid_sig public $channel_guid_sig channel_hash public $channel_hash channel_timezone public $channel_timezone channel_location public $channel_location channel_theme public $channel_theme channel_startpage public $channel_startpage channel_pubkey public $channel_pubkey channel_prvkey public $channel_prvkey channel_epubkey public $channel_epubkey channel_eprvkey public $channel_eprvkey channel_notifyflags public $channel_notifyflags channel_pageflags public $channel_pageflags channel_dirdate public $channel_dirdate channel_lastpost public $channel_lastpost channel_deleted public $channel_deleted channel_active public $channel_active channel_max_anon_mail public $channel_max_anon_mail channel_max_friend_req public $channel_max_friend_req channel_expire_days public $channel_expire_days channel_passwd_reset public $channel_passwd_reset channel_default_group public $channel_default_group channel_allow_cid public $channel_allow_cid channel_allow_gid public $channel_allow_gid channel_deny_cid public $channel_deny_cid channel_deny_gid public $channel_deny_gid channel_removed public $channel_removed channel_system public $channel_system channel_moved public $channel_moved channel_password public $channel_password channel_salt public $channel_salt Methods getId public getId(): mixed setId public setId(mixed $channel_id): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_id mixed getAccountId public getAccountId(): mixed setAccountId public setAccountId(mixed $channel_account_id): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_account_id mixed getPrimary public getPrimary(): mixed setPrimary public setPrimary(mixed $channel_primary): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_primary mixed getName public getName(): mixed setName public setName(mixed $channel_name): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_name mixed getParent public getParent(): mixed setParent public setParent(mixed $channel_parent): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_parent mixed getAddress public getAddress(): mixed setAddress public setAddress(mixed $channel_address): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_address mixed getGuid public getGuid(): mixed setGuid public setGuid(mixed $channel_guid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_guid mixed getGuidSig public getGuidSig(): mixed setGuidSig public setGuidSig(mixed $channel_guid_sig): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_guid_sig mixed getHash public getHash(): mixed setHash public setHash(mixed $channel_hash): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_hash mixed getTimezone public getTimezone(): mixed setTimezone public setTimezone(mixed $channel_timezone): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_timezone mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $channel_location): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_location mixed getTheme public getTheme(): mixed setTheme public setTheme(mixed $channel_theme): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_theme mixed getStartpage public getStartpage(): mixed setStartpage public setStartpage(mixed $channel_startpage): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_startpage mixed getPubkey public getPubkey(): mixed setPubkey public setPubkey(mixed $channel_pubkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_pubkey mixed getPrvkey public getPrvkey(): mixed setPrvkey public setPrvkey(mixed $channel_prvkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_prvkey mixed getEpubkey public getEpubkey(): mixed setEpubkey public setEpubkey(mixed $channel_epubkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_epubkey mixed getEprvkey public getEprvkey(): mixed setEprvkey public setEprvkey(mixed $channel_eprvkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_eprvkey mixed getNotifyflags public getNotifyflags(): mixed setNotifyflags public setNotifyflags(mixed $channel_notifyflags): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_notifyflags mixed getPageflags public getPageflags(): mixed setPageflags public setPageflags(mixed $channel_pageflags): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_pageflags mixed getDirdate public getDirdate(): mixed setDirdate public setDirdate(mixed $channel_dirdate): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_dirdate mixed getLastpost public getLastpost(): mixed setLastpost public setLastpost(mixed $channel_lastpost): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_lastpost mixed getDeleted public getDeleted(): mixed setDeleted public setDeleted(mixed $channel_deleted): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deleted mixed getActive public getActive(): mixed setActive public setActive(mixed $channel_active): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_active mixed getMaxAnonMail public getMaxAnonMail(): mixed setMaxAnonMail public setMaxAnonMail(mixed $channel_max_anon_mail): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_max_anon_mail mixed getMaxFriendReq public getMaxFriendReq(): mixed setMaxFriendReq public setMaxFriendReq(mixed $channel_max_friend_req): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_max_friend_req mixed getExpireDays public getExpireDays(): mixed setExpireDays public setExpireDays(mixed $channel_expire_days): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_expire_days mixed getPasswdReset public getPasswdReset(): mixed setPasswdReset public setPasswdReset(mixed $channel_passwd_reset): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_passwd_reset mixed getDefaultGroup public getDefaultGroup(): mixed setDefaultGroup public setDefaultGroup(mixed $channel_default_group): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_default_group mixed getAllowCid public getAllowCid(): mixed setAllowCid public setAllowCid(mixed $channel_allow_cid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_allow_cid mixed getAllowGid public getAllowGid(): mixed setAllowGid public setAllowGid(mixed $channel_allow_gid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_allow_gid mixed getDenyCid public getDenyCid(): mixed setDenyCid public setDenyCid(mixed $channel_deny_cid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deny_cid mixed getDenyGid public getDenyGid(): mixed setDenyGid public setDenyGid(mixed $channel_deny_gid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deny_gid mixed getRemoved public getRemoved(): mixed setRemoved public setRemoved(mixed $channel_removed): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_removed mixed getSystem public getSystem(): mixed setSystem public setSystem(mixed $channel_system): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_system mixed getMoved public getMoved(): mixed setMoved public setMoved(mixed $channel_moved): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_moved mixed getPassword public getPassword(): mixed setPassword public setPassword(mixed $channel_password): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_password mixed getSalt public getSalt(): mixed setSalt public setSalt(mixed $channel_salt): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_salt mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"Channel"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel","text":"Full name: \\Zotlabs\\Entity\\Channel Parent class: \\Zotlabs\\Lib\\BaseObject","title":"Channel"},{"location":"dev/classes/Zotlabs/Entity/Channel/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_id","text":"public $channel_id","title":"channel_id"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_account_id","text":"public $channel_account_id","title":"channel_account_id"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_primary","text":"public $channel_primary","title":"channel_primary"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_name","text":"public $channel_name","title":"channel_name"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_parent","text":"public $channel_parent","title":"channel_parent"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_address","text":"public $channel_address","title":"channel_address"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_guid","text":"public $channel_guid","title":"channel_guid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_guid_sig","text":"public $channel_guid_sig","title":"channel_guid_sig"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_hash","text":"public $channel_hash","title":"channel_hash"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_timezone","text":"public $channel_timezone","title":"channel_timezone"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_location","text":"public $channel_location","title":"channel_location"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_theme","text":"public $channel_theme","title":"channel_theme"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_startpage","text":"public $channel_startpage","title":"channel_startpage"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_pubkey","text":"public $channel_pubkey","title":"channel_pubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_prvkey","text":"public $channel_prvkey","title":"channel_prvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_epubkey","text":"public $channel_epubkey","title":"channel_epubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_eprvkey","text":"public $channel_eprvkey","title":"channel_eprvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_notifyflags","text":"public $channel_notifyflags","title":"channel_notifyflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_pageflags","text":"public $channel_pageflags","title":"channel_pageflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_dirdate","text":"public $channel_dirdate","title":"channel_dirdate"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_lastpost","text":"public $channel_lastpost","title":"channel_lastpost"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deleted","text":"public $channel_deleted","title":"channel_deleted"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_active","text":"public $channel_active","title":"channel_active"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_max_anon_mail","text":"public $channel_max_anon_mail","title":"channel_max_anon_mail"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_max_friend_req","text":"public $channel_max_friend_req","title":"channel_max_friend_req"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_expire_days","text":"public $channel_expire_days","title":"channel_expire_days"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_passwd_reset","text":"public $channel_passwd_reset","title":"channel_passwd_reset"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_default_group","text":"public $channel_default_group","title":"channel_default_group"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_allow_cid","text":"public $channel_allow_cid","title":"channel_allow_cid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_allow_gid","text":"public $channel_allow_gid","title":"channel_allow_gid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deny_cid","text":"public $channel_deny_cid","title":"channel_deny_cid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_deny_gid","text":"public $channel_deny_gid","title":"channel_deny_gid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_removed","text":"public $channel_removed","title":"channel_removed"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_system","text":"public $channel_system","title":"channel_system"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_moved","text":"public $channel_moved","title":"channel_moved"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_password","text":"public $channel_password","title":"channel_password"},{"location":"dev/classes/Zotlabs/Entity/Channel/#channel_salt","text":"public $channel_salt","title":"channel_salt"},{"location":"dev/classes/Zotlabs/Entity/Channel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setid","text":"public setId(mixed $channel_id): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getaccountid","text":"public getAccountId(): mixed","title":"getAccountId"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setaccountid","text":"public setAccountId(mixed $channel_account_id): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_account_id mixed","title":"setAccountId"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getprimary","text":"public getPrimary(): mixed","title":"getPrimary"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setprimary","text":"public setPrimary(mixed $channel_primary): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_primary mixed","title":"setPrimary"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getname","text":"public getName(): mixed","title":"getName"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setname","text":"public setName(mixed $channel_name): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_name mixed","title":"setName"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getparent","text":"public getParent(): mixed","title":"getParent"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setparent","text":"public setParent(mixed $channel_parent): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_parent mixed","title":"setParent"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getaddress","text":"public getAddress(): mixed","title":"getAddress"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setaddress","text":"public setAddress(mixed $channel_address): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_address mixed","title":"setAddress"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getguid","text":"public getGuid(): mixed","title":"getGuid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setguid","text":"public setGuid(mixed $channel_guid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_guid mixed","title":"setGuid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getguidsig","text":"public getGuidSig(): mixed","title":"getGuidSig"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setguidsig","text":"public setGuidSig(mixed $channel_guid_sig): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_guid_sig mixed","title":"setGuidSig"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gethash","text":"public getHash(): mixed","title":"getHash"},{"location":"dev/classes/Zotlabs/Entity/Channel/#sethash","text":"public setHash(mixed $channel_hash): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_hash mixed","title":"setHash"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gettimezone","text":"public getTimezone(): mixed","title":"getTimezone"},{"location":"dev/classes/Zotlabs/Entity/Channel/#settimezone","text":"public setTimezone(mixed $channel_timezone): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_timezone mixed","title":"setTimezone"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setlocation","text":"public setLocation(mixed $channel_location): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/Entity/Channel/#gettheme","text":"public getTheme(): mixed","title":"getTheme"},{"location":"dev/classes/Zotlabs/Entity/Channel/#settheme","text":"public setTheme(mixed $channel_theme): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_theme mixed","title":"setTheme"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getstartpage","text":"public getStartpage(): mixed","title":"getStartpage"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setstartpage","text":"public setStartpage(mixed $channel_startpage): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_startpage mixed","title":"setStartpage"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpubkey","text":"public getPubkey(): mixed","title":"getPubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpubkey","text":"public setPubkey(mixed $channel_pubkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_pubkey mixed","title":"setPubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getprvkey","text":"public getPrvkey(): mixed","title":"getPrvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setprvkey","text":"public setPrvkey(mixed $channel_prvkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_prvkey mixed","title":"setPrvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getepubkey","text":"public getEpubkey(): mixed","title":"getEpubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setepubkey","text":"public setEpubkey(mixed $channel_epubkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_epubkey mixed","title":"setEpubkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#geteprvkey","text":"public getEprvkey(): mixed","title":"getEprvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#seteprvkey","text":"public setEprvkey(mixed $channel_eprvkey): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_eprvkey mixed","title":"setEprvkey"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getnotifyflags","text":"public getNotifyflags(): mixed","title":"getNotifyflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setnotifyflags","text":"public setNotifyflags(mixed $channel_notifyflags): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_notifyflags mixed","title":"setNotifyflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpageflags","text":"public getPageflags(): mixed","title":"getPageflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpageflags","text":"public setPageflags(mixed $channel_pageflags): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_pageflags mixed","title":"setPageflags"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdirdate","text":"public getDirdate(): mixed","title":"getDirdate"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdirdate","text":"public setDirdate(mixed $channel_dirdate): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_dirdate mixed","title":"setDirdate"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getlastpost","text":"public getLastpost(): mixed","title":"getLastpost"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setlastpost","text":"public setLastpost(mixed $channel_lastpost): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_lastpost mixed","title":"setLastpost"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdeleted","text":"public getDeleted(): mixed","title":"getDeleted"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdeleted","text":"public setDeleted(mixed $channel_deleted): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deleted mixed","title":"setDeleted"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getactive","text":"public getActive(): mixed","title":"getActive"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setactive","text":"public setActive(mixed $channel_active): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_active mixed","title":"setActive"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmaxanonmail","text":"public getMaxAnonMail(): mixed","title":"getMaxAnonMail"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmaxanonmail","text":"public setMaxAnonMail(mixed $channel_max_anon_mail): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_max_anon_mail mixed","title":"setMaxAnonMail"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmaxfriendreq","text":"public getMaxFriendReq(): mixed","title":"getMaxFriendReq"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmaxfriendreq","text":"public setMaxFriendReq(mixed $channel_max_friend_req): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_max_friend_req mixed","title":"setMaxFriendReq"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getexpiredays","text":"public getExpireDays(): mixed","title":"getExpireDays"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setexpiredays","text":"public setExpireDays(mixed $channel_expire_days): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_expire_days mixed","title":"setExpireDays"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpasswdreset","text":"public getPasswdReset(): mixed","title":"getPasswdReset"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpasswdreset","text":"public setPasswdReset(mixed $channel_passwd_reset): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_passwd_reset mixed","title":"setPasswdReset"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdefaultgroup","text":"public getDefaultGroup(): mixed","title":"getDefaultGroup"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdefaultgroup","text":"public setDefaultGroup(mixed $channel_default_group): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_default_group mixed","title":"setDefaultGroup"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getallowcid","text":"public getAllowCid(): mixed","title":"getAllowCid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setallowcid","text":"public setAllowCid(mixed $channel_allow_cid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_allow_cid mixed","title":"setAllowCid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getallowgid","text":"public getAllowGid(): mixed","title":"getAllowGid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setallowgid","text":"public setAllowGid(mixed $channel_allow_gid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_allow_gid mixed","title":"setAllowGid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdenycid","text":"public getDenyCid(): mixed","title":"getDenyCid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdenycid","text":"public setDenyCid(mixed $channel_deny_cid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deny_cid mixed","title":"setDenyCid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdenygid","text":"public getDenyGid(): mixed","title":"getDenyGid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setdenygid","text":"public setDenyGid(mixed $channel_deny_gid): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_deny_gid mixed","title":"setDenyGid"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getremoved","text":"public getRemoved(): mixed","title":"getRemoved"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setremoved","text":"public setRemoved(mixed $channel_removed): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_removed mixed","title":"setRemoved"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getsystem","text":"public getSystem(): mixed","title":"getSystem"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setsystem","text":"public setSystem(mixed $channel_system): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_system mixed","title":"setSystem"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getmoved","text":"public getMoved(): mixed","title":"getMoved"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setmoved","text":"public setMoved(mixed $channel_moved): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_moved mixed","title":"setMoved"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getpassword","text":"public getPassword(): mixed","title":"getPassword"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setpassword","text":"public setPassword(mixed $channel_password): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_password mixed","title":"setPassword"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getsalt","text":"public getSalt(): mixed","title":"getSalt"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setsalt","text":"public setSalt(mixed $channel_salt): \\Zotlabs\\Entity\\Channel Parameters: Parameter Type Description $channel_salt mixed","title":"setSalt"},{"location":"dev/classes/Zotlabs/Entity/Channel/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Entity/Channel/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/Entity/Channel/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/Entity/Channel/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/Entity/Channel/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/Entity/Item/","text":"Item Full name: \\Zotlabs\\Entity\\Item Parent class: \\Zotlabs\\Lib\\BaseObject Properties id public $id parent public $parent aid public $aid uid public $uid uuid public $uuid mid public $mid parent_mid public $parent_mid thr_parent public $thr_parent item_level public $item_level llink public $llink plink public $plink created public $created edited public $edited expires public $expires commented public $commented received public $received changed public $changed comments_closed public $comments_closed owner_xchan public $owner_xchan author_xchan public $author_xchan source_xchan public $source_xchan mimetype public $mimetype lang public $lang app public $app title public $title summary public $summary body public $body html public $html verb public $verb obj_type public $obj_type obj public $obj tgt_type public $tgt_type target public $target attach public $attach sig public $sig revision public $revision layout_mid public $layout_mid postopts public $postopts route public $route resource_id public $resource_id resource_type public $resource_type location public $location coord public $coord public_policy public $public_policy comment_policy public $comment_policy allow_cid public $allow_cid allow_gid public $allow_gid deny_cid public $deny_cid deny_gid public $deny_gid item_restrict public $item_restrict item_flags public $item_flags item_private public $item_private item_origin public $item_origin item_unseen public $item_unseen item_starred public $item_starred item_uplink public $item_uplink item_consensus public $item_consensus item_wall public $item_wall item_thread_top public $item_thread_top item_notshown public $item_notshown item_nsfw public $item_nsfw item_relay public $item_relay item_mentionsme public $item_mentionsme item_nocomment public $item_nocomment item_obscured public $item_obscured item_verified public $item_verified item_retained public $item_retained item_rss public $item_rss item_deleted public $item_deleted item_type public $item_type item_hidden public $item_hidden item_unpublished public $item_unpublished item_delayed public $item_delayed item_pending_remove public $item_pending_remove item_blocked public $item_blocked Methods getId public getId(): mixed setId public setId(mixed $id): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $id mixed getMid public getMid(): mixed setMid public setMid(mixed $mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $mid mixed getUuid public getUuid(): mixed setUuid public setUuid(mixed $uuid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $uuid mixed getAid public getAid(): mixed setAid public setAid(mixed $aid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $aid mixed getUid public getUid(): mixed setUid public setUid(mixed $uid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $uid mixed getParent public getParent(): mixed setParent public setParent(mixed $parent): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $parent mixed getParentMid public getParentMid(): mixed setParentMid public setParentMid(mixed $parent_mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $parent_mid mixed getThrParent public getThrParent(): mixed setThrParent public setThrParent(mixed $thr_parent): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $thr_parent mixed getLevel public getLevel(): mixed setLevel public setLevel(mixed $item_level): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_level mixed getCreated public getCreated(): mixed setCreated public setCreated(mixed $created): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $created mixed getEdited public getEdited(): mixed setEdited public setEdited(mixed $edited): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $edited mixed getExpires public getExpires(): mixed setExpires public setExpires(mixed $expires): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $expires mixed getCommented public getCommented(): mixed setCommented public setCommented(mixed $commented): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $commented mixed getReceived public getReceived(): mixed setReceived public setReceived(mixed $received): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $received mixed getChanged public getChanged(): mixed setChanged public setChanged(mixed $changed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $changed mixed getCommentsClosed public getCommentsClosed(): mixed setCommentsClosed public setCommentsClosed(mixed $comments_closed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $comments_closed mixed getOwnerXchan public getOwnerXchan(): mixed setOwnerXchan public setOwnerXchan(mixed $owner_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $owner_xchan mixed getAuthorXchan public getAuthorXchan(): mixed setAuthorXchan public setAuthorXchan(mixed $author_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $author_xchan mixed getSourceXchan public getSourceXchan(): mixed setSourceXchan public setSourceXchan(mixed $source_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $source_xchan mixed getMimetype public getMimetype(): mixed setMimetype public setMimetype(mixed $mimetype): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $mimetype mixed getTitle public getTitle(): mixed setTitle public setTitle(mixed $title): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $title mixed getSummary public getSummary(): mixed setSummary public setSummary(mixed $summary): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $summary mixed getBody public getBody(): mixed setBody public setBody(mixed $body): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $body mixed getHtml public getHtml(): mixed setHtml public setHtml(mixed $html): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $html mixed getApp public getApp(): mixed setApp public setApp(mixed $app): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $app mixed getLang public getLang(): mixed setLang public setLang(mixed $lang): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $lang mixed getRevision public getRevision(): mixed setRevision public setRevision(mixed $revision): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $revision mixed getVerb public getVerb(): mixed setVerb public setVerb(mixed $verb): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $verb mixed getObjType public getObjType(): mixed setObjType public setObjType(mixed $obj_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $obj_type mixed getObj public getObj(): mixed setObj public setObj(mixed $obj): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $obj mixed getTgtType public getTgtType(): mixed setTgtType public setTgtType(mixed $tgt_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $tgt_type mixed getTarget public getTarget(): mixed setTarget public setTarget(mixed $target): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $target mixed getLayoutMid public getLayoutMid(): mixed setLayoutMid public setLayoutMid(mixed $layout_mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $layout_mid mixed getPostopts public getPostopts(): mixed setPostopts public setPostopts(mixed $postopts): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $postopts mixed getRoute public getRoute(): mixed setRoute public setRoute(mixed $route): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $route mixed getLlink public getLlink(): mixed setLlink public setLlink(mixed $llink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $llink mixed getPlink public getPlink(): mixed setPlink public setPlink(mixed $plink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $plink mixed getResourceId public getResourceId(): mixed setResourceId public setResourceId(mixed $resource_id): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $resource_id mixed getResourceType public getResourceType(): mixed setResourceType public setResourceType(mixed $resource_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $resource_type mixed getAttach public getAttach(): mixed setAttach public setAttach(mixed $attach): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $attach mixed getSig public getSig(): mixed setSig public setSig(mixed $sig): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $sig mixed getLocation public getLocation(): mixed setLocation public setLocation(mixed $location): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $location mixed getCoord public getCoord(): mixed setCoord public setCoord(mixed $coord): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $coord mixed getPublicPolicy public getPublicPolicy(): mixed setPublicPolicy public setPublicPolicy(mixed $public_policy): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $public_policy mixed getCommentPolicy public getCommentPolicy(): mixed setCommentPolicy public setCommentPolicy(mixed $comment_policy): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $comment_policy mixed getAllowCid public getAllowCid(): mixed setAllowCid public setAllowCid(mixed $allow_cid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $allow_cid mixed getAllowGid public getAllowGid(): mixed setAllowGid public setAllowGid(mixed $allow_gid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $allow_gid mixed getDenyCid public getDenyCid(): mixed setDenyCid public setDenyCid(mixed $deny_cid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $deny_cid mixed getDenyGid public getDenyGid(): mixed setDenyGid public setDenyGid(mixed $deny_gid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $deny_gid mixed getRestrict public getRestrict(): mixed setRestrict public setRestrict(mixed $item_restrict): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_restrict mixed getFlags public getFlags(): mixed setFlags public setFlags(mixed $item_flags): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_flags mixed getPrivate public getPrivate(): mixed setPrivate public setPrivate(mixed $item_private): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_private mixed getOrigin public getOrigin(): mixed setOrigin public setOrigin(mixed $item_origin): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_origin mixed getUnseen public getUnseen(): mixed setUnseen public setUnseen(mixed $item_unseen): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_unseen mixed getStarred public getStarred(): mixed setStarred public setStarred(mixed $item_starred): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_starred mixed getUplink public getUplink(): mixed setUplink public setUplink(mixed $item_uplink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_uplink mixed getConsensus public getConsensus(): mixed setConsensus public setConsensus(mixed $item_consensus): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_consensus mixed getWall public getWall(): mixed setWall public setWall(mixed $item_wall): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_wall mixed getThreadTop public getThreadTop(): mixed setThreadTop public setThreadTop(mixed $item_thread_top): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_thread_top mixed getNotshown public getNotshown(): mixed setNotshown public setNotshown(mixed $item_notshown): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_notshown mixed getNsfw public getNsfw(): mixed setNsfw public setNsfw(mixed $item_nsfw): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_nsfw mixed getRelay public getRelay(): mixed setRelay public setRelay(mixed $item_relay): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_relay mixed getMentionsme public getMentionsme(): mixed setMentionsme public setMentionsme(mixed $item_mentionsme): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_mentionsme mixed getNocomment public getNocomment(): mixed setNocomment public setNocomment(mixed $item_nocomment): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_nocomment mixed getObscured public getObscured(): mixed setObscured public setObscured(mixed $item_obscured): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_obscured mixed getVerified public getVerified(): mixed setVerified public setVerified(mixed $item_verified): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_verified mixed getRetained public getRetained(): mixed setRetained public setRetained(mixed $item_retained): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_retained mixed getRss public getRss(): mixed setRss public setRss(mixed $item_rss): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_rss mixed getDeleted public getDeleted(): mixed setDeleted public setDeleted(mixed $item_deleted): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_deleted mixed getType public getType(): mixed setType public setType(mixed $item_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_type mixed getHidden public getHidden(): mixed setHidden public setHidden(mixed $item_hidden): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_hidden mixed getUnpublished public getUnpublished(): mixed setUnpublished public setUnpublished(mixed $item_unpublished): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_unpublished mixed getDelayed public getDelayed(): mixed setDelayed public setDelayed(mixed $item_delayed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_delayed mixed getPendingRemove public getPendingRemove(): mixed setPendingRemove public setPendingRemove(mixed $item_pending_remove): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_pending_remove mixed getBlocked public getBlocked(): mixed setBlocked public setBlocked(mixed $item_blocked): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_blocked mixed Inherited methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"Item"},{"location":"dev/classes/Zotlabs/Entity/Item/#item","text":"Full name: \\Zotlabs\\Entity\\Item Parent class: \\Zotlabs\\Lib\\BaseObject","title":"Item"},{"location":"dev/classes/Zotlabs/Entity/Item/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Entity/Item/#id","text":"public $id","title":"id"},{"location":"dev/classes/Zotlabs/Entity/Item/#parent","text":"public $parent","title":"parent"},{"location":"dev/classes/Zotlabs/Entity/Item/#aid","text":"public $aid","title":"aid"},{"location":"dev/classes/Zotlabs/Entity/Item/#uid","text":"public $uid","title":"uid"},{"location":"dev/classes/Zotlabs/Entity/Item/#uuid","text":"public $uuid","title":"uuid"},{"location":"dev/classes/Zotlabs/Entity/Item/#mid","text":"public $mid","title":"mid"},{"location":"dev/classes/Zotlabs/Entity/Item/#parent_mid","text":"public $parent_mid","title":"parent_mid"},{"location":"dev/classes/Zotlabs/Entity/Item/#thr_parent","text":"public $thr_parent","title":"thr_parent"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_level","text":"public $item_level","title":"item_level"},{"location":"dev/classes/Zotlabs/Entity/Item/#llink","text":"public $llink","title":"llink"},{"location":"dev/classes/Zotlabs/Entity/Item/#plink","text":"public $plink","title":"plink"},{"location":"dev/classes/Zotlabs/Entity/Item/#created","text":"public $created","title":"created"},{"location":"dev/classes/Zotlabs/Entity/Item/#edited","text":"public $edited","title":"edited"},{"location":"dev/classes/Zotlabs/Entity/Item/#expires","text":"public $expires","title":"expires"},{"location":"dev/classes/Zotlabs/Entity/Item/#commented","text":"public $commented","title":"commented"},{"location":"dev/classes/Zotlabs/Entity/Item/#received","text":"public $received","title":"received"},{"location":"dev/classes/Zotlabs/Entity/Item/#changed","text":"public $changed","title":"changed"},{"location":"dev/classes/Zotlabs/Entity/Item/#comments_closed","text":"public $comments_closed","title":"comments_closed"},{"location":"dev/classes/Zotlabs/Entity/Item/#owner_xchan","text":"public $owner_xchan","title":"owner_xchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#author_xchan","text":"public $author_xchan","title":"author_xchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#source_xchan","text":"public $source_xchan","title":"source_xchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#mimetype","text":"public $mimetype","title":"mimetype"},{"location":"dev/classes/Zotlabs/Entity/Item/#lang","text":"public $lang","title":"lang"},{"location":"dev/classes/Zotlabs/Entity/Item/#app","text":"public $app","title":"app"},{"location":"dev/classes/Zotlabs/Entity/Item/#title","text":"public $title","title":"title"},{"location":"dev/classes/Zotlabs/Entity/Item/#summary","text":"public $summary","title":"summary"},{"location":"dev/classes/Zotlabs/Entity/Item/#body","text":"public $body","title":"body"},{"location":"dev/classes/Zotlabs/Entity/Item/#html","text":"public $html","title":"html"},{"location":"dev/classes/Zotlabs/Entity/Item/#verb","text":"public $verb","title":"verb"},{"location":"dev/classes/Zotlabs/Entity/Item/#obj_type","text":"public $obj_type","title":"obj_type"},{"location":"dev/classes/Zotlabs/Entity/Item/#obj","text":"public $obj","title":"obj"},{"location":"dev/classes/Zotlabs/Entity/Item/#tgt_type","text":"public $tgt_type","title":"tgt_type"},{"location":"dev/classes/Zotlabs/Entity/Item/#target","text":"public $target","title":"target"},{"location":"dev/classes/Zotlabs/Entity/Item/#attach","text":"public $attach","title":"attach"},{"location":"dev/classes/Zotlabs/Entity/Item/#sig","text":"public $sig","title":"sig"},{"location":"dev/classes/Zotlabs/Entity/Item/#revision","text":"public $revision","title":"revision"},{"location":"dev/classes/Zotlabs/Entity/Item/#layout_mid","text":"public $layout_mid","title":"layout_mid"},{"location":"dev/classes/Zotlabs/Entity/Item/#postopts","text":"public $postopts","title":"postopts"},{"location":"dev/classes/Zotlabs/Entity/Item/#route","text":"public $route","title":"route"},{"location":"dev/classes/Zotlabs/Entity/Item/#resource_id","text":"public $resource_id","title":"resource_id"},{"location":"dev/classes/Zotlabs/Entity/Item/#resource_type","text":"public $resource_type","title":"resource_type"},{"location":"dev/classes/Zotlabs/Entity/Item/#location","text":"public $location","title":"location"},{"location":"dev/classes/Zotlabs/Entity/Item/#coord","text":"public $coord","title":"coord"},{"location":"dev/classes/Zotlabs/Entity/Item/#public_policy","text":"public $public_policy","title":"public_policy"},{"location":"dev/classes/Zotlabs/Entity/Item/#comment_policy","text":"public $comment_policy","title":"comment_policy"},{"location":"dev/classes/Zotlabs/Entity/Item/#allow_cid","text":"public $allow_cid","title":"allow_cid"},{"location":"dev/classes/Zotlabs/Entity/Item/#allow_gid","text":"public $allow_gid","title":"allow_gid"},{"location":"dev/classes/Zotlabs/Entity/Item/#deny_cid","text":"public $deny_cid","title":"deny_cid"},{"location":"dev/classes/Zotlabs/Entity/Item/#deny_gid","text":"public $deny_gid","title":"deny_gid"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_restrict","text":"public $item_restrict","title":"item_restrict"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_flags","text":"public $item_flags","title":"item_flags"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_private","text":"public $item_private","title":"item_private"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_origin","text":"public $item_origin","title":"item_origin"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_unseen","text":"public $item_unseen","title":"item_unseen"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_starred","text":"public $item_starred","title":"item_starred"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_uplink","text":"public $item_uplink","title":"item_uplink"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_consensus","text":"public $item_consensus","title":"item_consensus"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_wall","text":"public $item_wall","title":"item_wall"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_thread_top","text":"public $item_thread_top","title":"item_thread_top"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_notshown","text":"public $item_notshown","title":"item_notshown"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_nsfw","text":"public $item_nsfw","title":"item_nsfw"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_relay","text":"public $item_relay","title":"item_relay"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_mentionsme","text":"public $item_mentionsme","title":"item_mentionsme"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_nocomment","text":"public $item_nocomment","title":"item_nocomment"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_obscured","text":"public $item_obscured","title":"item_obscured"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_verified","text":"public $item_verified","title":"item_verified"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_retained","text":"public $item_retained","title":"item_retained"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_rss","text":"public $item_rss","title":"item_rss"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_deleted","text":"public $item_deleted","title":"item_deleted"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_type","text":"public $item_type","title":"item_type"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_hidden","text":"public $item_hidden","title":"item_hidden"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_unpublished","text":"public $item_unpublished","title":"item_unpublished"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_delayed","text":"public $item_delayed","title":"item_delayed"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_pending_remove","text":"public $item_pending_remove","title":"item_pending_remove"},{"location":"dev/classes/Zotlabs/Entity/Item/#item_blocked","text":"public $item_blocked","title":"item_blocked"},{"location":"dev/classes/Zotlabs/Entity/Item/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Entity/Item/#getid","text":"public getId(): mixed","title":"getId"},{"location":"dev/classes/Zotlabs/Entity/Item/#setid","text":"public setId(mixed $id): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $id mixed","title":"setId"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmid","text":"public getMid(): mixed","title":"getMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmid","text":"public setMid(mixed $mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $mid mixed","title":"setMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuuid","text":"public getUuid(): mixed","title":"getUuid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuuid","text":"public setUuid(mixed $uuid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $uuid mixed","title":"setUuid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getaid","text":"public getAid(): mixed","title":"getAid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setaid","text":"public setAid(mixed $aid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $aid mixed","title":"setAid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuid","text":"public getUid(): mixed","title":"getUid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuid","text":"public setUid(mixed $uid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $uid mixed","title":"setUid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getparent","text":"public getParent(): mixed","title":"getParent"},{"location":"dev/classes/Zotlabs/Entity/Item/#setparent","text":"public setParent(mixed $parent): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $parent mixed","title":"setParent"},{"location":"dev/classes/Zotlabs/Entity/Item/#getparentmid","text":"public getParentMid(): mixed","title":"getParentMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setparentmid","text":"public setParentMid(mixed $parent_mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $parent_mid mixed","title":"setParentMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getthrparent","text":"public getThrParent(): mixed","title":"getThrParent"},{"location":"dev/classes/Zotlabs/Entity/Item/#setthrparent","text":"public setThrParent(mixed $thr_parent): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $thr_parent mixed","title":"setThrParent"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlevel","text":"public getLevel(): mixed","title":"getLevel"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlevel","text":"public setLevel(mixed $item_level): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_level mixed","title":"setLevel"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcreated","text":"public getCreated(): mixed","title":"getCreated"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcreated","text":"public setCreated(mixed $created): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $created mixed","title":"setCreated"},{"location":"dev/classes/Zotlabs/Entity/Item/#getedited","text":"public getEdited(): mixed","title":"getEdited"},{"location":"dev/classes/Zotlabs/Entity/Item/#setedited","text":"public setEdited(mixed $edited): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $edited mixed","title":"setEdited"},{"location":"dev/classes/Zotlabs/Entity/Item/#getexpires","text":"public getExpires(): mixed","title":"getExpires"},{"location":"dev/classes/Zotlabs/Entity/Item/#setexpires","text":"public setExpires(mixed $expires): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $expires mixed","title":"setExpires"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommented","text":"public getCommented(): mixed","title":"getCommented"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommented","text":"public setCommented(mixed $commented): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $commented mixed","title":"setCommented"},{"location":"dev/classes/Zotlabs/Entity/Item/#getreceived","text":"public getReceived(): mixed","title":"getReceived"},{"location":"dev/classes/Zotlabs/Entity/Item/#setreceived","text":"public setReceived(mixed $received): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $received mixed","title":"setReceived"},{"location":"dev/classes/Zotlabs/Entity/Item/#getchanged","text":"public getChanged(): mixed","title":"getChanged"},{"location":"dev/classes/Zotlabs/Entity/Item/#setchanged","text":"public setChanged(mixed $changed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $changed mixed","title":"setChanged"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommentsclosed","text":"public getCommentsClosed(): mixed","title":"getCommentsClosed"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommentsclosed","text":"public setCommentsClosed(mixed $comments_closed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $comments_closed mixed","title":"setCommentsClosed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getownerxchan","text":"public getOwnerXchan(): mixed","title":"getOwnerXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#setownerxchan","text":"public setOwnerXchan(mixed $owner_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $owner_xchan mixed","title":"setOwnerXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#getauthorxchan","text":"public getAuthorXchan(): mixed","title":"getAuthorXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#setauthorxchan","text":"public setAuthorXchan(mixed $author_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $author_xchan mixed","title":"setAuthorXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsourcexchan","text":"public getSourceXchan(): mixed","title":"getSourceXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsourcexchan","text":"public setSourceXchan(mixed $source_xchan): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $source_xchan mixed","title":"setSourceXchan"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmimetype","text":"public getMimetype(): mixed","title":"getMimetype"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmimetype","text":"public setMimetype(mixed $mimetype): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $mimetype mixed","title":"setMimetype"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettitle","text":"public getTitle(): mixed","title":"getTitle"},{"location":"dev/classes/Zotlabs/Entity/Item/#settitle","text":"public setTitle(mixed $title): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $title mixed","title":"setTitle"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsummary","text":"public getSummary(): mixed","title":"getSummary"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsummary","text":"public setSummary(mixed $summary): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $summary mixed","title":"setSummary"},{"location":"dev/classes/Zotlabs/Entity/Item/#getbody","text":"public getBody(): mixed","title":"getBody"},{"location":"dev/classes/Zotlabs/Entity/Item/#setbody","text":"public setBody(mixed $body): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $body mixed","title":"setBody"},{"location":"dev/classes/Zotlabs/Entity/Item/#gethtml","text":"public getHtml(): mixed","title":"getHtml"},{"location":"dev/classes/Zotlabs/Entity/Item/#sethtml","text":"public setHtml(mixed $html): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $html mixed","title":"setHtml"},{"location":"dev/classes/Zotlabs/Entity/Item/#getapp","text":"public getApp(): mixed","title":"getApp"},{"location":"dev/classes/Zotlabs/Entity/Item/#setapp","text":"public setApp(mixed $app): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $app mixed","title":"setApp"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlang","text":"public getLang(): mixed","title":"getLang"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlang","text":"public setLang(mixed $lang): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $lang mixed","title":"setLang"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrevision","text":"public getRevision(): mixed","title":"getRevision"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrevision","text":"public setRevision(mixed $revision): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $revision mixed","title":"setRevision"},{"location":"dev/classes/Zotlabs/Entity/Item/#getverb","text":"public getVerb(): mixed","title":"getVerb"},{"location":"dev/classes/Zotlabs/Entity/Item/#setverb","text":"public setVerb(mixed $verb): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $verb mixed","title":"setVerb"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobjtype","text":"public getObjType(): mixed","title":"getObjType"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobjtype","text":"public setObjType(mixed $obj_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $obj_type mixed","title":"setObjType"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobj","text":"public getObj(): mixed","title":"getObj"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobj","text":"public setObj(mixed $obj): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $obj mixed","title":"setObj"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettgttype","text":"public getTgtType(): mixed","title":"getTgtType"},{"location":"dev/classes/Zotlabs/Entity/Item/#settgttype","text":"public setTgtType(mixed $tgt_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $tgt_type mixed","title":"setTgtType"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettarget","text":"public getTarget(): mixed","title":"getTarget"},{"location":"dev/classes/Zotlabs/Entity/Item/#settarget","text":"public setTarget(mixed $target): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $target mixed","title":"setTarget"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlayoutmid","text":"public getLayoutMid(): mixed","title":"getLayoutMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlayoutmid","text":"public setLayoutMid(mixed $layout_mid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $layout_mid mixed","title":"setLayoutMid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpostopts","text":"public getPostopts(): mixed","title":"getPostopts"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpostopts","text":"public setPostopts(mixed $postopts): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $postopts mixed","title":"setPostopts"},{"location":"dev/classes/Zotlabs/Entity/Item/#getroute","text":"public getRoute(): mixed","title":"getRoute"},{"location":"dev/classes/Zotlabs/Entity/Item/#setroute","text":"public setRoute(mixed $route): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $route mixed","title":"setRoute"},{"location":"dev/classes/Zotlabs/Entity/Item/#getllink","text":"public getLlink(): mixed","title":"getLlink"},{"location":"dev/classes/Zotlabs/Entity/Item/#setllink","text":"public setLlink(mixed $llink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $llink mixed","title":"setLlink"},{"location":"dev/classes/Zotlabs/Entity/Item/#getplink","text":"public getPlink(): mixed","title":"getPlink"},{"location":"dev/classes/Zotlabs/Entity/Item/#setplink","text":"public setPlink(mixed $plink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $plink mixed","title":"setPlink"},{"location":"dev/classes/Zotlabs/Entity/Item/#getresourceid","text":"public getResourceId(): mixed","title":"getResourceId"},{"location":"dev/classes/Zotlabs/Entity/Item/#setresourceid","text":"public setResourceId(mixed $resource_id): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $resource_id mixed","title":"setResourceId"},{"location":"dev/classes/Zotlabs/Entity/Item/#getresourcetype","text":"public getResourceType(): mixed","title":"getResourceType"},{"location":"dev/classes/Zotlabs/Entity/Item/#setresourcetype","text":"public setResourceType(mixed $resource_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $resource_type mixed","title":"setResourceType"},{"location":"dev/classes/Zotlabs/Entity/Item/#getattach","text":"public getAttach(): mixed","title":"getAttach"},{"location":"dev/classes/Zotlabs/Entity/Item/#setattach","text":"public setAttach(mixed $attach): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $attach mixed","title":"setAttach"},{"location":"dev/classes/Zotlabs/Entity/Item/#getsig","text":"public getSig(): mixed","title":"getSig"},{"location":"dev/classes/Zotlabs/Entity/Item/#setsig","text":"public setSig(mixed $sig): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $sig mixed","title":"setSig"},{"location":"dev/classes/Zotlabs/Entity/Item/#getlocation","text":"public getLocation(): mixed","title":"getLocation"},{"location":"dev/classes/Zotlabs/Entity/Item/#setlocation","text":"public setLocation(mixed $location): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $location mixed","title":"setLocation"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcoord","text":"public getCoord(): mixed","title":"getCoord"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcoord","text":"public setCoord(mixed $coord): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $coord mixed","title":"setCoord"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpublicpolicy","text":"public getPublicPolicy(): mixed","title":"getPublicPolicy"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpublicpolicy","text":"public setPublicPolicy(mixed $public_policy): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $public_policy mixed","title":"setPublicPolicy"},{"location":"dev/classes/Zotlabs/Entity/Item/#getcommentpolicy","text":"public getCommentPolicy(): mixed","title":"getCommentPolicy"},{"location":"dev/classes/Zotlabs/Entity/Item/#setcommentpolicy","text":"public setCommentPolicy(mixed $comment_policy): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $comment_policy mixed","title":"setCommentPolicy"},{"location":"dev/classes/Zotlabs/Entity/Item/#getallowcid","text":"public getAllowCid(): mixed","title":"getAllowCid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setallowcid","text":"public setAllowCid(mixed $allow_cid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $allow_cid mixed","title":"setAllowCid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getallowgid","text":"public getAllowGid(): mixed","title":"getAllowGid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setallowgid","text":"public setAllowGid(mixed $allow_gid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $allow_gid mixed","title":"setAllowGid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdenycid","text":"public getDenyCid(): mixed","title":"getDenyCid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdenycid","text":"public setDenyCid(mixed $deny_cid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $deny_cid mixed","title":"setDenyCid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdenygid","text":"public getDenyGid(): mixed","title":"getDenyGid"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdenygid","text":"public setDenyGid(mixed $deny_gid): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $deny_gid mixed","title":"setDenyGid"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrestrict","text":"public getRestrict(): mixed","title":"getRestrict"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrestrict","text":"public setRestrict(mixed $item_restrict): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_restrict mixed","title":"setRestrict"},{"location":"dev/classes/Zotlabs/Entity/Item/#getflags","text":"public getFlags(): mixed","title":"getFlags"},{"location":"dev/classes/Zotlabs/Entity/Item/#setflags","text":"public setFlags(mixed $item_flags): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_flags mixed","title":"setFlags"},{"location":"dev/classes/Zotlabs/Entity/Item/#getprivate","text":"public getPrivate(): mixed","title":"getPrivate"},{"location":"dev/classes/Zotlabs/Entity/Item/#setprivate","text":"public setPrivate(mixed $item_private): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_private mixed","title":"setPrivate"},{"location":"dev/classes/Zotlabs/Entity/Item/#getorigin","text":"public getOrigin(): mixed","title":"getOrigin"},{"location":"dev/classes/Zotlabs/Entity/Item/#setorigin","text":"public setOrigin(mixed $item_origin): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_origin mixed","title":"setOrigin"},{"location":"dev/classes/Zotlabs/Entity/Item/#getunseen","text":"public getUnseen(): mixed","title":"getUnseen"},{"location":"dev/classes/Zotlabs/Entity/Item/#setunseen","text":"public setUnseen(mixed $item_unseen): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_unseen mixed","title":"setUnseen"},{"location":"dev/classes/Zotlabs/Entity/Item/#getstarred","text":"public getStarred(): mixed","title":"getStarred"},{"location":"dev/classes/Zotlabs/Entity/Item/#setstarred","text":"public setStarred(mixed $item_starred): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_starred mixed","title":"setStarred"},{"location":"dev/classes/Zotlabs/Entity/Item/#getuplink","text":"public getUplink(): mixed","title":"getUplink"},{"location":"dev/classes/Zotlabs/Entity/Item/#setuplink","text":"public setUplink(mixed $item_uplink): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_uplink mixed","title":"setUplink"},{"location":"dev/classes/Zotlabs/Entity/Item/#getconsensus","text":"public getConsensus(): mixed","title":"getConsensus"},{"location":"dev/classes/Zotlabs/Entity/Item/#setconsensus","text":"public setConsensus(mixed $item_consensus): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_consensus mixed","title":"setConsensus"},{"location":"dev/classes/Zotlabs/Entity/Item/#getwall","text":"public getWall(): mixed","title":"getWall"},{"location":"dev/classes/Zotlabs/Entity/Item/#setwall","text":"public setWall(mixed $item_wall): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_wall mixed","title":"setWall"},{"location":"dev/classes/Zotlabs/Entity/Item/#getthreadtop","text":"public getThreadTop(): mixed","title":"getThreadTop"},{"location":"dev/classes/Zotlabs/Entity/Item/#setthreadtop","text":"public setThreadTop(mixed $item_thread_top): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_thread_top mixed","title":"setThreadTop"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnotshown","text":"public getNotshown(): mixed","title":"getNotshown"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnotshown","text":"public setNotshown(mixed $item_notshown): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_notshown mixed","title":"setNotshown"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnsfw","text":"public getNsfw(): mixed","title":"getNsfw"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnsfw","text":"public setNsfw(mixed $item_nsfw): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_nsfw mixed","title":"setNsfw"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrelay","text":"public getRelay(): mixed","title":"getRelay"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrelay","text":"public setRelay(mixed $item_relay): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_relay mixed","title":"setRelay"},{"location":"dev/classes/Zotlabs/Entity/Item/#getmentionsme","text":"public getMentionsme(): mixed","title":"getMentionsme"},{"location":"dev/classes/Zotlabs/Entity/Item/#setmentionsme","text":"public setMentionsme(mixed $item_mentionsme): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_mentionsme mixed","title":"setMentionsme"},{"location":"dev/classes/Zotlabs/Entity/Item/#getnocomment","text":"public getNocomment(): mixed","title":"getNocomment"},{"location":"dev/classes/Zotlabs/Entity/Item/#setnocomment","text":"public setNocomment(mixed $item_nocomment): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_nocomment mixed","title":"setNocomment"},{"location":"dev/classes/Zotlabs/Entity/Item/#getobscured","text":"public getObscured(): mixed","title":"getObscured"},{"location":"dev/classes/Zotlabs/Entity/Item/#setobscured","text":"public setObscured(mixed $item_obscured): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_obscured mixed","title":"setObscured"},{"location":"dev/classes/Zotlabs/Entity/Item/#getverified","text":"public getVerified(): mixed","title":"getVerified"},{"location":"dev/classes/Zotlabs/Entity/Item/#setverified","text":"public setVerified(mixed $item_verified): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_verified mixed","title":"setVerified"},{"location":"dev/classes/Zotlabs/Entity/Item/#getretained","text":"public getRetained(): mixed","title":"getRetained"},{"location":"dev/classes/Zotlabs/Entity/Item/#setretained","text":"public setRetained(mixed $item_retained): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_retained mixed","title":"setRetained"},{"location":"dev/classes/Zotlabs/Entity/Item/#getrss","text":"public getRss(): mixed","title":"getRss"},{"location":"dev/classes/Zotlabs/Entity/Item/#setrss","text":"public setRss(mixed $item_rss): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_rss mixed","title":"setRss"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdeleted","text":"public getDeleted(): mixed","title":"getDeleted"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdeleted","text":"public setDeleted(mixed $item_deleted): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_deleted mixed","title":"setDeleted"},{"location":"dev/classes/Zotlabs/Entity/Item/#gettype","text":"public getType(): mixed","title":"getType"},{"location":"dev/classes/Zotlabs/Entity/Item/#settype","text":"public setType(mixed $item_type): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_type mixed","title":"setType"},{"location":"dev/classes/Zotlabs/Entity/Item/#gethidden","text":"public getHidden(): mixed","title":"getHidden"},{"location":"dev/classes/Zotlabs/Entity/Item/#sethidden","text":"public setHidden(mixed $item_hidden): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_hidden mixed","title":"setHidden"},{"location":"dev/classes/Zotlabs/Entity/Item/#getunpublished","text":"public getUnpublished(): mixed","title":"getUnpublished"},{"location":"dev/classes/Zotlabs/Entity/Item/#setunpublished","text":"public setUnpublished(mixed $item_unpublished): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_unpublished mixed","title":"setUnpublished"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdelayed","text":"public getDelayed(): mixed","title":"getDelayed"},{"location":"dev/classes/Zotlabs/Entity/Item/#setdelayed","text":"public setDelayed(mixed $item_delayed): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_delayed mixed","title":"setDelayed"},{"location":"dev/classes/Zotlabs/Entity/Item/#getpendingremove","text":"public getPendingRemove(): mixed","title":"getPendingRemove"},{"location":"dev/classes/Zotlabs/Entity/Item/#setpendingremove","text":"public setPendingRemove(mixed $item_pending_remove): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_pending_remove mixed","title":"setPendingRemove"},{"location":"dev/classes/Zotlabs/Entity/Item/#getblocked","text":"public getBlocked(): mixed","title":"getBlocked"},{"location":"dev/classes/Zotlabs/Entity/Item/#setblocked","text":"public setBlocked(mixed $item_blocked): \\Zotlabs\\Entity\\Item Parameters: Parameter Type Description $item_blocked mixed","title":"setBlocked"},{"location":"dev/classes/Zotlabs/Entity/Item/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Entity/Item/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/Entity/Item/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/Entity/Item/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/Entity/Item/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/Entity/Item/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/Extend/Hook/","text":"Hook Full name: \\Zotlabs\\Extend\\Hook Methods register public static register(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed This method is static . Parameters: Parameter Type Description $hook mixed $file mixed $function mixed $version mixed $priority mixed register_array public static register_array(mixed $file, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $file mixed $arr mixed unregister public static unregister(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed This method is static . Parameters: Parameter Type Description $hook mixed $file mixed $function mixed $version mixed $priority mixed unregister_by_file public static unregister_by_file(string $file): mixed This method is static . Parameters: Parameter Type Description $file string insert public static insert(string $hook, string $fn, int $version, int $priority): mixed This method is static . Parameters: Parameter Type Description $hook string name of hook to attach callback $fn string function name of callback handler $version int hook interface version, 0 uses two callback params, 1 uses one callback param $priority int currently not implemented in this function, would require the hook array to be resorted Automatically generated on 2025-03-15","title":"Hook"},{"location":"dev/classes/Zotlabs/Extend/Hook/#hook","text":"Full name: \\Zotlabs\\Extend\\Hook","title":"Hook"},{"location":"dev/classes/Zotlabs/Extend/Hook/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Extend/Hook/#register","text":"public static register(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed This method is static . Parameters: Parameter Type Description $hook mixed $file mixed $function mixed $version mixed $priority mixed","title":"register"},{"location":"dev/classes/Zotlabs/Extend/Hook/#register_array","text":"public static register_array(mixed $file, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $file mixed $arr mixed","title":"register_array"},{"location":"dev/classes/Zotlabs/Extend/Hook/#unregister","text":"public static unregister(mixed $hook, mixed $file, mixed $function, mixed $version = 1, mixed $priority): mixed This method is static . Parameters: Parameter Type Description $hook mixed $file mixed $function mixed $version mixed $priority mixed","title":"unregister"},{"location":"dev/classes/Zotlabs/Extend/Hook/#unregister_by_file","text":"public static unregister_by_file(string $file): mixed This method is static . Parameters: Parameter Type Description $file string","title":"unregister_by_file"},{"location":"dev/classes/Zotlabs/Extend/Hook/#insert","text":"public static insert(string $hook, string $fn, int $version, int $priority): mixed This method is static . Parameters: Parameter Type Description $hook string name of hook to attach callback $fn string function name of callback handler $version int hook interface version, 0 uses two callback params, 1 uses one callback param $priority int currently not implemented in this function, would require the hook array to be resorted Automatically generated on 2025-03-15","title":"insert"},{"location":"dev/classes/Zotlabs/Extend/Route/","text":"Route Full name: \\Zotlabs\\Extend\\Route Methods register public static register(mixed $file, mixed $modname): mixed This method is static . Parameters: Parameter Type Description $file mixed $modname mixed unregister public static unregister(mixed $file, mixed $modname): mixed This method is static . Parameters: Parameter Type Description $file mixed $modname mixed unregister_by_file public static unregister_by_file(mixed $file): mixed This method is static . Parameters: Parameter Type Description $file mixed get public static get(): mixed This method is static . set public static set(mixed $r): mixed This method is static . Parameters: Parameter Type Description $r mixed Automatically generated on 2025-03-15","title":"Route"},{"location":"dev/classes/Zotlabs/Extend/Route/#route","text":"Full name: \\Zotlabs\\Extend\\Route","title":"Route"},{"location":"dev/classes/Zotlabs/Extend/Route/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Extend/Route/#register","text":"public static register(mixed $file, mixed $modname): mixed This method is static . Parameters: Parameter Type Description $file mixed $modname mixed","title":"register"},{"location":"dev/classes/Zotlabs/Extend/Route/#unregister","text":"public static unregister(mixed $file, mixed $modname): mixed This method is static . Parameters: Parameter Type Description $file mixed $modname mixed","title":"unregister"},{"location":"dev/classes/Zotlabs/Extend/Route/#unregister_by_file","text":"public static unregister_by_file(mixed $file): mixed This method is static . Parameters: Parameter Type Description $file mixed","title":"unregister_by_file"},{"location":"dev/classes/Zotlabs/Extend/Route/#get","text":"public static get(): mixed This method is static .","title":"get"},{"location":"dev/classes/Zotlabs/Extend/Route/#set","text":"public static set(mixed $r): mixed This method is static . Parameters: Parameter Type Description $r mixed Automatically generated on 2025-03-15","title":"set"},{"location":"dev/classes/Zotlabs/Extend/Widget/","text":"Widget Full name: \\Zotlabs\\Extend\\Widget Methods register public static register(mixed $file, mixed $widget): mixed This method is static . Parameters: Parameter Type Description $file mixed $widget mixed unregister public static unregister(mixed $file, mixed $widget): mixed This method is static . Parameters: Parameter Type Description $file mixed $widget mixed unregister_by_file public static unregister_by_file(mixed $file): mixed This method is static . Parameters: Parameter Type Description $file mixed get public static get(): mixed This method is static . set public static set(mixed $r): mixed This method is static . Parameters: Parameter Type Description $r mixed Automatically generated on 2025-03-15","title":"Widget"},{"location":"dev/classes/Zotlabs/Extend/Widget/#widget","text":"Full name: \\Zotlabs\\Extend\\Widget","title":"Widget"},{"location":"dev/classes/Zotlabs/Extend/Widget/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Extend/Widget/#register","text":"public static register(mixed $file, mixed $widget): mixed This method is static . Parameters: Parameter Type Description $file mixed $widget mixed","title":"register"},{"location":"dev/classes/Zotlabs/Extend/Widget/#unregister","text":"public static unregister(mixed $file, mixed $widget): mixed This method is static . Parameters: Parameter Type Description $file mixed $widget mixed","title":"unregister"},{"location":"dev/classes/Zotlabs/Extend/Widget/#unregister_by_file","text":"public static unregister_by_file(mixed $file): mixed This method is static . Parameters: Parameter Type Description $file mixed","title":"unregister_by_file"},{"location":"dev/classes/Zotlabs/Extend/Widget/#get","text":"public static get(): mixed This method is static .","title":"get"},{"location":"dev/classes/Zotlabs/Extend/Widget/#set","text":"public static set(mixed $r): mixed This method is static . Parameters: Parameter Type Description $r mixed Automatically generated on 2025-03-15","title":"set"},{"location":"dev/classes/Zotlabs/Identity/BasicId/","text":"BasicId Full name: \\Zotlabs\\Identity\\BasicId Properties name private $name profile_photo private $profile_photo profile_url private $profile_url address private $address protocol private $protocol Automatically generated on 2025-03-15","title":"BasicId"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#basicid","text":"Full name: \\Zotlabs\\Identity\\BasicId","title":"BasicId"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#name","text":"private $name","title":"name"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#profile_photo","text":"private $profile_photo","title":"profile_photo"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#profile_url","text":"private $profile_url","title":"profile_url"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#address","text":"private $address","title":"address"},{"location":"dev/classes/Zotlabs/Identity/BasicId/#protocol","text":"private $protocol Automatically generated on 2025-03-15","title":"protocol"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/","text":"OAuth2Server Full name: \\Zotlabs\\Identity\\OAuth2Server Parent class: Server Methods __construct public __construct(\\Zotlabs\\Identity\\OAuth2Storage $storage, mixed $config = null): mixed Parameters: Parameter Type Description $storage \\Zotlabs\\Identity\\OAuth2Storage $config mixed Automatically generated on 2025-03-15","title":"OAuth2Server"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/#oauth2server","text":"Full name: \\Zotlabs\\Identity\\OAuth2Server Parent class: Server","title":"OAuth2Server"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Server/#__construct","text":"public __construct(\\Zotlabs\\Identity\\OAuth2Storage $storage, mixed $config = null): mixed Parameters: Parameter Type Description $storage \\Zotlabs\\Identity\\OAuth2Storage $config mixed Automatically generated on 2025-03-15","title":"__construct"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/","text":"OAuth2Storage Full name: \\Zotlabs\\Identity\\OAuth2Storage Parent class: Pdo Methods checkUserCredentials public checkUserCredentials(string $username, string $password): bool Parameters: Parameter Type Description $username string $password string getUserDetails public getUserDetails(string $username): array|bool Parameters: Parameter Type Description $username string checkPassword protected checkPassword(array $user, string $password): bool Parameters: Parameter Type Description $user array $password string getUser public getUser(string $username): array|bool Parameters: Parameter Type Description $username string scopeExists public scopeExists(mixed $scope): mixed Parameters: Parameter Type Description $scope mixed getDefaultScope public getDefaultScope(mixed $client_id = null): mixed Parameters: Parameter Type Description $client_id mixed getUserClaims public getUserClaims(mixed $user_id, mixed $claims): mixed Parameters: Parameter Type Description $user_id mixed $claims mixed setUser plaintext passwords are bad! Override this for your application public setUser(string $username, string $password, string $firstName = null, string $lastName = null): bool Parameters: Parameter Type Description $username string $password string $firstName string $lastName string Automatically generated on 2025-03-15","title":"OAuth2Storage"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#oauth2storage","text":"Full name: \\Zotlabs\\Identity\\OAuth2Storage Parent class: Pdo","title":"OAuth2Storage"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#checkusercredentials","text":"public checkUserCredentials(string $username, string $password): bool Parameters: Parameter Type Description $username string $password string","title":"checkUserCredentials"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuserdetails","text":"public getUserDetails(string $username): array|bool Parameters: Parameter Type Description $username string","title":"getUserDetails"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#checkpassword","text":"protected checkPassword(array $user, string $password): bool Parameters: Parameter Type Description $user array $password string","title":"checkPassword"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuser","text":"public getUser(string $username): array|bool Parameters: Parameter Type Description $username string","title":"getUser"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#scopeexists","text":"public scopeExists(mixed $scope): mixed Parameters: Parameter Type Description $scope mixed","title":"scopeExists"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getdefaultscope","text":"public getDefaultScope(mixed $client_id = null): mixed Parameters: Parameter Type Description $client_id mixed","title":"getDefaultScope"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#getuserclaims","text":"public getUserClaims(mixed $user_id, mixed $claims): mixed Parameters: Parameter Type Description $user_id mixed $claims mixed","title":"getUserClaims"},{"location":"dev/classes/Zotlabs/Identity/OAuth2Storage/#setuser","text":"plaintext passwords are bad! Override this for your application public setUser(string $username, string $password, string $firstName = null, string $lastName = null): bool Parameters: Parameter Type Description $username string $password string $firstName string $lastName string Automatically generated on 2025-03-15","title":"setUser"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/","text":"ProfilePhoto Full name: \\Zotlabs\\Identity\\ProfilePhoto Properties photo_large_url private $photo_large_url photo_medium_url private $photo_medium_url photo_small_url private $photo_small_url photo_mimetype private $photo_mimetype photo_updated private $photo_updated Automatically generated on 2025-03-15","title":"ProfilePhoto"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#profilephoto","text":"Full name: \\Zotlabs\\Identity\\ProfilePhoto","title":"ProfilePhoto"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_large_url","text":"private $photo_large_url","title":"photo_large_url"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_medium_url","text":"private $photo_medium_url","title":"photo_medium_url"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_small_url","text":"private $photo_small_url","title":"photo_small_url"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_mimetype","text":"private $photo_mimetype","title":"photo_mimetype"},{"location":"dev/classes/Zotlabs/Identity/ProfilePhoto/#photo_updated","text":"private $photo_updated Automatically generated on 2025-03-15","title":"photo_updated"},{"location":"dev/classes/Zotlabs/Lib/AConfig/","text":"AConfig Full name: \\Zotlabs\\Lib\\AConfig Methods Load public static Load(mixed $account_id): mixed This method is static . Parameters: Parameter Type Description $account_id mixed Get public static Get(mixed $account_id, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed $default mixed Set public static Set(mixed $account_id, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed $value mixed Delete public static Delete(mixed $account_id, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"AConfig"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#aconfig","text":"Full name: \\Zotlabs\\Lib\\AConfig","title":"AConfig"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#load","text":"public static Load(mixed $account_id): mixed This method is static . Parameters: Parameter Type Description $account_id mixed","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#get","text":"public static Get(mixed $account_id, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed $default mixed","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#set","text":"public static Set(mixed $account_id, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed $value mixed","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/AConfig/#delete","text":"public static Delete(mixed $account_id, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $account_id mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/ASCache/","text":"ASCache A wrapper for the cache api Full name: \\Zotlabs\\Lib\\ASCache Methods isEnabled public static isEnabled(): mixed This method is static . getAge public static getAge(): mixed This method is static . Get public static Get(mixed $key): mixed This method is static . Parameters: Parameter Type Description $key mixed Set public static Set(mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $key mixed $value mixed Automatically generated on 2025-03-15","title":"ASCache"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#ascache","text":"A wrapper for the cache api Full name: \\Zotlabs\\Lib\\ASCache","title":"ASCache"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#isenabled","text":"public static isEnabled(): mixed This method is static .","title":"isEnabled"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#getage","text":"public static getAge(): mixed This method is static .","title":"getAge"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#get","text":"public static Get(mixed $key): mixed This method is static . Parameters: Parameter Type Description $key mixed","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/ASCache/#set","text":"public static Set(mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $key mixed $value mixed Automatically generated on 2025-03-15","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/","text":"ASCollection Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged). Construct with either an existing object or url and an optional channel to sign requests. $direction is 0 (default) to fetch from the beginning, and 1 to fetch from the end and reverse order the resultant array. An optional limit to the number of records returned may also be specified. Use $class->get() to return an array of collection members. Full name: \\Zotlabs\\Lib\\ASCollection Properties channel private $channel nextpage private $nextpage limit private $limit direction private $direction data private $data history private $history Methods __construct public __construct(mixed $obj, mixed $channel = null, mixed $direction, mixed $limit): mixed Parameters: Parameter Type Description $obj mixed $channel mixed $direction mixed $limit mixed get public get(): mixed next public next(): mixed setnext public setnext(mixed $data): mixed Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"ASCollection"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#ascollection","text":"Class for dealing with fetching ActivityStreams collections (ordered or unordered, normal or paged). Construct with either an existing object or url and an optional channel to sign requests. $direction is 0 (default) to fetch from the beginning, and 1 to fetch from the end and reverse order the resultant array. An optional limit to the number of records returned may also be specified. Use $class->get() to return an array of collection members. Full name: \\Zotlabs\\Lib\\ASCollection","title":"ASCollection"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#channel","text":"private $channel","title":"channel"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#nextpage","text":"private $nextpage","title":"nextpage"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#limit","text":"private $limit","title":"limit"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#direction","text":"private $direction","title":"direction"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#data","text":"private $data","title":"data"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#history","text":"private $history","title":"history"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#__construct","text":"public __construct(mixed $obj, mixed $channel = null, mixed $direction, mixed $limit): mixed Parameters: Parameter Type Description $obj mixed $channel mixed $direction mixed $limit mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#get","text":"public get(): mixed","title":"get"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#next","text":"public next(): mixed","title":"next"},{"location":"dev/classes/Zotlabs/Lib/ASCollection/#setnext","text":"public setnext(mixed $data): mixed Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"setnext"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/","text":"AbConfig Full name: \\Zotlabs\\Lib\\AbConfig Methods Load public static Load(mixed $chan, mixed $xhash, mixed $family = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed Get public static Get(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed $default mixed Set public static Set(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed $value mixed Delete public static Delete(mixed $chan, mixed $xhash, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"AbConfig"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#abconfig","text":"Full name: \\Zotlabs\\Lib\\AbConfig","title":"AbConfig"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#load","text":"public static Load(mixed $chan, mixed $xhash, mixed $family = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#get","text":"public static Get(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed $default mixed","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#set","text":"public static Set(mixed $chan, mixed $xhash, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed $value mixed","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/AbConfig/#delete","text":"public static Delete(mixed $chan, mixed $xhash, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $chan mixed $xhash mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/AccessList/","text":"AccessList Full name: \\Zotlabs\\Lib\\AccessList Methods add public static add(mixed $uid, mixed $name, mixed $public): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $public mixed remove public static remove(mixed $uid, mixed $name): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed by_name public static by_name(mixed $uid, mixed $name): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed by_id public static by_id(mixed $uid, mixed $id): mixed This method is static . Parameters: Parameter Type Description $uid mixed $id mixed by_hash public static by_hash(mixed $uid, mixed $hash): mixed This method is static . Parameters: Parameter Type Description $uid mixed $hash mixed member_remove public static member_remove(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $member mixed $gid mixed member_add public static member_add(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $member mixed $gid mixed members public static members(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed members_xchan public static members_xchan(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed profile_members_xchan public static profile_members_xchan(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed select public static select(mixed $uid, mixed $options): mixed This method is static . Parameters: Parameter Type Description $uid mixed $options mixed expand public static expand(mixed $g): mixed This method is static . Parameters: Parameter Type Description $g mixed member_of public static member_of(mixed $c): mixed This method is static . Parameters: Parameter Type Description $c mixed containing public static containing(mixed $uid, mixed $c): mixed This method is static . Parameters: Parameter Type Description $uid mixed $c mixed Automatically generated on 2025-03-15","title":"AccessList"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#accesslist","text":"Full name: \\Zotlabs\\Lib\\AccessList","title":"AccessList"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#add","text":"public static add(mixed $uid, mixed $name, mixed $public): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $public mixed","title":"add"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#remove","text":"public static remove(mixed $uid, mixed $name): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed","title":"remove"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_name","text":"public static by_name(mixed $uid, mixed $name): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed","title":"by_name"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_id","text":"public static by_id(mixed $uid, mixed $id): mixed This method is static . Parameters: Parameter Type Description $uid mixed $id mixed","title":"by_id"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#by_hash","text":"public static by_hash(mixed $uid, mixed $hash): mixed This method is static . Parameters: Parameter Type Description $uid mixed $hash mixed","title":"by_hash"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_remove","text":"public static member_remove(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $member mixed $gid mixed","title":"member_remove"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_add","text":"public static member_add(mixed $uid, mixed $name, mixed $member, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $name mixed $member mixed $gid mixed","title":"member_add"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#members","text":"public static members(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed","title":"members"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#members_xchan","text":"public static members_xchan(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed","title":"members_xchan"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#profile_members_xchan","text":"public static profile_members_xchan(mixed $uid, mixed $gid): mixed This method is static . Parameters: Parameter Type Description $uid mixed $gid mixed","title":"profile_members_xchan"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#select","text":"public static select(mixed $uid, mixed $options): mixed This method is static . Parameters: Parameter Type Description $uid mixed $options mixed","title":"select"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#expand","text":"public static expand(mixed $g): mixed This method is static . Parameters: Parameter Type Description $g mixed","title":"expand"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#member_of","text":"public static member_of(mixed $c): mixed This method is static . Parameters: Parameter Type Description $c mixed","title":"member_of"},{"location":"dev/classes/Zotlabs/Lib/AccessList/#containing","text":"public static containing(mixed $uid, mixed $c): mixed This method is static . Parameters: Parameter Type Description $uid mixed $c mixed Automatically generated on 2025-03-15","title":"containing"},{"location":"dev/classes/Zotlabs/Lib/Activity/","text":"Activity Full name: \\Zotlabs\\Lib\\Activity Methods encode_object public static encode_object(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_local public static fetch_local(mixed $url, mixed $portable_id): mixed This method is static . Parameters: Parameter Type Description $url mixed $portable_id mixed fetch public static fetch(mixed $url, mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $url mixed $channel mixed fetch_person public static fetch_person(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_profile public static fetch_profile(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_thing public static fetch_thing(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_item public static fetch_item(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_image public static fetch_image(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed fetch_event public static fetch_event(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed paged_collection_init public static paged_collection_init(mixed $total, mixed $id, mixed $type = &#039;OrderedCollection&#039;): mixed This method is static . Parameters: Parameter Type Description $total mixed $id mixed $type mixed encode_item_collection public static encode_item_collection(mixed $items, mixed $id, mixed $type, mixed $total): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $total mixed encode_follow_collection public static encode_follow_collection(mixed $items, mixed $id, mixed $type, mixed $extra = null): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $extra mixed encode_simple_collection public static encode_simple_collection(mixed $items, mixed $id, mixed $type, mixed $total, mixed $extra = null): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $total mixed $extra mixed encode_item public static encode_item(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed decode_taxonomy public static decode_taxonomy(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed encode_taxonomy public static encode_taxonomy(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed encode_attachment public static encode_attachment(mixed $item, mixed $iconfig = false): mixed This method is static . Parameters: Parameter Type Description $item mixed $iconfig mixed decode_iconfig public static decode_iconfig(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed decode_attachment public static decode_attachment(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed encode_activity public static encode_activity(mixed $i, mixed $recurse = false): mixed This method is static . Parameters: Parameter Type Description $i mixed $recurse mixed map_mentions public static map_mentions(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed map_acl public static map_acl(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed lookup_term_url public static lookup_term_url(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed encode_person public static encode_person(mixed $p, mixed $extended = true): mixed This method is static . Parameters: Parameter Type Description $p mixed $extended mixed encode_item_object public static encode_item_object(mixed $item, mixed $elm = &#039;obj&#039;): mixed This method is static . Parameters: Parameter Type Description $item mixed $elm mixed activity_mapper public static activity_mapper(mixed $verb): mixed This method is static . Parameters: Parameter Type Description $verb mixed activity_obj_mapper public static activity_obj_mapper(mixed $obj): mixed This method is static . Parameters: Parameter Type Description $obj mixed follow public static follow(mixed $channel, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $act mixed unfollow public static unfollow(mixed $channel, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $act mixed drop public static drop(mixed $channel, mixed $observer, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $observer mixed $act mixed actor_store public static actor_store(mixed $person_obj, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $person_obj mixed $force mixed vid_sort public static vid_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed get_actor_bbmention public static get_actor_bbmention(mixed $id): mixed This method is static . Parameters: Parameter Type Description $id mixed update_poll public static update_poll(mixed $pollItem, mixed $response): mixed This method is static . Parameters: Parameter Type Description $pollItem mixed $response mixed decode_note public static decode_note(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed store public static store(mixed $channel, mixed $observer_hash, mixed $act, mixed $item, mixed $fetch_parents = true, mixed $force = false, mixed $is_collection_operation = false): mixed This method is static . Parameters: Parameter Type Description $channel mixed $observer_hash mixed $act mixed $item mixed $fetch_parents mixed $force mixed $is_collection_operation mixed fetch_and_store_parents public static fetch_and_store_parents(array $channel, array $observer_hash, array $item, object $act = null, bool $force = false): bool This method is static . Parameters: Parameter Type Description $channel array $observer_hash array $item array string&#124;array $act object activitystreams object (optional) default null $force bool disregard permissions and force storage (optional) default false bb_attach public static bb_attach(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed media_not_in_body public static media_not_in_body(mixed $s, mixed $body): mixed This method is static . Parameters: Parameter Type Description $s mixed $body mixed bb_content public static bb_content(mixed $content, mixed $field): mixed This method is static . Parameters: Parameter Type Description $content mixed $field mixed get_content public static get_content(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed get_textfield public static get_textfield(mixed $act, mixed $field): null|string|array This method is static . Parameters: Parameter Type Description $act mixed $field mixed token_from_request public static token_from_request(): mixed This method is static . find_best_identity public static find_best_identity(mixed $xchan): mixed This method is static . Parameters: Parameter Type Description $xchan mixed get_cached_actor public static get_cached_actor(mixed $id): mixed This method is static . Parameters: Parameter Type Description $id mixed get_actor public static get_actor(mixed $actor_id, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $actor_id mixed $force mixed get_unknown_actor public static get_unknown_actor(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed get_actor_hublocs public static get_actor_hublocs(mixed $url, mixed $options = &#039;all&#039;): mixed This method is static . Parameters: Parameter Type Description $url mixed $options mixed get_actor_collections public static get_actor_collections(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed get_actor_protocols public static get_actor_protocols(mixed $actor): mixed This method is static . Parameters: Parameter Type Description $actor mixed get_quote_bbcode public static get_quote_bbcode(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed get_attributed_to_actor_url public static get_attributed_to_actor_url(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed ap_context public static ap_context(mixed $contextType = null): array This method is static . Parameters: Parameter Type Description $contextType mixed ap_schema public static ap_schema(mixed $contextType = null): array This method is static . Parameters: Parameter Type Description $contextType mixed build_packet public static build_packet(array $obj, array $channel = [], bool $json_encode = true): string|array This method is static . Parameters: Parameter Type Description $obj array $channel array (optional) default [] $json_encode bool (optional) default true init_background_fetch public static init_background_fetch(string $observer_hash = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $observer_hash string addToCollection public static addToCollection(mixed $channel, mixed $object, mixed $target, mixed $sourceItem = null, mixed $deliver = true): mixed This method is static . Parameters: Parameter Type Description $channel mixed $object mixed $target mixed $sourceItem mixed $deliver mixed removeFromCollection public static removeFromCollection(mixed $channel, mixed $object, mixed $target, mixed $deliver = true): mixed This method is static . Parameters: Parameter Type Description $channel mixed $object mixed $target mixed $deliver mixed Automatically generated on 2025-03-15","title":"Activity"},{"location":"dev/classes/Zotlabs/Lib/Activity/#activity","text":"Full name: \\Zotlabs\\Lib\\Activity","title":"Activity"},{"location":"dev/classes/Zotlabs/Lib/Activity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_object","text":"public static encode_object(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"encode_object"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_local","text":"public static fetch_local(mixed $url, mixed $portable_id): mixed This method is static . Parameters: Parameter Type Description $url mixed $portable_id mixed","title":"fetch_local"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch","text":"public static fetch(mixed $url, mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $url mixed $channel mixed","title":"fetch"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_person","text":"public static fetch_person(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_person"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_profile","text":"public static fetch_profile(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_profile"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_thing","text":"public static fetch_thing(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_thing"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_item","text":"public static fetch_item(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_item"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_image","text":"public static fetch_image(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_image"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_event","text":"public static fetch_event(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"fetch_event"},{"location":"dev/classes/Zotlabs/Lib/Activity/#paged_collection_init","text":"public static paged_collection_init(mixed $total, mixed $id, mixed $type = &#039;OrderedCollection&#039;): mixed This method is static . Parameters: Parameter Type Description $total mixed $id mixed $type mixed","title":"paged_collection_init"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item_collection","text":"public static encode_item_collection(mixed $items, mixed $id, mixed $type, mixed $total): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $total mixed","title":"encode_item_collection"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_follow_collection","text":"public static encode_follow_collection(mixed $items, mixed $id, mixed $type, mixed $extra = null): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $extra mixed","title":"encode_follow_collection"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_simple_collection","text":"public static encode_simple_collection(mixed $items, mixed $id, mixed $type, mixed $total, mixed $extra = null): mixed This method is static . Parameters: Parameter Type Description $items mixed $id mixed $type mixed $total mixed $extra mixed","title":"encode_simple_collection"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item","text":"public static encode_item(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed","title":"encode_item"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_taxonomy","text":"public static decode_taxonomy(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"decode_taxonomy"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_taxonomy","text":"public static encode_taxonomy(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"encode_taxonomy"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_attachment","text":"public static encode_attachment(mixed $item, mixed $iconfig = false): mixed This method is static . Parameters: Parameter Type Description $item mixed $iconfig mixed","title":"encode_attachment"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_iconfig","text":"public static decode_iconfig(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"decode_iconfig"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_attachment","text":"public static decode_attachment(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"decode_attachment"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_activity","text":"public static encode_activity(mixed $i, mixed $recurse = false): mixed This method is static . Parameters: Parameter Type Description $i mixed $recurse mixed","title":"encode_activity"},{"location":"dev/classes/Zotlabs/Lib/Activity/#map_mentions","text":"public static map_mentions(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed","title":"map_mentions"},{"location":"dev/classes/Zotlabs/Lib/Activity/#map_acl","text":"public static map_acl(mixed $i): mixed This method is static . Parameters: Parameter Type Description $i mixed","title":"map_acl"},{"location":"dev/classes/Zotlabs/Lib/Activity/#lookup_term_url","text":"public static lookup_term_url(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"lookup_term_url"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_person","text":"public static encode_person(mixed $p, mixed $extended = true): mixed This method is static . Parameters: Parameter Type Description $p mixed $extended mixed","title":"encode_person"},{"location":"dev/classes/Zotlabs/Lib/Activity/#encode_item_object","text":"public static encode_item_object(mixed $item, mixed $elm = &#039;obj&#039;): mixed This method is static . Parameters: Parameter Type Description $item mixed $elm mixed","title":"encode_item_object"},{"location":"dev/classes/Zotlabs/Lib/Activity/#activity_mapper","text":"public static activity_mapper(mixed $verb): mixed This method is static . Parameters: Parameter Type Description $verb mixed","title":"activity_mapper"},{"location":"dev/classes/Zotlabs/Lib/Activity/#activity_obj_mapper","text":"public static activity_obj_mapper(mixed $obj): mixed This method is static . Parameters: Parameter Type Description $obj mixed","title":"activity_obj_mapper"},{"location":"dev/classes/Zotlabs/Lib/Activity/#follow","text":"public static follow(mixed $channel, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $act mixed","title":"follow"},{"location":"dev/classes/Zotlabs/Lib/Activity/#unfollow","text":"public static unfollow(mixed $channel, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $act mixed","title":"unfollow"},{"location":"dev/classes/Zotlabs/Lib/Activity/#drop","text":"public static drop(mixed $channel, mixed $observer, mixed $act): mixed This method is static . Parameters: Parameter Type Description $channel mixed $observer mixed $act mixed","title":"drop"},{"location":"dev/classes/Zotlabs/Lib/Activity/#actor_store","text":"public static actor_store(mixed $person_obj, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $person_obj mixed $force mixed","title":"actor_store"},{"location":"dev/classes/Zotlabs/Lib/Activity/#vid_sort","text":"public static vid_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed","title":"vid_sort"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_bbmention","text":"public static get_actor_bbmention(mixed $id): mixed This method is static . Parameters: Parameter Type Description $id mixed","title":"get_actor_bbmention"},{"location":"dev/classes/Zotlabs/Lib/Activity/#update_poll","text":"public static update_poll(mixed $pollItem, mixed $response): mixed This method is static . Parameters: Parameter Type Description $pollItem mixed $response mixed","title":"update_poll"},{"location":"dev/classes/Zotlabs/Lib/Activity/#decode_note","text":"public static decode_note(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed","title":"decode_note"},{"location":"dev/classes/Zotlabs/Lib/Activity/#store","text":"public static store(mixed $channel, mixed $observer_hash, mixed $act, mixed $item, mixed $fetch_parents = true, mixed $force = false, mixed $is_collection_operation = false): mixed This method is static . Parameters: Parameter Type Description $channel mixed $observer_hash mixed $act mixed $item mixed $fetch_parents mixed $force mixed $is_collection_operation mixed","title":"store"},{"location":"dev/classes/Zotlabs/Lib/Activity/#fetch_and_store_parents","text":"public static fetch_and_store_parents(array $channel, array $observer_hash, array $item, object $act = null, bool $force = false): bool This method is static . Parameters: Parameter Type Description $channel array $observer_hash array $item array string&#124;array $act object activitystreams object (optional) default null $force bool disregard permissions and force storage (optional) default false","title":"fetch_and_store_parents"},{"location":"dev/classes/Zotlabs/Lib/Activity/#bb_attach","text":"public static bb_attach(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"bb_attach"},{"location":"dev/classes/Zotlabs/Lib/Activity/#media_not_in_body","text":"public static media_not_in_body(mixed $s, mixed $body): mixed This method is static . Parameters: Parameter Type Description $s mixed $body mixed","title":"media_not_in_body"},{"location":"dev/classes/Zotlabs/Lib/Activity/#bb_content","text":"public static bb_content(mixed $content, mixed $field): mixed This method is static . Parameters: Parameter Type Description $content mixed $field mixed","title":"bb_content"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_content","text":"public static get_content(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed","title":"get_content"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_textfield","text":"public static get_textfield(mixed $act, mixed $field): null|string|array This method is static . Parameters: Parameter Type Description $act mixed $field mixed","title":"get_textfield"},{"location":"dev/classes/Zotlabs/Lib/Activity/#token_from_request","text":"public static token_from_request(): mixed This method is static .","title":"token_from_request"},{"location":"dev/classes/Zotlabs/Lib/Activity/#find_best_identity","text":"public static find_best_identity(mixed $xchan): mixed This method is static . Parameters: Parameter Type Description $xchan mixed","title":"find_best_identity"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_cached_actor","text":"public static get_cached_actor(mixed $id): mixed This method is static . Parameters: Parameter Type Description $id mixed","title":"get_cached_actor"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor","text":"public static get_actor(mixed $actor_id, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $actor_id mixed $force mixed","title":"get_actor"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_unknown_actor","text":"public static get_unknown_actor(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed","title":"get_unknown_actor"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_hublocs","text":"public static get_actor_hublocs(mixed $url, mixed $options = &#039;all&#039;): mixed This method is static . Parameters: Parameter Type Description $url mixed $options mixed","title":"get_actor_hublocs"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_collections","text":"public static get_actor_collections(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"get_actor_collections"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_actor_protocols","text":"public static get_actor_protocols(mixed $actor): mixed This method is static . Parameters: Parameter Type Description $actor mixed","title":"get_actor_protocols"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_quote_bbcode","text":"public static get_quote_bbcode(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"get_quote_bbcode"},{"location":"dev/classes/Zotlabs/Lib/Activity/#get_attributed_to_actor_url","text":"public static get_attributed_to_actor_url(mixed $act): mixed This method is static . Parameters: Parameter Type Description $act mixed","title":"get_attributed_to_actor_url"},{"location":"dev/classes/Zotlabs/Lib/Activity/#ap_context","text":"public static ap_context(mixed $contextType = null): array This method is static . Parameters: Parameter Type Description $contextType mixed","title":"ap_context"},{"location":"dev/classes/Zotlabs/Lib/Activity/#ap_schema","text":"public static ap_schema(mixed $contextType = null): array This method is static . Parameters: Parameter Type Description $contextType mixed","title":"ap_schema"},{"location":"dev/classes/Zotlabs/Lib/Activity/#build_packet","text":"public static build_packet(array $obj, array $channel = [], bool $json_encode = true): string|array This method is static . Parameters: Parameter Type Description $obj array $channel array (optional) default [] $json_encode bool (optional) default true","title":"build_packet"},{"location":"dev/classes/Zotlabs/Lib/Activity/#init_background_fetch","text":"public static init_background_fetch(string $observer_hash = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $observer_hash string","title":"init_background_fetch"},{"location":"dev/classes/Zotlabs/Lib/Activity/#addtocollection","text":"public static addToCollection(mixed $channel, mixed $object, mixed $target, mixed $sourceItem = null, mixed $deliver = true): mixed This method is static . Parameters: Parameter Type Description $channel mixed $object mixed $target mixed $sourceItem mixed $deliver mixed","title":"addToCollection"},{"location":"dev/classes/Zotlabs/Lib/Activity/#removefromcollection","text":"public static removeFromCollection(mixed $channel, mixed $object, mixed $target, mixed $deliver = true): mixed This method is static . Parameters: Parameter Type Description $channel mixed $object mixed $target mixed $deliver mixed Automatically generated on 2025-03-15","title":"removeFromCollection"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/","text":"ActivityStreams Full name: \\Zotlabs\\Lib\\ActivityStreams Properties raw public $raw data public $data meta public $meta valid public $valid deleted public $deleted portable_id public $portable_id id public $id parent_id public $parent_id type public $type actor public $actor obj public $obj tgt public $tgt origin public $origin owner public $owner signer public $signer sig public $sig sigok public $sigok recips public $recips raw_recips public $raw_recips saved_recips public $saved_recips Methods __construct public __construct(string $string, mixed $portable_id = null): mixed Parameters: Parameter Type Description $string string $portable_id mixed is_valid public is_valid(): bool Return Value: Return true if the JSON string could be decoded. set_recips public set_recips(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed objprop public objprop(string $property, mixed $default = false): mixed Parameters: Parameter Type Description $property string $default mixed return value if property or object not set or object is a string id which could not be fetched. collect_recips public collect_recips(mixed $base = &#039;&#039;, string $namespace = &#039;&#039;): array Parameters: Parameter Type Description $base mixed $namespace string (optional) default empty expand public expand(mixed $arr, mixed $base = &#039;&#039;, mixed $namespace = &#039;&#039;): mixed Parameters: Parameter Type Description $arr mixed $base mixed $namespace mixed get_namespace public get_namespace(array $base, string $namespace): string|null Parameters: Parameter Type Description $base array $namespace string if not set return empty string get_property_obj public get_property_obj(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $property string $base array (optional) $namespace string (optional) default empty fetch_property public fetch_property(string $url, mixed $channel = null): null|mixed Parameters: Parameter Type Description $url string $channel mixed is_an_actor public static is_an_actor(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed is_response_activity public static is_response_activity(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed get_actor public get_actor(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $property string $base array $namespace string (optional) default empty get_compound_property public get_compound_property(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;, bool $first = false): null|mixed Parameters: Parameter Type Description $property string $base array $namespace string (optional) default empty $first bool (optional) default false, if true and result is a sequential array return only the first element is_url public is_url(string $url): bool Parameters: Parameter Type Description $url string get_primary_type public get_primary_type(array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $base array $namespace string (optional) default empty debug public debug(): mixed is_as_request public static is_as_request(mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $channel mixed get_accept_header_string public static get_accept_header_string(mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $channel mixed checkEddsaSignature public checkEddsaSignature(): mixed Automatically generated on 2025-03-15","title":"ActivityStreams"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#activitystreams","text":"Full name: \\Zotlabs\\Lib\\ActivityStreams","title":"ActivityStreams"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#raw","text":"public $raw","title":"raw"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#data","text":"public $data","title":"data"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#meta","text":"public $meta","title":"meta"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#valid","text":"public $valid","title":"valid"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#deleted","text":"public $deleted","title":"deleted"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#portable_id","text":"public $portable_id","title":"portable_id"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#id","text":"public $id","title":"id"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#parent_id","text":"public $parent_id","title":"parent_id"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#type","text":"public $type","title":"type"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#actor","text":"public $actor","title":"actor"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#obj","text":"public $obj","title":"obj"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#tgt","text":"public $tgt","title":"tgt"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#origin","text":"public $origin","title":"origin"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#owner","text":"public $owner","title":"owner"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#signer","text":"public $signer","title":"signer"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#sig","text":"public $sig","title":"sig"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#sigok","text":"public $sigok","title":"sigok"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#recips","text":"public $recips","title":"recips"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#raw_recips","text":"public $raw_recips","title":"raw_recips"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#saved_recips","text":"public $saved_recips","title":"saved_recips"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#__construct","text":"public __construct(string $string, mixed $portable_id = null): mixed Parameters: Parameter Type Description $string string $portable_id mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_valid","text":"public is_valid(): bool Return Value: Return true if the JSON string could be decoded.","title":"is_valid"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#set_recips","text":"public set_recips(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed","title":"set_recips"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#objprop","text":"public objprop(string $property, mixed $default = false): mixed Parameters: Parameter Type Description $property string $default mixed return value if property or object not set or object is a string id which could not be fetched.","title":"objprop"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#collect_recips","text":"public collect_recips(mixed $base = &#039;&#039;, string $namespace = &#039;&#039;): array Parameters: Parameter Type Description $base mixed $namespace string (optional) default empty","title":"collect_recips"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#expand","text":"public expand(mixed $arr, mixed $base = &#039;&#039;, mixed $namespace = &#039;&#039;): mixed Parameters: Parameter Type Description $arr mixed $base mixed $namespace mixed","title":"expand"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_namespace","text":"public get_namespace(array $base, string $namespace): string|null Parameters: Parameter Type Description $base array $namespace string if not set return empty string","title":"get_namespace"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_property_obj","text":"public get_property_obj(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $property string $base array (optional) $namespace string (optional) default empty","title":"get_property_obj"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#fetch_property","text":"public fetch_property(string $url, mixed $channel = null): null|mixed Parameters: Parameter Type Description $url string $channel mixed","title":"fetch_property"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_an_actor","text":"public static is_an_actor(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed","title":"is_an_actor"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_response_activity","text":"public static is_response_activity(mixed $s): mixed This method is static . Parameters: Parameter Type Description $s mixed","title":"is_response_activity"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_actor","text":"public get_actor(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $property string $base array $namespace string (optional) default empty","title":"get_actor"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_compound_property","text":"public get_compound_property(string $property, array $base = &#039;&#039;, string $namespace = &#039;&#039;, bool $first = false): null|mixed Parameters: Parameter Type Description $property string $base array $namespace string (optional) default empty $first bool (optional) default false, if true and result is a sequential array return only the first element","title":"get_compound_property"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_url","text":"public is_url(string $url): bool Parameters: Parameter Type Description $url string","title":"is_url"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_primary_type","text":"public get_primary_type(array $base = &#039;&#039;, string $namespace = &#039;&#039;): null|mixed Parameters: Parameter Type Description $base array $namespace string (optional) default empty","title":"get_primary_type"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#debug","text":"public debug(): mixed","title":"debug"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#is_as_request","text":"public static is_as_request(mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $channel mixed","title":"is_as_request"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#get_accept_header_string","text":"public static get_accept_header_string(mixed $channel = null): mixed This method is static . Parameters: Parameter Type Description $channel mixed","title":"get_accept_header_string"},{"location":"dev/classes/Zotlabs/Lib/ActivityStreams/#checkeddsasignature","text":"public checkEddsaSignature(): mixed Automatically generated on 2025-03-15","title":"checkEddsaSignature"},{"location":"dev/classes/Zotlabs/Lib/Api_router/","text":"Api_router Full name: \\Zotlabs\\Lib\\Api_router Properties routes private static $routes This property is static . Methods register public static register(mixed $path, mixed $fn, mixed $auth_required): mixed This method is static . Parameters: Parameter Type Description $path mixed $fn mixed $auth_required mixed find public static find(mixed $path): mixed This method is static . Parameters: Parameter Type Description $path mixed dbg public static dbg(): mixed This method is static . Automatically generated on 2025-03-15","title":"Api_router"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#api_router","text":"Full name: \\Zotlabs\\Lib\\Api_router","title":"Api_router"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#routes","text":"private static $routes This property is static .","title":"routes"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#register","text":"public static register(mixed $path, mixed $fn, mixed $auth_required): mixed This method is static . Parameters: Parameter Type Description $path mixed $fn mixed $auth_required mixed","title":"register"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#find","text":"public static find(mixed $path): mixed This method is static . Parameters: Parameter Type Description $path mixed","title":"find"},{"location":"dev/classes/Zotlabs/Lib/Api_router/#dbg","text":"public static dbg(): mixed This method is static . Automatically generated on 2025-03-15","title":"dbg"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/","text":"BaseObject Full name: \\Zotlabs\\Lib\\BaseObject Properties string public $string ldContext public $ldContext Methods __construct public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException getDataType public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed toArray public toArray(): mixed getLdContext public getLdContext(): mixed setLdContext public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"BaseObject"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#baseobject","text":"Full name: \\Zotlabs\\Lib\\BaseObject","title":"BaseObject"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#string","text":"public $string","title":"string"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#ldcontext","text":"public $ldContext","title":"ldContext"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#__construct","text":"public __construct(mixed $input = null, mixed $strict = false): mixed Parameters: Parameter Type Description $input mixed $strict mixed Throws: if $strict UnhandledElementException","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#getdatatype","text":"public getDataType(mixed $element, mixed $object = null): mixed Parameters: Parameter Type Description $element mixed $object mixed","title":"getDataType"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#toarray","text":"public toArray(): mixed","title":"toArray"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#getldcontext","text":"public getLdContext(): mixed","title":"getLdContext"},{"location":"dev/classes/Zotlabs/Lib/BaseObject/#setldcontext","text":"public setLdContext(mixed $ldContext): \\Zotlabs\\Lib\\BaseObject Parameters: Parameter Type Description $ldContext mixed Automatically generated on 2025-03-15","title":"setLdContext"},{"location":"dev/classes/Zotlabs/Lib/Cache/","text":"Cache cache api Full name: \\Zotlabs\\Lib\\Cache Methods get public static get(string $key, string $age = &#039;&#039;): string This method is static . Parameters: Parameter Type Description $key string $age string in SQL format, default is '30 DAY' set public static set(mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $key mixed $value mixed Automatically generated on 2025-03-15","title":"Cache"},{"location":"dev/classes/Zotlabs/Lib/Cache/#cache","text":"cache api Full name: \\Zotlabs\\Lib\\Cache","title":"Cache"},{"location":"dev/classes/Zotlabs/Lib/Cache/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Cache/#get","text":"public static get(string $key, string $age = &#039;&#039;): string This method is static . Parameters: Parameter Type Description $key string $age string in SQL format, default is '30 DAY'","title":"get"},{"location":"dev/classes/Zotlabs/Lib/Cache/#set","text":"public static set(mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $key mixed $value mixed Automatically generated on 2025-03-15","title":"set"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/","text":"Chatroom Full name: \\Zotlabs\\Lib\\Chatroom Methods create public static create(array $channel, array $arr): array This method is static . Parameters: Parameter Type Description $channel array $arr array Return Value: An associative array containing: * \\e boolean \\b success - A boolean success status * \\e string \\b message - (optional) A string destroy public static destroy(mixed $channel, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $channel mixed $arr mixed enter public static enter(mixed $observer_xchan, mixed $room_id, mixed $status, mixed $client): mixed This method is static . Parameters: Parameter Type Description $observer_xchan mixed $room_id mixed $status mixed $client mixed leave public static leave(mixed $observer_xchan, mixed $room_id, mixed $client): mixed This method is static . Parameters: Parameter Type Description $observer_xchan mixed $room_id mixed $client mixed roomlist public static roomlist(mixed $uid): mixed This method is static . Parameters: Parameter Type Description $uid mixed list_count public static list_count(mixed $uid): mixed This method is static . Parameters: Parameter Type Description $uid mixed message public static message(int $uid, int $room_id, string $xchan, string $text): array This method is static . Parameters: Parameter Type Description $uid int $room_id int $xchan string $text string Automatically generated on 2025-03-15","title":"Chatroom"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#chatroom","text":"Full name: \\Zotlabs\\Lib\\Chatroom","title":"Chatroom"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#create","text":"public static create(array $channel, array $arr): array This method is static . Parameters: Parameter Type Description $channel array $arr array Return Value: An associative array containing: * \\e boolean \\b success - A boolean success status * \\e string \\b message - (optional) A string","title":"create"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#destroy","text":"public static destroy(mixed $channel, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $channel mixed $arr mixed","title":"destroy"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#enter","text":"public static enter(mixed $observer_xchan, mixed $room_id, mixed $status, mixed $client): mixed This method is static . Parameters: Parameter Type Description $observer_xchan mixed $room_id mixed $status mixed $client mixed","title":"enter"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#leave","text":"public static leave(mixed $observer_xchan, mixed $room_id, mixed $client): mixed This method is static . Parameters: Parameter Type Description $observer_xchan mixed $room_id mixed $client mixed","title":"leave"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#roomlist","text":"public static roomlist(mixed $uid): mixed This method is static . Parameters: Parameter Type Description $uid mixed","title":"roomlist"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#list_count","text":"public static list_count(mixed $uid): mixed This method is static . Parameters: Parameter Type Description $uid mixed","title":"list_count"},{"location":"dev/classes/Zotlabs/Lib/Chatroom/#message","text":"public static message(int $uid, int $room_id, string $xchan, string $text): array This method is static . Parameters: Parameter Type Description $uid int $room_id int $xchan string $text string Automatically generated on 2025-03-15","title":"message"},{"location":"dev/classes/Zotlabs/Lib/Config/","text":"Config Full name: \\Zotlabs\\Lib\\Config Methods Load public static Load(string $family, mixed $recursionCounter): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $recursionCounter mixed Set public static Set(string $family, string $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to set $value mixed The value to store in the configuration Return Value: Return the set value, or false if the database update failed Get public static Get(string $family, string $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to query $default mixed (optional) default false Return Value: Return value or false on error or if not set Delete public static Delete(string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to delete get_from_storage private static get_from_storage(string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to query Automatically generated on 2025-03-15","title":"Config"},{"location":"dev/classes/Zotlabs/Lib/Config/#config","text":"Full name: \\Zotlabs\\Lib\\Config","title":"Config"},{"location":"dev/classes/Zotlabs/Lib/Config/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Config/#load","text":"public static Load(string $family, mixed $recursionCounter): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $recursionCounter mixed","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/Config/#set","text":"public static Set(string $family, string $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to set $value mixed The value to store in the configuration Return Value: Return the set value, or false if the database update failed","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/Config/#get","text":"public static Get(string $family, string $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to query $default mixed (optional) default false Return Value: Return value or false on error or if not set","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/Config/#delete","text":"public static Delete(string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to delete","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/Config/#get_from_storage","text":"private static get_from_storage(string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $family string The category of the configuration value $key string The configuration key to query Automatically generated on 2025-03-15","title":"get_from_storage"},{"location":"dev/classes/Zotlabs/Lib/Connect/","text":"Connect Full name: \\Zotlabs\\Lib\\Connect Methods connect Takes a $channel and a $url/handle and adds a new connection public static connect(mixed $channel, mixed $url, mixed $sub_channel = false): mixed Returns array $return['success'] boolean true if successful $return['abook'] Address book entry joined with xchan if successful $return['message'] error text if success is false. This function does NOT send sync packets to clones. The caller is responsible for doing this This method is static . Parameters: Parameter Type Description $channel mixed $url mixed $sub_channel mixed Automatically generated on 2025-03-15","title":"Connect"},{"location":"dev/classes/Zotlabs/Lib/Connect/#connect","text":"Full name: \\Zotlabs\\Lib\\Connect","title":"Connect"},{"location":"dev/classes/Zotlabs/Lib/Connect/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Connect/#connect_1","text":"Takes a $channel and a $url/handle and adds a new connection public static connect(mixed $channel, mixed $url, mixed $sub_channel = false): mixed Returns array $return['success'] boolean true if successful $return['abook'] Address book entry joined with xchan if successful $return['message'] error text if success is false. This function does NOT send sync packets to clones. The caller is responsible for doing this This method is static . Parameters: Parameter Type Description $channel mixed $url mixed $sub_channel mixed Automatically generated on 2025-03-15","title":"connect"},{"location":"dev/classes/Zotlabs/Lib/Crypto/","text":"Crypto Full name: \\Zotlabs\\Lib\\Crypto Properties openssl_algorithms public static $openssl_algorithms This property is static . Methods methods public static methods(): mixed This method is static . signing_methods public static signing_methods(): mixed This method is static . new_keypair public static new_keypair(mixed $bits): mixed This method is static . Parameters: Parameter Type Description $bits mixed sign public static sign(mixed $data, mixed $key, mixed $alg = &#039;sha256&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key mixed $alg mixed verify public static verify(mixed $data, mixed $sig, mixed $key, mixed $alg = &#039;sha256&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $sig mixed $key mixed $alg mixed encapsulate public static encapsulate(mixed $data, mixed $pubkey, mixed $alg): mixed This method is static . Parameters: Parameter Type Description $data mixed $pubkey mixed $alg mixed unencapsulate public static unencapsulate(mixed $data, mixed $prvkey): mixed This method is static . Parameters: Parameter Type Description $data mixed $prvkey mixed Automatically generated on 2025-03-15","title":"Crypto"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#crypto","text":"Full name: \\Zotlabs\\Lib\\Crypto","title":"Crypto"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#openssl_algorithms","text":"public static $openssl_algorithms This property is static .","title":"openssl_algorithms"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#methods_1","text":"public static methods(): mixed This method is static .","title":"methods"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#signing_methods","text":"public static signing_methods(): mixed This method is static .","title":"signing_methods"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#new_keypair","text":"public static new_keypair(mixed $bits): mixed This method is static . Parameters: Parameter Type Description $bits mixed","title":"new_keypair"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#sign","text":"public static sign(mixed $data, mixed $key, mixed $alg = &#039;sha256&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key mixed $alg mixed","title":"sign"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#verify","text":"public static verify(mixed $data, mixed $sig, mixed $key, mixed $alg = &#039;sha256&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $sig mixed $key mixed $alg mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#encapsulate","text":"public static encapsulate(mixed $data, mixed $pubkey, mixed $alg): mixed This method is static . Parameters: Parameter Type Description $data mixed $pubkey mixed $alg mixed","title":"encapsulate"},{"location":"dev/classes/Zotlabs/Lib/Crypto/#unencapsulate","text":"public static unencapsulate(mixed $data, mixed $prvkey): mixed This method is static . Parameters: Parameter Type Description $data mixed $prvkey mixed Automatically generated on 2025-03-15","title":"unencapsulate"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/","text":"DB_Upgrade Upgrade the database schema if necessary. Compares the currently active database schema version with the version required for this version of Hubzilla, and performs the upgrade if needed. If the difference consists of more than one revision of the schema, each of the intermediate upgrades are performed in turn. Full name: \\Zotlabs\\Lib\\DB_Upgrade Methods run Check the installed and required schema versions and perform the upgrade if necessary. public static run(int $db_revision): void This method is static . Parameters: Parameter Type Description $db_revision int Automatically generated on 2025-03-15","title":"DB_Upgrade"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/#db_upgrade","text":"Upgrade the database schema if necessary. Compares the currently active database schema version with the version required for this version of Hubzilla, and performs the upgrade if needed. If the difference consists of more than one revision of the schema, each of the intermediate upgrades are performed in turn. Full name: \\Zotlabs\\Lib\\DB_Upgrade","title":"DB_Upgrade"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/DB_Upgrade/#run","text":"Check the installed and required schema versions and perform the upgrade if necessary. public static run(int $db_revision): void This method is static . Parameters: Parameter Type Description $db_revision int Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Lib/DReport/","text":"DReport Full name: \\Zotlabs\\Lib\\DReport Properties location private $location sender private $sender recipient private $recipient name private $name message_id private $message_id message_uuid private $message_uuid status private $status date private $date Methods __construct public __construct(mixed $location, mixed $sender, mixed $recipient, mixed $message_id, mixed $message_uuid = &#039;&#039;, mixed $status = &#039;deliver&#039;): mixed Parameters: Parameter Type Description $location mixed $sender mixed $recipient mixed $message_id mixed $message_uuid mixed $status mixed update public update(mixed $status): mixed Parameters: Parameter Type Description $status mixed set_name public set_name(mixed $name): mixed Parameters: Parameter Type Description $name mixed addto_update public addto_update(mixed $status): mixed Parameters: Parameter Type Description $status mixed set public set(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed get public get(): mixed is_storable public static is_storable(array $dr): bool This method is static . Parameters: Parameter Type Description $dr array Automatically generated on 2025-03-15","title":"DReport"},{"location":"dev/classes/Zotlabs/Lib/DReport/#dreport","text":"Full name: \\Zotlabs\\Lib\\DReport","title":"DReport"},{"location":"dev/classes/Zotlabs/Lib/DReport/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/DReport/#location","text":"private $location","title":"location"},{"location":"dev/classes/Zotlabs/Lib/DReport/#sender","text":"private $sender","title":"sender"},{"location":"dev/classes/Zotlabs/Lib/DReport/#recipient","text":"private $recipient","title":"recipient"},{"location":"dev/classes/Zotlabs/Lib/DReport/#name","text":"private $name","title":"name"},{"location":"dev/classes/Zotlabs/Lib/DReport/#message_id","text":"private $message_id","title":"message_id"},{"location":"dev/classes/Zotlabs/Lib/DReport/#message_uuid","text":"private $message_uuid","title":"message_uuid"},{"location":"dev/classes/Zotlabs/Lib/DReport/#status","text":"private $status","title":"status"},{"location":"dev/classes/Zotlabs/Lib/DReport/#date","text":"private $date","title":"date"},{"location":"dev/classes/Zotlabs/Lib/DReport/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/DReport/#__construct","text":"public __construct(mixed $location, mixed $sender, mixed $recipient, mixed $message_id, mixed $message_uuid = &#039;&#039;, mixed $status = &#039;deliver&#039;): mixed Parameters: Parameter Type Description $location mixed $sender mixed $recipient mixed $message_id mixed $message_uuid mixed $status mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/DReport/#update","text":"public update(mixed $status): mixed Parameters: Parameter Type Description $status mixed","title":"update"},{"location":"dev/classes/Zotlabs/Lib/DReport/#set_name","text":"public set_name(mixed $name): mixed Parameters: Parameter Type Description $name mixed","title":"set_name"},{"location":"dev/classes/Zotlabs/Lib/DReport/#addto_update","text":"public addto_update(mixed $status): mixed Parameters: Parameter Type Description $status mixed","title":"addto_update"},{"location":"dev/classes/Zotlabs/Lib/DReport/#set","text":"public set(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed","title":"set"},{"location":"dev/classes/Zotlabs/Lib/DReport/#get","text":"public get(): mixed","title":"get"},{"location":"dev/classes/Zotlabs/Lib/DReport/#is_storable","text":"public static is_storable(array $dr): bool This method is static . Parameters: Parameter Type Description $dr array Automatically generated on 2025-03-15","title":"is_storable"},{"location":"dev/classes/Zotlabs/Lib/Enotify/","text":"Enotify Full name: \\Zotlabs\\Lib\\Enotify Methods submit public static submit(array $params): mixed This method is static . Parameters: Parameter Type Description $params array an assoziative array with: \\e string \\b from_xchan sender xchan hash \\e string \\b to_xchan recipient xchan hash \\e array \\b item an assoziative array \\e int \\b type one of the NOTIFY_ constants from boot.php \\e string \\b link \\e string \\b parent_mid \\e string \\b otype \\e string \\b verb \\e string \\b activity send public static send(array $params): mixed This method is static . Parameters: Parameter Type Description $params array an assoziative array with: \\e string \\b fromName name of the sender \\e string \\b fromEmail email of the sender \\e string \\b replyTo replyTo address to direct responses \\e string \\b toEmail destination email address \\e string \\b messageSubject subject of the message \\e string \\b htmlVersion html version of the message \\e string \\b textVersion text only version of the message \\e string \\b additionalMailHeader additions to the smtp mail header format public static format(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed format_notify public static format_notify(mixed $tt): mixed This method is static . Parameters: Parameter Type Description $tt mixed format_intros public static format_intros(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed format_files public static format_files(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed format_mail public static format_mail(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed format_all_events public static format_all_events(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed format_register public static format_register(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed Automatically generated on 2025-03-15","title":"Enotify"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#enotify","text":"Full name: \\Zotlabs\\Lib\\Enotify","title":"Enotify"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#submit","text":"public static submit(array $params): mixed This method is static . Parameters: Parameter Type Description $params array an assoziative array with: \\e string \\b from_xchan sender xchan hash \\e string \\b to_xchan recipient xchan hash \\e array \\b item an assoziative array \\e int \\b type one of the NOTIFY_ constants from boot.php \\e string \\b link \\e string \\b parent_mid \\e string \\b otype \\e string \\b verb \\e string \\b activity","title":"submit"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#send","text":"public static send(array $params): mixed This method is static . Parameters: Parameter Type Description $params array an assoziative array with: \\e string \\b fromName name of the sender \\e string \\b fromEmail email of the sender \\e string \\b replyTo replyTo address to direct responses \\e string \\b toEmail destination email address \\e string \\b messageSubject subject of the message \\e string \\b htmlVersion html version of the message \\e string \\b textVersion text only version of the message \\e string \\b additionalMailHeader additions to the smtp mail header","title":"send"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format","text":"public static format(mixed $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"format"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_notify","text":"public static format_notify(mixed $tt): mixed This method is static . Parameters: Parameter Type Description $tt mixed","title":"format_notify"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_intros","text":"public static format_intros(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"format_intros"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_files","text":"public static format_files(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"format_files"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_mail","text":"public static format_mail(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"format_mail"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_all_events","text":"public static format_all_events(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"format_all_events"},{"location":"dev/classes/Zotlabs/Lib/Enotify/#format_register","text":"public static format_register(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed Automatically generated on 2025-03-15","title":"format_register"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/","text":"ExtendedZip Description of ExtendedZip Full name: \\Zotlabs\\Lib\\ExtendedZip Parent class: ZipArchive Methods addTree public addTree(mixed $dirname, mixed $localname = &#039;&#039;): mixed Parameters: Parameter Type Description $dirname mixed $localname mixed _addTree protected _addTree(mixed $dirname, mixed $localname): mixed Parameters: Parameter Type Description $dirname mixed $localname mixed zipTree public static zipTree(mixed $dirname, mixed $zipFilename, mixed $flags, mixed $localname = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $dirname mixed $zipFilename mixed $flags mixed $localname mixed Automatically generated on 2025-03-15","title":"ExtendedZip"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#extendedzip","text":"Description of ExtendedZip Full name: \\Zotlabs\\Lib\\ExtendedZip Parent class: ZipArchive","title":"ExtendedZip"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#addtree","text":"public addTree(mixed $dirname, mixed $localname = &#039;&#039;): mixed Parameters: Parameter Type Description $dirname mixed $localname mixed","title":"addTree"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#_addtree","text":"protected _addTree(mixed $dirname, mixed $localname): mixed Parameters: Parameter Type Description $dirname mixed $localname mixed","title":"_addTree"},{"location":"dev/classes/Zotlabs/Lib/ExtendedZip/#ziptree","text":"public static zipTree(mixed $dirname, mixed $zipFilename, mixed $flags, mixed $localname = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $dirname mixed $zipFilename mixed $flags mixed $localname mixed Automatically generated on 2025-03-15","title":"zipTree"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/","text":"Hashpath Full name: \\Zotlabs\\Lib\\Hashpath Methods path public static path(mixed $hash, mixed $prefix = &#039;.&#039;, mixed $depth = 1, mixed $slice = 2, mixed $mkdir = true, mixed $alg = false): mixed This method is static . Parameters: Parameter Type Description $hash mixed $prefix mixed $depth mixed $slice mixed $mkdir mixed $alg mixed Automatically generated on 2025-03-15","title":"Hashpath"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/#hashpath","text":"Full name: \\Zotlabs\\Lib\\Hashpath","title":"Hashpath"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Hashpath/#path","text":"public static path(mixed $hash, mixed $prefix = &#039;.&#039;, mixed $depth = 1, mixed $slice = 2, mixed $mkdir = true, mixed $alg = false): mixed This method is static . Parameters: Parameter Type Description $hash mixed $prefix mixed $depth mixed $slice mixed $mkdir mixed $alg mixed Automatically generated on 2025-03-15","title":"path"},{"location":"dev/classes/Zotlabs/Lib/IConfig/","text":"IConfig Full name: \\Zotlabs\\Lib\\IConfig Methods Load public static Load(mixed& $item): mixed This method is static . Parameters: Parameter Type Description $item mixed Get public static Get(mixed& $item, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed $default mixed Set IConfig::Set(&$item, $family, $key, $value, $sharing = false); public static Set(mixed& $item, mixed $family, mixed $key, mixed $value, mixed $sharing = false): mixed $item - item array or item id. If passed an array the iconfig meta information is added to the item structure (which will need to be saved with item_store eventually). If passed an id, the DB is updated, but may not be federated and/or cloned. $family - namespace of meta variable $key - key of meta variable $value - value of meta variable $sharing - boolean (default false); if true the meta information is propagated with the item to other sites/channels, mostly useful when $item is an array and has not yet been stored/delivered. If the meta information is added after delivery and you wish it to be shared, it may be necessary to alter the item edited timestamp and invoke the delivery process on the updated item. The edited timestamp needs to be altered in order to trigger an item_store_update() at the receiving end. This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed $value mixed $sharing mixed Delete public static Delete(mixed& $item, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"IConfig"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#iconfig","text":"Full name: \\Zotlabs\\Lib\\IConfig","title":"IConfig"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#load","text":"public static Load(mixed& $item): mixed This method is static . Parameters: Parameter Type Description $item mixed","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#get","text":"public static Get(mixed& $item, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed $default mixed","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#set","text":"IConfig::Set(&$item, $family, $key, $value, $sharing = false); public static Set(mixed& $item, mixed $family, mixed $key, mixed $value, mixed $sharing = false): mixed $item - item array or item id. If passed an array the iconfig meta information is added to the item structure (which will need to be saved with item_store eventually). If passed an id, the DB is updated, but may not be federated and/or cloned. $family - namespace of meta variable $key - key of meta variable $value - value of meta variable $sharing - boolean (default false); if true the meta information is propagated with the item to other sites/channels, mostly useful when $item is an array and has not yet been stored/delivered. If the meta information is added after delivery and you wish it to be shared, it may be necessary to alter the item edited timestamp and invoke the delivery process on the updated item. The edited timestamp needs to be altered in order to trigger an item_store_update() at the receiving end. This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed $value mixed $sharing mixed","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/IConfig/#delete","text":"public static Delete(mixed& $item, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $item mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/","text":"Img_filesize Full name: \\Zotlabs\\Lib\\Img_filesize Properties url private $url Methods __construct public __construct(mixed $url): mixed Parameters: Parameter Type Description $url mixed getSize public getSize(): mixed getLocalFileSize public static getLocalFileSize(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed Automatically generated on 2025-03-15","title":"Img_filesize"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#img_filesize","text":"Full name: \\Zotlabs\\Lib\\Img_filesize","title":"Img_filesize"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#url","text":"private $url","title":"url"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#__construct","text":"public __construct(mixed $url): mixed Parameters: Parameter Type Description $url mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#getsize","text":"public getSize(): mixed","title":"getSize"},{"location":"dev/classes/Zotlabs/Lib/Img_filesize/#getlocalfilesize","text":"public static getLocalFileSize(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed Automatically generated on 2025-03-15","title":"getLocalFileSize"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/","text":"JSalmon Full name: \\Zotlabs\\Lib\\JSalmon Methods sign public static sign(mixed $data, mixed $key_id, mixed $key, mixed $data_type = &#039;application/x-zot+json&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key_id mixed $key mixed $data_type mixed verify public static verify(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed unpack public static unpack(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"JSalmon"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#jsalmon","text":"Full name: \\Zotlabs\\Lib\\JSalmon","title":"JSalmon"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#sign","text":"public static sign(mixed $data, mixed $key_id, mixed $key, mixed $data_type = &#039;application/x-zot+json&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key_id mixed $key mixed $data_type mixed","title":"sign"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#verify","text":"public static verify(mixed $x): mixed This method is static . Parameters: Parameter Type Description $x mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Lib/JSalmon/#unpack","text":"public static unpack(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"unpack"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/","text":"JcsEddsa2022 Full name: \\Zotlabs\\Lib\\JcsEddsa2022 Methods __construct public __construct(): mixed sign public sign(mixed $data, mixed $channel): array Parameters: Parameter Type Description $data mixed $channel mixed verify public verify(mixed $data, mixed $publicKey): mixed Parameters: Parameter Type Description $data mixed $publicKey mixed signableData public signableData(mixed $data): mixed Parameters: Parameter Type Description $data mixed signableOptions public signableOptions(mixed $options): mixed Parameters: Parameter Type Description $options mixed hash public hash(mixed $obj, mixed $binary = false): mixed Parameters: Parameter Type Description $obj mixed $binary mixed canonicalize public canonicalize(mixed $data): mixed Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"JcsEddsa2022"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#jcseddsa2022","text":"Full name: \\Zotlabs\\Lib\\JcsEddsa2022","title":"JcsEddsa2022"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#sign","text":"public sign(mixed $data, mixed $channel): array Parameters: Parameter Type Description $data mixed $channel mixed","title":"sign"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#verify","text":"public verify(mixed $data, mixed $publicKey): mixed Parameters: Parameter Type Description $data mixed $publicKey mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#signabledata","text":"public signableData(mixed $data): mixed Parameters: Parameter Type Description $data mixed","title":"signableData"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#signableoptions","text":"public signableOptions(mixed $options): mixed Parameters: Parameter Type Description $options mixed","title":"signableOptions"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#hash","text":"public hash(mixed $obj, mixed $binary = false): mixed Parameters: Parameter Type Description $obj mixed $binary mixed","title":"hash"},{"location":"dev/classes/Zotlabs/Lib/JcsEddsa2022/#canonicalize","text":"public canonicalize(mixed $data): mixed Parameters: Parameter Type Description $data mixed Automatically generated on 2025-03-15","title":"canonicalize"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/","text":"Keyutils Keyutils Convert RSA keys between various formats Full name: \\Zotlabs\\Lib\\Keyutils Methods meToPem public static meToPem(string $m, string $e): string This method is static . Parameters: Parameter Type Description $m string modulo $e string exponent rsaToPem public static rsaToPem(mixed $key): string This method is static . Parameters: Parameter Type Description $key mixed pemToRsa public static pemToRsa(mixed $key): string This method is static . Parameters: Parameter Type Description $key mixed pemToMe public static pemToMe(string $key, string& $m, string& $e): mixed This method is static . Parameters: Parameter Type Description $key string key $m string reference modulo $e string reference exponent salmonKey public static salmonKey(string $pubkey): string This method is static . Parameters: Parameter Type Description $pubkey string convertSalmonKey public static convertSalmonKey(string $key): string This method is static . Parameters: Parameter Type Description $key string Automatically generated on 2025-03-15","title":"Keyutils"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#keyutils","text":"Keyutils Convert RSA keys between various formats Full name: \\Zotlabs\\Lib\\Keyutils","title":"Keyutils"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#metopem","text":"public static meToPem(string $m, string $e): string This method is static . Parameters: Parameter Type Description $m string modulo $e string exponent","title":"meToPem"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#rsatopem","text":"public static rsaToPem(mixed $key): string This method is static . Parameters: Parameter Type Description $key mixed","title":"rsaToPem"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#pemtorsa","text":"public static pemToRsa(mixed $key): string This method is static . Parameters: Parameter Type Description $key mixed","title":"pemToRsa"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#pemtome","text":"public static pemToMe(string $key, string& $m, string& $e): mixed This method is static . Parameters: Parameter Type Description $key string key $m string reference modulo $e string reference exponent","title":"pemToMe"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#salmonkey","text":"public static salmonKey(string $pubkey): string This method is static . Parameters: Parameter Type Description $pubkey string","title":"salmonKey"},{"location":"dev/classes/Zotlabs/Lib/Keyutils/#convertsalmonkey","text":"public static convertSalmonKey(string $key): string This method is static . Parameters: Parameter Type Description $key string Automatically generated on 2025-03-15","title":"convertSalmonKey"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/","text":"LDSignatures Full name: \\Zotlabs\\Lib\\LDSignatures Methods verify public static verify(mixed $data, mixed $pubkey): mixed This method is static . Parameters: Parameter Type Description $data mixed $pubkey mixed dopplesign public static dopplesign(mixed& $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed sign public static sign(mixed $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed signable_data public static signable_data(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed signable_options public static signable_options(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed hash public static hash(mixed $obj): mixed This method is static . Parameters: Parameter Type Description $obj mixed normalise public static normalise(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed salmon_sign public static salmon_sign(mixed $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed Automatically generated on 2025-03-15","title":"LDSignatures"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#ldsignatures","text":"Full name: \\Zotlabs\\Lib\\LDSignatures","title":"LDSignatures"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#verify","text":"public static verify(mixed $data, mixed $pubkey): mixed This method is static . Parameters: Parameter Type Description $data mixed $pubkey mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#dopplesign","text":"public static dopplesign(mixed& $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed","title":"dopplesign"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#sign","text":"public static sign(mixed $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed","title":"sign"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#signable_data","text":"public static signable_data(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed","title":"signable_data"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#signable_options","text":"public static signable_options(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed","title":"signable_options"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#hash","text":"public static hash(mixed $obj): mixed This method is static . Parameters: Parameter Type Description $obj mixed","title":"hash"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#normalise","text":"public static normalise(mixed $data): mixed This method is static . Parameters: Parameter Type Description $data mixed","title":"normalise"},{"location":"dev/classes/Zotlabs/Lib/LDSignatures/#salmon_sign","text":"public static salmon_sign(mixed $data, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $data mixed $channel mixed Automatically generated on 2025-03-15","title":"salmon_sign"},{"location":"dev/classes/Zotlabs/Lib/Libsync/","text":"Libsync Full name: \\Zotlabs\\Lib\\Libsync Methods build_sync_packet public static build_sync_packet(int $uid, array $packet = null, bool $groups_changed = false): mixed This method is static . Parameters: Parameter Type Description $uid int (optional) default 0 $packet array (optional) default null $groups_changed bool (optional) default false process_channel_sync_delivery public static process_channel_sync_delivery(string $sender, array $arr, array $deliveries): array This method is static . Parameters: Parameter Type Description $sender string $arr array $deliveries array sync_locations public static sync_locations(array $sender, array $arr): array This method is static . Parameters: Parameter Type Description $sender array $arr array keychange public static keychange(mixed $channel, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $channel mixed $arr mixed Automatically generated on 2025-03-15","title":"Libsync"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#libsync","text":"Full name: \\Zotlabs\\Lib\\Libsync","title":"Libsync"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#build_sync_packet","text":"public static build_sync_packet(int $uid, array $packet = null, bool $groups_changed = false): mixed This method is static . Parameters: Parameter Type Description $uid int (optional) default 0 $packet array (optional) default null $groups_changed bool (optional) default false","title":"build_sync_packet"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#process_channel_sync_delivery","text":"public static process_channel_sync_delivery(string $sender, array $arr, array $deliveries): array This method is static . Parameters: Parameter Type Description $sender string $arr array $deliveries array","title":"process_channel_sync_delivery"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#sync_locations","text":"public static sync_locations(array $sender, array $arr): array This method is static . Parameters: Parameter Type Description $sender array $arr array","title":"sync_locations"},{"location":"dev/classes/Zotlabs/Lib/Libsync/#keychange","text":"public static keychange(mixed $channel, mixed $arr): mixed This method is static . Parameters: Parameter Type Description $channel mixed $arr mixed Automatically generated on 2025-03-15","title":"keychange"},{"location":"dev/classes/Zotlabs/Lib/Libzot/","text":"Libzot Full name: \\Zotlabs\\Lib\\Libzot Methods new_uid public static new_uid(string $channel_nick): string This method is static . Parameters: Parameter Type Description $channel_nick string a unique nickname of controlling entity make_xchan_hash public static make_xchan_hash(string $guid, string $pubkey): string This method is static . Parameters: Parameter Type Description $guid string $pubkey string get_hublocs public static get_hublocs(string $hash): array This method is static . Parameters: Parameter Type Description $hash string - xchan_hash Return Value: of hubloc (hub location structures) build_packet public static build_packet(array $channel, string $type = &#039;activity&#039;, array $recipients = null, array $msg = [], string $encoding = &#039;activitystreams&#039;, string $remote_key = null, string $methods = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $channel array sender channel structure $type string packet type: one of 'ping', 'pickup', 'purge', 'refresh', 'keychange', 'force_refresh', 'notify', 'auth_check' $recipients array envelope recipients, array of portable_id's; empty for public posts $msg array optional message $encoding string optional encoding, default 'activitystreams' $remote_key string optional public site key of target hub used to encrypt entire packet NOTE: remote_key and encrypted packets are required for 'auth_check' packets, optional for all others $methods string optional comma separated list of encryption methods @ref best_algorithm() best_algorithm public static best_algorithm(string $methods): string This method is static . Parameters: Parameter Type Description $methods string Comma separated list of encryption methods Return Value: first match from our site method preferences Crypto::methods() array of a method which is common to both sites; or 'aes256cbc' if no matches are found. zot public static zot(string $url, string $data, array $channel = null, array $crypto = null): array This method is static . Parameters: Parameter Type Description $url string $data string $channel array (required if using zot6 delivery) $crypto array (required if encrypted httpsig, requires hubloc_sitekey and site_crypto elements) Return Value: see z_post_url() for returned data format See Also: \\Zotlabs\\Lib\\z_post_url() - refresh public static refresh(array $them, array $channel = null, bool $force = false): bool This method is static . Parameters: Parameter Type Description $them array => xchan structure of sender $channel array => local channel structure of target recipient, required for \"friending\" operations $force bool (optional) default false Return Value: \\b true if successful otherwise \\b false gethub public static gethub(array $arr, bool $multiple = false): array|null This method is static . Parameters: Parameter Type Description $arr array an associative array which must contain: \\e string \\b id => id of conversant \\e string \\b id_sig => id signed with conversant's private key \\e string \\b location => URL of the origination hub of this communication \\e string \\b location_sig => URL signed with conversant's private key * \\e string \\b site_id => URL signed with conversant's private key $multiple bool (optional) default false Return Value: null if site is blacklisted or not found otherwise an array with an hubloc record valid_hub public static valid_hub(string $sender, string $site_id): null|array This method is static . Parameters: Parameter Type Description $sender string $site_id string register_hub public static register_hub(string $id): array This method is static . Parameters: Parameter Type Description $id string Return Value: An associative array with * \\e boolean \\b success * \\e string \\b message (optional, unused) error string only if success is false import_xchan public static import_xchan(array $arr): array This method is static . Parameters: Parameter Type Description $arr array => json_decoded discovery packet Return Value: An associative array with: * \\e boolean \\b success boolean true or false * \\e string \\b message (optional) error string only if success is false process_response public static process_response(string $hub, array $arr, array $outq): void This method is static . Parameters: Parameter Type Description $hub string - url of site we just contacted $arr array - output of z_post_url() $outq array - The queue structure attached to this request fetch public static fetch(array $arr): array This method is static . Parameters: Parameter Type Description $arr array decrypted and json decoded notify packet from remote site Return Value: from zot_import() See Also: \\Zotlabs\\Lib\\zot_import() - import public static import(array $arr): mixed This method is static . Parameters: Parameter Type Description $arr array 'pickup' structure returned from remote site is_top_level public static is_top_level(array $env, object $act): bool This method is static . Parameters: Parameter Type Description $env array $act object find_parent public static find_parent(mixed $env, mixed $act): mixed This method is static . Parameters: Parameter Type Description $env mixed $act mixed find_parent_owner_hashes public static find_parent_owner_hashes(mixed $env, mixed $act): mixed This method is static . Parameters: Parameter Type Description $env mixed $act mixed public_recips public static public_recips(array $msg, object $act): array This method is static . Parameters: Parameter Type Description $msg array $act object process_delivery public static process_delivery(string $sender, mixed $act, array $arr, array $deliveries, bool $relay, bool $public = false, bool $request = false, bool $force = false, mixed $is_collection_operation = false): array This method is static . Parameters: Parameter Type Description $sender string $act mixed $arr array $deliveries array $relay bool $public bool (optional) default false $request bool (optional) default false $force bool (optional) default false - should only be set for manual fetch $is_collection_operation mixed fetch_conversation public static fetch_conversation(mixed $channel, mixed $mid, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $channel mixed $mid mixed $force mixed remove_community_tag public static remove_community_tag(string $sender, array $arr, int $uid): void This method is static . Parameters: Parameter Type Description $sender string $arr array an associative array \\e int \\b verb \\e int \\b obj_type * \\e int \\b mid $uid int update_imported_item public static update_imported_item(string $sender, array $item, array $orig, int $uid, bool $tag_delivery): void|array This method is static . Parameters: Parameter Type Description $sender string $item array $orig array $uid int $tag_delivery bool See Also: \\Zotlabs\\Lib\\item_store_update() - delete_imported_item public static delete_imported_item(string $sender, mixed $act, array $item, int $uid, bool $relay): bool|int This method is static . Parameters: Parameter Type Description $sender string * * \\e string \\b hash a xchan_hash $act mixed $item array $uid int $relay bool Return Value: post_id encode_locations public static encode_locations(array $channel): array This method is static . Parameters: Parameter Type Description $channel array an associative array which must contain * \\e string \\b channel_hash the hash of the channel Return Value: an array with associative arrays See Also: \\Zotlabs\\Lib\\self::get_hublocs() - import_site public static import_site(array $arr): bool This method is static . Parameters: Parameter Type Description $arr array Return Value: true if updated or inserted get_rpost_path public static get_rpost_path(array $observer): string This method is static . Parameters: Parameter Type Description $observer array * * \\e string \\b xchan_url import_author_zot public static import_author_zot(array $x): bool|string This method is static . Parameters: Parameter Type Description $x array Return Value: return false or a hash zotinfo public static zotinfo(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed site_info public static site_info(): array This method is static . update_hub_connected public static update_hub_connected(array $hub, string $site_id = &#039;&#039;): string This method is static . Parameters: Parameter Type Description $hub array $site_id string (optional, default empty) Return Value: hubloc_url sign public static sign(string $data, string $key, string $alg = &#039;sha256&#039;): string This method is static . Parameters: Parameter Type Description $data string $key string $alg string (optional) default 'sha256' verify public static verify(mixed $data, mixed $sig, mixed $key): mixed This method is static . Parameters: Parameter Type Description $data mixed $sig mixed $key mixed is_zot_request public static is_zot_request(): bool This method is static . zot_record_preferred public static zot_record_preferred(mixed $arr, mixed $check = &#039;hubloc_network&#039;): mixed This method is static . Parameters: Parameter Type Description $arr mixed $check mixed update_cached_hubloc public static update_cached_hubloc(mixed $hubloc): mixed This method is static . Parameters: Parameter Type Description $hubloc mixed Automatically generated on 2025-03-15","title":"Libzot"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#libzot","text":"Full name: \\Zotlabs\\Lib\\Libzot","title":"Libzot"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#new_uid","text":"public static new_uid(string $channel_nick): string This method is static . Parameters: Parameter Type Description $channel_nick string a unique nickname of controlling entity","title":"new_uid"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#make_xchan_hash","text":"public static make_xchan_hash(string $guid, string $pubkey): string This method is static . Parameters: Parameter Type Description $guid string $pubkey string","title":"make_xchan_hash"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#get_hublocs","text":"public static get_hublocs(string $hash): array This method is static . Parameters: Parameter Type Description $hash string - xchan_hash Return Value: of hubloc (hub location structures)","title":"get_hublocs"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#build_packet","text":"public static build_packet(array $channel, string $type = &#039;activity&#039;, array $recipients = null, array $msg = [], string $encoding = &#039;activitystreams&#039;, string $remote_key = null, string $methods = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $channel array sender channel structure $type string packet type: one of 'ping', 'pickup', 'purge', 'refresh', 'keychange', 'force_refresh', 'notify', 'auth_check' $recipients array envelope recipients, array of portable_id's; empty for public posts $msg array optional message $encoding string optional encoding, default 'activitystreams' $remote_key string optional public site key of target hub used to encrypt entire packet NOTE: remote_key and encrypted packets are required for 'auth_check' packets, optional for all others $methods string optional comma separated list of encryption methods @ref best_algorithm()","title":"build_packet"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#best_algorithm","text":"public static best_algorithm(string $methods): string This method is static . Parameters: Parameter Type Description $methods string Comma separated list of encryption methods Return Value: first match from our site method preferences Crypto::methods() array of a method which is common to both sites; or 'aes256cbc' if no matches are found.","title":"best_algorithm"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zot","text":"public static zot(string $url, string $data, array $channel = null, array $crypto = null): array This method is static . Parameters: Parameter Type Description $url string $data string $channel array (required if using zot6 delivery) $crypto array (required if encrypted httpsig, requires hubloc_sitekey and site_crypto elements) Return Value: see z_post_url() for returned data format See Also: \\Zotlabs\\Lib\\z_post_url() -","title":"zot"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#refresh","text":"public static refresh(array $them, array $channel = null, bool $force = false): bool This method is static . Parameters: Parameter Type Description $them array => xchan structure of sender $channel array => local channel structure of target recipient, required for \"friending\" operations $force bool (optional) default false Return Value: \\b true if successful otherwise \\b false","title":"refresh"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#gethub","text":"public static gethub(array $arr, bool $multiple = false): array|null This method is static . Parameters: Parameter Type Description $arr array an associative array which must contain: \\e string \\b id => id of conversant \\e string \\b id_sig => id signed with conversant's private key \\e string \\b location => URL of the origination hub of this communication \\e string \\b location_sig => URL signed with conversant's private key * \\e string \\b site_id => URL signed with conversant's private key $multiple bool (optional) default false Return Value: null if site is blacklisted or not found otherwise an array with an hubloc record","title":"gethub"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#valid_hub","text":"public static valid_hub(string $sender, string $site_id): null|array This method is static . Parameters: Parameter Type Description $sender string $site_id string","title":"valid_hub"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#register_hub","text":"public static register_hub(string $id): array This method is static . Parameters: Parameter Type Description $id string Return Value: An associative array with * \\e boolean \\b success * \\e string \\b message (optional, unused) error string only if success is false","title":"register_hub"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_xchan","text":"public static import_xchan(array $arr): array This method is static . Parameters: Parameter Type Description $arr array => json_decoded discovery packet Return Value: An associative array with: * \\e boolean \\b success boolean true or false * \\e string \\b message (optional) error string only if success is false","title":"import_xchan"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#process_response","text":"public static process_response(string $hub, array $arr, array $outq): void This method is static . Parameters: Parameter Type Description $hub string - url of site we just contacted $arr array - output of z_post_url() $outq array - The queue structure attached to this request","title":"process_response"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#fetch","text":"public static fetch(array $arr): array This method is static . Parameters: Parameter Type Description $arr array decrypted and json decoded notify packet from remote site Return Value: from zot_import() See Also: \\Zotlabs\\Lib\\zot_import() -","title":"fetch"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import","text":"public static import(array $arr): mixed This method is static . Parameters: Parameter Type Description $arr array 'pickup' structure returned from remote site","title":"import"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#is_top_level","text":"public static is_top_level(array $env, object $act): bool This method is static . Parameters: Parameter Type Description $env array $act object","title":"is_top_level"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#find_parent","text":"public static find_parent(mixed $env, mixed $act): mixed This method is static . Parameters: Parameter Type Description $env mixed $act mixed","title":"find_parent"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#find_parent_owner_hashes","text":"public static find_parent_owner_hashes(mixed $env, mixed $act): mixed This method is static . Parameters: Parameter Type Description $env mixed $act mixed","title":"find_parent_owner_hashes"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#public_recips","text":"public static public_recips(array $msg, object $act): array This method is static . Parameters: Parameter Type Description $msg array $act object","title":"public_recips"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#process_delivery","text":"public static process_delivery(string $sender, mixed $act, array $arr, array $deliveries, bool $relay, bool $public = false, bool $request = false, bool $force = false, mixed $is_collection_operation = false): array This method is static . Parameters: Parameter Type Description $sender string $act mixed $arr array $deliveries array $relay bool $public bool (optional) default false $request bool (optional) default false $force bool (optional) default false - should only be set for manual fetch $is_collection_operation mixed","title":"process_delivery"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#fetch_conversation","text":"public static fetch_conversation(mixed $channel, mixed $mid, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $channel mixed $mid mixed $force mixed","title":"fetch_conversation"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#remove_community_tag","text":"public static remove_community_tag(string $sender, array $arr, int $uid): void This method is static . Parameters: Parameter Type Description $sender string $arr array an associative array \\e int \\b verb \\e int \\b obj_type * \\e int \\b mid $uid int","title":"remove_community_tag"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_imported_item","text":"public static update_imported_item(string $sender, array $item, array $orig, int $uid, bool $tag_delivery): void|array This method is static . Parameters: Parameter Type Description $sender string $item array $orig array $uid int $tag_delivery bool See Also: \\Zotlabs\\Lib\\item_store_update() -","title":"update_imported_item"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#delete_imported_item","text":"public static delete_imported_item(string $sender, mixed $act, array $item, int $uid, bool $relay): bool|int This method is static . Parameters: Parameter Type Description $sender string * * \\e string \\b hash a xchan_hash $act mixed $item array $uid int $relay bool Return Value: post_id","title":"delete_imported_item"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#encode_locations","text":"public static encode_locations(array $channel): array This method is static . Parameters: Parameter Type Description $channel array an associative array which must contain * \\e string \\b channel_hash the hash of the channel Return Value: an array with associative arrays See Also: \\Zotlabs\\Lib\\self::get_hublocs() -","title":"encode_locations"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_site","text":"public static import_site(array $arr): bool This method is static . Parameters: Parameter Type Description $arr array Return Value: true if updated or inserted","title":"import_site"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#get_rpost_path","text":"public static get_rpost_path(array $observer): string This method is static . Parameters: Parameter Type Description $observer array * * \\e string \\b xchan_url","title":"get_rpost_path"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#import_author_zot","text":"public static import_author_zot(array $x): bool|string This method is static . Parameters: Parameter Type Description $x array Return Value: return false or a hash","title":"import_author_zot"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zotinfo","text":"public static zotinfo(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"zotinfo"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#site_info","text":"public static site_info(): array This method is static .","title":"site_info"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_hub_connected","text":"public static update_hub_connected(array $hub, string $site_id = &#039;&#039;): string This method is static . Parameters: Parameter Type Description $hub array $site_id string (optional, default empty) Return Value: hubloc_url","title":"update_hub_connected"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#sign","text":"public static sign(string $data, string $key, string $alg = &#039;sha256&#039;): string This method is static . Parameters: Parameter Type Description $data string $key string $alg string (optional) default 'sha256'","title":"sign"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#verify","text":"public static verify(mixed $data, mixed $sig, mixed $key): mixed This method is static . Parameters: Parameter Type Description $data mixed $sig mixed $key mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#is_zot_request","text":"public static is_zot_request(): bool This method is static .","title":"is_zot_request"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#zot_record_preferred","text":"public static zot_record_preferred(mixed $arr, mixed $check = &#039;hubloc_network&#039;): mixed This method is static . Parameters: Parameter Type Description $arr mixed $check mixed","title":"zot_record_preferred"},{"location":"dev/classes/Zotlabs/Lib/Libzot/#update_cached_hubloc","text":"public static update_cached_hubloc(mixed $hubloc): mixed This method is static . Parameters: Parameter Type Description $hubloc mixed Automatically generated on 2025-03-15","title":"update_cached_hubloc"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/","text":"Libzotdir Full name: \\Zotlabs\\Lib\\Libzotdir Methods find_upstream_directory public static find_upstream_directory(int $dirmode): array This method is static . Parameters: Parameter Type Description $dirmode int check_upstream_directory Directories may come and go over time. We will need to check that our directory server is still valid occasionally, and reset to something that is if our directory has gone offline for any reason public static check_upstream_directory(): mixed This method is static . get_directory_setting public static get_directory_setting(mixed $observer, mixed $setting): mixed This method is static . Parameters: Parameter Type Description $observer mixed $setting mixed dir_sort_links public static dir_sort_links(): mixed This method is static . sync_directories public static sync_directories(int $dirmode): mixed This method is static . Parameters: Parameter Type Description $dirmode int ; update_directory_entry public static update_directory_entry(array $ud): mixed This method is static . Parameters: Parameter Type Description $ud array Entry from update table local_dir_update public static local_dir_update(int $uid, bool $force): mixed This method is static . Parameters: Parameter Type Description $uid int $force bool import_directory_profile public static import_directory_profile(string $hash, array $profile): bool This method is static . Parameters: Parameter Type Description $hash string $profile array Return Value: $updated if something changed import_directory_keywords public static import_directory_keywords(string $hash, array $keywords): mixed This method is static . Parameters: Parameter Type Description $hash string An xtag_hash $keywords array update public static update(string $hash, string $addr, bool $bump_date = true, mixed $flag = null): mixed This method is static . Parameters: Parameter Type Description $hash string the channel hash $addr string the channel url $bump_date bool (optional) default true $flag mixed delete_by_hash public static delete_by_hash(string $hash): bool This method is static . Parameters: Parameter Type Description $hash string the channel hash Automatically generated on 2025-03-15","title":"Libzotdir"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#libzotdir","text":"Full name: \\Zotlabs\\Lib\\Libzotdir","title":"Libzotdir"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#find_upstream_directory","text":"public static find_upstream_directory(int $dirmode): array This method is static . Parameters: Parameter Type Description $dirmode int","title":"find_upstream_directory"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#check_upstream_directory","text":"Directories may come and go over time. We will need to check that our directory server is still valid occasionally, and reset to something that is if our directory has gone offline for any reason public static check_upstream_directory(): mixed This method is static .","title":"check_upstream_directory"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#get_directory_setting","text":"public static get_directory_setting(mixed $observer, mixed $setting): mixed This method is static . Parameters: Parameter Type Description $observer mixed $setting mixed","title":"get_directory_setting"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#dir_sort_links","text":"public static dir_sort_links(): mixed This method is static .","title":"dir_sort_links"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#sync_directories","text":"public static sync_directories(int $dirmode): mixed This method is static . Parameters: Parameter Type Description $dirmode int ;","title":"sync_directories"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#update_directory_entry","text":"public static update_directory_entry(array $ud): mixed This method is static . Parameters: Parameter Type Description $ud array Entry from update table","title":"update_directory_entry"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#local_dir_update","text":"public static local_dir_update(int $uid, bool $force): mixed This method is static . Parameters: Parameter Type Description $uid int $force bool","title":"local_dir_update"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#import_directory_profile","text":"public static import_directory_profile(string $hash, array $profile): bool This method is static . Parameters: Parameter Type Description $hash string $profile array Return Value: $updated if something changed","title":"import_directory_profile"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#import_directory_keywords","text":"public static import_directory_keywords(string $hash, array $keywords): mixed This method is static . Parameters: Parameter Type Description $hash string An xtag_hash $keywords array","title":"import_directory_keywords"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#update","text":"public static update(string $hash, string $addr, bool $bump_date = true, mixed $flag = null): mixed This method is static . Parameters: Parameter Type Description $hash string the channel hash $addr string the channel url $bump_date bool (optional) default true $flag mixed","title":"update"},{"location":"dev/classes/Zotlabs/Lib/Libzotdir/#delete_by_hash","text":"public static delete_by_hash(string $hash): bool This method is static . Parameters: Parameter Type Description $hash string the channel hash Automatically generated on 2025-03-15","title":"delete_by_hash"},{"location":"dev/classes/Zotlabs/Lib/Mailer/","text":"Mailer A class for sending emails. Based on the previous z_mail function, but adaped and made more robust and usable as a class. Full name: \\Zotlabs\\Lib\\Mailer Properties params private array $params Methods __construct public __construct(array $params = []): mixed Parameters: Parameter Type Description $params array deliver public deliver(): bool Automatically generated on 2025-03-15","title":"Mailer"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#mailer","text":"A class for sending emails. Based on the previous z_mail function, but adaped and made more robust and usable as a class. Full name: \\Zotlabs\\Lib\\Mailer","title":"Mailer"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#params","text":"private array $params","title":"params"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#__construct","text":"public __construct(array $params = []): mixed Parameters: Parameter Type Description $params array","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/Mailer/#deliver","text":"public deliver(): bool Automatically generated on 2025-03-15","title":"deliver"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/","text":"MarkdownSoap Full name: \\Zotlabs\\Lib\\MarkdownSoap Properties str private string $str token private string $token Methods __construct public __construct(mixed $s): mixed Parameters: Parameter Type Description $s mixed clean public clean(): mixed extract_code public extract_code(string $s): string Parameters: Parameter Type Description $s string See Also: \\Zotlabs\\Lib\\encode_code() - * \\Zotlabs\\Lib\\putback_code() - encode_code public encode_code(mixed $matches): mixed Parameters: Parameter Type Description $matches mixed decode_code public decode_code(mixed $matches): mixed Parameters: Parameter Type Description $matches mixed putback_code public putback_code(string $s): string Parameters: Parameter Type Description $s string See Also: \\Zotlabs\\Lib\\extract_code() - * \\Zotlabs\\Lib\\decode_code() - purify public purify(mixed $s): mixed Parameters: Parameter Type Description $s mixed protect_autolinks public protect_autolinks(mixed $s): mixed Parameters: Parameter Type Description $s mixed unprotect_autolinks public unprotect_autolinks(mixed $s): mixed Parameters: Parameter Type Description $s mixed escape public escape(mixed $s): mixed Parameters: Parameter Type Description $s mixed unescape public static unescape(string $s): string This method is static . Parameters: Parameter Type Description $s string Automatically generated on 2025-03-15","title":"MarkdownSoap"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#markdownsoap","text":"Full name: \\Zotlabs\\Lib\\MarkdownSoap","title":"MarkdownSoap"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#str","text":"private string $str","title":"str"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#token","text":"private string $token","title":"token"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#__construct","text":"public __construct(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#clean","text":"public clean(): mixed","title":"clean"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#extract_code","text":"public extract_code(string $s): string Parameters: Parameter Type Description $s string See Also: \\Zotlabs\\Lib\\encode_code() - * \\Zotlabs\\Lib\\putback_code() -","title":"extract_code"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#encode_code","text":"public encode_code(mixed $matches): mixed Parameters: Parameter Type Description $matches mixed","title":"encode_code"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#decode_code","text":"public decode_code(mixed $matches): mixed Parameters: Parameter Type Description $matches mixed","title":"decode_code"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#putback_code","text":"public putback_code(string $s): string Parameters: Parameter Type Description $s string See Also: \\Zotlabs\\Lib\\extract_code() - * \\Zotlabs\\Lib\\decode_code() -","title":"putback_code"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#purify","text":"public purify(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"purify"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#protect_autolinks","text":"public protect_autolinks(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"protect_autolinks"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#unprotect_autolinks","text":"public unprotect_autolinks(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"unprotect_autolinks"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#escape","text":"public escape(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"escape"},{"location":"dev/classes/Zotlabs/Lib/MarkdownSoap/#unescape","text":"public static unescape(string $s): string This method is static . Parameters: Parameter Type Description $s string Automatically generated on 2025-03-15","title":"unescape"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/","text":"MessageFilter Full name: \\Zotlabs\\Lib\\MessageFilter Methods evaluate public static evaluate(mixed $item, mixed $incl, mixed $excl): mixed This method is static . Parameters: Parameter Type Description $item mixed $incl mixed $excl mixed test_condition public static test_condition(string $s, array $item): bool This method is static . Parameters: Parameter Type Description $s string $item array Automatically generated on 2025-03-15","title":"MessageFilter"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#messagefilter","text":"Full name: \\Zotlabs\\Lib\\MessageFilter","title":"MessageFilter"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#evaluate","text":"public static evaluate(mixed $item, mixed $incl, mixed $excl): mixed This method is static . Parameters: Parameter Type Description $item mixed $incl mixed $excl mixed","title":"evaluate"},{"location":"dev/classes/Zotlabs/Lib/MessageFilter/#test_condition","text":"public static test_condition(string $s, array $item): bool This method is static . Parameters: Parameter Type Description $s string $item array Automatically generated on 2025-03-15","title":"test_condition"},{"location":"dev/classes/Zotlabs/Lib/Multibase/","text":"Multibase Full name: \\Zotlabs\\Lib\\Multibase Properties key protected $key Methods __construct public __construct(): mixed publicKey public publicKey(mixed $key): mixed Parameters: Parameter Type Description $key mixed secretKey public secretKey(mixed $key): mixed Parameters: Parameter Type Description $key mixed decode public decode(mixed $key, mixed $binary = false): mixed Parameters: Parameter Type Description $key mixed $binary mixed Automatically generated on 2025-03-15","title":"Multibase"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#multibase","text":"Full name: \\Zotlabs\\Lib\\Multibase","title":"Multibase"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#key","text":"protected $key","title":"key"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#publickey","text":"public publicKey(mixed $key): mixed Parameters: Parameter Type Description $key mixed","title":"publicKey"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#secretkey","text":"public secretKey(mixed $key): mixed Parameters: Parameter Type Description $key mixed","title":"secretKey"},{"location":"dev/classes/Zotlabs/Lib/Multibase/#decode","text":"public decode(mixed $key, mixed $binary = false): mixed Parameters: Parameter Type Description $key mixed $binary mixed Automatically generated on 2025-03-15","title":"decode"},{"location":"dev/classes/Zotlabs/Lib/PConfig/","text":"PConfig Full name: \\Zotlabs\\Lib\\PConfig Methods Load public static Load(string $uid): void|false This method is static . Parameters: Parameter Type Description $uid string The channel_id Return Value: Nothing or false if $uid is null or false Get public static Get(string $uid, string $family, string $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to query $default mixed (optional, default false) Default value to return if key does not exist Return Value: Stored value or false if it does not exist Set public static Set(string $uid, string $family, string $key, string $value, string $updated = NULL): mixed This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to set $value string The value to store $updated string (optional) The datetime to store Return Value: Stored $value or false Delete public static Delete(string $uid, string $family, string $key, string $updated = NULL): bool This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to delete $updated string (optional) The datetime to store Automatically generated on 2025-03-15","title":"PConfig"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#pconfig","text":"Full name: \\Zotlabs\\Lib\\PConfig","title":"PConfig"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#load","text":"public static Load(string $uid): void|false This method is static . Parameters: Parameter Type Description $uid string The channel_id Return Value: Nothing or false if $uid is null or false","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#get","text":"public static Get(string $uid, string $family, string $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to query $default mixed (optional, default false) Default value to return if key does not exist Return Value: Stored value or false if it does not exist","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#set","text":"public static Set(string $uid, string $family, string $key, string $value, string $updated = NULL): mixed This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to set $value string The value to store $updated string (optional) The datetime to store Return Value: Stored $value or false","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/PConfig/#delete","text":"public static Delete(string $uid, string $family, string $key, string $updated = NULL): bool This method is static . Parameters: Parameter Type Description $uid string The channel_id $family string The category of the configuration value $key string The configuration key to delete $updated string (optional) The datetime to store Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/Permcat/","text":"Permcat Full name: \\Zotlabs\\Lib\\Permcat Properties permcats private array $permcats Methods __construct public __construct(int $channel_id): mixed Parameters: Parameter Type Description $channel_id int listing public listing(): array fetch public fetch(string $name): array Parameters: Parameter Type Description $name string Return Value: \\e array with permcats \\e bool \\b error if $name not found in permcats true load_permcats public load_permcats(mixed $uid): mixed Parameters: Parameter Type Description $uid mixed find_permcat public static find_permcat(mixed $arr, mixed $name): mixed This method is static . Parameters: Parameter Type Description $arr mixed $name mixed update public static update(mixed $channel_id, mixed $name, mixed $permarr): mixed This method is static . Parameters: Parameter Type Description $channel_id mixed $name mixed $permarr mixed delete public static delete(mixed $channel_id, mixed $name): mixed This method is static . Parameters: Parameter Type Description $channel_id mixed $name mixed assign public static assign(array $channel, string $role, array $contacts): mixed This method is static . Parameters: Parameter Type Description $channel array $role string the name of the role $contacts array an array of contact hashes Automatically generated on 2025-03-15","title":"Permcat"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#permcat","text":"Full name: \\Zotlabs\\Lib\\Permcat","title":"Permcat"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#permcats","text":"private array $permcats","title":"permcats"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#__construct","text":"public __construct(int $channel_id): mixed Parameters: Parameter Type Description $channel_id int","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#listing","text":"public listing(): array","title":"listing"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#fetch","text":"public fetch(string $name): array Parameters: Parameter Type Description $name string Return Value: \\e array with permcats \\e bool \\b error if $name not found in permcats true","title":"fetch"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#load_permcats","text":"public load_permcats(mixed $uid): mixed Parameters: Parameter Type Description $uid mixed","title":"load_permcats"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#find_permcat","text":"public static find_permcat(mixed $arr, mixed $name): mixed This method is static . Parameters: Parameter Type Description $arr mixed $name mixed","title":"find_permcat"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#update","text":"public static update(mixed $channel_id, mixed $name, mixed $permarr): mixed This method is static . Parameters: Parameter Type Description $channel_id mixed $name mixed $permarr mixed","title":"update"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#delete","text":"public static delete(mixed $channel_id, mixed $name): mixed This method is static . Parameters: Parameter Type Description $channel_id mixed $name mixed","title":"delete"},{"location":"dev/classes/Zotlabs/Lib/Permcat/#assign","text":"public static assign(array $channel, string $role, array $contacts): mixed This method is static . Parameters: Parameter Type Description $channel array $role string the name of the role $contacts array an array of contact hashes Automatically generated on 2025-03-15","title":"assign"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/","text":"PermissionDescription Encapsulates information the ACL dialog requires to describe permission settings for an item with an empty ACL. i.e the caption, icon, and tooltip for the no-ACL option in the ACL dialog. Full name: \\Zotlabs\\Lib\\PermissionDescription Properties global_perm private $global_perm channel_perm private $channel_perm fallback_description private $fallback_description Methods fromDescription If the interpretation of an empty ACL can't be summarised with a global default permission or a specific permission setting then use this method and describe what it means instead. public static fromDescription(string $description): \\Zotlabs\\Lib\\a Remember to localize the description first. This method is static . Parameters: Parameter Type Description $description string - the localized caption for the no-ACL option in the ACL dialog. Return Value: new instance of PermissionDescription fromStandalonePermission Use this method only if the interpretation of an empty ACL doesn't fall back to a global default permission. You should pass one of the constants from boot.php - PERMS_PUBLIC, PERMS_NETWORK etc. public static fromStandalonePermission(int $perm): \\Zotlabs\\Lib\\a This method is static . Parameters: Parameter Type Description $perm int - a single enumerated constant permission - PERMS_PUBLIC, PERMS_NETWORK etc. Return Value: new instance of PermissionDescription fromGlobalPermission This is the preferred way to create a PermissionDescription, as it provides the most details. public static fromGlobalPermission(string $permname): \\Zotlabs\\Lib\\a Use this method if you know an empty ACL will result in one of the global default permissions being used, such as channel_r_stream (for which you would pass 'view_stream'). This method is static . Parameters: Parameter Type Description $permname string - a key for the global perms array from get_perms() in permissions.php, e.g. 'view_stream', 'view_profile', etc. Return Value: new instance of PermissionDescription get_permission_description Gets a localized description of the permission, or a generic message if the permission is unknown. public get_permission_description(): string Return Value: description get_permission_icon Returns an icon css class name if an appropriate one is available, e.g. \"bi-globe\" for Public, otherwise returns empty string. public get_permission_icon(): string Return Value: icon css class name (often FontAwesome) get_permission_origin_description Returns a localized description of where the permission came from, if this is known. public get_permission_origin_description(): string If it's not know, or if the permission is standalone and didn't come from a default permission setting, then empty string is returned. Return Value: description or empty string Automatically generated on 2025-03-15","title":"PermissionDescription"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#permissiondescription","text":"Encapsulates information the ACL dialog requires to describe permission settings for an item with an empty ACL. i.e the caption, icon, and tooltip for the no-ACL option in the ACL dialog. Full name: \\Zotlabs\\Lib\\PermissionDescription","title":"PermissionDescription"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#global_perm","text":"private $global_perm","title":"global_perm"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#channel_perm","text":"private $channel_perm","title":"channel_perm"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fallback_description","text":"private $fallback_description","title":"fallback_description"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromdescription","text":"If the interpretation of an empty ACL can't be summarised with a global default permission or a specific permission setting then use this method and describe what it means instead. public static fromDescription(string $description): \\Zotlabs\\Lib\\a Remember to localize the description first. This method is static . Parameters: Parameter Type Description $description string - the localized caption for the no-ACL option in the ACL dialog. Return Value: new instance of PermissionDescription","title":"fromDescription"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromstandalonepermission","text":"Use this method only if the interpretation of an empty ACL doesn't fall back to a global default permission. You should pass one of the constants from boot.php - PERMS_PUBLIC, PERMS_NETWORK etc. public static fromStandalonePermission(int $perm): \\Zotlabs\\Lib\\a This method is static . Parameters: Parameter Type Description $perm int - a single enumerated constant permission - PERMS_PUBLIC, PERMS_NETWORK etc. Return Value: new instance of PermissionDescription","title":"fromStandalonePermission"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#fromglobalpermission","text":"This is the preferred way to create a PermissionDescription, as it provides the most details. public static fromGlobalPermission(string $permname): \\Zotlabs\\Lib\\a Use this method if you know an empty ACL will result in one of the global default permissions being used, such as channel_r_stream (for which you would pass 'view_stream'). This method is static . Parameters: Parameter Type Description $permname string - a key for the global perms array from get_perms() in permissions.php, e.g. 'view_stream', 'view_profile', etc. Return Value: new instance of PermissionDescription","title":"fromGlobalPermission"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_description","text":"Gets a localized description of the permission, or a generic message if the permission is unknown. public get_permission_description(): string Return Value: description","title":"get_permission_description"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_icon","text":"Returns an icon css class name if an appropriate one is available, e.g. \"bi-globe\" for Public, otherwise returns empty string. public get_permission_icon(): string Return Value: icon css class name (often FontAwesome)","title":"get_permission_icon"},{"location":"dev/classes/Zotlabs/Lib/PermissionDescription/#get_permission_origin_description","text":"Returns a localized description of where the permission came from, if this is known. public get_permission_origin_description(): string If it's not know, or if the permission is standalone and didn't come from a default permission setting, then empty string is returned. Return Value: description or empty string Automatically generated on 2025-03-15","title":"get_permission_origin_description"},{"location":"dev/classes/Zotlabs/Lib/Queue/","text":"Queue Full name: \\Zotlabs\\Lib\\Queue Methods update public static update(mixed $id, mixed $add_priority): mixed This method is static . Parameters: Parameter Type Description $id mixed $add_priority mixed remove public static remove(mixed $id, mixed $channel_id): mixed This method is static . Parameters: Parameter Type Description $id mixed $channel_id mixed remove_by_posturl public static remove_by_posturl(mixed $posturl): mixed This method is static . Parameters: Parameter Type Description $posturl mixed set_delivered public static set_delivered(mixed $id, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $id mixed $channel mixed insert public static insert(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed deliver public static deliver(mixed $outq, mixed $immediate = false): mixed This method is static . Parameters: Parameter Type Description $outq mixed $immediate mixed Automatically generated on 2025-03-15","title":"Queue"},{"location":"dev/classes/Zotlabs/Lib/Queue/#queue","text":"Full name: \\Zotlabs\\Lib\\Queue","title":"Queue"},{"location":"dev/classes/Zotlabs/Lib/Queue/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Queue/#update","text":"public static update(mixed $id, mixed $add_priority): mixed This method is static . Parameters: Parameter Type Description $id mixed $add_priority mixed","title":"update"},{"location":"dev/classes/Zotlabs/Lib/Queue/#remove","text":"public static remove(mixed $id, mixed $channel_id): mixed This method is static . Parameters: Parameter Type Description $id mixed $channel_id mixed","title":"remove"},{"location":"dev/classes/Zotlabs/Lib/Queue/#remove_by_posturl","text":"public static remove_by_posturl(mixed $posturl): mixed This method is static . Parameters: Parameter Type Description $posturl mixed","title":"remove_by_posturl"},{"location":"dev/classes/Zotlabs/Lib/Queue/#set_delivered","text":"public static set_delivered(mixed $id, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $id mixed $channel mixed","title":"set_delivered"},{"location":"dev/classes/Zotlabs/Lib/Queue/#insert","text":"public static insert(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"insert"},{"location":"dev/classes/Zotlabs/Lib/Queue/#deliver","text":"public static deliver(mixed $outq, mixed $immediate = false): mixed This method is static . Parameters: Parameter Type Description $outq mixed $immediate mixed Automatically generated on 2025-03-15","title":"deliver"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/","text":"QueueWorker Full name: \\Zotlabs\\Lib\\QueueWorker Properties queueworker public static $queueworker This property is static . maxworkers public static $maxworkers This property is static . workermaxage public static $workermaxage This property is static . workersleep public static $workersleep This property is static . default_priorities public static $default_priorities This property is static . long_running_cmd public static $long_running_cmd This property is static . Methods Summon public static Summon(mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argv mixed Release public static Release(mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argv mixed GetWorkerCount public static GetWorkerCount(): mixed This method is static . GetWorkerID public static GetWorkerID(): mixed This method is static . getWorkId private static getWorkId(): mixed This method is static . Process public static Process(): mixed This method is static . ClearQueue public static ClearQueue(): mixed This method is static . getUuid private static getUuid(string $data): string This method is static . Parameters: Parameter Type Description $data string Return Value: $uuid Automatically generated on 2025-03-15","title":"QueueWorker"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#queueworker","text":"Full name: \\Zotlabs\\Lib\\QueueWorker","title":"QueueWorker"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#queueworker_1","text":"public static $queueworker This property is static .","title":"queueworker"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#maxworkers","text":"public static $maxworkers This property is static .","title":"maxworkers"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#workermaxage","text":"public static $workermaxage This property is static .","title":"workermaxage"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#workersleep","text":"public static $workersleep This property is static .","title":"workersleep"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#default_priorities","text":"public static $default_priorities This property is static .","title":"default_priorities"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#long_running_cmd","text":"public static $long_running_cmd This property is static .","title":"long_running_cmd"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#summon","text":"public static Summon(mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argv mixed","title":"Summon"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#release","text":"public static Release(mixed $argv): mixed This method is static . Parameters: Parameter Type Description $argv mixed","title":"Release"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkercount","text":"public static GetWorkerCount(): mixed This method is static .","title":"GetWorkerCount"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkerid","text":"public static GetWorkerID(): mixed This method is static .","title":"GetWorkerID"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getworkid","text":"private static getWorkId(): mixed This method is static .","title":"getWorkId"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#process","text":"public static Process(): mixed This method is static .","title":"Process"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#clearqueue","text":"public static ClearQueue(): mixed This method is static .","title":"ClearQueue"},{"location":"dev/classes/Zotlabs/Lib/QueueWorker/#getuuid","text":"private static getUuid(string $data): string This method is static . Parameters: Parameter Type Description $data string Return Value: $uuid Automatically generated on 2025-03-15","title":"getUuid"},{"location":"dev/classes/Zotlabs/Lib/SConfig/","text":"SConfig Full name: \\Zotlabs\\Lib\\SConfig See Also: \\Zotlabs\\Lib\\XConfig - Methods Load public static Load(mixed $server_id): mixed This method is static . Parameters: Parameter Type Description $server_id mixed Get public static Get(mixed $server_id, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed $default mixed Set public static Set(mixed $server_id, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed $value mixed Delete public static Delete(mixed $server_id, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"SConfig"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#sconfig","text":"Full name: \\Zotlabs\\Lib\\SConfig See Also: \\Zotlabs\\Lib\\XConfig -","title":"SConfig"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#load","text":"public static Load(mixed $server_id): mixed This method is static . Parameters: Parameter Type Description $server_id mixed","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#get","text":"public static Get(mixed $server_id, mixed $family, mixed $key, mixed $default = false): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed $default mixed","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#set","text":"public static Set(mixed $server_id, mixed $family, mixed $key, mixed $value): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed $value mixed","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/SConfig/#delete","text":"public static Delete(mixed $server_id, mixed $family, mixed $key): mixed This method is static . Parameters: Parameter Type Description $server_id mixed $family mixed $key mixed Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/Share/","text":"Share Full name: \\Zotlabs\\Lib\\Share Properties item private $item Methods __construct public __construct(mixed $post_id): mixed Parameters: Parameter Type Description $post_id mixed obj public obj(): mixed bbcode public bbcode(): mixed Automatically generated on 2025-03-15","title":"Share"},{"location":"dev/classes/Zotlabs/Lib/Share/#share","text":"Full name: \\Zotlabs\\Lib\\Share","title":"Share"},{"location":"dev/classes/Zotlabs/Lib/Share/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Share/#item","text":"private $item","title":"item"},{"location":"dev/classes/Zotlabs/Lib/Share/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Share/#__construct","text":"public __construct(mixed $post_id): mixed Parameters: Parameter Type Description $post_id mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/Share/#obj","text":"public obj(): mixed","title":"obj"},{"location":"dev/classes/Zotlabs/Lib/Share/#bbcode","text":"public bbcode(): mixed Automatically generated on 2025-03-15","title":"bbcode"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/","text":"SvgSanitizer SVGSantiizer Whitelist-based PHP SVG sanitizer. Full name: \\Zotlabs\\Lib\\SvgSanitizer See Also: https://github.com/alister-/SVG-Sanitizer} - @author Alister Norris @copyright Copyright (c) 2013 Alister Norris @license http://opensource.org/licenses/mit-license.php The MIT License @package svgsanitizer Properties xmlDoc private $xmlDoc removedattrs private $removedattrs allowed_functions private static $allowed_functions This property is static . whitelist private static $whitelist This property is static . Methods __construct public __construct(): mixed load public load(mixed $file): mixed Parameters: Parameter Type Description $file mixed loadXML public loadXML(mixed $str): mixed Parameters: Parameter Type Description $str mixed sanitize public sanitize(): mixed saveSVG public saveSVG(): mixed Automatically generated on 2025-03-15","title":"SvgSanitizer"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#svgsanitizer","text":"SVGSantiizer Whitelist-based PHP SVG sanitizer. Full name: \\Zotlabs\\Lib\\SvgSanitizer See Also: https://github.com/alister-/SVG-Sanitizer} - @author Alister Norris @copyright Copyright (c) 2013 Alister Norris @license http://opensource.org/licenses/mit-license.php The MIT License @package svgsanitizer","title":"SvgSanitizer"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#xmldoc","text":"private $xmlDoc","title":"xmlDoc"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#removedattrs","text":"private $removedattrs","title":"removedattrs"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#allowed_functions","text":"private static $allowed_functions This property is static .","title":"allowed_functions"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#whitelist","text":"private static $whitelist This property is static .","title":"whitelist"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#load","text":"public load(mixed $file): mixed Parameters: Parameter Type Description $file mixed","title":"load"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#loadxml","text":"public loadXML(mixed $str): mixed Parameters: Parameter Type Description $str mixed","title":"loadXML"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#sanitize","text":"public sanitize(): mixed","title":"sanitize"},{"location":"dev/classes/Zotlabs/Lib/SvgSanitizer/#savesvg","text":"public saveSVG(): mixed Automatically generated on 2025-03-15","title":"saveSVG"},{"location":"dev/classes/Zotlabs/Lib/System/","text":"System Full name: \\Zotlabs\\Lib\\System Methods get_platform_name public static get_platform_name(): mixed This method is static . get_site_name public static get_site_name(): mixed This method is static . get_project_version public static get_project_version(): mixed This method is static . get_update_version public static get_update_version(): mixed This method is static . get_notify_icon public static get_notify_icon(): mixed This method is static . get_site_icon public static get_site_icon(): mixed This method is static . get_project_link public static get_project_link(): mixed This method is static . get_project_srclink public static get_project_srclink(): mixed This method is static . get_server_role public static get_server_role(): mixed This method is static . get_zot_revision public static get_zot_revision(): mixed This method is static . get_std_version public static get_std_version(): mixed This method is static . compatible_project public static compatible_project(mixed $p): mixed This method is static . Parameters: Parameter Type Description $p mixed Automatically generated on 2025-03-15","title":"System"},{"location":"dev/classes/Zotlabs/Lib/System/#system","text":"Full name: \\Zotlabs\\Lib\\System","title":"System"},{"location":"dev/classes/Zotlabs/Lib/System/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/System/#get_platform_name","text":"public static get_platform_name(): mixed This method is static .","title":"get_platform_name"},{"location":"dev/classes/Zotlabs/Lib/System/#get_site_name","text":"public static get_site_name(): mixed This method is static .","title":"get_site_name"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_version","text":"public static get_project_version(): mixed This method is static .","title":"get_project_version"},{"location":"dev/classes/Zotlabs/Lib/System/#get_update_version","text":"public static get_update_version(): mixed This method is static .","title":"get_update_version"},{"location":"dev/classes/Zotlabs/Lib/System/#get_notify_icon","text":"public static get_notify_icon(): mixed This method is static .","title":"get_notify_icon"},{"location":"dev/classes/Zotlabs/Lib/System/#get_site_icon","text":"public static get_site_icon(): mixed This method is static .","title":"get_site_icon"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_link","text":"public static get_project_link(): mixed This method is static .","title":"get_project_link"},{"location":"dev/classes/Zotlabs/Lib/System/#get_project_srclink","text":"public static get_project_srclink(): mixed This method is static .","title":"get_project_srclink"},{"location":"dev/classes/Zotlabs/Lib/System/#get_server_role","text":"public static get_server_role(): mixed This method is static .","title":"get_server_role"},{"location":"dev/classes/Zotlabs/Lib/System/#get_zot_revision","text":"public static get_zot_revision(): mixed This method is static .","title":"get_zot_revision"},{"location":"dev/classes/Zotlabs/Lib/System/#get_std_version","text":"public static get_std_version(): mixed This method is static .","title":"get_std_version"},{"location":"dev/classes/Zotlabs/Lib/System/#compatible_project","text":"public static compatible_project(mixed $p): mixed This method is static . Parameters: Parameter Type Description $p mixed Automatically generated on 2025-03-15","title":"compatible_project"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/","text":"Techlevels Full name: \\Zotlabs\\Lib\\Techlevels Methods levels public static levels(): mixed This method is static . Automatically generated on 2025-03-15","title":"Techlevels"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/#techlevels","text":"Full name: \\Zotlabs\\Lib\\Techlevels","title":"Techlevels"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Techlevels/#levels","text":"public static levels(): mixed This method is static . Automatically generated on 2025-03-15","title":"levels"},{"location":"dev/classes/Zotlabs/Lib/Text/","text":"Text Full name: \\Zotlabs\\Lib\\Text Methods escape_tags use this on \"body\" or \"content\" input where angle chars shouldn't be removed, and allow them to be safely displayed. public static escape_tags(string $string): string This method is static . Parameters: Parameter Type Description $string string Automatically generated on 2025-03-15","title":"Text"},{"location":"dev/classes/Zotlabs/Lib/Text/#text","text":"Full name: \\Zotlabs\\Lib\\Text","title":"Text"},{"location":"dev/classes/Zotlabs/Lib/Text/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Text/#escape_tags","text":"use this on \"body\" or \"content\" input where angle chars shouldn't be removed, and allow them to be safely displayed. public static escape_tags(string $string): string This method is static . Parameters: Parameter Type Description $string string Automatically generated on 2025-03-15","title":"escape_tags"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/","text":"ThreadItem A thread item Full name: \\Zotlabs\\Lib\\ThreadItem Properties data public $data template private $template comment_box_template private $comment_box_template commentable private $commentable reactions private $reactions toplevel private $toplevel children private $children parent private $parent conversation private $conversation redirect_url private $redirect_url owner_url private $owner_url owner_photo private $owner_photo owner_name private $owner_name wall_to_wall private $wall_to_wall threaded private $threaded visiting private $visiting channel private $channel display_mode private $display_mode reload private $reload mid_uuid_map private $mid_uuid_map Methods __construct public __construct(mixed $data): mixed Parameters: Parameter Type Description $data mixed get_template_data Get data in a form usable by a conversation template public get_template_data(mixed $conv_responses, mixed $mid_uuid_map, mixed $thread_level = 1, mixed $conv_flags = []): mixed Returns: _ The data requested on success _ false on failure Parameters: Parameter Type Description $conv_responses mixed $mid_uuid_map mixed $thread_level mixed $conv_flags mixed get_id public get_id(): mixed get_display_mode public get_display_mode(): mixed set_display_mode public set_display_mode(mixed $mode): mixed Parameters: Parameter Type Description $mode mixed is_threaded public is_threaded(): mixed set_reload public set_reload(mixed $val): mixed Parameters: Parameter Type Description $val mixed get_reload public get_reload(): mixed set_commentable public set_commentable(mixed $val): mixed Parameters: Parameter Type Description $val mixed is_commentable public is_commentable(): mixed add_child Add a child item public add_child(mixed $item): mixed Parameters: Parameter Type Description $item mixed get_child Get a child by its ID public get_child(mixed $id): mixed Parameters: Parameter Type Description $id mixed get_children Get all our children public get_children(): mixed set_parent Set our parent protected set_parent(mixed $item): mixed Parameters: Parameter Type Description $item mixed remove_parent Remove our parent protected remove_parent(): mixed remove_child Remove a child public remove_child(mixed $item): mixed Parameters: Parameter Type Description $item mixed get_parent Get parent item protected get_parent(): mixed set_conversation set conversation public set_conversation(mixed $conv): mixed Parameters: Parameter Type Description $conv mixed get_conversation get conversation public get_conversation(): mixed get_data Get raw data public get_data(): mixed We shouldn't need this get_data_value Get a data value public get_data_value(mixed $name): mixed Returns: _ value on success _ false on failure Parameters: Parameter Type Description $name mixed get_template Get template public get_template(): mixed set_template public set_template(mixed $t): mixed Parameters: Parameter Type Description $t mixed is_toplevel Check if this is a toplevel post private is_toplevel(): mixed count_descendants Count the total of our descendants private count_descendants(): mixed count_unseen_descendants private count_unseen_descendants(): mixed get_comment_box_template Get the template for the comment box private get_comment_box_template(): mixed get_comment_box Get the comment box private get_comment_box(): mixed Returns: _ The comment box string (empty if no comment box) _ false on failure get_redirect_url private get_redirect_url(): mixed check_wall_to_wall Check if we are a wall to wall or announce item and set the relevant properties protected check_wall_to_wall(): mixed is_wall_to_wall private is_wall_to_wall(): mixed get_owner_url private get_owner_url(): mixed get_owner_photo private get_owner_photo(): mixed get_owner_name private get_owner_name(): mixed is_visiting private is_visiting(): mixed Automatically generated on 2025-03-15","title":"ThreadItem"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#threaditem","text":"A thread item Full name: \\Zotlabs\\Lib\\ThreadItem","title":"ThreadItem"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#data","text":"public $data","title":"data"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#template","text":"private $template","title":"template"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#comment_box_template","text":"private $comment_box_template","title":"comment_box_template"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#commentable","text":"private $commentable","title":"commentable"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#reactions","text":"private $reactions","title":"reactions"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#toplevel","text":"private $toplevel","title":"toplevel"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#children","text":"private $children","title":"children"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#parent","text":"private $parent","title":"parent"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#conversation","text":"private $conversation","title":"conversation"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#redirect_url","text":"private $redirect_url","title":"redirect_url"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_url","text":"private $owner_url","title":"owner_url"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_photo","text":"private $owner_photo","title":"owner_photo"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#owner_name","text":"private $owner_name","title":"owner_name"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#wall_to_wall","text":"private $wall_to_wall","title":"wall_to_wall"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#threaded","text":"private $threaded","title":"threaded"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#visiting","text":"private $visiting","title":"visiting"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#channel","text":"private $channel","title":"channel"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#display_mode","text":"private $display_mode","title":"display_mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#reload","text":"private $reload","title":"reload"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#mid_uuid_map","text":"private $mid_uuid_map","title":"mid_uuid_map"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#__construct","text":"public __construct(mixed $data): mixed Parameters: Parameter Type Description $data mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_template_data","text":"Get data in a form usable by a conversation template public get_template_data(mixed $conv_responses, mixed $mid_uuid_map, mixed $thread_level = 1, mixed $conv_flags = []): mixed Returns: _ The data requested on success _ false on failure Parameters: Parameter Type Description $conv_responses mixed $mid_uuid_map mixed $thread_level mixed $conv_flags mixed","title":"get_template_data"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_id","text":"public get_id(): mixed","title":"get_id"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_display_mode","text":"public get_display_mode(): mixed","title":"get_display_mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_display_mode","text":"public set_display_mode(mixed $mode): mixed Parameters: Parameter Type Description $mode mixed","title":"set_display_mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_threaded","text":"public is_threaded(): mixed","title":"is_threaded"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_reload","text":"public set_reload(mixed $val): mixed Parameters: Parameter Type Description $val mixed","title":"set_reload"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_reload","text":"public get_reload(): mixed","title":"get_reload"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_commentable","text":"public set_commentable(mixed $val): mixed Parameters: Parameter Type Description $val mixed","title":"set_commentable"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_commentable","text":"public is_commentable(): mixed","title":"is_commentable"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#add_child","text":"Add a child item public add_child(mixed $item): mixed Parameters: Parameter Type Description $item mixed","title":"add_child"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_child","text":"Get a child by its ID public get_child(mixed $id): mixed Parameters: Parameter Type Description $id mixed","title":"get_child"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_children","text":"Get all our children public get_children(): mixed","title":"get_children"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_parent","text":"Set our parent protected set_parent(mixed $item): mixed Parameters: Parameter Type Description $item mixed","title":"set_parent"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#remove_parent","text":"Remove our parent protected remove_parent(): mixed","title":"remove_parent"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#remove_child","text":"Remove a child public remove_child(mixed $item): mixed Parameters: Parameter Type Description $item mixed","title":"remove_child"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_parent","text":"Get parent item protected get_parent(): mixed","title":"get_parent"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_conversation","text":"set conversation public set_conversation(mixed $conv): mixed Parameters: Parameter Type Description $conv mixed","title":"set_conversation"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_conversation","text":"get conversation public get_conversation(): mixed","title":"get_conversation"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_data","text":"Get raw data public get_data(): mixed We shouldn't need this","title":"get_data"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_data_value","text":"Get a data value public get_data_value(mixed $name): mixed Returns: _ value on success _ false on failure Parameters: Parameter Type Description $name mixed","title":"get_data_value"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_template","text":"Get template public get_template(): mixed","title":"get_template"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#set_template","text":"public set_template(mixed $t): mixed Parameters: Parameter Type Description $t mixed","title":"set_template"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_toplevel","text":"Check if this is a toplevel post private is_toplevel(): mixed","title":"is_toplevel"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#count_descendants","text":"Count the total of our descendants private count_descendants(): mixed","title":"count_descendants"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#count_unseen_descendants","text":"private count_unseen_descendants(): mixed","title":"count_unseen_descendants"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_comment_box_template","text":"Get the template for the comment box private get_comment_box_template(): mixed","title":"get_comment_box_template"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_comment_box","text":"Get the comment box private get_comment_box(): mixed Returns: _ The comment box string (empty if no comment box) _ false on failure","title":"get_comment_box"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_redirect_url","text":"private get_redirect_url(): mixed","title":"get_redirect_url"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#check_wall_to_wall","text":"Check if we are a wall to wall or announce item and set the relevant properties protected check_wall_to_wall(): mixed","title":"check_wall_to_wall"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_wall_to_wall","text":"private is_wall_to_wall(): mixed","title":"is_wall_to_wall"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_url","text":"private get_owner_url(): mixed","title":"get_owner_url"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_photo","text":"private get_owner_photo(): mixed","title":"get_owner_photo"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#get_owner_name","text":"private get_owner_name(): mixed","title":"get_owner_name"},{"location":"dev/classes/Zotlabs/Lib/ThreadItem/#is_visiting","text":"private is_visiting(): mixed Automatically generated on 2025-03-15","title":"is_visiting"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/","text":"ThreadListener Full name: \\Zotlabs\\Lib\\ThreadListener Methods isEnabled public static isEnabled(): mixed This method is static . store public static store(mixed $target_id, mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $portable_id mixed $ltype mixed fetch public static fetch(mixed $target_id, mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $portable_id mixed $ltype mixed fetch_by_target public static fetch_by_target(mixed $target_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $ltype mixed delete_by_target public static delete_by_target(mixed $target_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $ltype mixed delete_by_pid public static delete_by_pid(mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $portable_id mixed $ltype mixed Automatically generated on 2025-03-15","title":"ThreadListener"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#threadlistener","text":"Full name: \\Zotlabs\\Lib\\ThreadListener","title":"ThreadListener"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#isenabled","text":"public static isEnabled(): mixed This method is static .","title":"isEnabled"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#store","text":"public static store(mixed $target_id, mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $portable_id mixed $ltype mixed","title":"store"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#fetch","text":"public static fetch(mixed $target_id, mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $portable_id mixed $ltype mixed","title":"fetch"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#fetch_by_target","text":"public static fetch_by_target(mixed $target_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $ltype mixed","title":"fetch_by_target"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#delete_by_target","text":"public static delete_by_target(mixed $target_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $target_id mixed $ltype mixed","title":"delete_by_target"},{"location":"dev/classes/Zotlabs/Lib/ThreadListener/#delete_by_pid","text":"public static delete_by_pid(mixed $portable_id, mixed $ltype): mixed This method is static . Parameters: Parameter Type Description $portable_id mixed $ltype mixed Automatically generated on 2025-03-15","title":"delete_by_pid"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/","text":"ThreadStream A list of threads Full name: \\Zotlabs\\Lib\\ThreadStream Properties threads private $threads mode private $mode observer private $observer writable private $writable commentable private $commentable uploadable private $uploadable profile_owner private $profile_owner preview private $preview prepared_item private $prepared_item reload public $reload cipher private $cipher Methods __construct public __construct(mixed $mode, mixed $preview, mixed $uploadable, mixed $prepared_item = &#039;&#039;): mixed Parameters: Parameter Type Description $mode mixed $preview mixed $uploadable mixed $prepared_item mixed set_mode Set the mode we'll be displayed on private set_mode(mixed $mode): mixed Parameters: Parameter Type Description $mode mixed get_mode Get mode public get_mode(): mixed is_writable Check if page is writable public is_writable(): mixed is_commentable public is_commentable(): mixed is_uploadable public is_uploadable(): mixed is_preview Check if page is a preview public is_preview(): mixed get_profile_owner Get profile owner public get_profile_owner(): mixed set_profile_owner public set_profile_owner(mixed $uid): mixed Parameters: Parameter Type Description $uid mixed get_observer public get_observer(): mixed get_cipher public get_cipher(): mixed add_thread Add a thread to the conversation public add_thread(mixed $item): mixed Returns: _ The inserted item on success _ false on failure Parameters: Parameter Type Description $item mixed get_template_data Get data in a form usable by a conversation template public get_template_data(mixed $conv_responses, mixed $mid_uuid_map): mixed We should find a way to avoid using those arguments (at least most of them) Returns: _ The data requested on success _ false on failure Parameters: Parameter Type Description $conv_responses mixed $mid_uuid_map mixed get_thread Get a thread based on its item id private get_thread(mixed $id): mixed Returns: _ The found item on success _ false on failure Parameters: Parameter Type Description $id mixed Automatically generated on 2025-03-15","title":"ThreadStream"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#threadstream","text":"A list of threads Full name: \\Zotlabs\\Lib\\ThreadStream","title":"ThreadStream"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#threads","text":"private $threads","title":"threads"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#mode","text":"private $mode","title":"mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#observer","text":"private $observer","title":"observer"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#writable","text":"private $writable","title":"writable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#commentable","text":"private $commentable","title":"commentable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#uploadable","text":"private $uploadable","title":"uploadable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#profile_owner","text":"private $profile_owner","title":"profile_owner"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#preview","text":"private $preview","title":"preview"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#prepared_item","text":"private $prepared_item","title":"prepared_item"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#reload","text":"public $reload","title":"reload"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#cipher","text":"private $cipher","title":"cipher"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#__construct","text":"public __construct(mixed $mode, mixed $preview, mixed $uploadable, mixed $prepared_item = &#039;&#039;): mixed Parameters: Parameter Type Description $mode mixed $preview mixed $uploadable mixed $prepared_item mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#set_mode","text":"Set the mode we'll be displayed on private set_mode(mixed $mode): mixed Parameters: Parameter Type Description $mode mixed","title":"set_mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_mode","text":"Get mode public get_mode(): mixed","title":"get_mode"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_writable","text":"Check if page is writable public is_writable(): mixed","title":"is_writable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_commentable","text":"public is_commentable(): mixed","title":"is_commentable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_uploadable","text":"public is_uploadable(): mixed","title":"is_uploadable"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#is_preview","text":"Check if page is a preview public is_preview(): mixed","title":"is_preview"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_profile_owner","text":"Get profile owner public get_profile_owner(): mixed","title":"get_profile_owner"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#set_profile_owner","text":"public set_profile_owner(mixed $uid): mixed Parameters: Parameter Type Description $uid mixed","title":"set_profile_owner"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_observer","text":"public get_observer(): mixed","title":"get_observer"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_cipher","text":"public get_cipher(): mixed","title":"get_cipher"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#add_thread","text":"Add a thread to the conversation public add_thread(mixed $item): mixed Returns: _ The inserted item on success _ false on failure Parameters: Parameter Type Description $item mixed","title":"add_thread"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_template_data","text":"Get data in a form usable by a conversation template public get_template_data(mixed $conv_responses, mixed $mid_uuid_map): mixed We should find a way to avoid using those arguments (at least most of them) Returns: _ The data requested on success _ false on failure Parameters: Parameter Type Description $conv_responses mixed $mid_uuid_map mixed","title":"get_template_data"},{"location":"dev/classes/Zotlabs/Lib/ThreadStream/#get_thread","text":"Get a thread based on its item id private get_thread(mixed $id): mixed Returns: _ The found item on success _ false on failure Parameters: Parameter Type Description $id mixed Automatically generated on 2025-03-15","title":"get_thread"},{"location":"dev/classes/Zotlabs/Lib/Verify/","text":"Verify Full name: \\Zotlabs\\Lib\\Verify Methods create public static create(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed $meta mixed match public static match(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed $meta mixed get_meta public static get_meta(mixed $type, mixed $channel_id, mixed $token): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed purge public static purge(string $type, string $interval): mixed This method is static . Parameters: Parameter Type Description $type string Verify type $interval string SQL compatible time interval Automatically generated on 2025-03-15","title":"Verify"},{"location":"dev/classes/Zotlabs/Lib/Verify/#verify","text":"Full name: \\Zotlabs\\Lib\\Verify","title":"Verify"},{"location":"dev/classes/Zotlabs/Lib/Verify/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Verify/#create","text":"public static create(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed $meta mixed","title":"create"},{"location":"dev/classes/Zotlabs/Lib/Verify/#match","text":"public static match(mixed $type, mixed $channel_id, mixed $token, mixed $meta): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed $meta mixed","title":"match"},{"location":"dev/classes/Zotlabs/Lib/Verify/#get_meta","text":"public static get_meta(mixed $type, mixed $channel_id, mixed $token): mixed This method is static . Parameters: Parameter Type Description $type mixed $channel_id mixed $token mixed","title":"get_meta"},{"location":"dev/classes/Zotlabs/Lib/Verify/#purge","text":"public static purge(string $type, string $interval): mixed This method is static . Parameters: Parameter Type Description $type string Verify type $interval string SQL compatible time interval Automatically generated on 2025-03-15","title":"purge"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/","text":"Webfinger Full name: \\Zotlabs\\Lib\\Webfinger Properties server private static $server This property is static . resource private static $resource This property is static . Methods exec public static exec(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed parse_resource public static parse_resource(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed zot_url public static zot_url(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed Automatically generated on 2025-03-15","title":"Webfinger"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#webfinger","text":"Full name: \\Zotlabs\\Lib\\Webfinger","title":"Webfinger"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#server","text":"private static $server This property is static .","title":"server"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#resource","text":"private static $resource This property is static .","title":"resource"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#exec","text":"public static exec(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed","title":"exec"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#parse_resource","text":"public static parse_resource(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed","title":"parse_resource"},{"location":"dev/classes/Zotlabs/Lib/Webfinger/#zot_url","text":"public static zot_url(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed Automatically generated on 2025-03-15","title":"zot_url"},{"location":"dev/classes/Zotlabs/Lib/XConfig/","text":"XConfig Full name: \\Zotlabs\\Lib\\XConfig Methods Load public static Load(string $xchan): void|false This method is static . Parameters: Parameter Type Description $xchan string The observer's hash Return Value: Returns false if xchan is not set Get public static Get(string $xchan, string $family, string $key, bool $default = false): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to query $default bool (optional) default false Return Value: Stored $value or false if it does not exist Set public static Set(string $xchan, string $family, string $key, string $value): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to set $value string The value to store Return Value: Stored $value or false Delete public static Delete(string $xchan, string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to delete Automatically generated on 2025-03-15","title":"XConfig"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#xconfig","text":"Full name: \\Zotlabs\\Lib\\XConfig","title":"XConfig"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#load","text":"public static Load(string $xchan): void|false This method is static . Parameters: Parameter Type Description $xchan string The observer's hash Return Value: Returns false if xchan is not set","title":"Load"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#get","text":"public static Get(string $xchan, string $family, string $key, bool $default = false): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to query $default bool (optional) default false Return Value: Stored $value or false if it does not exist","title":"Get"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#set","text":"public static Set(string $xchan, string $family, string $key, string $value): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to set $value string The value to store Return Value: Stored $value or false","title":"Set"},{"location":"dev/classes/Zotlabs/Lib/XConfig/#delete","text":"public static Delete(string $xchan, string $family, string $key): mixed This method is static . Parameters: Parameter Type Description $xchan string The observer's hash $family string The category of the configuration value $key string The configuration key to delete Automatically generated on 2025-03-15","title":"Delete"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/","text":"ZotURL Full name: \\Zotlabs\\Lib\\ZotURL Methods fetch public static fetch(mixed $url, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $url mixed $channel mixed is_zoturl public static is_zoturl(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed lookup public static lookup(mixed $portable_id): mixed This method is static . Parameters: Parameter Type Description $portable_id mixed Automatically generated on 2025-03-15","title":"ZotURL"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#zoturl","text":"Full name: \\Zotlabs\\Lib\\ZotURL","title":"ZotURL"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#fetch","text":"public static fetch(mixed $url, mixed $channel): mixed This method is static . Parameters: Parameter Type Description $url mixed $channel mixed","title":"fetch"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#is_zoturl","text":"public static is_zoturl(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"is_zoturl"},{"location":"dev/classes/Zotlabs/Lib/ZotURL/#lookup","text":"public static lookup(mixed $portable_id): mixed This method is static . Parameters: Parameter Type Description $portable_id mixed Automatically generated on 2025-03-15","title":"lookup"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/","text":"Zotfinger Full name: \\Zotlabs\\Lib\\Zotfinger Methods exec public static exec(mixed $resource, mixed $channel = null, mixed $verify = true, mixed $recurse = true): mixed This method is static . Parameters: Parameter Type Description $resource mixed $channel mixed $verify mixed $recurse mixed Automatically generated on 2025-03-15","title":"Zotfinger"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/#zotfinger","text":"Full name: \\Zotlabs\\Lib\\Zotfinger","title":"Zotfinger"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Zotfinger/#exec","text":"public static exec(mixed $resource, mixed $channel = null, mixed $verify = true, mixed $recurse = true): mixed This method is static . Parameters: Parameter Type Description $resource mixed $channel mixed $verify mixed $recurse mixed Automatically generated on 2025-03-15","title":"exec"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/","text":"HelpHelperTrait Full name: \\Zotlabs\\Lib\\Traits\\HelpHelperTrait Properties file_name private string $file_name file_type private string $file_type lang Associative array containing the detected language. private array $lang Methods determine_help_language Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module. find_help_file Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string missing_translation public missing_translation(): bool missing_translation_message public missing_translation_message(): string Automatically generated on 2025-03-15","title":"HelpHelperTrait"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#helphelpertrait","text":"Full name: \\Zotlabs\\Lib\\Traits\\HelpHelperTrait","title":"HelpHelperTrait"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#file_name","text":"private string $file_name","title":"file_name"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#file_type","text":"private string $file_type","title":"file_type"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#lang","text":"Associative array containing the detected language. private array $lang","title":"lang"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#determine_help_language","text":"Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module.","title":"determine_help_language"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#find_help_file","text":"Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string","title":"find_help_file"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#missing_translation","text":"public missing_translation(): bool","title":"missing_translation"},{"location":"dev/classes/Zotlabs/Lib/Traits/HelpHelperTrait/#missing_translation_message","text":"public missing_translation_message(): string Automatically generated on 2025-03-15","title":"missing_translation_message"},{"location":"dev/classes/Zotlabs/Module/Achievements/","text":"Achievements Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Achievements Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Achievements"},{"location":"dev/classes/Zotlabs/Module/Achievements/#achievements","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Achievements Parent class: \\Zotlabs\\Web\\Controller","title":"Achievements"},{"location":"dev/classes/Zotlabs/Module/Achievements/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Achievements/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Achievements/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Achievements/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Achievements/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Achievements/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Acl/","text":"Acl Base controller class for Modules. Full name: \\Zotlabs\\Module\\Acl Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. navbar_complete public navbar_complete(mixed& $a): mixed Parameters: Parameter Type Description $a mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Acl"},{"location":"dev/classes/Zotlabs/Module/Acl/#acl","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Acl Parent class: \\Zotlabs\\Web\\Controller","title":"Acl"},{"location":"dev/classes/Zotlabs/Module/Acl/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Acl/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Acl/#navbar_complete","text":"public navbar_complete(mixed& $a): mixed Parameters: Parameter Type Description $a mixed","title":"navbar_complete"},{"location":"dev/classes/Zotlabs/Module/Acl/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Acl/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Acl/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Acl/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Activity/","text":"Activity Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Activity Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Activity"},{"location":"dev/classes/Zotlabs/Module/Activity/#activity","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Activity Parent class: \\Zotlabs\\Web\\Controller","title":"Activity"},{"location":"dev/classes/Zotlabs/Module/Activity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Activity/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Activity/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Activity/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Activity/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Activity/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/","text":"Admin Base controller class for Modules. Full name: \\Zotlabs\\Module\\Admin Parent class: \\Zotlabs\\Web\\Controller Properties sm private $sm Methods __construct public __construct(): mixed post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string admin_page_summary public admin_page_summary(): string Return Value: HTML from parsed admin_summary.tpl Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Admin"},{"location":"dev/classes/Zotlabs/Module/Admin/#admin","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Admin Parent class: \\Zotlabs\\Web\\Controller","title":"Admin"},{"location":"dev/classes/Zotlabs/Module/Admin/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Admin/#sm","text":"private $sm","title":"sm"},{"location":"dev/classes/Zotlabs/Module/Admin/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Module/Admin/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/#get","text":"Process GET requests or the body part of POST requests. public get(): string","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/#admin_page_summary","text":"public admin_page_summary(): string Return Value: HTML from parsed admin_summary.tpl","title":"admin_page_summary"},{"location":"dev/classes/Zotlabs/Module/Admin/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Admin/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Admin/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Affinity/","text":"Affinity Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Affinity Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Affinity"},{"location":"dev/classes/Zotlabs/Module/Affinity/#affinity","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Affinity Parent class: \\Zotlabs\\Web\\Controller","title":"Affinity"},{"location":"dev/classes/Zotlabs/Module/Affinity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Affinity/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Affinity/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Affinity/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Affinity/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Affinity/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Affinity/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Album/","text":"Album Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Album Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Album"},{"location":"dev/classes/Zotlabs/Module/Album/#album","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Album Parent class: \\Zotlabs\\Web\\Controller","title":"Album"},{"location":"dev/classes/Zotlabs/Module/Album/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Album/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Album/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Album/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Album/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Album/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Api/","text":"Api Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Api Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. oauth_get_client public oauth_get_client(mixed $request): mixed Parameters: Parameter Type Description $request mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Api"},{"location":"dev/classes/Zotlabs/Module/Api/#api","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Api Parent class: \\Zotlabs\\Web\\Controller","title":"Api"},{"location":"dev/classes/Zotlabs/Module/Api/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Api/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Api/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Api/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Api/#oauth_get_client","text":"public oauth_get_client(mixed $request): mixed Parameters: Parameter Type Description $request mixed","title":"oauth_get_client"},{"location":"dev/classes/Zotlabs/Module/Api/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Api/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Api/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Api/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Appman/","text":"Appman Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Appman Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Appman"},{"location":"dev/classes/Zotlabs/Module/Appman/#appman","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Appman Parent class: \\Zotlabs\\Web\\Controller","title":"Appman"},{"location":"dev/classes/Zotlabs/Module/Appman/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Appman/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Appman/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Appman/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Appman/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Appman/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Appman/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Apporder/","text":"Apporder Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apporder Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Apporder"},{"location":"dev/classes/Zotlabs/Module/Apporder/#apporder","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apporder Parent class: \\Zotlabs\\Web\\Controller","title":"Apporder"},{"location":"dev/classes/Zotlabs/Module/Apporder/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Apporder/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Apporder/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Apporder/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Apporder/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Apporder/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Apporder/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Apps/","text":"Apps Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apps Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Apps"},{"location":"dev/classes/Zotlabs/Module/Apps/#apps","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apps Parent class: \\Zotlabs\\Web\\Controller","title":"Apps"},{"location":"dev/classes/Zotlabs/Module/Apps/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Apps/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Apps/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Apps/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Apps/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Apps/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Apschema/","text":"Apschema Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apschema Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Apschema"},{"location":"dev/classes/Zotlabs/Module/Apschema/#apschema","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Apschema Parent class: \\Zotlabs\\Web\\Controller","title":"Apschema"},{"location":"dev/classes/Zotlabs/Module/Apschema/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Apschema/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Apschema/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Apschema/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Apschema/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Apschema/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Attach/","text":"Attach Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Attach Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. zip_archive_handler public zip_archive_handler(mixed $zip, mixed $attach_ids, mixed $attach_path, mixed $pass = 1): mixed Parameters: Parameter Type Description $zip mixed $attach_ids mixed $attach_path mixed $pass mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Attach"},{"location":"dev/classes/Zotlabs/Module/Attach/#attach","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Attach Parent class: \\Zotlabs\\Web\\Controller","title":"Attach"},{"location":"dev/classes/Zotlabs/Module/Attach/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Attach/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Attach/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Attach/#zip_archive_handler","text":"public zip_archive_handler(mixed $zip, mixed $attach_ids, mixed $attach_path, mixed $pass = 1): mixed Parameters: Parameter Type Description $zip mixed $attach_ids mixed $attach_path mixed $pass mixed","title":"zip_archive_handler"},{"location":"dev/classes/Zotlabs/Module/Attach/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Attach/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Attach/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Attach/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/","text":"Attach_edit Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Attach_edit Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Attach_edit"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#attach_edit","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Attach_edit Parent class: \\Zotlabs\\Web\\Controller","title":"Attach_edit"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Attach_edit/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Authorize/","text":"Authorize Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Authorize Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Authorize"},{"location":"dev/classes/Zotlabs/Module/Authorize/#authorize","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Authorize Parent class: \\Zotlabs\\Web\\Controller","title":"Authorize"},{"location":"dev/classes/Zotlabs/Module/Authorize/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Authorize/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Authorize/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Authorize/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Authorize/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Authorize/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Authorize/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Authtest/","text":"Authtest Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Authtest Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Authtest"},{"location":"dev/classes/Zotlabs/Module/Authtest/#authtest","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Authtest Parent class: \\Zotlabs\\Web\\Controller","title":"Authtest"},{"location":"dev/classes/Zotlabs/Module/Authtest/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Authtest/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Authtest/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Authtest/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Authtest/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Authtest/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Block/","text":"Block Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Block Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Block"},{"location":"dev/classes/Zotlabs/Module/Block/#block","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Block Parent class: \\Zotlabs\\Web\\Controller","title":"Block"},{"location":"dev/classes/Zotlabs/Module/Block/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Block/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Block/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Block/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Block/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Block/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Block/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Blocks/","text":"Blocks Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Blocks Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Blocks"},{"location":"dev/classes/Zotlabs/Module/Blocks/#blocks","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Blocks Parent class: \\Zotlabs\\Web\\Controller","title":"Blocks"},{"location":"dev/classes/Zotlabs/Module/Blocks/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Blocks/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Blocks/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Blocks/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Blocks/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Blocks/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Blocks/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/","text":"Bookmarks Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Bookmarks Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Bookmarks"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#bookmarks","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Bookmarks Parent class: \\Zotlabs\\Web\\Controller","title":"Bookmarks"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Bookmarks/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/","text":"Branchtopic Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Branchtopic Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Branchtopic"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#branchtopic","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Branchtopic Parent class: \\Zotlabs\\Web\\Controller","title":"Branchtopic"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Branchtopic/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cal/","text":"Cal Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cal Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Cal"},{"location":"dev/classes/Zotlabs/Module/Cal/#cal","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cal Parent class: \\Zotlabs\\Web\\Controller","title":"Cal"},{"location":"dev/classes/Zotlabs/Module/Cal/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Cal/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cal/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cal/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Cal/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cal/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cal/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cdav/","text":"Cdav Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cdav Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. activate public activate(mixed $pdo, mixed $channel): mixed Parameters: Parameter Type Description $pdo mixed $channel mixed get_cdav_data public get_cdav_data(mixed $id, mixed $table): mixed Parameters: Parameter Type Description $id mixed $table mixed request_to_array public request_to_array(mixed $req): mixed Parameters: Parameter Type Description $req mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Cdav"},{"location":"dev/classes/Zotlabs/Module/Cdav/#cdav","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cdav Parent class: \\Zotlabs\\Web\\Controller","title":"Cdav"},{"location":"dev/classes/Zotlabs/Module/Cdav/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Cdav/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cdav/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cdav/#activate","text":"public activate(mixed $pdo, mixed $channel): mixed Parameters: Parameter Type Description $pdo mixed $channel mixed","title":"activate"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get_cdav_data","text":"public get_cdav_data(mixed $id, mixed $table): mixed Parameters: Parameter Type Description $id mixed $table mixed","title":"get_cdav_data"},{"location":"dev/classes/Zotlabs/Module/Cdav/#request_to_array","text":"public request_to_array(mixed $req): mixed Parameters: Parameter Type Description $req mixed","title":"request_to_array"},{"location":"dev/classes/Zotlabs/Module/Cdav/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Cdav/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cdav/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cdav/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/","text":"Changeaddr Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Changeaddr Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Changeaddr"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#changeaddr","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Changeaddr Parent class: \\Zotlabs\\Web\\Controller","title":"Changeaddr"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Changeaddr/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Channel/","text":"Channel Base controller class for Modules. Full name: \\Zotlabs\\Module\\Channel Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Channel"},{"location":"dev/classes/Zotlabs/Module/Channel/#channel","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Channel Parent class: \\Zotlabs\\Web\\Controller","title":"Channel"},{"location":"dev/classes/Zotlabs/Module/Channel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Channel/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Channel/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Channel/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Channel/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Channel/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Channel/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/","text":"Channel_calendar Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Channel_calendar Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Channel_calendar"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#channel_calendar","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Channel_calendar Parent class: \\Zotlabs\\Web\\Controller","title":"Channel_calendar"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Channel_calendar/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chanview/","text":"Chanview Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chanview Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Chanview"},{"location":"dev/classes/Zotlabs/Module/Chanview/#chanview","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chanview Parent class: \\Zotlabs\\Web\\Controller","title":"Chanview"},{"location":"dev/classes/Zotlabs/Module/Chanview/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Chanview/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chanview/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Chanview/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Chanview/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Chanview/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chat/","text":"Chat Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chat Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Chat"},{"location":"dev/classes/Zotlabs/Module/Chat/#chat","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chat Parent class: \\Zotlabs\\Web\\Controller","title":"Chat"},{"location":"dev/classes/Zotlabs/Module/Chat/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Chat/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Chat/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Chat/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chat/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Chat/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Chat/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Chat/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/","text":"Chatsvc Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chatsvc Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Chatsvc"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#chatsvc","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Chatsvc Parent class: \\Zotlabs\\Web\\Controller","title":"Chatsvc"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Chatsvc/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cloud/","text":"Cloud Base controller class for Modules. Full name: \\Zotlabs\\Module\\Cloud Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed DAVException public DAVException(mixed $err): mixed Parameters: Parameter Type Description $err mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Cloud"},{"location":"dev/classes/Zotlabs/Module/Cloud/#cloud","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Cloud Parent class: \\Zotlabs\\Web\\Controller","title":"Cloud"},{"location":"dev/classes/Zotlabs/Module/Cloud/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Cloud/#init","text":"Initialize request processing. public init(): mixed","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cloud/#davexception","text":"public DAVException(mixed $err): mixed Parameters: Parameter Type Description $err mixed","title":"DAVException"},{"location":"dev/classes/Zotlabs/Module/Cloud/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Cloud/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cloud/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cloud/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/","text":"Cloud_tiles Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cloud_tiles Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Cloud_tiles"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#cloud_tiles","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cloud_tiles Parent class: \\Zotlabs\\Web\\Controller","title":"Cloud_tiles"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cloud_tiles/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Common/","text":"Common Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Common Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Common"},{"location":"dev/classes/Zotlabs/Module/Common/#common","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Common Parent class: \\Zotlabs\\Web\\Controller","title":"Common"},{"location":"dev/classes/Zotlabs/Module/Common/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Common/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Common/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Common/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Common/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Common/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Common/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connect/","text":"Connect Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connect Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Connect"},{"location":"dev/classes/Zotlabs/Module/Connect/#connect","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connect Parent class: \\Zotlabs\\Web\\Controller","title":"Connect"},{"location":"dev/classes/Zotlabs/Module/Connect/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Connect/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connect/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Connect/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connect/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Connect/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connect/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Connect/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connections/","text":"Connections Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connections Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Connections"},{"location":"dev/classes/Zotlabs/Module/Connections/#connections","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connections Parent class: \\Zotlabs\\Web\\Controller","title":"Connections"},{"location":"dev/classes/Zotlabs/Module/Connections/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Connections/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connections/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connections/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Connections/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connections/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Connections/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connedit/","text":"Connedit Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connedit Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. connedit_clone public connedit_clone(): mixed get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Connedit"},{"location":"dev/classes/Zotlabs/Module/Connedit/#connedit","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Connedit Parent class: \\Zotlabs\\Web\\Controller","title":"Connedit"},{"location":"dev/classes/Zotlabs/Module/Connedit/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Connedit/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connedit/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Connedit/#connedit_clone","text":"public connedit_clone(): mixed","title":"connedit_clone"},{"location":"dev/classes/Zotlabs/Module/Connedit/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Connedit/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Connedit/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Connedit/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Connedit/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Contactedit/","text":"Contactedit Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Contactedit Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. contactedit_clone public contactedit_clone(): mixed do_action public do_action(mixed $contact, mixed $cmd): mixed Parameters: Parameter Type Description $contact mixed $cmd mixed get_tools public get_tools(mixed $contact): mixed Parameters: Parameter Type Description $contact mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Contactedit"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#contactedit","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Contactedit Parent class: \\Zotlabs\\Web\\Controller","title":"Contactedit"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#contactedit_clone","text":"public contactedit_clone(): mixed","title":"contactedit_clone"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#do_action","text":"public do_action(mixed $contact, mixed $cmd): mixed Parameters: Parameter Type Description $contact mixed $cmd mixed","title":"do_action"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get_tools","text":"public get_tools(mixed $contact): mixed Parameters: Parameter Type Description $contact mixed","title":"get_tools"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Contactedit/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/","text":"Contactgroup Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Contactgroup Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Contactgroup"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#contactgroup","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Contactgroup Parent class: \\Zotlabs\\Web\\Controller","title":"Contactgroup"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Contactgroup/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Conversation/","text":"Conversation Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Conversation Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Conversation"},{"location":"dev/classes/Zotlabs/Module/Conversation/#conversation","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Conversation Parent class: \\Zotlabs\\Web\\Controller","title":"Conversation"},{"location":"dev/classes/Zotlabs/Module/Conversation/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Conversation/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Conversation/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Conversation/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Conversation/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Conversation/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/","text":"Cover_photo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cover_photo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): void get Process GET requests or the body part of POST requests. public get(): string cover_photo_crop_ui_head public cover_photo_crop_ui_head(mixed& $a, mixed $ph, mixed $hash, mixed $smallest): mixed Parameters: Parameter Type Description $a mixed $ph mixed $hash mixed $smallest mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Cover_photo"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#cover_photo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Cover_photo Parent class: \\Zotlabs\\Web\\Controller","title":"Cover_photo"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#post","text":"Process POST requests. public post(): void","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#get","text":"Process GET requests or the body part of POST requests. public get(): string","title":"get"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#cover_photo_crop_ui_head","text":"public cover_photo_crop_ui_head(mixed& $a, mixed $ph, mixed $hash, mixed $smallest): mixed Parameters: Parameter Type Description $a mixed $ph mixed $hash mixed $smallest mixed","title":"cover_photo_crop_ui_head"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Cover_photo/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dav/","text":"Dav Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dav Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Dav"},{"location":"dev/classes/Zotlabs/Module/Dav/#dav","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dav Parent class: \\Zotlabs\\Web\\Controller","title":"Dav"},{"location":"dev/classes/Zotlabs/Module/Dav/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Dav/#init","text":"Initialize request processing. public init(): mixed","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dav/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Dav/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dav/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Dav/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Defperms/","text":"Defperms Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Defperms Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. defperms_clone public defperms_clone(mixed& $a): mixed Parameters: Parameter Type Description $a mixed get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Defperms"},{"location":"dev/classes/Zotlabs/Module/Defperms/#defperms","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Defperms Parent class: \\Zotlabs\\Web\\Controller","title":"Defperms"},{"location":"dev/classes/Zotlabs/Module/Defperms/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Defperms/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Defperms/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Defperms/#defperms_clone","text":"public defperms_clone(mixed& $a): mixed Parameters: Parameter Type Description $a mixed","title":"defperms_clone"},{"location":"dev/classes/Zotlabs/Module/Defperms/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Defperms/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Defperms/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Defperms/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Defperms/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dircensor/","text":"Dircensor Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dircensor Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Dircensor"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#dircensor","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dircensor Parent class: \\Zotlabs\\Web\\Controller","title":"Dircensor"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Dircensor/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Directory/","text":"Directory Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Directory Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. reorder_results public static reorder_results(mixed $results, mixed $suggests): mixed This method is static . Parameters: Parameter Type Description $results mixed $suggests mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Directory"},{"location":"dev/classes/Zotlabs/Module/Directory/#directory","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Directory Parent class: \\Zotlabs\\Web\\Controller","title":"Directory"},{"location":"dev/classes/Zotlabs/Module/Directory/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Directory/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Directory/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Directory/#reorder_results","text":"public static reorder_results(mixed $results, mixed $suggests): mixed This method is static . Parameters: Parameter Type Description $results mixed $suggests mixed","title":"reorder_results"},{"location":"dev/classes/Zotlabs/Module/Directory/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Directory/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Directory/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Directory/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/","text":"Dirsearch Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dirsearch Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. dir_query_build public dir_query_build(mixed $joiner, mixed $field, mixed $s): mixed Parameters: Parameter Type Description $joiner mixed $field mixed $s mixed dir_flag_build public dir_flag_build(mixed $joiner, mixed $field, mixed $bit, mixed $s): mixed Parameters: Parameter Type Description $joiner mixed $field mixed $bit mixed $s mixed dir_parse_query public dir_parse_query(mixed $s): mixed Parameters: Parameter Type Description $s mixed list_public_sites public list_public_sites(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Dirsearch"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dirsearch","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dirsearch Parent class: \\Zotlabs\\Web\\Controller","title":"Dirsearch"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_query_build","text":"public dir_query_build(mixed $joiner, mixed $field, mixed $s): mixed Parameters: Parameter Type Description $joiner mixed $field mixed $s mixed","title":"dir_query_build"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_flag_build","text":"public dir_flag_build(mixed $joiner, mixed $field, mixed $bit, mixed $s): mixed Parameters: Parameter Type Description $joiner mixed $field mixed $bit mixed $s mixed","title":"dir_flag_build"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#dir_parse_query","text":"public dir_parse_query(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"dir_parse_query"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#list_public_sites","text":"public list_public_sites(): mixed","title":"list_public_sites"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Dirsearch/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Display/","text":"Display Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Display Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Display"},{"location":"dev/classes/Zotlabs/Module/Display/#display","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Display Parent class: \\Zotlabs\\Web\\Controller","title":"Display"},{"location":"dev/classes/Zotlabs/Module/Display/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Display/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Display/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Display/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Display/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Display/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Display/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dreport/","text":"Dreport Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dreport Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. dreport_gravity_sort private static dreport_gravity_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Dreport"},{"location":"dev/classes/Zotlabs/Module/Dreport/#dreport","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Dreport Parent class: \\Zotlabs\\Web\\Controller","title":"Dreport"},{"location":"dev/classes/Zotlabs/Module/Dreport/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Dreport/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Dreport/#dreport_gravity_sort","text":"private static dreport_gravity_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed","title":"dreport_gravity_sort"},{"location":"dev/classes/Zotlabs/Module/Dreport/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Dreport/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Dreport/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Dreport/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editblock/","text":"Editblock Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editblock Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Editblock"},{"location":"dev/classes/Zotlabs/Module/Editblock/#editblock","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editblock Parent class: \\Zotlabs\\Web\\Controller","title":"Editblock"},{"location":"dev/classes/Zotlabs/Module/Editblock/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Editblock/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editblock/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editblock/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Editblock/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editblock/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Editblock/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editlayout/","text":"Editlayout Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editlayout Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Editlayout"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#editlayout","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editlayout Parent class: \\Zotlabs\\Web\\Controller","title":"Editlayout"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Editlayout/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editpost/","text":"Editpost Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editpost Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Editpost"},{"location":"dev/classes/Zotlabs/Module/Editpost/#editpost","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editpost Parent class: \\Zotlabs\\Web\\Controller","title":"Editpost"},{"location":"dev/classes/Zotlabs/Module/Editpost/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Editpost/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editpost/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Editpost/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editpost/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Editpost/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/","text":"Editwebpage Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editwebpage Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Editwebpage"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#editwebpage","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Editwebpage Parent class: \\Zotlabs\\Web\\Controller","title":"Editwebpage"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Editwebpage/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Email_resend/","text":"Email_resend Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Email_resend Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Email_resend"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#email_resend","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Email_resend Parent class: \\Zotlabs\\Web\\Controller","title":"Email_resend"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Email_resend/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Email_validation/","text":"Email_validation Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Email_validation Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Email_validation"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#email_validation","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Email_validation Parent class: \\Zotlabs\\Web\\Controller","title":"Email_validation"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Email_validation/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Embed/","text":"Embed Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Embed Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Embed"},{"location":"dev/classes/Zotlabs/Module/Embed/#embed","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Embed Parent class: \\Zotlabs\\Web\\Controller","title":"Embed"},{"location":"dev/classes/Zotlabs/Module/Embed/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Embed/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Embed/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Embed/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Embed/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Embed/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/","text":"Embedphotos Base controller class for Modules. Full name: \\Zotlabs\\Module\\Embedphotos Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. post Process POST requests. public post(): string Return Value: A JSON string. photolink protected static photolink(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed embedphotos_widget_album protected embedphotos_widget_album(array $args): string Parameters: Parameter Type Description $args array associative array with \\e array \\b channel \\e string \\b album Return Value: with HTML code from 'photo_album.tpl' See Also: \\Zotlabs\\Widget\\Album::widget() embedphotos_album_list protected embedphotos_album_list(): null|array See Also: \\Zotlabs\\Module\\photos_albums_list() - Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Embedphotos"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#embedphotos","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Embedphotos Parent class: \\Zotlabs\\Web\\Controller","title":"Embedphotos"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#post","text":"Process POST requests. public post(): string Return Value: A JSON string.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#photolink","text":"protected static photolink(mixed $resource): mixed This method is static . Parameters: Parameter Type Description $resource mixed","title":"photolink"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#embedphotos_widget_album","text":"protected embedphotos_widget_album(array $args): string Parameters: Parameter Type Description $args array associative array with \\e array \\b channel \\e string \\b album Return Value: with HTML code from 'photo_album.tpl' See Also: \\Zotlabs\\Widget\\Album::widget()","title":"embedphotos_widget_album"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#embedphotos_album_list","text":"protected embedphotos_album_list(): null|array See Also: \\Zotlabs\\Module\\photos_albums_list() -","title":"embedphotos_album_list"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Embedphotos/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Emoji/","text":"Emoji Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Emoji Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Emoji"},{"location":"dev/classes/Zotlabs/Module/Emoji/#emoji","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Emoji Parent class: \\Zotlabs\\Web\\Controller","title":"Emoji"},{"location":"dev/classes/Zotlabs/Module/Emoji/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Emoji/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Emoji/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Emoji/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Emoji/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Emoji/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Event/","text":"Event Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Event Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Event"},{"location":"dev/classes/Zotlabs/Module/Event/#event","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Event Parent class: \\Zotlabs\\Web\\Controller","title":"Event"},{"location":"dev/classes/Zotlabs/Module/Event/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Event/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Event/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Event/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Event/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Event/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/","text":"Fbrowser Base controller class for Modules. Full name: \\Zotlabs\\Module\\Fbrowser Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. folder1 private static folder1(mixed $el): mixed This method is static . Parameters: Parameter Type Description $el mixed files1 private static files1(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed files2 private static files2(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Fbrowser"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#fbrowser","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Fbrowser Parent class: \\Zotlabs\\Web\\Controller","title":"Fbrowser"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#folder1","text":"private static folder1(mixed $el): mixed This method is static . Parameters: Parameter Type Description $el mixed","title":"folder1"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#files1","text":"private static files1(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"files1"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#files2","text":"private static files2(mixed $rr): mixed This method is static . Parameters: Parameter Type Description $rr mixed","title":"files2"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Fbrowser/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Feed/","text":"Feed Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Feed Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Feed"},{"location":"dev/classes/Zotlabs/Module/Feed/#feed","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Feed Parent class: \\Zotlabs\\Web\\Controller","title":"Feed"},{"location":"dev/classes/Zotlabs/Module/Feed/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Feed/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Feed/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Feed/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Feed/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Feed/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/","text":"Fhubloc_id_url Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Fhubloc_id_url Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Fhubloc_id_url"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#fhubloc_id_url","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Fhubloc_id_url Parent class: \\Zotlabs\\Web\\Controller","title":"Fhubloc_id_url"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Fhubloc_id_url/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/","text":"Fhublocs Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Fhublocs Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Fhublocs"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#fhublocs","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Fhublocs Parent class: \\Zotlabs\\Web\\Controller","title":"Fhublocs"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Fhublocs/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/File_upload/","text":"File_upload Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\File_upload Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"File_upload"},{"location":"dev/classes/Zotlabs/Module/File_upload/#file_upload","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\File_upload Parent class: \\Zotlabs\\Web\\Controller","title":"File_upload"},{"location":"dev/classes/Zotlabs/Module/File_upload/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/File_upload/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/File_upload/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/File_upload/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/File_upload/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/File_upload/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filer/","text":"Filer Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filer Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Filer"},{"location":"dev/classes/Zotlabs/Module/Filer/#filer","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filer Parent class: \\Zotlabs\\Web\\Controller","title":"Filer"},{"location":"dev/classes/Zotlabs/Module/Filer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Filer/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filer/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Filer/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Filer/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Filer/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filerm/","text":"Filerm Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filerm Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Filerm"},{"location":"dev/classes/Zotlabs/Module/Filerm/#filerm","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filerm Parent class: \\Zotlabs\\Web\\Controller","title":"Filerm"},{"location":"dev/classes/Zotlabs/Module/Filerm/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Filerm/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filerm/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Filerm/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Filerm/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Filerm/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filestorage/","text":"Filestorage Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filestorage Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Filestorage"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#filestorage","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Filestorage Parent class: \\Zotlabs\\Web\\Controller","title":"Filestorage"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Filestorage/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Follow/","text":"Follow Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Follow Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Follow"},{"location":"dev/classes/Zotlabs/Module/Follow/#follow","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Follow Parent class: \\Zotlabs\\Web\\Controller","title":"Follow"},{"location":"dev/classes/Zotlabs/Module/Follow/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Follow/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Follow/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Follow/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Follow/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Follow/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Follow/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Getfile/","text":"Getfile Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Getfile Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Getfile"},{"location":"dev/classes/Zotlabs/Module/Getfile/#getfile","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Getfile Parent class: \\Zotlabs\\Web\\Controller","title":"Getfile"},{"location":"dev/classes/Zotlabs/Module/Getfile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Getfile/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Getfile/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Getfile/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Getfile/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Getfile/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Go/","text":"Go Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Go Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Go"},{"location":"dev/classes/Zotlabs/Module/Go/#go","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Go Parent class: \\Zotlabs\\Web\\Controller","title":"Go"},{"location":"dev/classes/Zotlabs/Module/Go/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Go/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Go/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Go/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Go/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Go/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Go/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Group/","text":"Group Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Group Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Group"},{"location":"dev/classes/Zotlabs/Module/Group/#group","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Group Parent class: \\Zotlabs\\Web\\Controller","title":"Group"},{"location":"dev/classes/Zotlabs/Module/Group/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Group/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Group/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Group/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Group/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Group/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Group/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Group/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hashtags/","text":"Hashtags Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hashtags Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Hashtags"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#hashtags","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hashtags Parent class: \\Zotlabs\\Web\\Controller","title":"Hashtags"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Hashtags/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hcard/","text":"Hcard Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hcard Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Hcard"},{"location":"dev/classes/Zotlabs/Module/Hcard/#hcard","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hcard Parent class: \\Zotlabs\\Web\\Controller","title":"Hcard"},{"location":"dev/classes/Zotlabs/Module/Hcard/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Hcard/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hcard/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hcard/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Hcard/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hcard/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Hcard/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Help/","text":"Help You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resources or use our include mechanism to include it on your local page. Full name: \\Zotlabs\\Module\\Help Parent class: \\Zotlabs\\Web\\Controller Properties heading_slug private string $heading_slug Methods init Pre-check before processing request. public init(): mixed Determine language requested, and ensure that a topic was requested. If no topic was requested, redirect to the about page, and abort processing. get Process get request for the help module. public get(): string Loads the correct help file from the doc/ directory, and passes it to the help template in view/tpl/help.tpl . If the requested help topic does not exist for the currently selected language, a 404 status is returned instead. This function currently also handles search and serving static assets that may be used by the help files. Return Value: The rendered help page or a 404 page if help topic was not found. render_content public render_content(): string render_help_file public render_help_file(string $file_name, string $file_type): string Parameters: Parameter Type Description $file_name string $file_type string get_page_title public get_page_title(): string get_toc_heading public get_toc_heading(): string get_heading private get_heading(): string set_page_title Set the page title to an unslugified version of the file name. private set_page_title(): void Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. determine_help_language Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module. find_help_file Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string missing_translation public missing_translation(): bool missing_translation_message public missing_translation_message(): string Automatically generated on 2025-03-15","title":"Help"},{"location":"dev/classes/Zotlabs/Module/Help/#help","text":"You can create local site resources in doc/Site.md and either link to doc/Home.md for the standard resources or use our include mechanism to include it on your local page. Full name: \\Zotlabs\\Module\\Help Parent class: \\Zotlabs\\Web\\Controller","title":"Help"},{"location":"dev/classes/Zotlabs/Module/Help/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Help/#heading_slug","text":"private string $heading_slug","title":"heading_slug"},{"location":"dev/classes/Zotlabs/Module/Help/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Help/#init","text":"Pre-check before processing request. public init(): mixed Determine language requested, and ensure that a topic was requested. If no topic was requested, redirect to the about page, and abort processing.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Help/#get","text":"Process get request for the help module. public get(): string Loads the correct help file from the doc/ directory, and passes it to the help template in view/tpl/help.tpl . If the requested help topic does not exist for the currently selected language, a 404 status is returned instead. This function currently also handles search and serving static assets that may be used by the help files. Return Value: The rendered help page or a 404 page if help topic was not found.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Help/#render_content","text":"public render_content(): string","title":"render_content"},{"location":"dev/classes/Zotlabs/Module/Help/#render_help_file","text":"public render_help_file(string $file_name, string $file_type): string Parameters: Parameter Type Description $file_name string $file_type string","title":"render_help_file"},{"location":"dev/classes/Zotlabs/Module/Help/#get_page_title","text":"public get_page_title(): string","title":"get_page_title"},{"location":"dev/classes/Zotlabs/Module/Help/#get_toc_heading","text":"public get_toc_heading(): string","title":"get_toc_heading"},{"location":"dev/classes/Zotlabs/Module/Help/#get_heading","text":"private get_heading(): string","title":"get_heading"},{"location":"dev/classes/Zotlabs/Module/Help/#set_page_title","text":"Set the page title to an unslugified version of the file name. private set_page_title(): void","title":"set_page_title"},{"location":"dev/classes/Zotlabs/Module/Help/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Help/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Help/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Help/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Help/#determine_help_language","text":"Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module.","title":"determine_help_language"},{"location":"dev/classes/Zotlabs/Module/Help/#find_help_file","text":"Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string","title":"find_help_file"},{"location":"dev/classes/Zotlabs/Module/Help/#missing_translation","text":"public missing_translation(): bool","title":"missing_translation"},{"location":"dev/classes/Zotlabs/Module/Help/#missing_translation_message","text":"public missing_translation_message(): string Automatically generated on 2025-03-15","title":"missing_translation_message"},{"location":"dev/classes/Zotlabs/Module/Home/","text":"Home Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Home Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Home"},{"location":"dev/classes/Zotlabs/Module/Home/#home","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Home Parent class: \\Zotlabs\\Web\\Controller","title":"Home"},{"location":"dev/classes/Zotlabs/Module/Home/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Home/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Home/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Home/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Home/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Home/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Home/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/","text":"Hostxrd Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hostxrd Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Hostxrd"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#hostxrd","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hostxrd Parent class: \\Zotlabs\\Web\\Controller","title":"Hostxrd"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Hostxrd/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hq/","text":"Hq Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hq Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Hq"},{"location":"dev/classes/Zotlabs/Module/Hq/#hq","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Hq Parent class: \\Zotlabs\\Web\\Controller","title":"Hq"},{"location":"dev/classes/Zotlabs/Module/Hq/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Hq/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hq/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Hq/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Hq/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Hq/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Hq/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Hq/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Id/","text":"Id Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Id Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Id"},{"location":"dev/classes/Zotlabs/Module/Id/#id","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Id Parent class: \\Zotlabs\\Web\\Controller","title":"Id"},{"location":"dev/classes/Zotlabs/Module/Id/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Id/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Id/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Id/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Id/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Id/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Impel/","text":"Impel Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Impel Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Impel"},{"location":"dev/classes/Zotlabs/Module/Impel/#impel","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Impel Parent class: \\Zotlabs\\Web\\Controller","title":"Impel"},{"location":"dev/classes/Zotlabs/Module/Impel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Impel/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Impel/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Impel/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Impel/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Impel/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import/","text":"Import Base controller class for Modules. Full name: \\Zotlabs\\Module\\Import Parent class: \\Zotlabs\\Web\\Controller Methods import_account public import_account(int $account_id): mixed Parameters: Parameter Type Description $account_id int post Process POST requests. public post(): mixed get Process GET requests or the body part of POST requests. public get(): string Return Value: with parsed HTML. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Import"},{"location":"dev/classes/Zotlabs/Module/Import/#import","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Import Parent class: \\Zotlabs\\Web\\Controller","title":"Import"},{"location":"dev/classes/Zotlabs/Module/Import/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Import/#import_account","text":"public import_account(int $account_id): mixed Parameters: Parameter Type Description $account_id int","title":"import_account"},{"location":"dev/classes/Zotlabs/Module/Import/#post","text":"Process POST requests. public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import/#get","text":"Process GET requests or the body part of POST requests. public get(): string Return Value: with parsed HTML.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Import/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Import/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import_items/","text":"Import_items Base controller class for Modules. Full name: \\Zotlabs\\Module\\Import_items Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string Return Value: with parsed HTML. import public static import(mixed $channel, mixed $data): mixed This method is static . Parameters: Parameter Type Description $channel mixed $data mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Import_items"},{"location":"dev/classes/Zotlabs/Module/Import_items/#import_items","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Import_items Parent class: \\Zotlabs\\Web\\Controller","title":"Import_items"},{"location":"dev/classes/Zotlabs/Module/Import_items/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Import_items/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import_items/#get","text":"Process GET requests or the body part of POST requests. public get(): string Return Value: with parsed HTML.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import_items/#import","text":"public static import(mixed $channel, mixed $data): mixed This method is static . Parameters: Parameter Type Description $channel mixed $data mixed","title":"import"},{"location":"dev/classes/Zotlabs/Module/Import_items/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Import_items/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Import_items/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import_items/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import_progress/","text":"Import_progress Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Import_progress Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Import_progress"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#import_progress","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Import_progress Parent class: \\Zotlabs\\Web\\Controller","title":"Import_progress"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Import_progress/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Invite/","text":"Invite module: invitexv2.php send email invitations to join social network Full name: \\Zotlabs\\Module\\Invite Parent class: \\Zotlabs\\Web\\Controller Constants Constant Visibility Type Value MYP public 'ZAI' VERSION public '2.0.0' Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. calcdue public calcdue(mixed $duri = false): mixed Parameters: Parameter Type Description $duri mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Invite"},{"location":"dev/classes/Zotlabs/Module/Invite/#invite","text":"module: invitexv2.php send email invitations to join social network Full name: \\Zotlabs\\Module\\Invite Parent class: \\Zotlabs\\Web\\Controller","title":"Invite"},{"location":"dev/classes/Zotlabs/Module/Invite/#constants","text":"Constant Visibility Type Value MYP public 'ZAI' VERSION public '2.0.0'","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Invite/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Invite/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Invite/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Invite/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Invite/#calcdue","text":"public calcdue(mixed $duri = false): mixed Parameters: Parameter Type Description $duri mixed","title":"calcdue"},{"location":"dev/classes/Zotlabs/Module/Invite/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Invite/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Invite/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Invite/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Item/","text":"Item This is the POST destination for most all locally posted text stuff. This function handles status, wall-to-wall status, local comments, and remote coments that are posted on this site (as opposed to being delivered in a feed). Also processed here are posts and comments coming through the statusnet/twitter API. All of these become an \"item\" which is our basic unit of information. Posts that originate externally or do not fall into the above posting categories go through item_store() instead of this function. Full name: \\Zotlabs\\Module\\Item Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. item_check_service_class public item_check_service_class(mixed $channel_id, mixed $iswebpage): mixed Parameters: Parameter Type Description $channel_id mixed $iswebpage mixed extract_bb_poll_data public extract_bb_poll_data(mixed& $body, mixed $item): mixed Parameters: Parameter Type Description $body mixed $item mixed extract_poll_data public extract_poll_data(mixed $poll, mixed $item): mixed Parameters: Parameter Type Description $poll mixed $item mixed add_listeners public add_listeners(mixed $item): mixed Parameters: Parameter Type Description $item mixed init_zot_request private init_zot_request(): mixed init_as_request private init_as_request(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Item"},{"location":"dev/classes/Zotlabs/Module/Item/#item","text":"This is the POST destination for most all locally posted text stuff. This function handles status, wall-to-wall status, local comments, and remote coments that are posted on this site (as opposed to being delivered in a feed). Also processed here are posts and comments coming through the statusnet/twitter API. All of these become an \"item\" which is our basic unit of information. Posts that originate externally or do not fall into the above posting categories go through item_store() instead of this function. Full name: \\Zotlabs\\Module\\Item Parent class: \\Zotlabs\\Web\\Controller","title":"Item"},{"location":"dev/classes/Zotlabs/Module/Item/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Item/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Item/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Item/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Item/#item_check_service_class","text":"public item_check_service_class(mixed $channel_id, mixed $iswebpage): mixed Parameters: Parameter Type Description $channel_id mixed $iswebpage mixed","title":"item_check_service_class"},{"location":"dev/classes/Zotlabs/Module/Item/#extract_bb_poll_data","text":"public extract_bb_poll_data(mixed& $body, mixed $item): mixed Parameters: Parameter Type Description $body mixed $item mixed","title":"extract_bb_poll_data"},{"location":"dev/classes/Zotlabs/Module/Item/#extract_poll_data","text":"public extract_poll_data(mixed $poll, mixed $item): mixed Parameters: Parameter Type Description $poll mixed $item mixed","title":"extract_poll_data"},{"location":"dev/classes/Zotlabs/Module/Item/#add_listeners","text":"public add_listeners(mixed $item): mixed Parameters: Parameter Type Description $item mixed","title":"add_listeners"},{"location":"dev/classes/Zotlabs/Module/Item/#init_zot_request","text":"private init_zot_request(): mixed","title":"init_zot_request"},{"location":"dev/classes/Zotlabs/Module/Item/#init_as_request","text":"private init_as_request(): mixed","title":"init_as_request"},{"location":"dev/classes/Zotlabs/Module/Item/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Item/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Item/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Item/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lang/","text":"Lang Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lang Parent class: \\Zotlabs\\Web\\Controller Constants Constant Visibility Type Value MYP public 'ZIN' VERSION public '2.0.0' Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Lang"},{"location":"dev/classes/Zotlabs/Module/Lang/#lang","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lang Parent class: \\Zotlabs\\Web\\Controller","title":"Lang"},{"location":"dev/classes/Zotlabs/Module/Lang/#constants","text":"Constant Visibility Type Value MYP public 'ZIN' VERSION public '2.0.0'","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Lang/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Lang/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Lang/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lang/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Lang/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Lang/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Lang/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Layouts/","text":"Layouts Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Layouts Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Layouts"},{"location":"dev/classes/Zotlabs/Module/Layouts/#layouts","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Layouts Parent class: \\Zotlabs\\Web\\Controller","title":"Layouts"},{"location":"dev/classes/Zotlabs/Module/Layouts/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Layouts/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Layouts/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Layouts/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Layouts/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Layouts/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Layouts/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Like/","text":"Like Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Like Parent class: \\Zotlabs\\Web\\Controller Methods reaction_to_activity private reaction_to_activity(mixed $reaction): mixed Parameters: Parameter Type Description $reaction mixed like_response private like_response(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Like"},{"location":"dev/classes/Zotlabs/Module/Like/#like","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Like Parent class: \\Zotlabs\\Web\\Controller","title":"Like"},{"location":"dev/classes/Zotlabs/Module/Like/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Like/#reaction_to_activity","text":"private reaction_to_activity(mixed $reaction): mixed Parameters: Parameter Type Description $reaction mixed","title":"reaction_to_activity"},{"location":"dev/classes/Zotlabs/Module/Like/#like_response","text":"private like_response(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed","title":"like_response"},{"location":"dev/classes/Zotlabs/Module/Like/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Like/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Like/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Like/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Like/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/","text":"Linkinfo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Linkinfo Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. deletexnode public static deletexnode(mixed& $doc, mixed $node): mixed This method is static . Parameters: Parameter Type Description $doc mixed $node mixed completeurl public static completeurl(mixed $url, mixed $scheme): mixed This method is static . Parameters: Parameter Type Description $url mixed $scheme mixed get_video_poster public static get_video_poster(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed parseurl_getsiteinfo public static parseurl_getsiteinfo(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed arr_add_hashes private static arr_add_hashes(mixed& $item, mixed $k): mixed This method is static . Parameters: Parameter Type Description $item mixed $k mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Linkinfo"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#linkinfo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Linkinfo Parent class: \\Zotlabs\\Web\\Controller","title":"Linkinfo"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#deletexnode","text":"public static deletexnode(mixed& $doc, mixed $node): mixed This method is static . Parameters: Parameter Type Description $doc mixed $node mixed","title":"deletexnode"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#completeurl","text":"public static completeurl(mixed $url, mixed $scheme): mixed This method is static . Parameters: Parameter Type Description $url mixed $scheme mixed","title":"completeurl"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get_video_poster","text":"public static get_video_poster(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"get_video_poster"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#parseurl_getsiteinfo","text":"public static parseurl_getsiteinfo(mixed $url): mixed This method is static . Parameters: Parameter Type Description $url mixed","title":"parseurl_getsiteinfo"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#arr_add_hashes","text":"private static arr_add_hashes(mixed& $item, mixed $k): mixed This method is static . Parameters: Parameter Type Description $item mixed $k mixed","title":"arr_add_hashes"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Linkinfo/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lockview/","text":"Lockview Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lockview Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Lockview"},{"location":"dev/classes/Zotlabs/Module/Lockview/#lockview","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lockview Parent class: \\Zotlabs\\Web\\Controller","title":"Lockview"},{"location":"dev/classes/Zotlabs/Module/Lockview/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Lockview/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lockview/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Lockview/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Lockview/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Lockview/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Locs/","text":"Locs Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Locs Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Locs"},{"location":"dev/classes/Zotlabs/Module/Locs/#locs","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Locs Parent class: \\Zotlabs\\Web\\Controller","title":"Locs"},{"location":"dev/classes/Zotlabs/Module/Locs/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Locs/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Locs/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Locs/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Locs/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Locs/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Locs/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Login/","text":"Login Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Login Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Login"},{"location":"dev/classes/Zotlabs/Module/Login/#login","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Login Parent class: \\Zotlabs\\Web\\Controller","title":"Login"},{"location":"dev/classes/Zotlabs/Module/Login/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Login/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Login/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Login/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Login/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Login/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Logout/","text":"Logout Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Logout Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Logout"},{"location":"dev/classes/Zotlabs/Module/Logout/#logout","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Logout Parent class: \\Zotlabs\\Web\\Controller","title":"Logout"},{"location":"dev/classes/Zotlabs/Module/Logout/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Logout/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Logout/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Logout/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Logout/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Logout/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lostpass/","text":"Lostpass Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lostpass Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Lostpass"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#lostpass","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Lostpass Parent class: \\Zotlabs\\Web\\Controller","title":"Lostpass"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Lostpass/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Magic/","text":"Magic Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Magic Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Magic"},{"location":"dev/classes/Zotlabs/Module/Magic/#magic","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Magic Parent class: \\Zotlabs\\Web\\Controller","title":"Magic"},{"location":"dev/classes/Zotlabs/Module/Magic/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Magic/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Magic/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Magic/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Magic/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Magic/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Manage/","text":"Manage Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Manage Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Manage"},{"location":"dev/classes/Zotlabs/Module/Manage/#manage","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Manage Parent class: \\Zotlabs\\Web\\Controller","title":"Manage"},{"location":"dev/classes/Zotlabs/Module/Manage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Manage/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Manage/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Manage/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Manage/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Manage/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Manifest/","text":"Manifest Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Manifest Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Manifest"},{"location":"dev/classes/Zotlabs/Module/Manifest/#manifest","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Manifest Parent class: \\Zotlabs\\Web\\Controller","title":"Manifest"},{"location":"dev/classes/Zotlabs/Module/Manifest/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Manifest/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Manifest/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Manifest/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Manifest/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Manifest/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Menu/","text":"Menu Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Menu Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Menu"},{"location":"dev/classes/Zotlabs/Module/Menu/#menu","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Menu Parent class: \\Zotlabs\\Web\\Controller","title":"Menu"},{"location":"dev/classes/Zotlabs/Module/Menu/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Menu/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Menu/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Menu/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Menu/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Menu/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Menu/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Menu/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Mitem/","text":"Mitem Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Mitem Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Mitem"},{"location":"dev/classes/Zotlabs/Module/Mitem/#mitem","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Mitem Parent class: \\Zotlabs\\Web\\Controller","title":"Mitem"},{"location":"dev/classes/Zotlabs/Module/Mitem/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Mitem/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Mitem/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Mitem/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Mitem/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Mitem/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Mitem/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Mitem/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Moderate/","text":"Moderate Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Moderate Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Moderate"},{"location":"dev/classes/Zotlabs/Module/Moderate/#moderate","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Moderate Parent class: \\Zotlabs\\Web\\Controller","title":"Moderate"},{"location":"dev/classes/Zotlabs/Module/Moderate/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Moderate/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Moderate/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Moderate/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Moderate/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Moderate/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Network/","text":"Network Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Network Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Network"},{"location":"dev/classes/Zotlabs/Module/Network/#network","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Network Parent class: \\Zotlabs\\Web\\Controller","title":"Network"},{"location":"dev/classes/Zotlabs/Module/Network/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Network/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Network/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Network/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Network/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Network/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Network/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/New_channel/","text":"New_channel Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\New_channel Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"New_channel"},{"location":"dev/classes/Zotlabs/Module/New_channel/#new_channel","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\New_channel Parent class: \\Zotlabs\\Web\\Controller","title":"New_channel"},{"location":"dev/classes/Zotlabs/Module/New_channel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/New_channel/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/New_channel/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/New_channel/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/New_channel/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/New_channel/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/New_channel/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/New_channel/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notes/","text":"Notes Base controller class for Modules. Full name: \\Zotlabs\\Module\\Notes Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Notes"},{"location":"dev/classes/Zotlabs/Module/Notes/#notes","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Notes Parent class: \\Zotlabs\\Web\\Controller","title":"Notes"},{"location":"dev/classes/Zotlabs/Module/Notes/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Notes/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Notes/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notes/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Notes/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Notes/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Notes/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notifications/","text":"Notifications Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Notifications Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Notifications"},{"location":"dev/classes/Zotlabs/Module/Notifications/#notifications","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Notifications Parent class: \\Zotlabs\\Web\\Controller","title":"Notifications"},{"location":"dev/classes/Zotlabs/Module/Notifications/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Notifications/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notifications/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Notifications/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Notifications/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Notifications/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notify/","text":"Notify Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Notify Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Notify"},{"location":"dev/classes/Zotlabs/Module/Notify/#notify","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Notify Parent class: \\Zotlabs\\Web\\Controller","title":"Notify"},{"location":"dev/classes/Zotlabs/Module/Notify/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Notify/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Notify/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Notify/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Notify/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Notify/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Notify/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/","text":"OAuth2TestVehicle The OAuth2TestVehicle class is a way to test the registration of an OAuth2 client app. It allows you to walk through the steps of registering a client, requesting an authorization code for that client, and then requesting an access token for use in authentication against the Hubzilla API endpoints. Full name: \\Zotlabs\\Module\\OAuth2TestVehicle Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"OAuth2TestVehicle"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#oauth2testvehicle","text":"The OAuth2TestVehicle class is a way to test the registration of an OAuth2 client app. It allows you to walk through the steps of registering a client, requesting an authorization code for that client, and then requesting an access token for use in authentication against the Hubzilla API endpoints. Full name: \\Zotlabs\\Module\\OAuth2TestVehicle Parent class: \\Zotlabs\\Web\\Controller","title":"OAuth2TestVehicle"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/OAuth2TestVehicle/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oauth/","text":"Oauth Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauth Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oauth"},{"location":"dev/classes/Zotlabs/Module/Oauth/#oauth","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauth Parent class: \\Zotlabs\\Web\\Controller","title":"Oauth"},{"location":"dev/classes/Zotlabs/Module/Oauth/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oauth/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oauth/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oauth/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oauth/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oauth/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oauth/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oauth2/","text":"Oauth2 Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauth2 Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oauth2"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#oauth2","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauth2 Parent class: \\Zotlabs\\Web\\Controller","title":"Oauth2"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oauth2/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/","text":"Oauthinfo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauthinfo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oauthinfo"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#oauthinfo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oauthinfo Parent class: \\Zotlabs\\Web\\Controller","title":"Oauthinfo"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oauthinfo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Ochannel/","text":"Ochannel Base controller class for Modules. Full name: \\Zotlabs\\Module\\Ochannel Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Ochannel"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#ochannel","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Ochannel Parent class: \\Zotlabs\\Web\\Controller","title":"Ochannel"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Ochannel/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oembed/","text":"Oembed Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oembed Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oembed"},{"location":"dev/classes/Zotlabs/Module/Oembed/#oembed","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oembed Parent class: \\Zotlabs\\Web\\Controller","title":"Oembed"},{"location":"dev/classes/Zotlabs/Module/Oembed/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oembed/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oembed/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oembed/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oembed/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oembed/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oep/","text":"Oep Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oep Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. oep_display_reply public oep_display_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_cards_reply public oep_cards_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_articles_reply public oep_articles_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_mid_reply public oep_mid_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_profile_reply public oep_profile_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_album_reply public oep_album_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_phototop_reply public oep_phototop_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed oep_photo_reply public oep_photo_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oep"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oep Parent class: \\Zotlabs\\Web\\Controller","title":"Oep"},{"location":"dev/classes/Zotlabs/Module/Oep/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oep/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_display_reply","text":"public oep_display_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_display_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_cards_reply","text":"public oep_cards_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_cards_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_articles_reply","text":"public oep_articles_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_articles_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_mid_reply","text":"public oep_mid_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_mid_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_profile_reply","text":"public oep_profile_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_profile_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_album_reply","text":"public oep_album_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_album_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_phototop_reply","text":"public oep_phototop_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_phototop_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#oep_photo_reply","text":"public oep_photo_reply(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"oep_photo_reply"},{"location":"dev/classes/Zotlabs/Module/Oep/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oep/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oep/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oep/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oexchange/","text":"Oexchange Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oexchange Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Oexchange"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#oexchange","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Oexchange Parent class: \\Zotlabs\\Web\\Controller","title":"Oexchange"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Oexchange/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Ofeed/","text":"Ofeed Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Ofeed Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Ofeed"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#ofeed","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Ofeed Parent class: \\Zotlabs\\Web\\Controller","title":"Ofeed"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Ofeed/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Online/","text":"Online Base controller class for Modules. Full name: \\Zotlabs\\Module\\Online Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Online"},{"location":"dev/classes/Zotlabs/Module/Online/#online","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Online Parent class: \\Zotlabs\\Web\\Controller","title":"Online"},{"location":"dev/classes/Zotlabs/Module/Online/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Online/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Online/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Online/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Online/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Online/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Outbox/","text":"Outbox Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Outbox Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Outbox"},{"location":"dev/classes/Zotlabs/Module/Outbox/#outbox","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Outbox Parent class: \\Zotlabs\\Web\\Controller","title":"Outbox"},{"location":"dev/classes/Zotlabs/Module/Outbox/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Outbox/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Outbox/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Outbox/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Outbox/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Outbox/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Owa/","text":"Owa OpenWebAuth verifier and token generator See spec/OpenWebAuth/Home.md Requests to this endpoint should be signed using HTTP Signatures using the 'Authorization: Signature' authentication method If the signature verifies a token is returned. This token may be exchanged for an authenticated cookie. Full name: \\Zotlabs\\Module\\Owa Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Owa"},{"location":"dev/classes/Zotlabs/Module/Owa/#owa","text":"OpenWebAuth verifier and token generator See spec/OpenWebAuth/Home.md Requests to this endpoint should be signed using HTTP Signatures using the 'Authorization: Signature' authentication method If the signature verifies a token is returned. This token may be exchanged for an authenticated cookie. Full name: \\Zotlabs\\Module\\Owa Parent class: \\Zotlabs\\Web\\Controller","title":"Owa"},{"location":"dev/classes/Zotlabs/Module/Owa/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Owa/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Owa/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Owa/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Owa/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Owa/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Page/","text":"Page Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Page Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Page"},{"location":"dev/classes/Zotlabs/Module/Page/#page","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Page Parent class: \\Zotlabs\\Web\\Controller","title":"Page"},{"location":"dev/classes/Zotlabs/Module/Page/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Page/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Page/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Page/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Page/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Page/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Page/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pconfig/","text":"Pconfig Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pconfig Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. pconfig_form public pconfig_form(mixed $cat, mixed $k): mixed Parameters: Parameter Type Description $cat mixed $k mixed disallowed_pconfig public disallowed_pconfig(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pconfig"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#pconfig","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pconfig Parent class: \\Zotlabs\\Web\\Controller","title":"Pconfig"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#pconfig_form","text":"public pconfig_form(mixed $cat, mixed $k): mixed Parameters: Parameter Type Description $cat mixed $k mixed","title":"pconfig_form"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#disallowed_pconfig","text":"public disallowed_pconfig(): mixed","title":"disallowed_pconfig"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pconfig/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pdledit/","text":"Pdledit Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pdledit Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pdledit"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#pdledit","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pdledit Parent class: \\Zotlabs\\Web\\Controller","title":"Pdledit"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pdledit/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/","text":"Pdledit_gui Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pdledit_gui Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. get_templates public get_templates(): mixed get_modules public get_modules(): mixed get_widgets public get_widgets(mixed $module): mixed Parameters: Parameter Type Description $module mixed get_menus public get_menus(): mixed get_blocks public get_blocks(): mixed get_template public get_template(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed get_regions public get_regions(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed parse_region public parse_region(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed get_template_info public get_template_info(string $template): array Parameters: Parameter Type Description $template string the name of the template Return Value: with the information get_pdl public get_pdl(mixed $module): mixed Parameters: Parameter Type Description $module mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pdledit_gui"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#pdledit_gui","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pdledit_gui Parent class: \\Zotlabs\\Web\\Controller","title":"Pdledit_gui"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_templates","text":"public get_templates(): mixed","title":"get_templates"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_modules","text":"public get_modules(): mixed","title":"get_modules"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_widgets","text":"public get_widgets(mixed $module): mixed Parameters: Parameter Type Description $module mixed","title":"get_widgets"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_menus","text":"public get_menus(): mixed","title":"get_menus"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_blocks","text":"public get_blocks(): mixed","title":"get_blocks"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_template","text":"public get_template(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed","title":"get_template"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_regions","text":"public get_regions(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed","title":"get_regions"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#parse_region","text":"public parse_region(mixed $pdl): mixed Parameters: Parameter Type Description $pdl mixed","title":"parse_region"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_template_info","text":"public get_template_info(string $template): array Parameters: Parameter Type Description $template string the name of the template Return Value: with the information","title":"get_template_info"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_pdl","text":"public get_pdl(mixed $module): mixed Parameters: Parameter Type Description $module mixed","title":"get_pdl"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pdledit_gui/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Permcat/","text":"Permcat Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Permcat Parent class: \\Zotlabs\\Web\\Controller Properties permcats private $permcats Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Permcat"},{"location":"dev/classes/Zotlabs/Module/Permcat/#permcat","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Permcat Parent class: \\Zotlabs\\Web\\Controller","title":"Permcat"},{"location":"dev/classes/Zotlabs/Module/Permcat/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Permcat/#permcats","text":"private $permcats","title":"permcats"},{"location":"dev/classes/Zotlabs/Module/Permcat/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Permcat/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Permcat/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Permcat/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Permcat/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Permcat/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Permcats/","text":"Permcats Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Permcats Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Permcats"},{"location":"dev/classes/Zotlabs/Module/Permcats/#permcats","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Permcats Parent class: \\Zotlabs\\Web\\Controller","title":"Permcats"},{"location":"dev/classes/Zotlabs/Module/Permcats/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Permcats/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Permcats/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Permcats/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Permcats/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Permcats/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Permcats/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Photo/","text":"Photo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Photo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Photo"},{"location":"dev/classes/Zotlabs/Module/Photo/#photo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Photo Parent class: \\Zotlabs\\Web\\Controller","title":"Photo"},{"location":"dev/classes/Zotlabs/Module/Photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Photo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Photo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Photo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Photo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Photo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Photos/","text":"Photos Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Photos Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Photos"},{"location":"dev/classes/Zotlabs/Module/Photos/#photos","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Photos Parent class: \\Zotlabs\\Web\\Controller","title":"Photos"},{"location":"dev/classes/Zotlabs/Module/Photos/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Photos/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Photos/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Photos/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Photos/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Photos/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Photos/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Photos/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pin/","text":"Pin Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pin Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pin"},{"location":"dev/classes/Zotlabs/Module/Pin/#pin","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pin Parent class: \\Zotlabs\\Web\\Controller","title":"Pin"},{"location":"dev/classes/Zotlabs/Module/Pin/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pin/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pin/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pin/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pin/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pin/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pin/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Poco/","text":"Poco Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Poco Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Poco"},{"location":"dev/classes/Zotlabs/Module/Poco/#poco","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Poco Parent class: \\Zotlabs\\Web\\Controller","title":"Poco"},{"location":"dev/classes/Zotlabs/Module/Poco/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Poco/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Poco/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Poco/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Poco/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Poco/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Poster/","text":"Poster Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Poster Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Poster"},{"location":"dev/classes/Zotlabs/Module/Poster/#poster","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Poster Parent class: \\Zotlabs\\Web\\Controller","title":"Poster"},{"location":"dev/classes/Zotlabs/Module/Poster/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Poster/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Poster/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Poster/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Poster/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Poster/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pretheme/","text":"Pretheme Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pretheme Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pretheme"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#pretheme","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pretheme Parent class: \\Zotlabs\\Web\\Controller","title":"Pretheme"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pretheme/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profile/","text":"Profile Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profile Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Profile"},{"location":"dev/classes/Zotlabs/Module/Profile/#profile","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profile Parent class: \\Zotlabs\\Web\\Controller","title":"Profile"},{"location":"dev/classes/Zotlabs/Module/Profile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Profile/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profile/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profile/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Profile/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profile/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profile/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/","text":"Profile_photo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profile_photo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. profile_photo_crop_ui_head public profile_photo_crop_ui_head(mixed $ph, mixed $hash, mixed $smallest): mixed Parameters: Parameter Type Description $ph mixed $hash mixed $smallest mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Profile_photo"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#profile_photo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profile_photo Parent class: \\Zotlabs\\Web\\Controller","title":"Profile_photo"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#profile_photo_crop_ui_head","text":"public profile_photo_crop_ui_head(mixed $ph, mixed $hash, mixed $smallest): mixed Parameters: Parameter Type Description $ph mixed $hash mixed $smallest mixed","title":"profile_photo_crop_ui_head"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profile_photo/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profiles/","text":"Profiles Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profiles Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Profiles"},{"location":"dev/classes/Zotlabs/Module/Profiles/#profiles","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profiles Parent class: \\Zotlabs\\Web\\Controller","title":"Profiles"},{"location":"dev/classes/Zotlabs/Module/Profiles/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Profiles/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profiles/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profiles/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profiles/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Profiles/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profiles/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profiles/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profperm/","text":"Profperm Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profperm Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Profperm"},{"location":"dev/classes/Zotlabs/Module/Profperm/#profperm","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Profperm Parent class: \\Zotlabs\\Web\\Controller","title":"Profperm"},{"location":"dev/classes/Zotlabs/Module/Profperm/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Profperm/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profperm/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Profperm/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Profperm/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Profperm/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Profperm/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pubsites/","text":"Pubsites Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pubsites Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pubsites"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#pubsites","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pubsites Parent class: \\Zotlabs\\Web\\Controller","title":"Pubsites"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pubsites/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pubstream/","text":"Pubstream Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pubstream Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Pubstream"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#pubstream","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Pubstream Parent class: \\Zotlabs\\Web\\Controller","title":"Pubstream"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Pubstream/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Randprof/","text":"Randprof Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Randprof Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Randprof"},{"location":"dev/classes/Zotlabs/Module/Randprof/#randprof","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Randprof Parent class: \\Zotlabs\\Web\\Controller","title":"Randprof"},{"location":"dev/classes/Zotlabs/Module/Randprof/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Randprof/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Randprof/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Randprof/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Randprof/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Randprof/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Randprof/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rbmark/","text":"Rbmark remote bookmark https://yoursite/rbmark?f=&title=&url=&private=&remote_return= This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length f= placeholder, often required title= link text url= URL to bookmark ischat=1 if this bookmark is a chatroom private= Don't share this link remote_return= absolute URL to return after posting is finished Full name: \\Zotlabs\\Module\\Rbmark Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): void This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. get_bookmark_folders private get_bookmark_folders(int $channel_id): array Parameters: Parameter Type Description $channel_id int Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Rbmark"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#rbmark","text":"remote bookmark https://yoursite/rbmark?f=&title=&url=&private=&remote_return= This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length f= placeholder, often required title= link text url= URL to bookmark ischat=1 if this bookmark is a chatroom private= Don't share this link remote_return= absolute URL to return after posting is finished Full name: \\Zotlabs\\Module\\Rbmark Parent class: \\Zotlabs\\Web\\Controller","title":"Rbmark"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#post","text":"Process POST requests. public post(): void This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get_bookmark_folders","text":"private get_bookmark_folders(int $channel_id): array Parameters: Parameter Type Description $channel_id int","title":"get_bookmark_folders"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Rbmark/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/React/","text":"React Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\React Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"React"},{"location":"dev/classes/Zotlabs/Module/React/#react","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\React Parent class: \\Zotlabs\\Web\\Controller","title":"React"},{"location":"dev/classes/Zotlabs/Module/React/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/React/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/React/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/React/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/React/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/React/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regate/","text":"Regate Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regate Parent class: \\Zotlabs\\Web\\Controller Constants Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0' Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Regate"},{"location":"dev/classes/Zotlabs/Module/Regate/#regate","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regate Parent class: \\Zotlabs\\Web\\Controller","title":"Regate"},{"location":"dev/classes/Zotlabs/Module/Regate/#constants","text":"Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0'","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Regate/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Regate/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Regate/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regate/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Regate/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Regate/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Regate/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regdir/","text":"Regdir With args, register a directory server for this realm. With no args, return a JSON array of directory servers for this realm. Full name: \\Zotlabs\\Module\\Regdir Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Regdir"},{"location":"dev/classes/Zotlabs/Module/Regdir/#regdir","text":"With args, register a directory server for this realm. With no args, return a JSON array of directory servers for this realm. Full name: \\Zotlabs\\Module\\Regdir Parent class: \\Zotlabs\\Web\\Controller","title":"Regdir"},{"location":"dev/classes/Zotlabs/Module/Regdir/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Regdir/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Regdir/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Regdir/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Regdir/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Regdir/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Register/","text":"Register Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Register Parent class: \\Zotlabs\\Web\\Controller Constants Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0' Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. check_reg_limits public check_reg_limits(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Register"},{"location":"dev/classes/Zotlabs/Module/Register/#register","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Register Parent class: \\Zotlabs\\Web\\Controller","title":"Register"},{"location":"dev/classes/Zotlabs/Module/Register/#constants","text":"Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0'","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Register/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Register/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Register/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Register/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Register/#check_reg_limits","text":"public check_reg_limits(): mixed","title":"check_reg_limits"},{"location":"dev/classes/Zotlabs/Module/Register/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Register/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Register/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Register/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regmod/","text":"Regmod Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regmod Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Regmod"},{"location":"dev/classes/Zotlabs/Module/Regmod/#regmod","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regmod Parent class: \\Zotlabs\\Web\\Controller","title":"Regmod"},{"location":"dev/classes/Zotlabs/Module/Regmod/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Regmod/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regmod/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Regmod/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Regmod/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Regmod/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regver/","text":"Regver Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regver Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Regver"},{"location":"dev/classes/Zotlabs/Module/Regver/#regver","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Regver Parent class: \\Zotlabs\\Web\\Controller","title":"Regver"},{"location":"dev/classes/Zotlabs/Module/Regver/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Regver/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Regver/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Regver/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Regver/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Regver/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/","text":"Removeaccount Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Removeaccount Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Removeaccount"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#removeaccount","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Removeaccount Parent class: \\Zotlabs\\Web\\Controller","title":"Removeaccount"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Removeaccount/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Removeme/","text":"Removeme Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Removeme Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Removeme"},{"location":"dev/classes/Zotlabs/Module/Removeme/#removeme","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Removeme Parent class: \\Zotlabs\\Web\\Controller","title":"Removeme"},{"location":"dev/classes/Zotlabs/Module/Removeme/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Removeme/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Removeme/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Removeme/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Removeme/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Removeme/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Removeme/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rmagic/","text":"Rmagic Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Rmagic Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Rmagic"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#rmagic","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Rmagic Parent class: \\Zotlabs\\Web\\Controller","title":"Rmagic"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Rmagic/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rpost/","text":"Rpost remote post https://yoursite/rpost?f=&title=&body=&remote_return= This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length f= placeholder, often required title= Title of post body= Body of post url= URL which will be parsed and the results appended to the body source= Source application post_id= post_id of post to 'share' (local use only) remote_return= absolute URL to return after posting is finished type= choices are 'html' or 'bbcode', default is 'bbcode' Full name: \\Zotlabs\\Module\\Rpost Parent class: \\Zotlabs\\Web\\Controller Methods get Handle requests. public get(): string Despite it's name, this method handles both POST and GET requests to the module. Return Value: HTML content for the module. redirect_or_login Redirect to the observer's instance if not local, or return login form. private redirect_or_login(): string The request is saved in the session if there's a body request param present. (Otherwise not.) Return Value: A login form if not redirected. If the session was determned to belong to a remote channel, the function does not return. handle_attachments Handle uplads of attachments in the rpost call. private handle_attachments(): void This is only relevant for POST requests. The function will modify the $_REQUEST['body'] superglobal (or add it if it does not exist). Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Rpost"},{"location":"dev/classes/Zotlabs/Module/Rpost/#rpost","text":"remote post https://yoursite/rpost?f=&title=&body=&remote_return= This can be called via either GET or POST, use POST for long body content as suhosin often limits GET parameter length f= placeholder, often required title= Title of post body= Body of post url= URL which will be parsed and the results appended to the body source= Source application post_id= post_id of post to 'share' (local use only) remote_return= absolute URL to return after posting is finished type= choices are 'html' or 'bbcode', default is 'bbcode' Full name: \\Zotlabs\\Module\\Rpost Parent class: \\Zotlabs\\Web\\Controller","title":"Rpost"},{"location":"dev/classes/Zotlabs/Module/Rpost/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Rpost/#get","text":"Handle requests. public get(): string Despite it's name, this method handles both POST and GET requests to the module. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Rpost/#redirect_or_login","text":"Redirect to the observer's instance if not local, or return login form. private redirect_or_login(): string The request is saved in the session if there's a body request param present. (Otherwise not.) Return Value: A login form if not redirected. If the session was determned to belong to a remote channel, the function does not return.","title":"redirect_or_login"},{"location":"dev/classes/Zotlabs/Module/Rpost/#handle_attachments","text":"Handle uplads of attachments in the rpost call. private handle_attachments(): void This is only relevant for POST requests. The function will modify the $_REQUEST['body'] superglobal (or add it if it does not exist).","title":"handle_attachments"},{"location":"dev/classes/Zotlabs/Module/Rpost/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Rpost/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Rpost/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Rpost/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Search/","text":"Search Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Search Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Search"},{"location":"dev/classes/Zotlabs/Module/Search/#search","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Search Parent class: \\Zotlabs\\Web\\Controller","title":"Search"},{"location":"dev/classes/Zotlabs/Module/Search/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Search/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Search/#get","text":"Process GET requests or the body part of POST requests. public get(mixed $update, mixed $load = false): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Parameters: Parameter Type Description $update mixed $load mixed Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Search/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Search/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Search/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Search/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Search_ac/","text":"Search_ac Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Search_ac Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Search_ac"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#search_ac","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Search_ac Parent class: \\Zotlabs\\Web\\Controller","title":"Search_ac"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Search_ac/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Service_limits/","text":"Service_limits Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Service_limits Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Service_limits"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#service_limits","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Service_limits Parent class: \\Zotlabs\\Web\\Controller","title":"Service_limits"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Service_limits/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/","text":"Settings Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Settings Parent class: \\Zotlabs\\Web\\Controller Properties sm private $sm Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Settings"},{"location":"dev/classes/Zotlabs/Module/Settings/#settings","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Settings Parent class: \\Zotlabs\\Web\\Controller","title":"Settings"},{"location":"dev/classes/Zotlabs/Module/Settings/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Settings/#sm","text":"private $sm","title":"sm"},{"location":"dev/classes/Zotlabs/Module/Settings/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Settings/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Settings/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Settings/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Share/","text":"Share Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Share Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Share"},{"location":"dev/classes/Zotlabs/Module/Share/#share","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Share Parent class: \\Zotlabs\\Web\\Controller","title":"Share"},{"location":"dev/classes/Zotlabs/Module/Share/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Share/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Share/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Share/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Share/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Share/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/","text":"Sharedwithme Base controller class for Modules. Full name: \\Zotlabs\\Module\\Sharedwithme Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sharedwithme"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#sharedwithme","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Sharedwithme Parent class: \\Zotlabs\\Web\\Controller","title":"Sharedwithme"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sharedwithme/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/","text":"Siteinfo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Siteinfo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Siteinfo"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#siteinfo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Siteinfo Parent class: \\Zotlabs\\Web\\Controller","title":"Siteinfo"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Siteinfo/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sitelist/","text":"Sitelist Base controller class for Modules. Full name: \\Zotlabs\\Module\\Sitelist Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sitelist"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#sitelist","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Sitelist Parent class: \\Zotlabs\\Web\\Controller","title":"Sitelist"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sitelist/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Smilies/","text":"Smilies Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Smilies Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Smilies"},{"location":"dev/classes/Zotlabs/Module/Smilies/#smilies","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Smilies Parent class: \\Zotlabs\\Web\\Controller","title":"Smilies"},{"location":"dev/classes/Zotlabs/Module/Smilies/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Smilies/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Smilies/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Smilies/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Smilies/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Smilies/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Snap/","text":"Snap Base controller class for Modules. Full name: \\Zotlabs\\Module\\Snap Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Snap"},{"location":"dev/classes/Zotlabs/Module/Snap/#snap","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Snap Parent class: \\Zotlabs\\Web\\Controller","title":"Snap"},{"location":"dev/classes/Zotlabs/Module/Snap/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Snap/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Snap/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Snap/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Snap/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Snap/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sources/","text":"Sources Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sources Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sources"},{"location":"dev/classes/Zotlabs/Module/Sources/#sources","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sources Parent class: \\Zotlabs\\Web\\Controller","title":"Sources"},{"location":"dev/classes/Zotlabs/Module/Sources/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sources/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sources/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sources/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sources/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sources/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sources/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sse/","text":"Sse Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sse Parent class: \\Zotlabs\\Web\\Controller Properties uid public static $uid This property is static . ob_hash public static $ob_hash This property is static . sse_id public static $sse_id This property is static . vnotify public static $vnotify This property is static . sse_enabled public static $sse_enabled This property is static . Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sse"},{"location":"dev/classes/Zotlabs/Module/Sse/#sse","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sse Parent class: \\Zotlabs\\Web\\Controller","title":"Sse"},{"location":"dev/classes/Zotlabs/Module/Sse/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Sse/#uid","text":"public static $uid This property is static .","title":"uid"},{"location":"dev/classes/Zotlabs/Module/Sse/#ob_hash","text":"public static $ob_hash This property is static .","title":"ob_hash"},{"location":"dev/classes/Zotlabs/Module/Sse/#sse_id","text":"public static $sse_id This property is static .","title":"sse_id"},{"location":"dev/classes/Zotlabs/Module/Sse/#vnotify","text":"public static $vnotify This property is static .","title":"vnotify"},{"location":"dev/classes/Zotlabs/Module/Sse/#sse_enabled","text":"public static $sse_enabled This property is static .","title":"sse_enabled"},{"location":"dev/classes/Zotlabs/Module/Sse/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sse/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sse/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sse/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sse/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sse/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/","text":"Sse_bs Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sse_bs Parent class: \\Zotlabs\\Web\\Controller Properties uid public static $uid This property is static . ob_hash public static $ob_hash This property is static . sse_id public static $sse_id This property is static . vnotify public static $vnotify This property is static . evdays public static $evdays This property is static . limit public static $limit This property is static . offset public static $offset This property is static . xchans public static $xchans This property is static . Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. mark_read public mark_read(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed bs_network public bs_network(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed bs_dm public bs_dm(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed bs_home public bs_home(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed bs_pubs public bs_pubs(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed bs_notify public bs_notify(): mixed bs_intros public bs_intros(): mixed bs_forums public bs_forums(): mixed bs_files public bs_files(): mixed bs_all_events public bs_all_events(): mixed bs_register public bs_register(): mixed bs_info_notice public bs_info_notice(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sse_bs"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#sse_bs","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sse_bs Parent class: \\Zotlabs\\Web\\Controller","title":"Sse_bs"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#uid","text":"public static $uid This property is static .","title":"uid"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#ob_hash","text":"public static $ob_hash This property is static .","title":"ob_hash"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#sse_id","text":"public static $sse_id This property is static .","title":"sse_id"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#vnotify","text":"public static $vnotify This property is static .","title":"vnotify"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#evdays","text":"public static $evdays This property is static .","title":"evdays"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#limit","text":"public static $limit This property is static .","title":"limit"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#offset","text":"public static $offset This property is static .","title":"offset"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#xchans","text":"public static $xchans This property is static .","title":"xchans"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#mark_read","text":"public mark_read(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed","title":"mark_read"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_network","text":"public bs_network(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed","title":"bs_network"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_dm","text":"public bs_dm(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed","title":"bs_dm"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_home","text":"public bs_home(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed","title":"bs_home"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_pubs","text":"public bs_pubs(mixed $notifications): mixed Parameters: Parameter Type Description $notifications mixed","title":"bs_pubs"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_notify","text":"public bs_notify(): mixed","title":"bs_notify"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_intros","text":"public bs_intros(): mixed","title":"bs_intros"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_forums","text":"public bs_forums(): mixed","title":"bs_forums"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_files","text":"public bs_files(): mixed","title":"bs_files"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_all_events","text":"public bs_all_events(): mixed","title":"bs_all_events"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_register","text":"public bs_register(): mixed","title":"bs_register"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#bs_info_notice","text":"public bs_info_notice(): mixed","title":"bs_info_notice"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sse_bs/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Sslify/","text":"Sslify Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sslify Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Sslify"},{"location":"dev/classes/Zotlabs/Module/Sslify/#sslify","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Sslify Parent class: \\Zotlabs\\Web\\Controller","title":"Sslify"},{"location":"dev/classes/Zotlabs/Module/Sslify/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Sslify/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sslify/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Sslify/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Sslify/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Sslify/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Starred/","text":"Starred Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Starred Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Starred"},{"location":"dev/classes/Zotlabs/Module/Starred/#starred","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Starred Parent class: \\Zotlabs\\Web\\Controller","title":"Starred"},{"location":"dev/classes/Zotlabs/Module/Starred/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Starred/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Starred/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Starred/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Starred/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Starred/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Subthread/","text":"Subthread Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Subthread Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Subthread"},{"location":"dev/classes/Zotlabs/Module/Subthread/#subthread","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Subthread Parent class: \\Zotlabs\\Web\\Controller","title":"Subthread"},{"location":"dev/classes/Zotlabs/Module/Subthread/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Subthread/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Subthread/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Subthread/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Subthread/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Subthread/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Suggest/","text":"Suggest Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Suggest Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Suggest"},{"location":"dev/classes/Zotlabs/Module/Suggest/#suggest","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Suggest Parent class: \\Zotlabs\\Web\\Controller","title":"Suggest"},{"location":"dev/classes/Zotlabs/Module/Suggest/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Suggest/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Suggest/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Suggest/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Suggest/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Suggest/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Suggest/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tagger/","text":"Tagger Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tagger Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Tagger"},{"location":"dev/classes/Zotlabs/Module/Tagger/#tagger","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tagger Parent class: \\Zotlabs\\Web\\Controller","title":"Tagger"},{"location":"dev/classes/Zotlabs/Module/Tagger/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Tagger/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tagger/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Tagger/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Tagger/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tagger/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tagrm/","text":"Tagrm Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tagrm Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Tagrm"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#tagrm","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tagrm Parent class: \\Zotlabs\\Web\\Controller","title":"Tagrm"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tagrm/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tasks/","text":"Tasks Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tasks Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Tasks"},{"location":"dev/classes/Zotlabs/Module/Tasks/#tasks","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tasks Parent class: \\Zotlabs\\Web\\Controller","title":"Tasks"},{"location":"dev/classes/Zotlabs/Module/Tasks/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Tasks/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Tasks/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tasks/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tasks/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Tasks/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Tasks/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tasks/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Theme_info/","text":"Theme_info Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Theme_info Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. get_theme_config_file public get_theme_config_file(mixed $theme): mixed Parameters: Parameter Type Description $theme mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Theme_info"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#theme_info","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Theme_info Parent class: \\Zotlabs\\Web\\Controller","title":"Theme_info"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get_theme_config_file","text":"public get_theme_config_file(mixed $theme): mixed Parameters: Parameter Type Description $theme mixed","title":"get_theme_config_file"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Theme_info/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Thing/","text":"Thing Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Thing Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Thing"},{"location":"dev/classes/Zotlabs/Module/Thing/#thing","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Thing Parent class: \\Zotlabs\\Web\\Controller","title":"Thing"},{"location":"dev/classes/Zotlabs/Module/Thing/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Thing/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Thing/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Thing/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Thing/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Thing/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Thing/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Thing/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Token/","text":"Token Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Token Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Token"},{"location":"dev/classes/Zotlabs/Module/Token/#token","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Token Parent class: \\Zotlabs\\Web\\Controller","title":"Token"},{"location":"dev/classes/Zotlabs/Module/Token/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Token/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Token/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Token/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Token/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Token/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tokens/","text":"Tokens Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tokens Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Tokens"},{"location":"dev/classes/Zotlabs/Module/Tokens/#tokens","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Tokens Parent class: \\Zotlabs\\Web\\Controller","title":"Tokens"},{"location":"dev/classes/Zotlabs/Module/Tokens/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Tokens/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tokens/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Tokens/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Tokens/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Tokens/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Tokens/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Totp_check/","text":"Totp_check Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Totp_check Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Totp_check"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#totp_check","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Totp_check Parent class: \\Zotlabs\\Web\\Controller","title":"Totp_check"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Totp_check/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Uexport/","text":"Uexport Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Uexport Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Uexport"},{"location":"dev/classes/Zotlabs/Module/Uexport/#uexport","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Uexport Parent class: \\Zotlabs\\Web\\Controller","title":"Uexport"},{"location":"dev/classes/Zotlabs/Module/Uexport/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Uexport/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Uexport/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Uexport/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Uexport/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Uexport/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Uexport/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Update/","text":"Update Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Update Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Update"},{"location":"dev/classes/Zotlabs/Module/Update/#update","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Update Parent class: \\Zotlabs\\Web\\Controller","title":"Update"},{"location":"dev/classes/Zotlabs/Module/Update/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Update/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Update/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Update/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Update/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Update/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Userinfo/","text":"Userinfo Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Userinfo Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Userinfo"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#userinfo","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Userinfo Parent class: \\Zotlabs\\Web\\Controller","title":"Userinfo"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Userinfo/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/View/","text":"View load view/theme/$current_theme/style.php with Hubzilla context Full name: \\Zotlabs\\Module\\View Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"View"},{"location":"dev/classes/Zotlabs/Module/View/#view","text":"load view/theme/$current_theme/style.php with Hubzilla context Full name: \\Zotlabs\\Module\\View Parent class: \\Zotlabs\\Web\\Controller","title":"View"},{"location":"dev/classes/Zotlabs/Module/View/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/View/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/View/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/View/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/View/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/View/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/","text":"Viewconnections Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Viewconnections Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Viewconnections"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#viewconnections","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Viewconnections Parent class: \\Zotlabs\\Web\\Controller","title":"Viewconnections"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Viewconnections/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/","text":"Viewsrc Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Viewsrc Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Viewsrc"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#viewsrc","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Viewsrc Parent class: \\Zotlabs\\Web\\Controller","title":"Viewsrc"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Viewsrc/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Vote/","text":"Vote Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Vote Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Vote"},{"location":"dev/classes/Zotlabs/Module/Vote/#vote","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Vote Parent class: \\Zotlabs\\Web\\Controller","title":"Vote"},{"location":"dev/classes/Zotlabs/Module/Vote/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Vote/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Vote/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Vote/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Vote/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Vote/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/","text":"Wall_attach Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wall_attach Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Wall_attach"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#wall_attach","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wall_attach Parent class: \\Zotlabs\\Web\\Controller","title":"Wall_attach"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Wall_attach/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/","text":"Wall_upload Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wall_upload Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Wall_upload"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#wall_upload","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wall_upload Parent class: \\Zotlabs\\Web\\Controller","title":"Wall_upload"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Wall_upload/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Webfinger/","text":"Webfinger Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Webfinger Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Webfinger"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#webfinger","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Webfinger Parent class: \\Zotlabs\\Web\\Controller","title":"Webfinger"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Webfinger/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Webpages/","text":"Webpages Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Webpages Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Webpages"},{"location":"dev/classes/Zotlabs/Module/Webpages/#webpages","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Webpages Parent class: \\Zotlabs\\Web\\Controller","title":"Webpages"},{"location":"dev/classes/Zotlabs/Module/Webpages/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Webpages/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Webpages/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Webpages/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Webpages/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Webpages/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Webpages/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Webpages/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Well_known/","text":"Well_known Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Well_known Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Well_known"},{"location":"dev/classes/Zotlabs/Module/Well_known/#well_known","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Well_known Parent class: \\Zotlabs\\Web\\Controller","title":"Well_known"},{"location":"dev/classes/Zotlabs/Module/Well_known/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Well_known/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Well_known/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Well_known/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Well_known/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Well_known/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Wfinger/","text":"Wfinger Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wfinger Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Wfinger"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#wfinger","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Wfinger Parent class: \\Zotlabs\\Web\\Controller","title":"Wfinger"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Wfinger/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Xchan/","text":"Xchan Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xchan Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Xchan"},{"location":"dev/classes/Zotlabs/Module/Xchan/#xchan","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xchan Parent class: \\Zotlabs\\Web\\Controller","title":"Xchan"},{"location":"dev/classes/Zotlabs/Module/Xchan/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Xchan/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Xchan/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Xchan/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xchan/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Xchan/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Xpoco/","text":"Xpoco Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xpoco Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Xpoco"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#xpoco","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xpoco Parent class: \\Zotlabs\\Web\\Controller","title":"Xpoco"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Xpoco/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Xrd/","text":"Xrd Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xrd Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Xrd"},{"location":"dev/classes/Zotlabs/Module/Xrd/#xrd","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xrd Parent class: \\Zotlabs\\Web\\Controller","title":"Xrd"},{"location":"dev/classes/Zotlabs/Module/Xrd/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Xrd/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xrd/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Xrd/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xrd/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Xrd/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Xref/","text":"Xref Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xref Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Xref"},{"location":"dev/classes/Zotlabs/Module/Xref/#xref","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Xref Parent class: \\Zotlabs\\Web\\Controller","title":"Xref"},{"location":"dev/classes/Zotlabs/Module/Xref/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Xref/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xref/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Xref/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Xref/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Xref/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Z6trans/","text":"Z6trans Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Z6trans Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. get_core_cols public get_core_cols(): mixed Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Z6trans"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#z6trans","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Z6trans Parent class: \\Zotlabs\\Web\\Controller","title":"Z6trans"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get_core_cols","text":"public get_core_cols(): mixed","title":"get_core_cols"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Z6trans/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Zot/","text":"Zot Base controller class for Modules. Full name: \\Zotlabs\\Module\\Zot Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Zot"},{"location":"dev/classes/Zotlabs/Module/Zot/#zot","text":"Base controller class for Modules. Full name: \\Zotlabs\\Module\\Zot Parent class: \\Zotlabs\\Web\\Controller","title":"Zot"},{"location":"dev/classes/Zotlabs/Module/Zot/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Zot/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Zot/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Zot/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Zot/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Zot/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/","text":"Zot_probe Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Zot_probe Parent class: \\Zotlabs\\Web\\Controller Methods get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Zot_probe"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#zot_probe","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Zot_probe Parent class: \\Zotlabs\\Web\\Controller","title":"Zot_probe"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Zot_probe/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/","text":"Zotfeed Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Zotfeed Parent class: \\Zotlabs\\Web\\Controller Methods post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Zotfeed"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#zotfeed","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Zotfeed Parent class: \\Zotlabs\\Web\\Controller","title":"Zotfeed"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Zotfeed/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/","text":"Account_edit Full name: \\Zotlabs\\Module\\Admin\\Account_edit Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Account_edit"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#account_edit","text":"Full name: \\Zotlabs\\Module\\Admin\\Account_edit","title":"Account_edit"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Account_edit/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/","text":"Accounts Full name: \\Zotlabs\\Module\\Admin\\Accounts Constants Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0' Methods post Handle POST actions on accounts admin page. public post(): mixed get public get(): string handle_ajax_request private handle_ajax_request(): void block_unblock_accounts Block or unblock accounts given by the user and blocked POST params. private block_unblock_accounts(): void The post params user and blocked must be present and arrays of equal lengths. The user array should contain account id's or the accounts to process, and the blocked array holds a corresponding boolean value to indicate that the account at the same offset in the user array is or is not blocked. An account that is not blocked will be blocked, and accounts that are blocked will be unblocked. delete_accounts Delete multiple accounts given by the user POST param. private delete_accounts(): void Automatically generated on 2025-03-15","title":"Accounts"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#accounts","text":"Full name: \\Zotlabs\\Module\\Admin\\Accounts","title":"Accounts"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#constants","text":"Constant Visibility Type Value MYP public 'ZAR' VERSION public '2.0.0'","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#post","text":"Handle POST actions on accounts admin page. public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#get","text":"public get(): string","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#handle_ajax_request","text":"private handle_ajax_request(): void","title":"handle_ajax_request"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#block_unblock_accounts","text":"Block or unblock accounts given by the user and blocked POST params. private block_unblock_accounts(): void The post params user and blocked must be present and arrays of equal lengths. The user array should contain account id's or the accounts to process, and the blocked array holds a corresponding boolean value to indicate that the account at the same offset in the user array is or is not blocked. An account that is not blocked will be blocked, and accounts that are blocked will be unblocked.","title":"block_unblock_accounts"},{"location":"dev/classes/Zotlabs/Module/Admin/Accounts/#delete_accounts","text":"Delete multiple accounts given by the user POST param. private delete_accounts(): void Automatically generated on 2025-03-15","title":"delete_accounts"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/","text":"Addons Full name: \\Zotlabs\\Module\\Admin\\Addons Methods post public post(): mixed get public get(): string Return Value: with parsed HTML plugin_sort public static plugin_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed Automatically generated on 2025-03-15","title":"Addons"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#addons","text":"Full name: \\Zotlabs\\Module\\Admin\\Addons","title":"Addons"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#get","text":"public get(): string Return Value: with parsed HTML","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Addons/#plugin_sort","text":"public static plugin_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed Automatically generated on 2025-03-15","title":"plugin_sort"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/","text":"Channels Full name: \\Zotlabs\\Module\\Admin\\Channels Methods post public post(): mixed get public get(): string Return Value: with parsed HTML Automatically generated on 2025-03-15","title":"Channels"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#channels","text":"Full name: \\Zotlabs\\Module\\Admin\\Channels","title":"Channels"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Channels/#get","text":"public get(): string Return Value: with parsed HTML Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/","text":"Dbsync Full name: \\Zotlabs\\Module\\Admin\\Dbsync Methods get public get(): mixed Automatically generated on 2025-03-15","title":"Dbsync"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/#dbsync","text":"Full name: \\Zotlabs\\Module\\Admin\\Dbsync","title":"Dbsync"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Dbsync/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/","text":"Features Full name: \\Zotlabs\\Module\\Admin\\Features Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Features"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#features","text":"Full name: \\Zotlabs\\Module\\Admin\\Features","title":"Features"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Features/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/","text":"Logs Full name: \\Zotlabs\\Module\\Admin\\Logs Methods post public post(): mixed get public get(): string Automatically generated on 2025-03-15","title":"Logs"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#logs","text":"Full name: \\Zotlabs\\Module\\Admin\\Logs","title":"Logs"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Logs/#get","text":"public get(): string Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/","text":"Profs Full name: \\Zotlabs\\Module\\Admin\\Profs Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Profs"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#profs","text":"Full name: \\Zotlabs\\Module\\Admin\\Profs","title":"Profs"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Profs/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/","text":"Queue Full name: \\Zotlabs\\Module\\Admin\\Queue Methods get public get(): mixed Automatically generated on 2025-03-15","title":"Queue"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/#queue","text":"Full name: \\Zotlabs\\Module\\Admin\\Queue","title":"Queue"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Queue/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/","text":"Queueworker Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Admin\\Queueworker Parent class: \\Zotlabs\\Web\\Controller Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Inherited methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Queueworker"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#queueworker","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Module\\Admin\\Queueworker Parent class: \\Zotlabs\\Web\\Controller","title":"Queueworker"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module.","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#init_1","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#post_1","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Queueworker/#get_1","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/","text":"Security Full name: \\Zotlabs\\Module\\Admin\\Security Methods post public post(): mixed get public get(): mixed trim_array_elems public trim_array_elems(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Security"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#security","text":"Full name: \\Zotlabs\\Module\\Admin\\Security","title":"Security"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#get","text":"public get(): mixed","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Security/#trim_array_elems","text":"public trim_array_elems(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"trim_array_elems"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/","text":"Site Full name: \\Zotlabs\\Module\\Admin\\Site Constants Constant Visibility Type Value regxTime34 public '/^(?:2[0-3] Properties eol private string $eol joo private string $joo wdconst public $wdconst register_duty public $register_duty isajax public $isajax jsoo public $jsoo msgbg public $msgbg error public $error msgfg public $msgfg Methods post public post(): mixed get public get(): string Return Value: with HTML duty private duty(): mixed Automatically generated on 2025-03-15","title":"Site"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#site","text":"Full name: \\Zotlabs\\Module\\Admin\\Site","title":"Site"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#constants","text":"Constant Visibility Type Value regxTime34 public '/^(?:2[0-3]","title":"Constants"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#eol","text":"private string $eol","title":"eol"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#joo","text":"private string $joo","title":"joo"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#wdconst","text":"public $wdconst","title":"wdconst"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#register_duty","text":"public $register_duty","title":"register_duty"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#isajax","text":"public $isajax","title":"isajax"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#jsoo","text":"public $jsoo","title":"jsoo"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#msgbg","text":"public $msgbg","title":"msgbg"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#error","text":"public $error","title":"error"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#msgfg","text":"public $msgfg","title":"msgfg"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#get","text":"public get(): string Return Value: with HTML","title":"get"},{"location":"dev/classes/Zotlabs/Module/Admin/Site/#duty","text":"private duty(): mixed Automatically generated on 2025-03-15","title":"duty"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/","text":"Account Full name: \\Zotlabs\\Module\\Settings\\Account Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Account"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#account","text":"Full name: \\Zotlabs\\Module\\Settings\\Account","title":"Account"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Account/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/","text":"Calendar Full name: \\Zotlabs\\Module\\Settings\\Calendar Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Calendar"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#calendar","text":"Full name: \\Zotlabs\\Module\\Settings\\Calendar","title":"Calendar"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Calendar/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/","text":"Channel Full name: \\Zotlabs\\Module\\Settings\\Channel Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Channel"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#channel","text":"Full name: \\Zotlabs\\Module\\Settings\\Channel","title":"Channel"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/","text":"Channel_home Full name: \\Zotlabs\\Module\\Settings\\Channel_home Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Channel_home"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#channel_home","text":"Full name: \\Zotlabs\\Module\\Settings\\Channel_home","title":"Channel_home"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Channel_home/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/","text":"Connections Full name: \\Zotlabs\\Module\\Settings\\Connections Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Connections"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#connections","text":"Full name: \\Zotlabs\\Module\\Settings\\Connections","title":"Connections"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Connections/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/","text":"Conversation Full name: \\Zotlabs\\Module\\Settings\\Conversation Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Conversation"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#conversation","text":"Full name: \\Zotlabs\\Module\\Settings\\Conversation","title":"Conversation"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Conversation/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/","text":"Directory Full name: \\Zotlabs\\Module\\Settings\\Directory Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Directory"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#directory","text":"Full name: \\Zotlabs\\Module\\Settings\\Directory","title":"Directory"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Directory/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/","text":"Display Full name: \\Zotlabs\\Module\\Settings\\Display Methods post public post(): mixed get public get(): mixed get_theme_config_file public get_theme_config_file(mixed $theme): mixed Parameters: Parameter Type Description $theme mixed Automatically generated on 2025-03-15","title":"Display"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#display","text":"Full name: \\Zotlabs\\Module\\Settings\\Display","title":"Display"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#get","text":"public get(): mixed","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Display/#get_theme_config_file","text":"public get_theme_config_file(mixed $theme): mixed Parameters: Parameter Type Description $theme mixed Automatically generated on 2025-03-15","title":"get_theme_config_file"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/","text":"Editor Full name: \\Zotlabs\\Module\\Settings\\Editor Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Editor"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#editor","text":"Full name: \\Zotlabs\\Module\\Settings\\Editor","title":"Editor"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Editor/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/","text":"Events Full name: \\Zotlabs\\Module\\Settings\\Events Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Events"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#events","text":"Full name: \\Zotlabs\\Module\\Settings\\Events","title":"Events"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Events/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/","text":"Featured Full name: \\Zotlabs\\Module\\Settings\\Featured Methods post public post(): mixed get public get(): mixed sortpanels public sortpanels(mixed& $s): mixed Parameters: Parameter Type Description $s mixed Automatically generated on 2025-03-15","title":"Featured"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#featured","text":"Full name: \\Zotlabs\\Module\\Settings\\Featured","title":"Featured"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#get","text":"public get(): mixed","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Featured/#sortpanels","text":"public sortpanels(mixed& $s): mixed Parameters: Parameter Type Description $s mixed Automatically generated on 2025-03-15","title":"sortpanels"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/","text":"Features Full name: \\Zotlabs\\Module\\Settings\\Features Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Features"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#features","text":"Full name: \\Zotlabs\\Module\\Settings\\Features","title":"Features"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Features/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/","text":"Manage Full name: \\Zotlabs\\Module\\Settings\\Manage Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Manage"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#manage","text":"Full name: \\Zotlabs\\Module\\Settings\\Manage","title":"Manage"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Manage/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/","text":"Multifactor Full name: \\Zotlabs\\Module\\Settings\\Multifactor Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Multifactor"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#multifactor","text":"Full name: \\Zotlabs\\Module\\Settings\\Multifactor","title":"Multifactor"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Multifactor/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/","text":"Network Full name: \\Zotlabs\\Module\\Settings\\Network Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Network"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#network","text":"Full name: \\Zotlabs\\Module\\Settings\\Network","title":"Network"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Network/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/","text":"Photos Full name: \\Zotlabs\\Module\\Settings\\Photos Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Photos"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#photos","text":"Full name: \\Zotlabs\\Module\\Settings\\Photos","title":"Photos"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Photos/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/","text":"Privacy Full name: \\Zotlabs\\Module\\Settings\\Privacy Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Privacy"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#privacy","text":"Full name: \\Zotlabs\\Module\\Settings\\Privacy","title":"Privacy"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Privacy/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/","text":"Profiles Full name: \\Zotlabs\\Module\\Settings\\Profiles Methods post public post(): mixed get public get(): mixed Automatically generated on 2025-03-15","title":"Profiles"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#profiles","text":"Full name: \\Zotlabs\\Module\\Settings\\Profiles","title":"Profiles"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#post","text":"public post(): mixed","title":"post"},{"location":"dev/classes/Zotlabs/Module/Settings/Profiles/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/","text":"PhotoDriver Full name: \\Zotlabs\\Photo\\PhotoDriver This class is an Abstract class Properties image protected resource|\\Imagick $image width protected int $width height protected int $height valid protected bool $valid type protected string $type types protected array $types Methods supportedTypes public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value. load protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed destroy protected destroy(): mixed This method is abstract . setDimensions protected setDimensions(): mixed This method is abstract . getImage public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver. doScaleImage public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed rotate public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed flip public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed cropImageRect public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure imageString public imageString(): string This method is abstract . Return Value: A Binary String. clearexif public clearexif(): mixed This method is abstract . __construct public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype __destruct public __destruct(): mixed is_valid public is_valid(): bool getWidth public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure getHeight public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure saveImage public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true getType public getType(): bool|string Return Value: False on failure, otherwise mimetype. getExt public getExt(): bool|string Return Value: False on failure, otherwise file extension. scaleImage public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void scaleImageUp public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed scaleImageSquare public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void cropImage public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() - exif public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string orient public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false save public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false storeThumbnail public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"PhotoDriver"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#photodriver","text":"Full name: \\Zotlabs\\Photo\\PhotoDriver This class is an Abstract class","title":"PhotoDriver"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#image","text":"protected resource|\\Imagick $image","title":"image"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#width","text":"protected int $width","title":"width"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#height","text":"protected int $height","title":"height"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#valid","text":"protected bool $valid","title":"valid"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#type","text":"protected string $type","title":"type"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#types","text":"protected array $types","title":"types"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#supportedtypes","text":"public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value.","title":"supportedTypes"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#load","text":"protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed","title":"load"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#destroy","text":"protected destroy(): mixed This method is abstract .","title":"destroy"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#setdimensions","text":"protected setDimensions(): mixed This method is abstract .","title":"setDimensions"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getimage","text":"public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.","title":"getImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#doscaleimage","text":"public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed","title":"doScaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#rotate","text":"public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed","title":"rotate"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#flip","text":"public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed","title":"flip"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#cropimagerect","text":"public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure","title":"cropImageRect"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#imagestring","text":"public imageString(): string This method is abstract . Return Value: A Binary String.","title":"imageString"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#clearexif","text":"public clearexif(): mixed This method is abstract .","title":"clearexif"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#__construct","text":"public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype","title":"__construct"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#__destruct","text":"public __destruct(): mixed","title":"__destruct"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#is_valid","text":"public is_valid(): bool","title":"is_valid"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getwidth","text":"public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure","title":"getWidth"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getheight","text":"public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure","title":"getHeight"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#saveimage","text":"public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true","title":"saveImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#gettype","text":"public getType(): bool|string Return Value: False on failure, otherwise mimetype.","title":"getType"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#getext","text":"public getExt(): bool|string Return Value: False on failure, otherwise file extension.","title":"getExt"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimage","text":"public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void","title":"scaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimageup","text":"public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed","title":"scaleImageUp"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#scaleimagesquare","text":"public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void","title":"scaleImageSquare"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#cropimage","text":"public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() -","title":"cropImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#exif","text":"public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string","title":"exif"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#orient","text":"public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false","title":"orient"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#save","text":"public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false","title":"save"},{"location":"dev/classes/Zotlabs/Photo/PhotoDriver/#storethumbnail","text":"public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"storeThumbnail"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/","text":"PhotoGd Full name: \\Zotlabs\\Photo\\PhotoGd Parent class: \\Zotlabs\\Photo\\PhotoDriver Methods supportedTypes public supportedTypes(): array Return Value: Associative array with mimetype as key and file extension as value. See Also: \\Zotlabs\\Photo\\PhotoDriver::supportedTypes() - load protected load(mixed $data, mixed $type): mixed Parameters: Parameter Type Description $data mixed $type mixed setDimensions protected setDimensions(): mixed clearexif public clearexif(): void destroy protected destroy(): mixed getImage public getImage(): bool|resource See Also: \\Zotlabs\\Photo\\PhotoDriver::getImage() - doScaleImage public doScaleImage(mixed $dest_width, mixed $dest_height): mixed Parameters: Parameter Type Description $dest_width mixed $dest_height mixed rotate public rotate(mixed $degrees): mixed Parameters: Parameter Type Description $degrees mixed flip public flip(mixed $horiz = true, mixed $vert = false): mixed Parameters: Parameter Type Description $horiz mixed $vert mixed cropImageRect public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void Parameters: Parameter Type Description $maxx mixed width of the new image $maxy mixed height of the new image $x mixed x-offset for region $y mixed y-offset for region $w mixed width of region $h mixed height of region Return Value: false on failure imageString public imageString(): string Return Value: A Binary String. See Also: \\Zotlabs\\Photo\\PhotoDriver::imageString() - Inherited methods supportedTypes public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value. load protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed destroy protected destroy(): mixed This method is abstract . setDimensions protected setDimensions(): mixed This method is abstract . getImage public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver. doScaleImage public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed rotate public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed flip public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed cropImageRect public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure imageString public imageString(): string This method is abstract . Return Value: A Binary String. clearexif public clearexif(): mixed This method is abstract . __construct public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype __destruct public __destruct(): mixed is_valid public is_valid(): bool getWidth public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure getHeight public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure saveImage public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true getType public getType(): bool|string Return Value: False on failure, otherwise mimetype. getExt public getExt(): bool|string Return Value: False on failure, otherwise file extension. scaleImage public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void scaleImageUp public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed scaleImageSquare public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void cropImage public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() - exif public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string orient public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false save public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false storeThumbnail public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"PhotoGd"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#photogd","text":"Full name: \\Zotlabs\\Photo\\PhotoGd Parent class: \\Zotlabs\\Photo\\PhotoDriver","title":"PhotoGd"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#supportedtypes","text":"public supportedTypes(): array Return Value: Associative array with mimetype as key and file extension as value. See Also: \\Zotlabs\\Photo\\PhotoDriver::supportedTypes() -","title":"supportedTypes"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#load","text":"protected load(mixed $data, mixed $type): mixed Parameters: Parameter Type Description $data mixed $type mixed","title":"load"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#setdimensions","text":"protected setDimensions(): mixed","title":"setDimensions"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#clearexif","text":"public clearexif(): void","title":"clearexif"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#destroy","text":"protected destroy(): mixed","title":"destroy"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getimage","text":"public getImage(): bool|resource See Also: \\Zotlabs\\Photo\\PhotoDriver::getImage() -","title":"getImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#doscaleimage","text":"public doScaleImage(mixed $dest_width, mixed $dest_height): mixed Parameters: Parameter Type Description $dest_width mixed $dest_height mixed","title":"doScaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#rotate","text":"public rotate(mixed $degrees): mixed Parameters: Parameter Type Description $degrees mixed","title":"rotate"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#flip","text":"public flip(mixed $horiz = true, mixed $vert = false): mixed Parameters: Parameter Type Description $horiz mixed $vert mixed","title":"flip"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimagerect","text":"public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void Parameters: Parameter Type Description $maxx mixed width of the new image $maxy mixed height of the new image $x mixed x-offset for region $y mixed y-offset for region $w mixed width of region $h mixed height of region Return Value: false on failure","title":"cropImageRect"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#imagestring","text":"public imageString(): string Return Value: A Binary String. See Also: \\Zotlabs\\Photo\\PhotoDriver::imageString() -","title":"imageString"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#supportedtypes_1","text":"public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value.","title":"supportedTypes"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#load_1","text":"protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed","title":"load"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#destroy_1","text":"protected destroy(): mixed This method is abstract .","title":"destroy"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#setdimensions_1","text":"protected setDimensions(): mixed This method is abstract .","title":"setDimensions"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getimage_1","text":"public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.","title":"getImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#doscaleimage_1","text":"public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed","title":"doScaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#rotate_1","text":"public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed","title":"rotate"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#flip_1","text":"public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed","title":"flip"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimagerect_1","text":"public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure","title":"cropImageRect"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#imagestring_1","text":"public imageString(): string This method is abstract . Return Value: A Binary String.","title":"imageString"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#clearexif_1","text":"public clearexif(): mixed This method is abstract .","title":"clearexif"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#__construct","text":"public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype","title":"__construct"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#__destruct","text":"public __destruct(): mixed","title":"__destruct"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#is_valid","text":"public is_valid(): bool","title":"is_valid"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getwidth","text":"public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure","title":"getWidth"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getheight","text":"public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure","title":"getHeight"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#saveimage","text":"public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true","title":"saveImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#gettype","text":"public getType(): bool|string Return Value: False on failure, otherwise mimetype.","title":"getType"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#getext","text":"public getExt(): bool|string Return Value: False on failure, otherwise file extension.","title":"getExt"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimage","text":"public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void","title":"scaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimageup","text":"public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed","title":"scaleImageUp"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#scaleimagesquare","text":"public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void","title":"scaleImageSquare"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#cropimage","text":"public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() -","title":"cropImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#exif","text":"public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string","title":"exif"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#orient","text":"public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false","title":"orient"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#save","text":"public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false","title":"save"},{"location":"dev/classes/Zotlabs/Photo/PhotoGd/#storethumbnail","text":"public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"storeThumbnail"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/","text":"PhotoImagick Full name: \\Zotlabs\\Photo\\PhotoImagick Parent class: \\Zotlabs\\Photo\\PhotoDriver Methods supportedTypes public supportedTypes(): array Return Value: Associative array with mimetype as key and file extension as value. load protected load(mixed $data, mixed $type): mixed Parameters: Parameter Type Description $data mixed $type mixed destroy protected destroy(): mixed setDimensions protected setDimensions(): mixed clearexif public clearexif(): mixed See Also: \\Zotlabs\\Photo\\PhotoDriver::clearexif() - getImage public getImage(): bool|\\Imagick See Also: \\Zotlabs\\Photo\\PhotoDriver::getImage() - doScaleImage public doScaleImage(mixed $dest_width, mixed $dest_height): mixed Parameters: Parameter Type Description $dest_width mixed $dest_height mixed rotate public rotate(mixed $degrees): mixed Parameters: Parameter Type Description $degrees mixed flip public flip(mixed $horiz = true, mixed $vert = false): mixed Parameters: Parameter Type Description $horiz mixed $vert mixed cropImageRect public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void Parameters: Parameter Type Description $maxx mixed width of the new image $maxy mixed height of the new image $x mixed x-offset for region $y mixed y-offset for region $w mixed width of region $h mixed height of region Return Value: false on failure imageString public imageString(): string Return Value: A Binary String. Inherited methods supportedTypes public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value. load protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed destroy protected destroy(): mixed This method is abstract . setDimensions protected setDimensions(): mixed This method is abstract . getImage public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver. doScaleImage public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed rotate public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed flip public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed cropImageRect public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure imageString public imageString(): string This method is abstract . Return Value: A Binary String. clearexif public clearexif(): mixed This method is abstract . __construct public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype __destruct public __destruct(): mixed is_valid public is_valid(): bool getWidth public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure getHeight public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure saveImage public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true getType public getType(): bool|string Return Value: False on failure, otherwise mimetype. getExt public getExt(): bool|string Return Value: False on failure, otherwise file extension. scaleImage public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void scaleImageUp public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed scaleImageSquare public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void cropImage public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() - exif public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string orient public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false save public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false storeThumbnail public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"PhotoImagick"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#photoimagick","text":"Full name: \\Zotlabs\\Photo\\PhotoImagick Parent class: \\Zotlabs\\Photo\\PhotoDriver","title":"PhotoImagick"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#supportedtypes","text":"public supportedTypes(): array Return Value: Associative array with mimetype as key and file extension as value.","title":"supportedTypes"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#load","text":"protected load(mixed $data, mixed $type): mixed Parameters: Parameter Type Description $data mixed $type mixed","title":"load"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#destroy","text":"protected destroy(): mixed","title":"destroy"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#setdimensions","text":"protected setDimensions(): mixed","title":"setDimensions"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#clearexif","text":"public clearexif(): mixed See Also: \\Zotlabs\\Photo\\PhotoDriver::clearexif() -","title":"clearexif"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getimage","text":"public getImage(): bool|\\Imagick See Also: \\Zotlabs\\Photo\\PhotoDriver::getImage() -","title":"getImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#doscaleimage","text":"public doScaleImage(mixed $dest_width, mixed $dest_height): mixed Parameters: Parameter Type Description $dest_width mixed $dest_height mixed","title":"doScaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#rotate","text":"public rotate(mixed $degrees): mixed Parameters: Parameter Type Description $degrees mixed","title":"rotate"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#flip","text":"public flip(mixed $horiz = true, mixed $vert = false): mixed Parameters: Parameter Type Description $horiz mixed $vert mixed","title":"flip"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimagerect","text":"public cropImageRect(mixed $maxx, mixed $maxy, mixed $x, mixed $y, mixed $w, mixed $h): bool|void Parameters: Parameter Type Description $maxx mixed width of the new image $maxy mixed height of the new image $x mixed x-offset for region $y mixed y-offset for region $w mixed width of region $h mixed height of region Return Value: false on failure","title":"cropImageRect"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#imagestring","text":"public imageString(): string Return Value: A Binary String.","title":"imageString"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#supportedtypes_1","text":"public supportedTypes(): array This method is abstract . Return Value: Associative array with mimetype as key and file extension as value.","title":"supportedTypes"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#load_1","text":"protected load(mixed $data, mixed $type): mixed This method is abstract . Parameters: Parameter Type Description $data mixed $type mixed","title":"load"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#destroy_1","text":"protected destroy(): mixed This method is abstract .","title":"destroy"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#setdimensions_1","text":"protected setDimensions(): mixed This method is abstract .","title":"setDimensions"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getimage_1","text":"public getImage(): bool|resource|\\Imagick This method is abstract . Return Value: false on failure, a PHP image resource for GD driver, an \\Imagick object for ImageMagick driver.","title":"getImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#doscaleimage_1","text":"public doScaleImage(mixed $new_width, mixed $new_height): mixed This method is abstract . Parameters: Parameter Type Description $new_width mixed $new_height mixed","title":"doScaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#rotate_1","text":"public rotate(mixed $degrees): mixed This method is abstract . Parameters: Parameter Type Description $degrees mixed","title":"rotate"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#flip_1","text":"public flip(mixed $horiz = true, mixed $vert = false): mixed This method is abstract . Parameters: Parameter Type Description $horiz mixed $vert mixed","title":"flip"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimagerect_1","text":"public cropImageRect(int $maxx, int $maxy, int $x, int $y, int $w, int $h): bool|void This method is abstract . Parameters: Parameter Type Description $maxx int width of the new image $maxy int height of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure","title":"cropImageRect"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#imagestring_1","text":"public imageString(): string This method is abstract . Return Value: A Binary String.","title":"imageString"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#clearexif_1","text":"public clearexif(): mixed This method is abstract .","title":"clearexif"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#__construct","text":"public __construct(string $data, string $type = &#039;&#039;): mixed Parameters: Parameter Type Description $data string Image $type string mimetype","title":"__construct"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#__destruct","text":"public __destruct(): mixed","title":"__destruct"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#is_valid","text":"public is_valid(): bool","title":"is_valid"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getwidth","text":"public getWidth(): bool|\\Zotlabs\\Photo\\number Return Value: Width of image in pixels, or false on failure","title":"getWidth"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getheight","text":"public getHeight(): bool|\\Zotlabs\\Photo\\number Return Value: Height of image in pixels, or false on failure","title":"getHeight"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#saveimage","text":"public saveImage(string $path): bool Parameters: Parameter Type Description $path string Path and filename where to save the image Return Value: False on failure, otherwise true","title":"saveImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#gettype","text":"public getType(): bool|string Return Value: False on failure, otherwise mimetype.","title":"getType"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#getext","text":"public getExt(): bool|string Return Value: False on failure, otherwise file extension.","title":"getExt"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimage","text":"public scaleImage(int $max, bool $float_height = true): bool|void Parameters: Parameter Type Description $max int maximum pixel size in either dimension $float_height bool (optional) If true allow height to float to any length on tall images, constraining only the width Return Value: false on failure, otherwise void","title":"scaleImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimageup","text":"public scaleImageUp(mixed $min): mixed Parameters: Parameter Type Description $min mixed","title":"scaleImageUp"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#scaleimagesquare","text":"public scaleImageSquare(int $dim): bool|void Parameters: Parameter Type Description $dim int Pixel of square image Return Value: false on failure, otherwise void","title":"scaleImageSquare"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#cropimage","text":"public cropImage(int $max, int $x, int $y, int $w, int $h): bool|void Parameters: Parameter Type Description $max int size of the new image $x int x-offset for region $y int y-offset for region $w int width of region $h int height of region Return Value: false on failure See Also: \\Zotlabs\\Photo\\cropImageRect() -","title":"cropImage"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#exif","text":"public exif(string $filename): bool|array Parameters: Parameter Type Description $filename string","title":"exif"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#orient","text":"public orient(array $exif): bool Parameters: Parameter Type Description $exif array Return Value: true if oriented, otherwise false","title":"orient"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#save","text":"public save(array $arr, bool $skipcheck = false): bool|array Parameters: Parameter Type Description $arr array $skipcheck bool (optional) default false","title":"save"},{"location":"dev/classes/Zotlabs/Photo/PhotoImagick/#storethumbnail","text":"public storeThumbnail(array $arr, mixed $scale): bool Parameters: Parameter Type Description $arr array $scale mixed Automatically generated on 2025-03-15","title":"storeThumbnail"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/","text":"SimpleTemplate Full name: \\Zotlabs\\Render\\SimpleTemplate This class implements: \\Zotlabs\\Render\\TemplateEngine Properties name public static $name This property is static . r public $r search public $search replace public $replace stack public $stack nodes public $nodes done public $done d public $d lang public $lang debug public $debug Methods _preg_error private _preg_error(): mixed _push_stack private _push_stack(): mixed _pop_stack private _pop_stack(): mixed _get_var private _get_var(mixed $name, mixed $retNoKey = false): mixed Parameters: Parameter Type Description $name mixed $retNoKey mixed _replcb_if IF node \\code {{ if <$var> }}...[{{ else }} ...] {{ endif }} {{ if <$var>== }}...[{{ else }} ...]{{ endif }} {{ if <$var>!= }}...[{{ else }} ...]{{ endif }} \\endcode private _replcb_if(mixed $args): mixed Parameters: Parameter Type Description $args mixed _replcb_for FOR node \\code {{ for <$var> as $name }}...{{ endfor }} {{ for <$var> as $key=>$name }}...{{ endfor }} \\endcode private _replcb_for(mixed $args): mixed Parameters: Parameter Type Description $args mixed _replcb_inc INC node \\code {{ inc [with $var1=$var2] }}{{ endinc }} \\endcode private _replcb_inc(mixed $args): mixed Parameters: Parameter Type Description $args mixed _replcb_debug DEBUG node \\code {{ debug $var [$var [$var [...]]] }}{{ enddebug }} \\endcode replace node with var_dump($var, $var, ...); private _replcb_debug(mixed $args): mixed Parameters: Parameter Type Description $args mixed _replcb_node private _replcb_node(mixed $m): mixed Parameters: Parameter Type Description $m mixed _replcb private _replcb(mixed $m): mixed Parameters: Parameter Type Description $m mixed _build_nodes private _build_nodes(mixed $s): mixed Parameters: Parameter Type Description $s mixed var_replace private var_replace(mixed $s): mixed Parameters: Parameter Type Description $s mixed replace private replace(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed replace_macros public replace_macros(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed get_markup_template public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"SimpleTemplate"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#simpletemplate","text":"Full name: \\Zotlabs\\Render\\SimpleTemplate This class implements: \\Zotlabs\\Render\\TemplateEngine","title":"SimpleTemplate"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#name","text":"public static $name This property is static .","title":"name"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#r","text":"public $r","title":"r"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#search","text":"public $search","title":"search"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace","text":"public $replace","title":"replace"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#stack","text":"public $stack","title":"stack"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#nodes","text":"public $nodes","title":"nodes"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#done","text":"public $done","title":"done"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#d","text":"public $d","title":"d"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#lang","text":"public $lang","title":"lang"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#debug","text":"public $debug","title":"debug"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_preg_error","text":"private _preg_error(): mixed","title":"_preg_error"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_push_stack","text":"private _push_stack(): mixed","title":"_push_stack"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_pop_stack","text":"private _pop_stack(): mixed","title":"_pop_stack"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_get_var","text":"private _get_var(mixed $name, mixed $retNoKey = false): mixed Parameters: Parameter Type Description $name mixed $retNoKey mixed","title":"_get_var"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_if","text":"IF node \\code {{ if <$var> }}...[{{ else }} ...] {{ endif }} {{ if <$var>== }}...[{{ else }} ...]{{ endif }} {{ if <$var>!= }}...[{{ else }} ...]{{ endif }} \\endcode private _replcb_if(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"_replcb_if"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_for","text":"FOR node \\code {{ for <$var> as $name }}...{{ endfor }} {{ for <$var> as $key=>$name }}...{{ endfor }} \\endcode private _replcb_for(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"_replcb_for"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_inc","text":"INC node \\code {{ inc [with $var1=$var2] }}{{ endinc }} \\endcode private _replcb_inc(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"_replcb_inc"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_debug","text":"DEBUG node \\code {{ debug $var [$var [$var [...]]] }}{{ enddebug }} \\endcode replace node with var_dump($var, $var, ...); private _replcb_debug(mixed $args): mixed Parameters: Parameter Type Description $args mixed","title":"_replcb_debug"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb_node","text":"private _replcb_node(mixed $m): mixed Parameters: Parameter Type Description $m mixed","title":"_replcb_node"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_replcb","text":"private _replcb(mixed $m): mixed Parameters: Parameter Type Description $m mixed","title":"_replcb"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#_build_nodes","text":"private _build_nodes(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"_build_nodes"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#var_replace","text":"private var_replace(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"var_replace"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace_1","text":"private replace(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed","title":"replace"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#replace_macros","text":"public replace_macros(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed","title":"replace_macros"},{"location":"dev/classes/Zotlabs/Render/SimpleTemplate/#get_markup_template","text":"public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"get_markup_template"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/","text":"SmartyInterface Full name: \\Zotlabs\\Render\\SmartyInterface Parent class: Smarty Properties filename public $filename Methods __construct public __construct(): mixed parsed public parsed(mixed $template = &#039;&#039;): mixed Parameters: Parameter Type Description $template mixed Automatically generated on 2025-03-15","title":"SmartyInterface"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#smartyinterface","text":"Full name: \\Zotlabs\\Render\\SmartyInterface Parent class: Smarty","title":"SmartyInterface"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#filename","text":"public $filename","title":"filename"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Render/SmartyInterface/#parsed","text":"public parsed(mixed $template = &#039;&#039;): mixed Parameters: Parameter Type Description $template mixed Automatically generated on 2025-03-15","title":"parsed"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/","text":"SmartyTemplate Full name: \\Zotlabs\\Render\\SmartyTemplate This class implements: \\Zotlabs\\Render\\TemplateEngine Properties name public static $name This property is static . Methods __construct public __construct(): mixed replace_macros public replace_macros(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed get_markup_template public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed get_intltext_template public get_intltext_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"SmartyTemplate"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#smartytemplate","text":"Full name: \\Zotlabs\\Render\\SmartyTemplate This class implements: \\Zotlabs\\Render\\TemplateEngine","title":"SmartyTemplate"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#name","text":"public static $name This property is static .","title":"name"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#__construct","text":"public __construct(): mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#replace_macros","text":"public replace_macros(mixed $s, mixed $r): mixed Parameters: Parameter Type Description $s mixed $r mixed","title":"replace_macros"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#get_markup_template","text":"public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed","title":"get_markup_template"},{"location":"dev/classes/Zotlabs/Render/SmartyTemplate/#get_intltext_template","text":"public get_intltext_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"get_intltext_template"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/","text":"TemplateEngine Full name: \\Zotlabs\\Render\\TemplateEngine Methods replace_macros public replace_macros(mixed $s, mixed $v): mixed Parameters: Parameter Type Description $s mixed $v mixed get_markup_template public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"TemplateEngine"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#templateengine","text":"Full name: \\Zotlabs\\Render\\TemplateEngine","title":"TemplateEngine"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#replace_macros","text":"public replace_macros(mixed $s, mixed $v): mixed Parameters: Parameter Type Description $s mixed $v mixed","title":"replace_macros"},{"location":"dev/classes/Zotlabs/Render/TemplateEngine/#get_markup_template","text":"public get_markup_template(mixed $file, mixed $root = &#039;&#039;): mixed Parameters: Parameter Type Description $file mixed $root mixed Automatically generated on 2025-03-15","title":"get_markup_template"},{"location":"dev/classes/Zotlabs/Render/Theme/","text":"Theme Full name: \\Zotlabs\\Render\\Theme Properties system_theme public static $system_theme This property is static . session_theme public static $session_theme This property is static . base_themes public static $base_themes This property is static . Methods current public static current(): array This method is static . url public static url(): string This method is static . debug public debug(): mixed Automatically generated on 2025-03-15","title":"Theme"},{"location":"dev/classes/Zotlabs/Render/Theme/#theme","text":"Full name: \\Zotlabs\\Render\\Theme","title":"Theme"},{"location":"dev/classes/Zotlabs/Render/Theme/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Render/Theme/#system_theme","text":"public static $system_theme This property is static .","title":"system_theme"},{"location":"dev/classes/Zotlabs/Render/Theme/#session_theme","text":"public static $session_theme This property is static .","title":"session_theme"},{"location":"dev/classes/Zotlabs/Render/Theme/#base_themes","text":"public static $base_themes This property is static .","title":"base_themes"},{"location":"dev/classes/Zotlabs/Render/Theme/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Render/Theme/#current","text":"public static current(): array This method is static .","title":"current"},{"location":"dev/classes/Zotlabs/Render/Theme/#url","text":"public static url(): string This method is static .","title":"url"},{"location":"dev/classes/Zotlabs/Render/Theme/#debug","text":"public debug(): mixed Automatically generated on 2025-03-15","title":"debug"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/","text":"BasicAuth Full name: \\Zotlabs\\Storage\\BasicAuth Parent class: AbstractBasic See Also: http://github.com/friendica/red - Properties channel_name protected string|null $channel_name channel_id public int $channel_id channel_account_id public int $channel_account_id channel_hash public string $channel_hash observer public string $observer browser public $browser See Also: \\Zotlabs\\Storage\\Browser::set_writeable() - owner_id public int $owner_id owner_nick channel_name of the current visited path. Set in Directory::getDir(). public string $owner_nick Used for creating the path in cloud/ timezone Timezone from the visiting channel's channel_timezone. protected string $timezone Used in @ref Browser module_disabled public $module_disabled Methods validateUserPass protected validateUserPass(string $username, string $password): bool Parameters: Parameter Type Description $username string $password string See Also: \\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::validateUserPass setAuthenticated protected setAuthenticated(mixed $channel): bool Parameters: Parameter Type Description $channel mixed check When this method is called, the backend must check if authentication was successful. public check(\\Sabre\\HTTP\\RequestInterface $request, \\Sabre\\HTTP\\ResponseInterface $response): array The returned value must be one of the following [true, \"principals/username\"] [false, \"reason for failure\"] If authentication was successful, it's expected that the authentication backend returns a so-called principal url. Examples of a principal url: principals/admin principals/user1 principals/users/joe principals/uid/123457 If you don't use WebDAV ACL (RFC3744) we recommend that you simply return a string such as: principals/users/[username] Parameters: Parameter Type Description $request \\Sabre\\HTTP\\RequestInterface $response \\Sabre\\HTTP\\ResponseInterface check_module_access protected check_module_access(mixed $channel_id): mixed Parameters: Parameter Type Description $channel_id mixed setCurrentUser Sets the channel_name from the currently logged-in channel. public setCurrentUser(string $name): mixed Parameters: Parameter Type Description $name string The channel's name getCurrentUser Returns information about the currently logged-in channel. public getCurrentUser(): string|null If nobody is currently logged in, this method should return null. See Also: \\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::getCurrentUser setTimezone public setTimezone(string $timezone): void Parameters: Parameter Type Description $timezone string The channel's timezone. getTimezone public getTimezone(): string Return Value: Return the channel's timezone. setBrowserPlugin public setBrowserPlugin(\\Sabre\\DAV\\Browser\\Plugin $browser): mixed Parameters: Parameter Type Description $browser \\Sabre\\DAV\\Browser\\Plugin See Also: \\Zotlabs\\Storage\\RedBrowser::set_writeable() - log public log(): void Automatically generated on 2025-03-15","title":"BasicAuth"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#basicauth","text":"Full name: \\Zotlabs\\Storage\\BasicAuth Parent class: AbstractBasic See Also: http://github.com/friendica/red -","title":"BasicAuth"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_name","text":"protected string|null $channel_name","title":"channel_name"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_id","text":"public int $channel_id","title":"channel_id"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_account_id","text":"public int $channel_account_id","title":"channel_account_id"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#channel_hash","text":"public string $channel_hash","title":"channel_hash"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#observer","text":"public string $observer","title":"observer"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#browser","text":"public $browser See Also: \\Zotlabs\\Storage\\Browser::set_writeable() -","title":"browser"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#owner_id","text":"public int $owner_id","title":"owner_id"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#owner_nick","text":"channel_name of the current visited path. Set in Directory::getDir(). public string $owner_nick Used for creating the path in cloud/","title":"owner_nick"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#timezone","text":"Timezone from the visiting channel's channel_timezone. protected string $timezone Used in @ref Browser","title":"timezone"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#module_disabled","text":"public $module_disabled","title":"module_disabled"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#validateuserpass","text":"protected validateUserPass(string $username, string $password): bool Parameters: Parameter Type Description $username string $password string See Also: \\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::validateUserPass","title":"validateUserPass"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setauthenticated","text":"protected setAuthenticated(mixed $channel): bool Parameters: Parameter Type Description $channel mixed","title":"setAuthenticated"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#check","text":"When this method is called, the backend must check if authentication was successful. public check(\\Sabre\\HTTP\\RequestInterface $request, \\Sabre\\HTTP\\ResponseInterface $response): array The returned value must be one of the following [true, \"principals/username\"] [false, \"reason for failure\"] If authentication was successful, it's expected that the authentication backend returns a so-called principal url. Examples of a principal url: principals/admin principals/user1 principals/users/joe principals/uid/123457 If you don't use WebDAV ACL (RFC3744) we recommend that you simply return a string such as: principals/users/[username] Parameters: Parameter Type Description $request \\Sabre\\HTTP\\RequestInterface $response \\Sabre\\HTTP\\ResponseInterface","title":"check"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#check_module_access","text":"protected check_module_access(mixed $channel_id): mixed Parameters: Parameter Type Description $channel_id mixed","title":"check_module_access"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setcurrentuser","text":"Sets the channel_name from the currently logged-in channel. public setCurrentUser(string $name): mixed Parameters: Parameter Type Description $name string The channel's name","title":"setCurrentUser"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#getcurrentuser","text":"Returns information about the currently logged-in channel. public getCurrentUser(): string|null If nobody is currently logged in, this method should return null. See Also: \\Sabre\\DAV\\Auth\\Backend\\AbstractBasic::getCurrentUser","title":"getCurrentUser"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#settimezone","text":"public setTimezone(string $timezone): void Parameters: Parameter Type Description $timezone string The channel's timezone.","title":"setTimezone"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#gettimezone","text":"public getTimezone(): string Return Value: Return the channel's timezone.","title":"getTimezone"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#setbrowserplugin","text":"public setBrowserPlugin(\\Sabre\\DAV\\Browser\\Plugin $browser): mixed Parameters: Parameter Type Description $browser \\Sabre\\DAV\\Browser\\Plugin See Also: \\Zotlabs\\Storage\\RedBrowser::set_writeable() -","title":"setBrowserPlugin"},{"location":"dev/classes/Zotlabs/Storage/BasicAuth/#log","text":"public log(): void Automatically generated on 2025-03-15","title":"log"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/","text":"CalDAVClient Full name: \\Zotlabs\\Storage\\CalDAVClient Properties username private $username password private $password url private $url filepos public $filepos request_data public $request_data Methods __construct public __construct(mixed $user, mixed $pass, mixed $url): mixed Parameters: Parameter Type Description $user mixed $pass mixed $url mixed set_data private set_data(mixed $s): mixed Parameters: Parameter Type Description $s mixed curl_read public curl_read(mixed $ch, mixed $fh, mixed $size): mixed Parameters: Parameter Type Description $ch mixed $fh mixed $size mixed ctag_fetch public ctag_fetch(): mixed detail_fetch public detail_fetch(): mixed Automatically generated on 2025-03-15","title":"CalDAVClient"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#caldavclient","text":"Full name: \\Zotlabs\\Storage\\CalDAVClient","title":"CalDAVClient"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#username","text":"private $username","title":"username"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#password","text":"private $password","title":"password"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#url","text":"private $url","title":"url"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#filepos","text":"public $filepos","title":"filepos"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#request_data","text":"public $request_data","title":"request_data"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#__construct","text":"public __construct(mixed $user, mixed $pass, mixed $url): mixed Parameters: Parameter Type Description $user mixed $pass mixed $url mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#set_data","text":"private set_data(mixed $s): mixed Parameters: Parameter Type Description $s mixed","title":"set_data"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#curl_read","text":"public curl_read(mixed $ch, mixed $fh, mixed $size): mixed Parameters: Parameter Type Description $ch mixed $fh mixed $size mixed","title":"curl_read"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#ctag_fetch","text":"public ctag_fetch(): mixed","title":"ctag_fetch"},{"location":"dev/classes/Zotlabs/Storage/CalDAVClient/#detail_fetch","text":"public detail_fetch(): mixed Automatically generated on 2025-03-15","title":"detail_fetch"},{"location":"dev/classes/Zotlabs/Storage/Directory/","text":"Directory Full name: \\Zotlabs\\Storage\\Directory Parent class: Node This class implements: \\Sabre\\DAV\\ICollection , \\Sabre\\DAV\\IQuota , \\Sabre\\DAV\\IMoveTarget See Also: http://github.com/friendica/red - Properties red_path private string $red_path folder_hash public $folder_hash data public $data ext_path private string $ext_path root_dir private $root_dir auth private $auth os_path public string $os_path Methods __construct public __construct(string $ext_path, mixed $data, \\Zotlabs\\Storage\\BasicAuth& $auth_plugin): mixed Parameters: Parameter Type Description $ext_path string a full path $data mixed $auth_plugin \\Zotlabs\\Storage\\BasicAuth log private log(): mixed getChildren public getChildren(): array Return Value: \\Sabre\\DAV\\INode[] Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; getChild public getChild(string $name): mixed Parameters: Parameter Type Description $name string Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; &quot;\\Sabre\\DAV\\Exception\\NotFound&quot; getName public getName(): string setName public setName(string $name): void Parameters: Parameter Type Description $name string The new name of the directory. Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; createFile public createFile(string $name, resource|string $data = null): null|string Parameters: Parameter Type Description $name string Name of the file $data resource|string Initial payload Return Value: ETag Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; createDirectory public createDirectory(string $name): void Parameters: Parameter Type Description $name string the directory to create delete public delete(): mixed childExists public childExists(string $name): bool Parameters: Parameter Type Description $name string The name to check if it exists. moveInto public moveInto(mixed $targetName, mixed $sourcePath, \\Sabre\\DAV\\INode $sourceNode): mixed Parameters: Parameter Type Description $targetName mixed $sourcePath mixed $sourceNode \\Sabre\\DAV\\INode getDir public getDir(): void Throws: &quot;\\Sabre\\DAV\\Exception\\NotFound&quot; getLastModified public getLastModified(): int Return Value: last modification time in UNIX timestamp CollectionData public CollectionData(string $file, \\Zotlabs\\Storage\\BasicAuth& $auth): mixed Parameters: Parameter Type Description $file string path to a directory $auth \\Zotlabs\\Storage\\BasicAuth Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; &quot;\\Sabre\\DAV\\Exception\\NotFound&quot; ChannelList public ChannelList(\\Zotlabs\\Storage\\BasicAuth& $auth): array Parameters: Parameter Type Description $auth \\Zotlabs\\Storage\\BasicAuth Return Value: Directory[] FileData public FileData(string $file, \\Zotlabs\\Storage\\BasicAuth& $auth, bool $test = false): \\Zotlabs\\Storage\\File|\\Zotlabs\\Storage\\Directory|bool|null Parameters: Parameter Type Description $file string path to file or directory $auth \\Zotlabs\\Storage\\BasicAuth $test bool (optional) enable test mode Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; getQuotaInfo public getQuotaInfo(): mixed Automatically generated on 2025-03-15","title":"Directory"},{"location":"dev/classes/Zotlabs/Storage/Directory/#directory","text":"Full name: \\Zotlabs\\Storage\\Directory Parent class: Node This class implements: \\Sabre\\DAV\\ICollection , \\Sabre\\DAV\\IQuota , \\Sabre\\DAV\\IMoveTarget See Also: http://github.com/friendica/red -","title":"Directory"},{"location":"dev/classes/Zotlabs/Storage/Directory/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Storage/Directory/#red_path","text":"private string $red_path","title":"red_path"},{"location":"dev/classes/Zotlabs/Storage/Directory/#folder_hash","text":"public $folder_hash","title":"folder_hash"},{"location":"dev/classes/Zotlabs/Storage/Directory/#data","text":"public $data","title":"data"},{"location":"dev/classes/Zotlabs/Storage/Directory/#ext_path","text":"private string $ext_path","title":"ext_path"},{"location":"dev/classes/Zotlabs/Storage/Directory/#root_dir","text":"private $root_dir","title":"root_dir"},{"location":"dev/classes/Zotlabs/Storage/Directory/#auth","text":"private $auth","title":"auth"},{"location":"dev/classes/Zotlabs/Storage/Directory/#os_path","text":"public string $os_path","title":"os_path"},{"location":"dev/classes/Zotlabs/Storage/Directory/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Storage/Directory/#__construct","text":"public __construct(string $ext_path, mixed $data, \\Zotlabs\\Storage\\BasicAuth& $auth_plugin): mixed Parameters: Parameter Type Description $ext_path string a full path $data mixed $auth_plugin \\Zotlabs\\Storage\\BasicAuth","title":"__construct"},{"location":"dev/classes/Zotlabs/Storage/Directory/#log","text":"private log(): mixed","title":"log"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getchildren","text":"public getChildren(): array Return Value: \\Sabre\\DAV\\INode[] Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot;","title":"getChildren"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getchild","text":"public getChild(string $name): mixed Parameters: Parameter Type Description $name string Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; &quot;\\Sabre\\DAV\\Exception\\NotFound&quot;","title":"getChild"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getname","text":"public getName(): string","title":"getName"},{"location":"dev/classes/Zotlabs/Storage/Directory/#setname","text":"public setName(string $name): void Parameters: Parameter Type Description $name string The new name of the directory. Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot;","title":"setName"},{"location":"dev/classes/Zotlabs/Storage/Directory/#createfile","text":"public createFile(string $name, resource|string $data = null): null|string Parameters: Parameter Type Description $name string Name of the file $data resource|string Initial payload Return Value: ETag Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot;","title":"createFile"},{"location":"dev/classes/Zotlabs/Storage/Directory/#createdirectory","text":"public createDirectory(string $name): void Parameters: Parameter Type Description $name string the directory to create","title":"createDirectory"},{"location":"dev/classes/Zotlabs/Storage/Directory/#delete","text":"public delete(): mixed","title":"delete"},{"location":"dev/classes/Zotlabs/Storage/Directory/#childexists","text":"public childExists(string $name): bool Parameters: Parameter Type Description $name string The name to check if it exists.","title":"childExists"},{"location":"dev/classes/Zotlabs/Storage/Directory/#moveinto","text":"public moveInto(mixed $targetName, mixed $sourcePath, \\Sabre\\DAV\\INode $sourceNode): mixed Parameters: Parameter Type Description $targetName mixed $sourcePath mixed $sourceNode \\Sabre\\DAV\\INode","title":"moveInto"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getdir","text":"public getDir(): void Throws: &quot;\\Sabre\\DAV\\Exception\\NotFound&quot;","title":"getDir"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getlastmodified","text":"public getLastModified(): int Return Value: last modification time in UNIX timestamp","title":"getLastModified"},{"location":"dev/classes/Zotlabs/Storage/Directory/#collectiondata","text":"public CollectionData(string $file, \\Zotlabs\\Storage\\BasicAuth& $auth): mixed Parameters: Parameter Type Description $file string path to a directory $auth \\Zotlabs\\Storage\\BasicAuth Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; &quot;\\Sabre\\DAV\\Exception\\NotFound&quot;","title":"CollectionData"},{"location":"dev/classes/Zotlabs/Storage/Directory/#channellist","text":"public ChannelList(\\Zotlabs\\Storage\\BasicAuth& $auth): array Parameters: Parameter Type Description $auth \\Zotlabs\\Storage\\BasicAuth Return Value: Directory[]","title":"ChannelList"},{"location":"dev/classes/Zotlabs/Storage/Directory/#filedata","text":"public FileData(string $file, \\Zotlabs\\Storage\\BasicAuth& $auth, bool $test = false): \\Zotlabs\\Storage\\File|\\Zotlabs\\Storage\\Directory|bool|null Parameters: Parameter Type Description $file string path to file or directory $auth \\Zotlabs\\Storage\\BasicAuth $test bool (optional) enable test mode Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot;","title":"FileData"},{"location":"dev/classes/Zotlabs/Storage/Directory/#getquotainfo","text":"public getQuotaInfo(): mixed Automatically generated on 2025-03-15","title":"getQuotaInfo"},{"location":"dev/classes/Zotlabs/Storage/File/","text":"File Full name: \\Zotlabs\\Storage\\File Parent class: Node This class implements: \\Sabre\\DAV\\IFile See Also: http://github.com/friendica/red - Properties data The file from attach table. public array $data auth private $auth See Also: \\Sabre\\DAV\\Auth\\Backend\\BackendInterface name private string $name os_path public $os_path folder_hash public $folder_hash Methods __construct Sets up the node, expects a full path name. public __construct(string $name, array $data, mixed& $auth): mixed Parameters: Parameter Type Description $name string $data array from attach table $auth mixed getName public getName(): string setName public setName(string $newName): void Parameters: Parameter Type Description $newName string The new name of the file. Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; put public put(resource $data): void Parameters: Parameter Type Description $data resource get public get(): string getETag public getETag(): null|string getContentType public getContentType(): mixed getSize public getSize(): int Return Value: filesize in bytes getLastModified public getLastModified(): int Return Value: last modification time in UNIX timestamp delete public delete(): mixed Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; Automatically generated on 2025-03-15","title":"File"},{"location":"dev/classes/Zotlabs/Storage/File/#file","text":"Full name: \\Zotlabs\\Storage\\File Parent class: Node This class implements: \\Sabre\\DAV\\IFile See Also: http://github.com/friendica/red -","title":"File"},{"location":"dev/classes/Zotlabs/Storage/File/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Storage/File/#data","text":"The file from attach table. public array $data","title":"data"},{"location":"dev/classes/Zotlabs/Storage/File/#auth","text":"private $auth See Also: \\Sabre\\DAV\\Auth\\Backend\\BackendInterface","title":"auth"},{"location":"dev/classes/Zotlabs/Storage/File/#name","text":"private string $name","title":"name"},{"location":"dev/classes/Zotlabs/Storage/File/#os_path","text":"public $os_path","title":"os_path"},{"location":"dev/classes/Zotlabs/Storage/File/#folder_hash","text":"public $folder_hash","title":"folder_hash"},{"location":"dev/classes/Zotlabs/Storage/File/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Storage/File/#__construct","text":"Sets up the node, expects a full path name. public __construct(string $name, array $data, mixed& $auth): mixed Parameters: Parameter Type Description $name string $data array from attach table $auth mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Storage/File/#getname","text":"public getName(): string","title":"getName"},{"location":"dev/classes/Zotlabs/Storage/File/#setname","text":"public setName(string $newName): void Parameters: Parameter Type Description $newName string The new name of the file. Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot;","title":"setName"},{"location":"dev/classes/Zotlabs/Storage/File/#put","text":"public put(resource $data): void Parameters: Parameter Type Description $data resource","title":"put"},{"location":"dev/classes/Zotlabs/Storage/File/#get","text":"public get(): string","title":"get"},{"location":"dev/classes/Zotlabs/Storage/File/#getetag","text":"public getETag(): null|string","title":"getETag"},{"location":"dev/classes/Zotlabs/Storage/File/#getcontenttype","text":"public getContentType(): mixed","title":"getContentType"},{"location":"dev/classes/Zotlabs/Storage/File/#getsize","text":"public getSize(): int Return Value: filesize in bytes","title":"getSize"},{"location":"dev/classes/Zotlabs/Storage/File/#getlastmodified","text":"public getLastModified(): int Return Value: last modification time in UNIX timestamp","title":"getLastModified"},{"location":"dev/classes/Zotlabs/Storage/File/#delete","text":"public delete(): mixed Throws: &quot;\\Sabre\\DAV\\Exception\\Forbidden&quot; Automatically generated on 2025-03-15","title":"delete"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/","text":"ZotOauth2Pdo Full name: \\Zotlabs\\Storage\\ZotOauth2Pdo Parent class: Pdo Methods getConfig public getConfig(): mixed Automatically generated on 2025-03-15","title":"ZotOauth2Pdo"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/#zotoauth2pdo","text":"Full name: \\Zotlabs\\Storage\\ZotOauth2Pdo Parent class: Pdo","title":"ZotOauth2Pdo"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Storage/ZotOauth2Pdo/#getconfig","text":"public getConfig(): mixed Automatically generated on 2025-03-15","title":"getConfig"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/","text":"Tagadelic Full name: \\Zotlabs\\Text\\Tagadelic Methods calc public static calc(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed tags_sort public static tags_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed Automatically generated on 2025-03-15","title":"Tagadelic"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#tagadelic","text":"Full name: \\Zotlabs\\Text\\Tagadelic","title":"Tagadelic"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#calc","text":"public static calc(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"calc"},{"location":"dev/classes/Zotlabs/Text/Tagadelic/#tags_sort","text":"public static tags_sort(mixed $a, mixed $b): mixed This method is static . Parameters: Parameter Type Description $a mixed $b mixed Automatically generated on 2025-03-15","title":"tags_sort"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/","text":"Epubthumb Thumbnail creation for epub files. Full name: \\Zotlabs\\Thumbs\\Epubthumb Methods Match Match for application/epub+zip. public Match(string $type): bool Parameters: Parameter Type Description $type string MimeType Thumb Create the thumbnail if the Epub has a cover. public Thumb(array $attach, \\Zotlabs\\Thumbs\\number $preview_style, \\Zotlabs\\Thumbs\\number $height = 300, \\Zotlabs\\Thumbs\\number $width = 300): mixed Parameters: Parameter Type Description $attach array $preview_style \\Zotlabs\\Thumbs\\number unused $height \\Zotlabs\\Thumbs\\number (optional) default 300 $width \\Zotlabs\\Thumbs\\number (optional) default 300 getCover private getCover(string $filename): \\GdImage|false Parameters: Parameter Type Description $filename string Automatically generated on 2025-03-15","title":"Epubthumb"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#epubthumb","text":"Thumbnail creation for epub files. Full name: \\Zotlabs\\Thumbs\\Epubthumb","title":"Epubthumb"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#match","text":"Match for application/epub+zip. public Match(string $type): bool Parameters: Parameter Type Description $type string MimeType","title":"Match"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#thumb","text":"Create the thumbnail if the Epub has a cover. public Thumb(array $attach, \\Zotlabs\\Thumbs\\number $preview_style, \\Zotlabs\\Thumbs\\number $height = 300, \\Zotlabs\\Thumbs\\number $width = 300): mixed Parameters: Parameter Type Description $attach array $preview_style \\Zotlabs\\Thumbs\\number unused $height \\Zotlabs\\Thumbs\\number (optional) default 300 $width \\Zotlabs\\Thumbs\\number (optional) default 300","title":"Thumb"},{"location":"dev/classes/Zotlabs/Thumbs/Epubthumb/#getcover","text":"private getCover(string $filename): \\GdImage|false Parameters: Parameter Type Description $filename string Automatically generated on 2025-03-15","title":"getCover"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/","text":"Mp3audio Full name: \\Zotlabs\\Thumbs\\Mp3audio Methods Match public Match(mixed $type): mixed Parameters: Parameter Type Description $type mixed Thumb public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Mp3audio"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#mp3audio","text":"Full name: \\Zotlabs\\Thumbs\\Mp3audio","title":"Mp3audio"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#match","text":"public Match(mixed $type): mixed Parameters: Parameter Type Description $type mixed","title":"Match"},{"location":"dev/classes/Zotlabs/Thumbs/Mp3audio/#thumb","text":"public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Thumb"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/","text":"Pdf Full name: \\Zotlabs\\Thumbs\\Pdf Methods Match public Match(mixed $type): mixed Parameters: Parameter Type Description $type mixed Thumb public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Pdf"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#pdf","text":"Full name: \\Zotlabs\\Thumbs\\Pdf","title":"Pdf"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#match","text":"public Match(mixed $type): mixed Parameters: Parameter Type Description $type mixed","title":"Match"},{"location":"dev/classes/Zotlabs/Thumbs/Pdf/#thumb","text":"public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Thumb"},{"location":"dev/classes/Zotlabs/Thumbs/Text/","text":"Text Full name: \\Zotlabs\\Thumbs\\Text Methods MatchDefault public MatchDefault(mixed $type): mixed Parameters: Parameter Type Description $type mixed Thumb public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Text"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#text","text":"Full name: \\Zotlabs\\Thumbs\\Text","title":"Text"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#matchdefault","text":"public MatchDefault(mixed $type): mixed Parameters: Parameter Type Description $type mixed","title":"MatchDefault"},{"location":"dev/classes/Zotlabs/Thumbs/Text/#thumb","text":"public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Thumb"},{"location":"dev/classes/Zotlabs/Thumbs/Video/","text":"Video Full name: \\Zotlabs\\Thumbs\\Video Methods MatchDefault public MatchDefault(mixed $type): mixed Parameters: Parameter Type Description $type mixed Thumb public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Video"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#video","text":"Full name: \\Zotlabs\\Thumbs\\Video","title":"Video"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#matchdefault","text":"public MatchDefault(mixed $type): mixed Parameters: Parameter Type Description $type mixed","title":"MatchDefault"},{"location":"dev/classes/Zotlabs/Thumbs/Video/#thumb","text":"public Thumb(mixed $attach, mixed $preview_style, mixed $height = 300, mixed $width = 300): mixed Parameters: Parameter Type Description $attach mixed $preview_style mixed $height mixed $width mixed Automatically generated on 2025-03-15","title":"Thumb"},{"location":"dev/classes/Zotlabs/Update/_1000/","text":"_1000 Full name: \\Zotlabs\\Update\\_1000 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1000"},{"location":"dev/classes/Zotlabs/Update/_1000/#_1000","text":"Full name: \\Zotlabs\\Update\\_1000","title":"_1000"},{"location":"dev/classes/Zotlabs/Update/_1000/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1000/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1001/","text":"_1001 Full name: \\Zotlabs\\Update\\_1001 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1001"},{"location":"dev/classes/Zotlabs/Update/_1001/#_1001","text":"Full name: \\Zotlabs\\Update\\_1001","title":"_1001"},{"location":"dev/classes/Zotlabs/Update/_1001/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1001/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1002/","text":"_1002 Full name: \\Zotlabs\\Update\\_1002 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1002"},{"location":"dev/classes/Zotlabs/Update/_1002/#_1002","text":"Full name: \\Zotlabs\\Update\\_1002","title":"_1002"},{"location":"dev/classes/Zotlabs/Update/_1002/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1002/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1003/","text":"_1003 Full name: \\Zotlabs\\Update\\_1003 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1003"},{"location":"dev/classes/Zotlabs/Update/_1003/#_1003","text":"Full name: \\Zotlabs\\Update\\_1003","title":"_1003"},{"location":"dev/classes/Zotlabs/Update/_1003/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1003/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1004/","text":"_1004 Full name: \\Zotlabs\\Update\\_1004 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1004"},{"location":"dev/classes/Zotlabs/Update/_1004/#_1004","text":"Full name: \\Zotlabs\\Update\\_1004","title":"_1004"},{"location":"dev/classes/Zotlabs/Update/_1004/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1004/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1005/","text":"_1005 Full name: \\Zotlabs\\Update\\_1005 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1005"},{"location":"dev/classes/Zotlabs/Update/_1005/#_1005","text":"Full name: \\Zotlabs\\Update\\_1005","title":"_1005"},{"location":"dev/classes/Zotlabs/Update/_1005/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1005/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1006/","text":"_1006 Full name: \\Zotlabs\\Update\\_1006 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1006"},{"location":"dev/classes/Zotlabs/Update/_1006/#_1006","text":"Full name: \\Zotlabs\\Update\\_1006","title":"_1006"},{"location":"dev/classes/Zotlabs/Update/_1006/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1006/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1007/","text":"_1007 Full name: \\Zotlabs\\Update\\_1007 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1007"},{"location":"dev/classes/Zotlabs/Update/_1007/#_1007","text":"Full name: \\Zotlabs\\Update\\_1007","title":"_1007"},{"location":"dev/classes/Zotlabs/Update/_1007/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1007/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1008/","text":"_1008 Full name: \\Zotlabs\\Update\\_1008 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1008"},{"location":"dev/classes/Zotlabs/Update/_1008/#_1008","text":"Full name: \\Zotlabs\\Update\\_1008","title":"_1008"},{"location":"dev/classes/Zotlabs/Update/_1008/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1008/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1009/","text":"_1009 Full name: \\Zotlabs\\Update\\_1009 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1009"},{"location":"dev/classes/Zotlabs/Update/_1009/#_1009","text":"Full name: \\Zotlabs\\Update\\_1009","title":"_1009"},{"location":"dev/classes/Zotlabs/Update/_1009/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1009/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1010/","text":"_1010 Full name: \\Zotlabs\\Update\\_1010 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1010"},{"location":"dev/classes/Zotlabs/Update/_1010/#_1010","text":"Full name: \\Zotlabs\\Update\\_1010","title":"_1010"},{"location":"dev/classes/Zotlabs/Update/_1010/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1010/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1011/","text":"_1011 Full name: \\Zotlabs\\Update\\_1011 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1011"},{"location":"dev/classes/Zotlabs/Update/_1011/#_1011","text":"Full name: \\Zotlabs\\Update\\_1011","title":"_1011"},{"location":"dev/classes/Zotlabs/Update/_1011/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1011/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1012/","text":"_1012 Full name: \\Zotlabs\\Update\\_1012 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1012"},{"location":"dev/classes/Zotlabs/Update/_1012/#_1012","text":"Full name: \\Zotlabs\\Update\\_1012","title":"_1012"},{"location":"dev/classes/Zotlabs/Update/_1012/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1012/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1013/","text":"_1013 Full name: \\Zotlabs\\Update\\_1013 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1013"},{"location":"dev/classes/Zotlabs/Update/_1013/#_1013","text":"Full name: \\Zotlabs\\Update\\_1013","title":"_1013"},{"location":"dev/classes/Zotlabs/Update/_1013/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1013/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1014/","text":"_1014 Full name: \\Zotlabs\\Update\\_1014 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1014"},{"location":"dev/classes/Zotlabs/Update/_1014/#_1014","text":"Full name: \\Zotlabs\\Update\\_1014","title":"_1014"},{"location":"dev/classes/Zotlabs/Update/_1014/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1014/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1015/","text":"_1015 Full name: \\Zotlabs\\Update\\_1015 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1015"},{"location":"dev/classes/Zotlabs/Update/_1015/#_1015","text":"Full name: \\Zotlabs\\Update\\_1015","title":"_1015"},{"location":"dev/classes/Zotlabs/Update/_1015/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1015/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1016/","text":"_1016 Full name: \\Zotlabs\\Update\\_1016 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1016"},{"location":"dev/classes/Zotlabs/Update/_1016/#_1016","text":"Full name: \\Zotlabs\\Update\\_1016","title":"_1016"},{"location":"dev/classes/Zotlabs/Update/_1016/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1016/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1017/","text":"_1017 Full name: \\Zotlabs\\Update\\_1017 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1017"},{"location":"dev/classes/Zotlabs/Update/_1017/#_1017","text":"Full name: \\Zotlabs\\Update\\_1017","title":"_1017"},{"location":"dev/classes/Zotlabs/Update/_1017/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1017/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1018/","text":"_1018 Full name: \\Zotlabs\\Update\\_1018 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1018"},{"location":"dev/classes/Zotlabs/Update/_1018/#_1018","text":"Full name: \\Zotlabs\\Update\\_1018","title":"_1018"},{"location":"dev/classes/Zotlabs/Update/_1018/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1018/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1019/","text":"_1019 Full name: \\Zotlabs\\Update\\_1019 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1019"},{"location":"dev/classes/Zotlabs/Update/_1019/#_1019","text":"Full name: \\Zotlabs\\Update\\_1019","title":"_1019"},{"location":"dev/classes/Zotlabs/Update/_1019/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1019/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1020/","text":"_1020 Full name: \\Zotlabs\\Update\\_1020 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1020"},{"location":"dev/classes/Zotlabs/Update/_1020/#_1020","text":"Full name: \\Zotlabs\\Update\\_1020","title":"_1020"},{"location":"dev/classes/Zotlabs/Update/_1020/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1020/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1021/","text":"_1021 Full name: \\Zotlabs\\Update\\_1021 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1021"},{"location":"dev/classes/Zotlabs/Update/_1021/#_1021","text":"Full name: \\Zotlabs\\Update\\_1021","title":"_1021"},{"location":"dev/classes/Zotlabs/Update/_1021/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1021/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1022/","text":"_1022 Full name: \\Zotlabs\\Update\\_1022 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1022"},{"location":"dev/classes/Zotlabs/Update/_1022/#_1022","text":"Full name: \\Zotlabs\\Update\\_1022","title":"_1022"},{"location":"dev/classes/Zotlabs/Update/_1022/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1022/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1023/","text":"_1023 Full name: \\Zotlabs\\Update\\_1023 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1023"},{"location":"dev/classes/Zotlabs/Update/_1023/#_1023","text":"Full name: \\Zotlabs\\Update\\_1023","title":"_1023"},{"location":"dev/classes/Zotlabs/Update/_1023/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1023/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1024/","text":"_1024 Full name: \\Zotlabs\\Update\\_1024 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1024"},{"location":"dev/classes/Zotlabs/Update/_1024/#_1024","text":"Full name: \\Zotlabs\\Update\\_1024","title":"_1024"},{"location":"dev/classes/Zotlabs/Update/_1024/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1024/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1025/","text":"_1025 Full name: \\Zotlabs\\Update\\_1025 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1025"},{"location":"dev/classes/Zotlabs/Update/_1025/#_1025","text":"Full name: \\Zotlabs\\Update\\_1025","title":"_1025"},{"location":"dev/classes/Zotlabs/Update/_1025/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1025/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1026/","text":"_1026 Full name: \\Zotlabs\\Update\\_1026 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1026"},{"location":"dev/classes/Zotlabs/Update/_1026/#_1026","text":"Full name: \\Zotlabs\\Update\\_1026","title":"_1026"},{"location":"dev/classes/Zotlabs/Update/_1026/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1026/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1027/","text":"_1027 Full name: \\Zotlabs\\Update\\_1027 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1027"},{"location":"dev/classes/Zotlabs/Update/_1027/#_1027","text":"Full name: \\Zotlabs\\Update\\_1027","title":"_1027"},{"location":"dev/classes/Zotlabs/Update/_1027/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1027/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1028/","text":"_1028 Full name: \\Zotlabs\\Update\\_1028 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1028"},{"location":"dev/classes/Zotlabs/Update/_1028/#_1028","text":"Full name: \\Zotlabs\\Update\\_1028","title":"_1028"},{"location":"dev/classes/Zotlabs/Update/_1028/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1028/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1029/","text":"_1029 Full name: \\Zotlabs\\Update\\_1029 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1029"},{"location":"dev/classes/Zotlabs/Update/_1029/#_1029","text":"Full name: \\Zotlabs\\Update\\_1029","title":"_1029"},{"location":"dev/classes/Zotlabs/Update/_1029/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1029/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1030/","text":"_1030 Full name: \\Zotlabs\\Update\\_1030 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1030"},{"location":"dev/classes/Zotlabs/Update/_1030/#_1030","text":"Full name: \\Zotlabs\\Update\\_1030","title":"_1030"},{"location":"dev/classes/Zotlabs/Update/_1030/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1030/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1031/","text":"_1031 Full name: \\Zotlabs\\Update\\_1031 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1031"},{"location":"dev/classes/Zotlabs/Update/_1031/#_1031","text":"Full name: \\Zotlabs\\Update\\_1031","title":"_1031"},{"location":"dev/classes/Zotlabs/Update/_1031/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1031/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1032/","text":"_1032 Full name: \\Zotlabs\\Update\\_1032 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1032"},{"location":"dev/classes/Zotlabs/Update/_1032/#_1032","text":"Full name: \\Zotlabs\\Update\\_1032","title":"_1032"},{"location":"dev/classes/Zotlabs/Update/_1032/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1032/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1033/","text":"_1033 Full name: \\Zotlabs\\Update\\_1033 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1033"},{"location":"dev/classes/Zotlabs/Update/_1033/#_1033","text":"Full name: \\Zotlabs\\Update\\_1033","title":"_1033"},{"location":"dev/classes/Zotlabs/Update/_1033/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1033/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1034/","text":"_1034 Full name: \\Zotlabs\\Update\\_1034 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1034"},{"location":"dev/classes/Zotlabs/Update/_1034/#_1034","text":"Full name: \\Zotlabs\\Update\\_1034","title":"_1034"},{"location":"dev/classes/Zotlabs/Update/_1034/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1034/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1035/","text":"_1035 Full name: \\Zotlabs\\Update\\_1035 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1035"},{"location":"dev/classes/Zotlabs/Update/_1035/#_1035","text":"Full name: \\Zotlabs\\Update\\_1035","title":"_1035"},{"location":"dev/classes/Zotlabs/Update/_1035/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1035/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1036/","text":"_1036 Full name: \\Zotlabs\\Update\\_1036 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1036"},{"location":"dev/classes/Zotlabs/Update/_1036/#_1036","text":"Full name: \\Zotlabs\\Update\\_1036","title":"_1036"},{"location":"dev/classes/Zotlabs/Update/_1036/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1036/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1037/","text":"_1037 Full name: \\Zotlabs\\Update\\_1037 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1037"},{"location":"dev/classes/Zotlabs/Update/_1037/#_1037","text":"Full name: \\Zotlabs\\Update\\_1037","title":"_1037"},{"location":"dev/classes/Zotlabs/Update/_1037/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1037/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1038/","text":"_1038 Full name: \\Zotlabs\\Update\\_1038 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1038"},{"location":"dev/classes/Zotlabs/Update/_1038/#_1038","text":"Full name: \\Zotlabs\\Update\\_1038","title":"_1038"},{"location":"dev/classes/Zotlabs/Update/_1038/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1038/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1039/","text":"_1039 Full name: \\Zotlabs\\Update\\_1039 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1039"},{"location":"dev/classes/Zotlabs/Update/_1039/#_1039","text":"Full name: \\Zotlabs\\Update\\_1039","title":"_1039"},{"location":"dev/classes/Zotlabs/Update/_1039/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1039/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1040/","text":"_1040 Full name: \\Zotlabs\\Update\\_1040 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1040"},{"location":"dev/classes/Zotlabs/Update/_1040/#_1040","text":"Full name: \\Zotlabs\\Update\\_1040","title":"_1040"},{"location":"dev/classes/Zotlabs/Update/_1040/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1040/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1041/","text":"_1041 Full name: \\Zotlabs\\Update\\_1041 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1041"},{"location":"dev/classes/Zotlabs/Update/_1041/#_1041","text":"Full name: \\Zotlabs\\Update\\_1041","title":"_1041"},{"location":"dev/classes/Zotlabs/Update/_1041/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1041/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1042/","text":"_1042 Full name: \\Zotlabs\\Update\\_1042 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1042"},{"location":"dev/classes/Zotlabs/Update/_1042/#_1042","text":"Full name: \\Zotlabs\\Update\\_1042","title":"_1042"},{"location":"dev/classes/Zotlabs/Update/_1042/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1042/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1043/","text":"_1043 Full name: \\Zotlabs\\Update\\_1043 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1043"},{"location":"dev/classes/Zotlabs/Update/_1043/#_1043","text":"Full name: \\Zotlabs\\Update\\_1043","title":"_1043"},{"location":"dev/classes/Zotlabs/Update/_1043/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1043/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1044/","text":"_1044 Full name: \\Zotlabs\\Update\\_1044 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1044"},{"location":"dev/classes/Zotlabs/Update/_1044/#_1044","text":"Full name: \\Zotlabs\\Update\\_1044","title":"_1044"},{"location":"dev/classes/Zotlabs/Update/_1044/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1044/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1045/","text":"_1045 Full name: \\Zotlabs\\Update\\_1045 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1045"},{"location":"dev/classes/Zotlabs/Update/_1045/#_1045","text":"Full name: \\Zotlabs\\Update\\_1045","title":"_1045"},{"location":"dev/classes/Zotlabs/Update/_1045/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1045/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1046/","text":"_1046 Full name: \\Zotlabs\\Update\\_1046 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1046"},{"location":"dev/classes/Zotlabs/Update/_1046/#_1046","text":"Full name: \\Zotlabs\\Update\\_1046","title":"_1046"},{"location":"dev/classes/Zotlabs/Update/_1046/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1046/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1047/","text":"_1047 Full name: \\Zotlabs\\Update\\_1047 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1047"},{"location":"dev/classes/Zotlabs/Update/_1047/#_1047","text":"Full name: \\Zotlabs\\Update\\_1047","title":"_1047"},{"location":"dev/classes/Zotlabs/Update/_1047/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1047/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1048/","text":"_1048 Full name: \\Zotlabs\\Update\\_1048 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1048"},{"location":"dev/classes/Zotlabs/Update/_1048/#_1048","text":"Full name: \\Zotlabs\\Update\\_1048","title":"_1048"},{"location":"dev/classes/Zotlabs/Update/_1048/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1048/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1049/","text":"_1049 Full name: \\Zotlabs\\Update\\_1049 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1049"},{"location":"dev/classes/Zotlabs/Update/_1049/#_1049","text":"Full name: \\Zotlabs\\Update\\_1049","title":"_1049"},{"location":"dev/classes/Zotlabs/Update/_1049/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1049/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1050/","text":"_1050 Full name: \\Zotlabs\\Update\\_1050 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1050"},{"location":"dev/classes/Zotlabs/Update/_1050/#_1050","text":"Full name: \\Zotlabs\\Update\\_1050","title":"_1050"},{"location":"dev/classes/Zotlabs/Update/_1050/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1050/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1051/","text":"_1051 Full name: \\Zotlabs\\Update\\_1051 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1051"},{"location":"dev/classes/Zotlabs/Update/_1051/#_1051","text":"Full name: \\Zotlabs\\Update\\_1051","title":"_1051"},{"location":"dev/classes/Zotlabs/Update/_1051/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1051/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1052/","text":"_1052 Full name: \\Zotlabs\\Update\\_1052 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1052"},{"location":"dev/classes/Zotlabs/Update/_1052/#_1052","text":"Full name: \\Zotlabs\\Update\\_1052","title":"_1052"},{"location":"dev/classes/Zotlabs/Update/_1052/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1052/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1053/","text":"_1053 Full name: \\Zotlabs\\Update\\_1053 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1053"},{"location":"dev/classes/Zotlabs/Update/_1053/#_1053","text":"Full name: \\Zotlabs\\Update\\_1053","title":"_1053"},{"location":"dev/classes/Zotlabs/Update/_1053/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1053/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1054/","text":"_1054 Full name: \\Zotlabs\\Update\\_1054 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1054"},{"location":"dev/classes/Zotlabs/Update/_1054/#_1054","text":"Full name: \\Zotlabs\\Update\\_1054","title":"_1054"},{"location":"dev/classes/Zotlabs/Update/_1054/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1054/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1055/","text":"_1055 Full name: \\Zotlabs\\Update\\_1055 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1055"},{"location":"dev/classes/Zotlabs/Update/_1055/#_1055","text":"Full name: \\Zotlabs\\Update\\_1055","title":"_1055"},{"location":"dev/classes/Zotlabs/Update/_1055/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1055/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1056/","text":"_1056 Full name: \\Zotlabs\\Update\\_1056 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1056"},{"location":"dev/classes/Zotlabs/Update/_1056/#_1056","text":"Full name: \\Zotlabs\\Update\\_1056","title":"_1056"},{"location":"dev/classes/Zotlabs/Update/_1056/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1056/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1057/","text":"_1057 Full name: \\Zotlabs\\Update\\_1057 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1057"},{"location":"dev/classes/Zotlabs/Update/_1057/#_1057","text":"Full name: \\Zotlabs\\Update\\_1057","title":"_1057"},{"location":"dev/classes/Zotlabs/Update/_1057/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1057/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1058/","text":"_1058 Full name: \\Zotlabs\\Update\\_1058 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1058"},{"location":"dev/classes/Zotlabs/Update/_1058/#_1058","text":"Full name: \\Zotlabs\\Update\\_1058","title":"_1058"},{"location":"dev/classes/Zotlabs/Update/_1058/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1058/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1059/","text":"_1059 Full name: \\Zotlabs\\Update\\_1059 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1059"},{"location":"dev/classes/Zotlabs/Update/_1059/#_1059","text":"Full name: \\Zotlabs\\Update\\_1059","title":"_1059"},{"location":"dev/classes/Zotlabs/Update/_1059/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1059/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1060/","text":"_1060 Full name: \\Zotlabs\\Update\\_1060 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1060"},{"location":"dev/classes/Zotlabs/Update/_1060/#_1060","text":"Full name: \\Zotlabs\\Update\\_1060","title":"_1060"},{"location":"dev/classes/Zotlabs/Update/_1060/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1060/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1061/","text":"_1061 Full name: \\Zotlabs\\Update\\_1061 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1061"},{"location":"dev/classes/Zotlabs/Update/_1061/#_1061","text":"Full name: \\Zotlabs\\Update\\_1061","title":"_1061"},{"location":"dev/classes/Zotlabs/Update/_1061/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1061/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1062/","text":"_1062 Full name: \\Zotlabs\\Update\\_1062 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1062"},{"location":"dev/classes/Zotlabs/Update/_1062/#_1062","text":"Full name: \\Zotlabs\\Update\\_1062","title":"_1062"},{"location":"dev/classes/Zotlabs/Update/_1062/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1062/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1063/","text":"_1063 Full name: \\Zotlabs\\Update\\_1063 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1063"},{"location":"dev/classes/Zotlabs/Update/_1063/#_1063","text":"Full name: \\Zotlabs\\Update\\_1063","title":"_1063"},{"location":"dev/classes/Zotlabs/Update/_1063/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1063/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1064/","text":"_1064 Full name: \\Zotlabs\\Update\\_1064 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1064"},{"location":"dev/classes/Zotlabs/Update/_1064/#_1064","text":"Full name: \\Zotlabs\\Update\\_1064","title":"_1064"},{"location":"dev/classes/Zotlabs/Update/_1064/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1064/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1065/","text":"_1065 Full name: \\Zotlabs\\Update\\_1065 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1065"},{"location":"dev/classes/Zotlabs/Update/_1065/#_1065","text":"Full name: \\Zotlabs\\Update\\_1065","title":"_1065"},{"location":"dev/classes/Zotlabs/Update/_1065/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1065/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1066/","text":"_1066 Full name: \\Zotlabs\\Update\\_1066 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1066"},{"location":"dev/classes/Zotlabs/Update/_1066/#_1066","text":"Full name: \\Zotlabs\\Update\\_1066","title":"_1066"},{"location":"dev/classes/Zotlabs/Update/_1066/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1066/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1067/","text":"_1067 Full name: \\Zotlabs\\Update\\_1067 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1067"},{"location":"dev/classes/Zotlabs/Update/_1067/#_1067","text":"Full name: \\Zotlabs\\Update\\_1067","title":"_1067"},{"location":"dev/classes/Zotlabs/Update/_1067/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1067/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1068/","text":"_1068 Full name: \\Zotlabs\\Update\\_1068 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1068"},{"location":"dev/classes/Zotlabs/Update/_1068/#_1068","text":"Full name: \\Zotlabs\\Update\\_1068","title":"_1068"},{"location":"dev/classes/Zotlabs/Update/_1068/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1068/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1069/","text":"_1069 Full name: \\Zotlabs\\Update\\_1069 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1069"},{"location":"dev/classes/Zotlabs/Update/_1069/#_1069","text":"Full name: \\Zotlabs\\Update\\_1069","title":"_1069"},{"location":"dev/classes/Zotlabs/Update/_1069/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1069/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1070/","text":"_1070 Full name: \\Zotlabs\\Update\\_1070 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1070"},{"location":"dev/classes/Zotlabs/Update/_1070/#_1070","text":"Full name: \\Zotlabs\\Update\\_1070","title":"_1070"},{"location":"dev/classes/Zotlabs/Update/_1070/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1070/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1071/","text":"_1071 Full name: \\Zotlabs\\Update\\_1071 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1071"},{"location":"dev/classes/Zotlabs/Update/_1071/#_1071","text":"Full name: \\Zotlabs\\Update\\_1071","title":"_1071"},{"location":"dev/classes/Zotlabs/Update/_1071/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1071/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1072/","text":"_1072 Full name: \\Zotlabs\\Update\\_1072 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1072"},{"location":"dev/classes/Zotlabs/Update/_1072/#_1072","text":"Full name: \\Zotlabs\\Update\\_1072","title":"_1072"},{"location":"dev/classes/Zotlabs/Update/_1072/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1072/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1073/","text":"_1073 Full name: \\Zotlabs\\Update\\_1073 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1073"},{"location":"dev/classes/Zotlabs/Update/_1073/#_1073","text":"Full name: \\Zotlabs\\Update\\_1073","title":"_1073"},{"location":"dev/classes/Zotlabs/Update/_1073/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1073/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1074/","text":"_1074 Full name: \\Zotlabs\\Update\\_1074 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1074"},{"location":"dev/classes/Zotlabs/Update/_1074/#_1074","text":"Full name: \\Zotlabs\\Update\\_1074","title":"_1074"},{"location":"dev/classes/Zotlabs/Update/_1074/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1074/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1075/","text":"_1075 Full name: \\Zotlabs\\Update\\_1075 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1075"},{"location":"dev/classes/Zotlabs/Update/_1075/#_1075","text":"Full name: \\Zotlabs\\Update\\_1075","title":"_1075"},{"location":"dev/classes/Zotlabs/Update/_1075/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1075/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1076/","text":"_1076 Full name: \\Zotlabs\\Update\\_1076 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1076"},{"location":"dev/classes/Zotlabs/Update/_1076/#_1076","text":"Full name: \\Zotlabs\\Update\\_1076","title":"_1076"},{"location":"dev/classes/Zotlabs/Update/_1076/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1076/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1077/","text":"_1077 Full name: \\Zotlabs\\Update\\_1077 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1077"},{"location":"dev/classes/Zotlabs/Update/_1077/#_1077","text":"Full name: \\Zotlabs\\Update\\_1077","title":"_1077"},{"location":"dev/classes/Zotlabs/Update/_1077/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1077/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1078/","text":"_1078 Full name: \\Zotlabs\\Update\\_1078 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1078"},{"location":"dev/classes/Zotlabs/Update/_1078/#_1078","text":"Full name: \\Zotlabs\\Update\\_1078","title":"_1078"},{"location":"dev/classes/Zotlabs/Update/_1078/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1078/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1079/","text":"_1079 Full name: \\Zotlabs\\Update\\_1079 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1079"},{"location":"dev/classes/Zotlabs/Update/_1079/#_1079","text":"Full name: \\Zotlabs\\Update\\_1079","title":"_1079"},{"location":"dev/classes/Zotlabs/Update/_1079/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1079/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1080/","text":"_1080 Full name: \\Zotlabs\\Update\\_1080 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1080"},{"location":"dev/classes/Zotlabs/Update/_1080/#_1080","text":"Full name: \\Zotlabs\\Update\\_1080","title":"_1080"},{"location":"dev/classes/Zotlabs/Update/_1080/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1080/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1081/","text":"_1081 Full name: \\Zotlabs\\Update\\_1081 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1081"},{"location":"dev/classes/Zotlabs/Update/_1081/#_1081","text":"Full name: \\Zotlabs\\Update\\_1081","title":"_1081"},{"location":"dev/classes/Zotlabs/Update/_1081/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1081/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1082/","text":"_1082 Full name: \\Zotlabs\\Update\\_1082 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1082"},{"location":"dev/classes/Zotlabs/Update/_1082/#_1082","text":"Full name: \\Zotlabs\\Update\\_1082","title":"_1082"},{"location":"dev/classes/Zotlabs/Update/_1082/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1082/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1083/","text":"_1083 Full name: \\Zotlabs\\Update\\_1083 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1083"},{"location":"dev/classes/Zotlabs/Update/_1083/#_1083","text":"Full name: \\Zotlabs\\Update\\_1083","title":"_1083"},{"location":"dev/classes/Zotlabs/Update/_1083/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1083/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1084/","text":"_1084 Full name: \\Zotlabs\\Update\\_1084 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1084"},{"location":"dev/classes/Zotlabs/Update/_1084/#_1084","text":"Full name: \\Zotlabs\\Update\\_1084","title":"_1084"},{"location":"dev/classes/Zotlabs/Update/_1084/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1084/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1085/","text":"_1085 Full name: \\Zotlabs\\Update\\_1085 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1085"},{"location":"dev/classes/Zotlabs/Update/_1085/#_1085","text":"Full name: \\Zotlabs\\Update\\_1085","title":"_1085"},{"location":"dev/classes/Zotlabs/Update/_1085/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1085/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1086/","text":"_1086 Full name: \\Zotlabs\\Update\\_1086 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1086"},{"location":"dev/classes/Zotlabs/Update/_1086/#_1086","text":"Full name: \\Zotlabs\\Update\\_1086","title":"_1086"},{"location":"dev/classes/Zotlabs/Update/_1086/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1086/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1087/","text":"_1087 Full name: \\Zotlabs\\Update\\_1087 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1087"},{"location":"dev/classes/Zotlabs/Update/_1087/#_1087","text":"Full name: \\Zotlabs\\Update\\_1087","title":"_1087"},{"location":"dev/classes/Zotlabs/Update/_1087/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1087/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1088/","text":"_1088 Full name: \\Zotlabs\\Update\\_1088 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1088"},{"location":"dev/classes/Zotlabs/Update/_1088/#_1088","text":"Full name: \\Zotlabs\\Update\\_1088","title":"_1088"},{"location":"dev/classes/Zotlabs/Update/_1088/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1088/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1089/","text":"_1089 Full name: \\Zotlabs\\Update\\_1089 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1089"},{"location":"dev/classes/Zotlabs/Update/_1089/#_1089","text":"Full name: \\Zotlabs\\Update\\_1089","title":"_1089"},{"location":"dev/classes/Zotlabs/Update/_1089/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1089/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1090/","text":"_1090 Full name: \\Zotlabs\\Update\\_1090 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1090"},{"location":"dev/classes/Zotlabs/Update/_1090/#_1090","text":"Full name: \\Zotlabs\\Update\\_1090","title":"_1090"},{"location":"dev/classes/Zotlabs/Update/_1090/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1090/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1091/","text":"_1091 Full name: \\Zotlabs\\Update\\_1091 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1091"},{"location":"dev/classes/Zotlabs/Update/_1091/#_1091","text":"Full name: \\Zotlabs\\Update\\_1091","title":"_1091"},{"location":"dev/classes/Zotlabs/Update/_1091/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1091/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1092/","text":"_1092 Full name: \\Zotlabs\\Update\\_1092 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1092"},{"location":"dev/classes/Zotlabs/Update/_1092/#_1092","text":"Full name: \\Zotlabs\\Update\\_1092","title":"_1092"},{"location":"dev/classes/Zotlabs/Update/_1092/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1092/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1093/","text":"_1093 Full name: \\Zotlabs\\Update\\_1093 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1093"},{"location":"dev/classes/Zotlabs/Update/_1093/#_1093","text":"Full name: \\Zotlabs\\Update\\_1093","title":"_1093"},{"location":"dev/classes/Zotlabs/Update/_1093/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1093/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1094/","text":"_1094 Full name: \\Zotlabs\\Update\\_1094 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1094"},{"location":"dev/classes/Zotlabs/Update/_1094/#_1094","text":"Full name: \\Zotlabs\\Update\\_1094","title":"_1094"},{"location":"dev/classes/Zotlabs/Update/_1094/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1094/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1095/","text":"_1095 Full name: \\Zotlabs\\Update\\_1095 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1095"},{"location":"dev/classes/Zotlabs/Update/_1095/#_1095","text":"Full name: \\Zotlabs\\Update\\_1095","title":"_1095"},{"location":"dev/classes/Zotlabs/Update/_1095/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1095/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1096/","text":"_1096 Full name: \\Zotlabs\\Update\\_1096 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1096"},{"location":"dev/classes/Zotlabs/Update/_1096/#_1096","text":"Full name: \\Zotlabs\\Update\\_1096","title":"_1096"},{"location":"dev/classes/Zotlabs/Update/_1096/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1096/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1097/","text":"_1097 Full name: \\Zotlabs\\Update\\_1097 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1097"},{"location":"dev/classes/Zotlabs/Update/_1097/#_1097","text":"Full name: \\Zotlabs\\Update\\_1097","title":"_1097"},{"location":"dev/classes/Zotlabs/Update/_1097/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1097/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1098/","text":"_1098 Full name: \\Zotlabs\\Update\\_1098 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1098"},{"location":"dev/classes/Zotlabs/Update/_1098/#_1098","text":"Full name: \\Zotlabs\\Update\\_1098","title":"_1098"},{"location":"dev/classes/Zotlabs/Update/_1098/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1098/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1099/","text":"_1099 Full name: \\Zotlabs\\Update\\_1099 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1099"},{"location":"dev/classes/Zotlabs/Update/_1099/#_1099","text":"Full name: \\Zotlabs\\Update\\_1099","title":"_1099"},{"location":"dev/classes/Zotlabs/Update/_1099/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1099/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1100/","text":"_1100 Full name: \\Zotlabs\\Update\\_1100 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1100"},{"location":"dev/classes/Zotlabs/Update/_1100/#_1100","text":"Full name: \\Zotlabs\\Update\\_1100","title":"_1100"},{"location":"dev/classes/Zotlabs/Update/_1100/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1100/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1101/","text":"_1101 Full name: \\Zotlabs\\Update\\_1101 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1101"},{"location":"dev/classes/Zotlabs/Update/_1101/#_1101","text":"Full name: \\Zotlabs\\Update\\_1101","title":"_1101"},{"location":"dev/classes/Zotlabs/Update/_1101/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1101/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1102/","text":"_1102 Full name: \\Zotlabs\\Update\\_1102 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1102"},{"location":"dev/classes/Zotlabs/Update/_1102/#_1102","text":"Full name: \\Zotlabs\\Update\\_1102","title":"_1102"},{"location":"dev/classes/Zotlabs/Update/_1102/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1102/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1103/","text":"_1103 Full name: \\Zotlabs\\Update\\_1103 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1103"},{"location":"dev/classes/Zotlabs/Update/_1103/#_1103","text":"Full name: \\Zotlabs\\Update\\_1103","title":"_1103"},{"location":"dev/classes/Zotlabs/Update/_1103/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1103/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1104/","text":"_1104 Full name: \\Zotlabs\\Update\\_1104 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1104"},{"location":"dev/classes/Zotlabs/Update/_1104/#_1104","text":"Full name: \\Zotlabs\\Update\\_1104","title":"_1104"},{"location":"dev/classes/Zotlabs/Update/_1104/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1104/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1105/","text":"_1105 Full name: \\Zotlabs\\Update\\_1105 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1105"},{"location":"dev/classes/Zotlabs/Update/_1105/#_1105","text":"Full name: \\Zotlabs\\Update\\_1105","title":"_1105"},{"location":"dev/classes/Zotlabs/Update/_1105/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1105/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1106/","text":"_1106 Full name: \\Zotlabs\\Update\\_1106 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1106"},{"location":"dev/classes/Zotlabs/Update/_1106/#_1106","text":"Full name: \\Zotlabs\\Update\\_1106","title":"_1106"},{"location":"dev/classes/Zotlabs/Update/_1106/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1106/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1107/","text":"_1107 Full name: \\Zotlabs\\Update\\_1107 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1107"},{"location":"dev/classes/Zotlabs/Update/_1107/#_1107","text":"Full name: \\Zotlabs\\Update\\_1107","title":"_1107"},{"location":"dev/classes/Zotlabs/Update/_1107/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1107/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1108/","text":"_1108 Full name: \\Zotlabs\\Update\\_1108 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1108"},{"location":"dev/classes/Zotlabs/Update/_1108/#_1108","text":"Full name: \\Zotlabs\\Update\\_1108","title":"_1108"},{"location":"dev/classes/Zotlabs/Update/_1108/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1108/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1109/","text":"_1109 Full name: \\Zotlabs\\Update\\_1109 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1109"},{"location":"dev/classes/Zotlabs/Update/_1109/#_1109","text":"Full name: \\Zotlabs\\Update\\_1109","title":"_1109"},{"location":"dev/classes/Zotlabs/Update/_1109/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1109/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1110/","text":"_1110 Full name: \\Zotlabs\\Update\\_1110 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1110"},{"location":"dev/classes/Zotlabs/Update/_1110/#_1110","text":"Full name: \\Zotlabs\\Update\\_1110","title":"_1110"},{"location":"dev/classes/Zotlabs/Update/_1110/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1110/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1111/","text":"_1111 Full name: \\Zotlabs\\Update\\_1111 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1111"},{"location":"dev/classes/Zotlabs/Update/_1111/#_1111","text":"Full name: \\Zotlabs\\Update\\_1111","title":"_1111"},{"location":"dev/classes/Zotlabs/Update/_1111/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1111/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1112/","text":"_1112 Full name: \\Zotlabs\\Update\\_1112 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1112"},{"location":"dev/classes/Zotlabs/Update/_1112/#_1112","text":"Full name: \\Zotlabs\\Update\\_1112","title":"_1112"},{"location":"dev/classes/Zotlabs/Update/_1112/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1112/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1113/","text":"_1113 Full name: \\Zotlabs\\Update\\_1113 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1113"},{"location":"dev/classes/Zotlabs/Update/_1113/#_1113","text":"Full name: \\Zotlabs\\Update\\_1113","title":"_1113"},{"location":"dev/classes/Zotlabs/Update/_1113/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1113/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1114/","text":"_1114 Full name: \\Zotlabs\\Update\\_1114 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1114"},{"location":"dev/classes/Zotlabs/Update/_1114/#_1114","text":"Full name: \\Zotlabs\\Update\\_1114","title":"_1114"},{"location":"dev/classes/Zotlabs/Update/_1114/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1114/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1115/","text":"_1115 Full name: \\Zotlabs\\Update\\_1115 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1115"},{"location":"dev/classes/Zotlabs/Update/_1115/#_1115","text":"Full name: \\Zotlabs\\Update\\_1115","title":"_1115"},{"location":"dev/classes/Zotlabs/Update/_1115/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1115/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1116/","text":"_1116 Full name: \\Zotlabs\\Update\\_1116 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1116"},{"location":"dev/classes/Zotlabs/Update/_1116/#_1116","text":"Full name: \\Zotlabs\\Update\\_1116","title":"_1116"},{"location":"dev/classes/Zotlabs/Update/_1116/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1116/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1117/","text":"_1117 Full name: \\Zotlabs\\Update\\_1117 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1117"},{"location":"dev/classes/Zotlabs/Update/_1117/#_1117","text":"Full name: \\Zotlabs\\Update\\_1117","title":"_1117"},{"location":"dev/classes/Zotlabs/Update/_1117/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1117/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1118/","text":"_1118 Full name: \\Zotlabs\\Update\\_1118 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1118"},{"location":"dev/classes/Zotlabs/Update/_1118/#_1118","text":"Full name: \\Zotlabs\\Update\\_1118","title":"_1118"},{"location":"dev/classes/Zotlabs/Update/_1118/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1118/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1119/","text":"_1119 Full name: \\Zotlabs\\Update\\_1119 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1119"},{"location":"dev/classes/Zotlabs/Update/_1119/#_1119","text":"Full name: \\Zotlabs\\Update\\_1119","title":"_1119"},{"location":"dev/classes/Zotlabs/Update/_1119/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1119/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1120/","text":"_1120 Full name: \\Zotlabs\\Update\\_1120 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1120"},{"location":"dev/classes/Zotlabs/Update/_1120/#_1120","text":"Full name: \\Zotlabs\\Update\\_1120","title":"_1120"},{"location":"dev/classes/Zotlabs/Update/_1120/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1120/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1121/","text":"_1121 Full name: \\Zotlabs\\Update\\_1121 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1121"},{"location":"dev/classes/Zotlabs/Update/_1121/#_1121","text":"Full name: \\Zotlabs\\Update\\_1121","title":"_1121"},{"location":"dev/classes/Zotlabs/Update/_1121/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1121/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1122/","text":"_1122 Full name: \\Zotlabs\\Update\\_1122 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1122"},{"location":"dev/classes/Zotlabs/Update/_1122/#_1122","text":"Full name: \\Zotlabs\\Update\\_1122","title":"_1122"},{"location":"dev/classes/Zotlabs/Update/_1122/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1122/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1123/","text":"_1123 Full name: \\Zotlabs\\Update\\_1123 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1123"},{"location":"dev/classes/Zotlabs/Update/_1123/#_1123","text":"Full name: \\Zotlabs\\Update\\_1123","title":"_1123"},{"location":"dev/classes/Zotlabs/Update/_1123/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1123/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1124/","text":"_1124 Full name: \\Zotlabs\\Update\\_1124 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1124"},{"location":"dev/classes/Zotlabs/Update/_1124/#_1124","text":"Full name: \\Zotlabs\\Update\\_1124","title":"_1124"},{"location":"dev/classes/Zotlabs/Update/_1124/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1124/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1125/","text":"_1125 Full name: \\Zotlabs\\Update\\_1125 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1125"},{"location":"dev/classes/Zotlabs/Update/_1125/#_1125","text":"Full name: \\Zotlabs\\Update\\_1125","title":"_1125"},{"location":"dev/classes/Zotlabs/Update/_1125/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1125/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1126/","text":"_1126 Full name: \\Zotlabs\\Update\\_1126 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1126"},{"location":"dev/classes/Zotlabs/Update/_1126/#_1126","text":"Full name: \\Zotlabs\\Update\\_1126","title":"_1126"},{"location":"dev/classes/Zotlabs/Update/_1126/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1126/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1127/","text":"_1127 Full name: \\Zotlabs\\Update\\_1127 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1127"},{"location":"dev/classes/Zotlabs/Update/_1127/#_1127","text":"Full name: \\Zotlabs\\Update\\_1127","title":"_1127"},{"location":"dev/classes/Zotlabs/Update/_1127/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1127/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1128/","text":"_1128 Full name: \\Zotlabs\\Update\\_1128 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1128"},{"location":"dev/classes/Zotlabs/Update/_1128/#_1128","text":"Full name: \\Zotlabs\\Update\\_1128","title":"_1128"},{"location":"dev/classes/Zotlabs/Update/_1128/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1128/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1129/","text":"_1129 Full name: \\Zotlabs\\Update\\_1129 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1129"},{"location":"dev/classes/Zotlabs/Update/_1129/#_1129","text":"Full name: \\Zotlabs\\Update\\_1129","title":"_1129"},{"location":"dev/classes/Zotlabs/Update/_1129/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1129/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1130/","text":"_1130 Full name: \\Zotlabs\\Update\\_1130 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1130"},{"location":"dev/classes/Zotlabs/Update/_1130/#_1130","text":"Full name: \\Zotlabs\\Update\\_1130","title":"_1130"},{"location":"dev/classes/Zotlabs/Update/_1130/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1130/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1131/","text":"_1131 Full name: \\Zotlabs\\Update\\_1131 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1131"},{"location":"dev/classes/Zotlabs/Update/_1131/#_1131","text":"Full name: \\Zotlabs\\Update\\_1131","title":"_1131"},{"location":"dev/classes/Zotlabs/Update/_1131/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1131/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1132/","text":"_1132 Full name: \\Zotlabs\\Update\\_1132 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1132"},{"location":"dev/classes/Zotlabs/Update/_1132/#_1132","text":"Full name: \\Zotlabs\\Update\\_1132","title":"_1132"},{"location":"dev/classes/Zotlabs/Update/_1132/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1132/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1133/","text":"_1133 Full name: \\Zotlabs\\Update\\_1133 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1133"},{"location":"dev/classes/Zotlabs/Update/_1133/#_1133","text":"Full name: \\Zotlabs\\Update\\_1133","title":"_1133"},{"location":"dev/classes/Zotlabs/Update/_1133/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1133/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1134/","text":"_1134 Full name: \\Zotlabs\\Update\\_1134 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1134"},{"location":"dev/classes/Zotlabs/Update/_1134/#_1134","text":"Full name: \\Zotlabs\\Update\\_1134","title":"_1134"},{"location":"dev/classes/Zotlabs/Update/_1134/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1134/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1135/","text":"_1135 Full name: \\Zotlabs\\Update\\_1135 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1135"},{"location":"dev/classes/Zotlabs/Update/_1135/#_1135","text":"Full name: \\Zotlabs\\Update\\_1135","title":"_1135"},{"location":"dev/classes/Zotlabs/Update/_1135/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1135/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1136/","text":"_1136 Full name: \\Zotlabs\\Update\\_1136 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1136"},{"location":"dev/classes/Zotlabs/Update/_1136/#_1136","text":"Full name: \\Zotlabs\\Update\\_1136","title":"_1136"},{"location":"dev/classes/Zotlabs/Update/_1136/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1136/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1137/","text":"_1137 Full name: \\Zotlabs\\Update\\_1137 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1137"},{"location":"dev/classes/Zotlabs/Update/_1137/#_1137","text":"Full name: \\Zotlabs\\Update\\_1137","title":"_1137"},{"location":"dev/classes/Zotlabs/Update/_1137/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1137/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1138/","text":"_1138 Full name: \\Zotlabs\\Update\\_1138 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1138"},{"location":"dev/classes/Zotlabs/Update/_1138/#_1138","text":"Full name: \\Zotlabs\\Update\\_1138","title":"_1138"},{"location":"dev/classes/Zotlabs/Update/_1138/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1138/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1139/","text":"_1139 Full name: \\Zotlabs\\Update\\_1139 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1139"},{"location":"dev/classes/Zotlabs/Update/_1139/#_1139","text":"Full name: \\Zotlabs\\Update\\_1139","title":"_1139"},{"location":"dev/classes/Zotlabs/Update/_1139/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1139/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1140/","text":"_1140 Full name: \\Zotlabs\\Update\\_1140 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1140"},{"location":"dev/classes/Zotlabs/Update/_1140/#_1140","text":"Full name: \\Zotlabs\\Update\\_1140","title":"_1140"},{"location":"dev/classes/Zotlabs/Update/_1140/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1140/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1141/","text":"_1141 Full name: \\Zotlabs\\Update\\_1141 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1141"},{"location":"dev/classes/Zotlabs/Update/_1141/#_1141","text":"Full name: \\Zotlabs\\Update\\_1141","title":"_1141"},{"location":"dev/classes/Zotlabs/Update/_1141/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1141/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1142/","text":"_1142 Full name: \\Zotlabs\\Update\\_1142 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1142"},{"location":"dev/classes/Zotlabs/Update/_1142/#_1142","text":"Full name: \\Zotlabs\\Update\\_1142","title":"_1142"},{"location":"dev/classes/Zotlabs/Update/_1142/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1142/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1143/","text":"_1143 Full name: \\Zotlabs\\Update\\_1143 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1143"},{"location":"dev/classes/Zotlabs/Update/_1143/#_1143","text":"Full name: \\Zotlabs\\Update\\_1143","title":"_1143"},{"location":"dev/classes/Zotlabs/Update/_1143/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1143/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1144/","text":"_1144 Full name: \\Zotlabs\\Update\\_1144 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1144"},{"location":"dev/classes/Zotlabs/Update/_1144/#_1144","text":"Full name: \\Zotlabs\\Update\\_1144","title":"_1144"},{"location":"dev/classes/Zotlabs/Update/_1144/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1144/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1145/","text":"_1145 Full name: \\Zotlabs\\Update\\_1145 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1145"},{"location":"dev/classes/Zotlabs/Update/_1145/#_1145","text":"Full name: \\Zotlabs\\Update\\_1145","title":"_1145"},{"location":"dev/classes/Zotlabs/Update/_1145/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1145/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1146/","text":"_1146 Full name: \\Zotlabs\\Update\\_1146 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1146"},{"location":"dev/classes/Zotlabs/Update/_1146/#_1146","text":"Full name: \\Zotlabs\\Update\\_1146","title":"_1146"},{"location":"dev/classes/Zotlabs/Update/_1146/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1146/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1147/","text":"_1147 Full name: \\Zotlabs\\Update\\_1147 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1147"},{"location":"dev/classes/Zotlabs/Update/_1147/#_1147","text":"Full name: \\Zotlabs\\Update\\_1147","title":"_1147"},{"location":"dev/classes/Zotlabs/Update/_1147/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1147/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1148/","text":"_1148 Full name: \\Zotlabs\\Update\\_1148 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1148"},{"location":"dev/classes/Zotlabs/Update/_1148/#_1148","text":"Full name: \\Zotlabs\\Update\\_1148","title":"_1148"},{"location":"dev/classes/Zotlabs/Update/_1148/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1148/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1149/","text":"_1149 Full name: \\Zotlabs\\Update\\_1149 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1149"},{"location":"dev/classes/Zotlabs/Update/_1149/#_1149","text":"Full name: \\Zotlabs\\Update\\_1149","title":"_1149"},{"location":"dev/classes/Zotlabs/Update/_1149/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1149/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1150/","text":"_1150 Full name: \\Zotlabs\\Update\\_1150 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1150"},{"location":"dev/classes/Zotlabs/Update/_1150/#_1150","text":"Full name: \\Zotlabs\\Update\\_1150","title":"_1150"},{"location":"dev/classes/Zotlabs/Update/_1150/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1150/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1151/","text":"_1151 Full name: \\Zotlabs\\Update\\_1151 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1151"},{"location":"dev/classes/Zotlabs/Update/_1151/#_1151","text":"Full name: \\Zotlabs\\Update\\_1151","title":"_1151"},{"location":"dev/classes/Zotlabs/Update/_1151/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1151/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1152/","text":"_1152 Full name: \\Zotlabs\\Update\\_1152 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1152"},{"location":"dev/classes/Zotlabs/Update/_1152/#_1152","text":"Full name: \\Zotlabs\\Update\\_1152","title":"_1152"},{"location":"dev/classes/Zotlabs/Update/_1152/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1152/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1153/","text":"_1153 Full name: \\Zotlabs\\Update\\_1153 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1153"},{"location":"dev/classes/Zotlabs/Update/_1153/#_1153","text":"Full name: \\Zotlabs\\Update\\_1153","title":"_1153"},{"location":"dev/classes/Zotlabs/Update/_1153/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1153/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1154/","text":"_1154 Full name: \\Zotlabs\\Update\\_1154 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1154"},{"location":"dev/classes/Zotlabs/Update/_1154/#_1154","text":"Full name: \\Zotlabs\\Update\\_1154","title":"_1154"},{"location":"dev/classes/Zotlabs/Update/_1154/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1154/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1155/","text":"_1155 Full name: \\Zotlabs\\Update\\_1155 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1155"},{"location":"dev/classes/Zotlabs/Update/_1155/#_1155","text":"Full name: \\Zotlabs\\Update\\_1155","title":"_1155"},{"location":"dev/classes/Zotlabs/Update/_1155/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1155/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1156/","text":"_1156 Full name: \\Zotlabs\\Update\\_1156 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1156"},{"location":"dev/classes/Zotlabs/Update/_1156/#_1156","text":"Full name: \\Zotlabs\\Update\\_1156","title":"_1156"},{"location":"dev/classes/Zotlabs/Update/_1156/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1156/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1157/","text":"_1157 Full name: \\Zotlabs\\Update\\_1157 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1157"},{"location":"dev/classes/Zotlabs/Update/_1157/#_1157","text":"Full name: \\Zotlabs\\Update\\_1157","title":"_1157"},{"location":"dev/classes/Zotlabs/Update/_1157/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1157/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1158/","text":"_1158 Full name: \\Zotlabs\\Update\\_1158 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1158"},{"location":"dev/classes/Zotlabs/Update/_1158/#_1158","text":"Full name: \\Zotlabs\\Update\\_1158","title":"_1158"},{"location":"dev/classes/Zotlabs/Update/_1158/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1158/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1159/","text":"_1159 Full name: \\Zotlabs\\Update\\_1159 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1159"},{"location":"dev/classes/Zotlabs/Update/_1159/#_1159","text":"Full name: \\Zotlabs\\Update\\_1159","title":"_1159"},{"location":"dev/classes/Zotlabs/Update/_1159/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1159/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1160/","text":"_1160 Full name: \\Zotlabs\\Update\\_1160 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1160"},{"location":"dev/classes/Zotlabs/Update/_1160/#_1160","text":"Full name: \\Zotlabs\\Update\\_1160","title":"_1160"},{"location":"dev/classes/Zotlabs/Update/_1160/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1160/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1161/","text":"_1161 Full name: \\Zotlabs\\Update\\_1161 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1161"},{"location":"dev/classes/Zotlabs/Update/_1161/#_1161","text":"Full name: \\Zotlabs\\Update\\_1161","title":"_1161"},{"location":"dev/classes/Zotlabs/Update/_1161/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1161/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1162/","text":"_1162 Full name: \\Zotlabs\\Update\\_1162 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1162"},{"location":"dev/classes/Zotlabs/Update/_1162/#_1162","text":"Full name: \\Zotlabs\\Update\\_1162","title":"_1162"},{"location":"dev/classes/Zotlabs/Update/_1162/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1162/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1163/","text":"_1163 Full name: \\Zotlabs\\Update\\_1163 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1163"},{"location":"dev/classes/Zotlabs/Update/_1163/#_1163","text":"Full name: \\Zotlabs\\Update\\_1163","title":"_1163"},{"location":"dev/classes/Zotlabs/Update/_1163/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1163/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1164/","text":"_1164 Full name: \\Zotlabs\\Update\\_1164 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1164"},{"location":"dev/classes/Zotlabs/Update/_1164/#_1164","text":"Full name: \\Zotlabs\\Update\\_1164","title":"_1164"},{"location":"dev/classes/Zotlabs/Update/_1164/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1164/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1165/","text":"_1165 Full name: \\Zotlabs\\Update\\_1165 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1165"},{"location":"dev/classes/Zotlabs/Update/_1165/#_1165","text":"Full name: \\Zotlabs\\Update\\_1165","title":"_1165"},{"location":"dev/classes/Zotlabs/Update/_1165/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1165/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1166/","text":"_1166 Full name: \\Zotlabs\\Update\\_1166 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1166"},{"location":"dev/classes/Zotlabs/Update/_1166/#_1166","text":"Full name: \\Zotlabs\\Update\\_1166","title":"_1166"},{"location":"dev/classes/Zotlabs/Update/_1166/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1166/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1167/","text":"_1167 Full name: \\Zotlabs\\Update\\_1167 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1167"},{"location":"dev/classes/Zotlabs/Update/_1167/#_1167","text":"Full name: \\Zotlabs\\Update\\_1167","title":"_1167"},{"location":"dev/classes/Zotlabs/Update/_1167/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1167/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1168/","text":"_1168 Full name: \\Zotlabs\\Update\\_1168 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1168"},{"location":"dev/classes/Zotlabs/Update/_1168/#_1168","text":"Full name: \\Zotlabs\\Update\\_1168","title":"_1168"},{"location":"dev/classes/Zotlabs/Update/_1168/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1168/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1169/","text":"_1169 Full name: \\Zotlabs\\Update\\_1169 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1169"},{"location":"dev/classes/Zotlabs/Update/_1169/#_1169","text":"Full name: \\Zotlabs\\Update\\_1169","title":"_1169"},{"location":"dev/classes/Zotlabs/Update/_1169/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1169/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1170/","text":"_1170 Full name: \\Zotlabs\\Update\\_1170 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1170"},{"location":"dev/classes/Zotlabs/Update/_1170/#_1170","text":"Full name: \\Zotlabs\\Update\\_1170","title":"_1170"},{"location":"dev/classes/Zotlabs/Update/_1170/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1170/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1171/","text":"_1171 Full name: \\Zotlabs\\Update\\_1171 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1171"},{"location":"dev/classes/Zotlabs/Update/_1171/#_1171","text":"Full name: \\Zotlabs\\Update\\_1171","title":"_1171"},{"location":"dev/classes/Zotlabs/Update/_1171/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1171/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1172/","text":"_1172 Full name: \\Zotlabs\\Update\\_1172 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1172"},{"location":"dev/classes/Zotlabs/Update/_1172/#_1172","text":"Full name: \\Zotlabs\\Update\\_1172","title":"_1172"},{"location":"dev/classes/Zotlabs/Update/_1172/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1172/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1173/","text":"_1173 Full name: \\Zotlabs\\Update\\_1173 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1173"},{"location":"dev/classes/Zotlabs/Update/_1173/#_1173","text":"Full name: \\Zotlabs\\Update\\_1173","title":"_1173"},{"location":"dev/classes/Zotlabs/Update/_1173/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1173/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1174/","text":"_1174 Full name: \\Zotlabs\\Update\\_1174 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1174"},{"location":"dev/classes/Zotlabs/Update/_1174/#_1174","text":"Full name: \\Zotlabs\\Update\\_1174","title":"_1174"},{"location":"dev/classes/Zotlabs/Update/_1174/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1174/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1175/","text":"_1175 Full name: \\Zotlabs\\Update\\_1175 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1175"},{"location":"dev/classes/Zotlabs/Update/_1175/#_1175","text":"Full name: \\Zotlabs\\Update\\_1175","title":"_1175"},{"location":"dev/classes/Zotlabs/Update/_1175/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1175/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1176/","text":"_1176 Full name: \\Zotlabs\\Update\\_1176 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1176"},{"location":"dev/classes/Zotlabs/Update/_1176/#_1176","text":"Full name: \\Zotlabs\\Update\\_1176","title":"_1176"},{"location":"dev/classes/Zotlabs/Update/_1176/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1176/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1177/","text":"_1177 Full name: \\Zotlabs\\Update\\_1177 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1177"},{"location":"dev/classes/Zotlabs/Update/_1177/#_1177","text":"Full name: \\Zotlabs\\Update\\_1177","title":"_1177"},{"location":"dev/classes/Zotlabs/Update/_1177/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1177/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1178/","text":"_1178 Full name: \\Zotlabs\\Update\\_1178 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1178"},{"location":"dev/classes/Zotlabs/Update/_1178/#_1178","text":"Full name: \\Zotlabs\\Update\\_1178","title":"_1178"},{"location":"dev/classes/Zotlabs/Update/_1178/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1178/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1179/","text":"_1179 Full name: \\Zotlabs\\Update\\_1179 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1179"},{"location":"dev/classes/Zotlabs/Update/_1179/#_1179","text":"Full name: \\Zotlabs\\Update\\_1179","title":"_1179"},{"location":"dev/classes/Zotlabs/Update/_1179/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1179/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1180/","text":"_1180 Full name: \\Zotlabs\\Update\\_1180 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1180"},{"location":"dev/classes/Zotlabs/Update/_1180/#_1180","text":"Full name: \\Zotlabs\\Update\\_1180","title":"_1180"},{"location":"dev/classes/Zotlabs/Update/_1180/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1180/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1181/","text":"_1181 Full name: \\Zotlabs\\Update\\_1181 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1181"},{"location":"dev/classes/Zotlabs/Update/_1181/#_1181","text":"Full name: \\Zotlabs\\Update\\_1181","title":"_1181"},{"location":"dev/classes/Zotlabs/Update/_1181/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1181/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1182/","text":"_1182 Full name: \\Zotlabs\\Update\\_1182 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1182"},{"location":"dev/classes/Zotlabs/Update/_1182/#_1182","text":"Full name: \\Zotlabs\\Update\\_1182","title":"_1182"},{"location":"dev/classes/Zotlabs/Update/_1182/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1182/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1183/","text":"_1183 Full name: \\Zotlabs\\Update\\_1183 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1183"},{"location":"dev/classes/Zotlabs/Update/_1183/#_1183","text":"Full name: \\Zotlabs\\Update\\_1183","title":"_1183"},{"location":"dev/classes/Zotlabs/Update/_1183/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1183/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1184/","text":"_1184 Full name: \\Zotlabs\\Update\\_1184 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1184"},{"location":"dev/classes/Zotlabs/Update/_1184/#_1184","text":"Full name: \\Zotlabs\\Update\\_1184","title":"_1184"},{"location":"dev/classes/Zotlabs/Update/_1184/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1184/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1185/","text":"_1185 Full name: \\Zotlabs\\Update\\_1185 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1185"},{"location":"dev/classes/Zotlabs/Update/_1185/#_1185","text":"Full name: \\Zotlabs\\Update\\_1185","title":"_1185"},{"location":"dev/classes/Zotlabs/Update/_1185/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1185/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1186/","text":"_1186 Full name: \\Zotlabs\\Update\\_1186 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1186"},{"location":"dev/classes/Zotlabs/Update/_1186/#_1186","text":"Full name: \\Zotlabs\\Update\\_1186","title":"_1186"},{"location":"dev/classes/Zotlabs/Update/_1186/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1186/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1187/","text":"_1187 Full name: \\Zotlabs\\Update\\_1187 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1187"},{"location":"dev/classes/Zotlabs/Update/_1187/#_1187","text":"Full name: \\Zotlabs\\Update\\_1187","title":"_1187"},{"location":"dev/classes/Zotlabs/Update/_1187/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1187/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1188/","text":"_1188 Full name: \\Zotlabs\\Update\\_1188 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1188"},{"location":"dev/classes/Zotlabs/Update/_1188/#_1188","text":"Full name: \\Zotlabs\\Update\\_1188","title":"_1188"},{"location":"dev/classes/Zotlabs/Update/_1188/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1188/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1189/","text":"_1189 Full name: \\Zotlabs\\Update\\_1189 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1189"},{"location":"dev/classes/Zotlabs/Update/_1189/#_1189","text":"Full name: \\Zotlabs\\Update\\_1189","title":"_1189"},{"location":"dev/classes/Zotlabs/Update/_1189/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1189/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1190/","text":"_1190 Full name: \\Zotlabs\\Update\\_1190 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1190"},{"location":"dev/classes/Zotlabs/Update/_1190/#_1190","text":"Full name: \\Zotlabs\\Update\\_1190","title":"_1190"},{"location":"dev/classes/Zotlabs/Update/_1190/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1190/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1191/","text":"_1191 Full name: \\Zotlabs\\Update\\_1191 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1191"},{"location":"dev/classes/Zotlabs/Update/_1191/#_1191","text":"Full name: \\Zotlabs\\Update\\_1191","title":"_1191"},{"location":"dev/classes/Zotlabs/Update/_1191/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1191/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1192/","text":"_1192 Full name: \\Zotlabs\\Update\\_1192 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1192"},{"location":"dev/classes/Zotlabs/Update/_1192/#_1192","text":"Full name: \\Zotlabs\\Update\\_1192","title":"_1192"},{"location":"dev/classes/Zotlabs/Update/_1192/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1192/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1193/","text":"_1193 Full name: \\Zotlabs\\Update\\_1193 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1193"},{"location":"dev/classes/Zotlabs/Update/_1193/#_1193","text":"Full name: \\Zotlabs\\Update\\_1193","title":"_1193"},{"location":"dev/classes/Zotlabs/Update/_1193/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1193/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1194/","text":"_1194 Full name: \\Zotlabs\\Update\\_1194 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1194"},{"location":"dev/classes/Zotlabs/Update/_1194/#_1194","text":"Full name: \\Zotlabs\\Update\\_1194","title":"_1194"},{"location":"dev/classes/Zotlabs/Update/_1194/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1194/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1195/","text":"_1195 Full name: \\Zotlabs\\Update\\_1195 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1195"},{"location":"dev/classes/Zotlabs/Update/_1195/#_1195","text":"Full name: \\Zotlabs\\Update\\_1195","title":"_1195"},{"location":"dev/classes/Zotlabs/Update/_1195/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1195/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1196/","text":"_1196 Full name: \\Zotlabs\\Update\\_1196 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1196"},{"location":"dev/classes/Zotlabs/Update/_1196/#_1196","text":"Full name: \\Zotlabs\\Update\\_1196","title":"_1196"},{"location":"dev/classes/Zotlabs/Update/_1196/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1196/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1197/","text":"_1197 Full name: \\Zotlabs\\Update\\_1197 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1197"},{"location":"dev/classes/Zotlabs/Update/_1197/#_1197","text":"Full name: \\Zotlabs\\Update\\_1197","title":"_1197"},{"location":"dev/classes/Zotlabs/Update/_1197/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1197/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1198/","text":"_1198 Full name: \\Zotlabs\\Update\\_1198 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1198"},{"location":"dev/classes/Zotlabs/Update/_1198/#_1198","text":"Full name: \\Zotlabs\\Update\\_1198","title":"_1198"},{"location":"dev/classes/Zotlabs/Update/_1198/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1198/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1199/","text":"_1199 Full name: \\Zotlabs\\Update\\_1199 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1199"},{"location":"dev/classes/Zotlabs/Update/_1199/#_1199","text":"Full name: \\Zotlabs\\Update\\_1199","title":"_1199"},{"location":"dev/classes/Zotlabs/Update/_1199/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1199/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1200/","text":"_1200 Full name: \\Zotlabs\\Update\\_1200 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1200"},{"location":"dev/classes/Zotlabs/Update/_1200/#_1200","text":"Full name: \\Zotlabs\\Update\\_1200","title":"_1200"},{"location":"dev/classes/Zotlabs/Update/_1200/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1200/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1201/","text":"_1201 Full name: \\Zotlabs\\Update\\_1201 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1201"},{"location":"dev/classes/Zotlabs/Update/_1201/#_1201","text":"Full name: \\Zotlabs\\Update\\_1201","title":"_1201"},{"location":"dev/classes/Zotlabs/Update/_1201/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1201/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1202/","text":"_1202 Full name: \\Zotlabs\\Update\\_1202 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1202"},{"location":"dev/classes/Zotlabs/Update/_1202/#_1202","text":"Full name: \\Zotlabs\\Update\\_1202","title":"_1202"},{"location":"dev/classes/Zotlabs/Update/_1202/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1202/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1203/","text":"_1203 Full name: \\Zotlabs\\Update\\_1203 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1203"},{"location":"dev/classes/Zotlabs/Update/_1203/#_1203","text":"Full name: \\Zotlabs\\Update\\_1203","title":"_1203"},{"location":"dev/classes/Zotlabs/Update/_1203/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1203/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1204/","text":"_1204 Full name: \\Zotlabs\\Update\\_1204 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1204"},{"location":"dev/classes/Zotlabs/Update/_1204/#_1204","text":"Full name: \\Zotlabs\\Update\\_1204","title":"_1204"},{"location":"dev/classes/Zotlabs/Update/_1204/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1204/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1205/","text":"_1205 Full name: \\Zotlabs\\Update\\_1205 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1205"},{"location":"dev/classes/Zotlabs/Update/_1205/#_1205","text":"Full name: \\Zotlabs\\Update\\_1205","title":"_1205"},{"location":"dev/classes/Zotlabs/Update/_1205/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1205/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1206/","text":"_1206 Full name: \\Zotlabs\\Update\\_1206 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1206"},{"location":"dev/classes/Zotlabs/Update/_1206/#_1206","text":"Full name: \\Zotlabs\\Update\\_1206","title":"_1206"},{"location":"dev/classes/Zotlabs/Update/_1206/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1206/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1207/","text":"_1207 Full name: \\Zotlabs\\Update\\_1207 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1207"},{"location":"dev/classes/Zotlabs/Update/_1207/#_1207","text":"Full name: \\Zotlabs\\Update\\_1207","title":"_1207"},{"location":"dev/classes/Zotlabs/Update/_1207/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1207/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1208/","text":"_1208 Full name: \\Zotlabs\\Update\\_1208 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1208"},{"location":"dev/classes/Zotlabs/Update/_1208/#_1208","text":"Full name: \\Zotlabs\\Update\\_1208","title":"_1208"},{"location":"dev/classes/Zotlabs/Update/_1208/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1208/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1209/","text":"_1209 Full name: \\Zotlabs\\Update\\_1209 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1209"},{"location":"dev/classes/Zotlabs/Update/_1209/#_1209","text":"Full name: \\Zotlabs\\Update\\_1209","title":"_1209"},{"location":"dev/classes/Zotlabs/Update/_1209/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1209/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1210/","text":"_1210 Full name: \\Zotlabs\\Update\\_1210 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1210"},{"location":"dev/classes/Zotlabs/Update/_1210/#_1210","text":"Full name: \\Zotlabs\\Update\\_1210","title":"_1210"},{"location":"dev/classes/Zotlabs/Update/_1210/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1210/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1211/","text":"_1211 Full name: \\Zotlabs\\Update\\_1211 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1211"},{"location":"dev/classes/Zotlabs/Update/_1211/#_1211","text":"Full name: \\Zotlabs\\Update\\_1211","title":"_1211"},{"location":"dev/classes/Zotlabs/Update/_1211/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1211/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1212/","text":"_1212 Full name: \\Zotlabs\\Update\\_1212 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1212"},{"location":"dev/classes/Zotlabs/Update/_1212/#_1212","text":"Full name: \\Zotlabs\\Update\\_1212","title":"_1212"},{"location":"dev/classes/Zotlabs/Update/_1212/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1212/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1213/","text":"_1213 Full name: \\Zotlabs\\Update\\_1213 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1213"},{"location":"dev/classes/Zotlabs/Update/_1213/#_1213","text":"Full name: \\Zotlabs\\Update\\_1213","title":"_1213"},{"location":"dev/classes/Zotlabs/Update/_1213/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1213/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1214/","text":"_1214 Full name: \\Zotlabs\\Update\\_1214 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1214"},{"location":"dev/classes/Zotlabs/Update/_1214/#_1214","text":"Full name: \\Zotlabs\\Update\\_1214","title":"_1214"},{"location":"dev/classes/Zotlabs/Update/_1214/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1214/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1215/","text":"_1215 Full name: \\Zotlabs\\Update\\_1215 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1215"},{"location":"dev/classes/Zotlabs/Update/_1215/#_1215","text":"Full name: \\Zotlabs\\Update\\_1215","title":"_1215"},{"location":"dev/classes/Zotlabs/Update/_1215/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1215/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1216/","text":"_1216 Full name: \\Zotlabs\\Update\\_1216 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1216"},{"location":"dev/classes/Zotlabs/Update/_1216/#_1216","text":"Full name: \\Zotlabs\\Update\\_1216","title":"_1216"},{"location":"dev/classes/Zotlabs/Update/_1216/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1216/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1217/","text":"_1217 Full name: \\Zotlabs\\Update\\_1217 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1217"},{"location":"dev/classes/Zotlabs/Update/_1217/#_1217","text":"Full name: \\Zotlabs\\Update\\_1217","title":"_1217"},{"location":"dev/classes/Zotlabs/Update/_1217/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1217/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1218/","text":"_1218 Full name: \\Zotlabs\\Update\\_1218 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1218"},{"location":"dev/classes/Zotlabs/Update/_1218/#_1218","text":"Full name: \\Zotlabs\\Update\\_1218","title":"_1218"},{"location":"dev/classes/Zotlabs/Update/_1218/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1218/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1219/","text":"_1219 Full name: \\Zotlabs\\Update\\_1219 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1219"},{"location":"dev/classes/Zotlabs/Update/_1219/#_1219","text":"Full name: \\Zotlabs\\Update\\_1219","title":"_1219"},{"location":"dev/classes/Zotlabs/Update/_1219/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1219/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1220/","text":"_1220 Full name: \\Zotlabs\\Update\\_1220 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1220"},{"location":"dev/classes/Zotlabs/Update/_1220/#_1220","text":"Full name: \\Zotlabs\\Update\\_1220","title":"_1220"},{"location":"dev/classes/Zotlabs/Update/_1220/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1220/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1221/","text":"_1221 Full name: \\Zotlabs\\Update\\_1221 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1221"},{"location":"dev/classes/Zotlabs/Update/_1221/#_1221","text":"Full name: \\Zotlabs\\Update\\_1221","title":"_1221"},{"location":"dev/classes/Zotlabs/Update/_1221/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1221/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1222/","text":"_1222 Full name: \\Zotlabs\\Update\\_1222 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1222"},{"location":"dev/classes/Zotlabs/Update/_1222/#_1222","text":"Full name: \\Zotlabs\\Update\\_1222","title":"_1222"},{"location":"dev/classes/Zotlabs/Update/_1222/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1222/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1223/","text":"_1223 Full name: \\Zotlabs\\Update\\_1223 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1223"},{"location":"dev/classes/Zotlabs/Update/_1223/#_1223","text":"Full name: \\Zotlabs\\Update\\_1223","title":"_1223"},{"location":"dev/classes/Zotlabs/Update/_1223/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1223/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1224/","text":"_1224 Full name: \\Zotlabs\\Update\\_1224 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1224"},{"location":"dev/classes/Zotlabs/Update/_1224/#_1224","text":"Full name: \\Zotlabs\\Update\\_1224","title":"_1224"},{"location":"dev/classes/Zotlabs/Update/_1224/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1224/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1225/","text":"_1225 Full name: \\Zotlabs\\Update\\_1225 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1225"},{"location":"dev/classes/Zotlabs/Update/_1225/#_1225","text":"Full name: \\Zotlabs\\Update\\_1225","title":"_1225"},{"location":"dev/classes/Zotlabs/Update/_1225/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1225/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1226/","text":"_1226 Full name: \\Zotlabs\\Update\\_1226 Methods run public run(): mixed upgrade public static upgrade(): mixed This method is static . Automatically generated on 2025-03-15","title":"_1226"},{"location":"dev/classes/Zotlabs/Update/_1226/#_1226","text":"Full name: \\Zotlabs\\Update\\_1226","title":"_1226"},{"location":"dev/classes/Zotlabs/Update/_1226/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1226/#run","text":"public run(): mixed","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1226/#upgrade","text":"public static upgrade(): mixed This method is static . Automatically generated on 2025-03-15","title":"upgrade"},{"location":"dev/classes/Zotlabs/Update/_1227/","text":"_1227 Full name: \\Zotlabs\\Update\\_1227 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1227"},{"location":"dev/classes/Zotlabs/Update/_1227/#_1227","text":"Full name: \\Zotlabs\\Update\\_1227","title":"_1227"},{"location":"dev/classes/Zotlabs/Update/_1227/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1227/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1228/","text":"_1228 Full name: \\Zotlabs\\Update\\_1228 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1228"},{"location":"dev/classes/Zotlabs/Update/_1228/#_1228","text":"Full name: \\Zotlabs\\Update\\_1228","title":"_1228"},{"location":"dev/classes/Zotlabs/Update/_1228/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1228/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1229/","text":"_1229 Full name: \\Zotlabs\\Update\\_1229 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1229"},{"location":"dev/classes/Zotlabs/Update/_1229/#_1229","text":"Full name: \\Zotlabs\\Update\\_1229","title":"_1229"},{"location":"dev/classes/Zotlabs/Update/_1229/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1229/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1230/","text":"_1230 Full name: \\Zotlabs\\Update\\_1230 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1230"},{"location":"dev/classes/Zotlabs/Update/_1230/#_1230","text":"Full name: \\Zotlabs\\Update\\_1230","title":"_1230"},{"location":"dev/classes/Zotlabs/Update/_1230/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1230/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1231/","text":"_1231 Full name: \\Zotlabs\\Update\\_1231 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1231"},{"location":"dev/classes/Zotlabs/Update/_1231/#_1231","text":"Full name: \\Zotlabs\\Update\\_1231","title":"_1231"},{"location":"dev/classes/Zotlabs/Update/_1231/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1231/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1232/","text":"_1232 Full name: \\Zotlabs\\Update\\_1232 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1232"},{"location":"dev/classes/Zotlabs/Update/_1232/#_1232","text":"Full name: \\Zotlabs\\Update\\_1232","title":"_1232"},{"location":"dev/classes/Zotlabs/Update/_1232/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1232/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1233/","text":"_1233 Full name: \\Zotlabs\\Update\\_1233 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1233"},{"location":"dev/classes/Zotlabs/Update/_1233/#_1233","text":"Full name: \\Zotlabs\\Update\\_1233","title":"_1233"},{"location":"dev/classes/Zotlabs/Update/_1233/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1233/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1234/","text":"_1234 Full name: \\Zotlabs\\Update\\_1234 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1234"},{"location":"dev/classes/Zotlabs/Update/_1234/#_1234","text":"Full name: \\Zotlabs\\Update\\_1234","title":"_1234"},{"location":"dev/classes/Zotlabs/Update/_1234/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1234/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1235/","text":"_1235 Full name: \\Zotlabs\\Update\\_1235 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1235"},{"location":"dev/classes/Zotlabs/Update/_1235/#_1235","text":"Full name: \\Zotlabs\\Update\\_1235","title":"_1235"},{"location":"dev/classes/Zotlabs/Update/_1235/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1235/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1236/","text":"_1236 Full name: \\Zotlabs\\Update\\_1236 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1236"},{"location":"dev/classes/Zotlabs/Update/_1236/#_1236","text":"Full name: \\Zotlabs\\Update\\_1236","title":"_1236"},{"location":"dev/classes/Zotlabs/Update/_1236/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1236/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1237/","text":"_1237 Full name: \\Zotlabs\\Update\\_1237 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1237"},{"location":"dev/classes/Zotlabs/Update/_1237/#_1237","text":"Full name: \\Zotlabs\\Update\\_1237","title":"_1237"},{"location":"dev/classes/Zotlabs/Update/_1237/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1237/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1238/","text":"_1238 Full name: \\Zotlabs\\Update\\_1238 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1238"},{"location":"dev/classes/Zotlabs/Update/_1238/#_1238","text":"Full name: \\Zotlabs\\Update\\_1238","title":"_1238"},{"location":"dev/classes/Zotlabs/Update/_1238/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1238/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1239/","text":"_1239 Full name: \\Zotlabs\\Update\\_1239 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1239"},{"location":"dev/classes/Zotlabs/Update/_1239/#_1239","text":"Full name: \\Zotlabs\\Update\\_1239","title":"_1239"},{"location":"dev/classes/Zotlabs/Update/_1239/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1239/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1240/","text":"_1240 Full name: \\Zotlabs\\Update\\_1240 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1240"},{"location":"dev/classes/Zotlabs/Update/_1240/#_1240","text":"Full name: \\Zotlabs\\Update\\_1240","title":"_1240"},{"location":"dev/classes/Zotlabs/Update/_1240/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1240/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1241/","text":"_1241 Full name: \\Zotlabs\\Update\\_1241 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1241"},{"location":"dev/classes/Zotlabs/Update/_1241/#_1241","text":"Full name: \\Zotlabs\\Update\\_1241","title":"_1241"},{"location":"dev/classes/Zotlabs/Update/_1241/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1241/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1242/","text":"_1242 Full name: \\Zotlabs\\Update\\_1242 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1242"},{"location":"dev/classes/Zotlabs/Update/_1242/#_1242","text":"Full name: \\Zotlabs\\Update\\_1242","title":"_1242"},{"location":"dev/classes/Zotlabs/Update/_1242/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1242/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1243/","text":"_1243 Full name: \\Zotlabs\\Update\\_1243 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1243"},{"location":"dev/classes/Zotlabs/Update/_1243/#_1243","text":"Full name: \\Zotlabs\\Update\\_1243","title":"_1243"},{"location":"dev/classes/Zotlabs/Update/_1243/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1243/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1244/","text":"_1244 Full name: \\Zotlabs\\Update\\_1244 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1244"},{"location":"dev/classes/Zotlabs/Update/_1244/#_1244","text":"Full name: \\Zotlabs\\Update\\_1244","title":"_1244"},{"location":"dev/classes/Zotlabs/Update/_1244/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1244/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1245/","text":"_1245 Full name: \\Zotlabs\\Update\\_1245 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1245"},{"location":"dev/classes/Zotlabs/Update/_1245/#_1245","text":"Full name: \\Zotlabs\\Update\\_1245","title":"_1245"},{"location":"dev/classes/Zotlabs/Update/_1245/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1245/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1246/","text":"_1246 Full name: \\Zotlabs\\Update\\_1246 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1246"},{"location":"dev/classes/Zotlabs/Update/_1246/#_1246","text":"Full name: \\Zotlabs\\Update\\_1246","title":"_1246"},{"location":"dev/classes/Zotlabs/Update/_1246/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1246/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1247/","text":"_1247 Full name: \\Zotlabs\\Update\\_1247 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1247"},{"location":"dev/classes/Zotlabs/Update/_1247/#_1247","text":"Full name: \\Zotlabs\\Update\\_1247","title":"_1247"},{"location":"dev/classes/Zotlabs/Update/_1247/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1247/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1248/","text":"_1248 Full name: \\Zotlabs\\Update\\_1248 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1248"},{"location":"dev/classes/Zotlabs/Update/_1248/#_1248","text":"Full name: \\Zotlabs\\Update\\_1248","title":"_1248"},{"location":"dev/classes/Zotlabs/Update/_1248/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1248/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1249/","text":"_1249 Full name: \\Zotlabs\\Update\\_1249 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1249"},{"location":"dev/classes/Zotlabs/Update/_1249/#_1249","text":"Full name: \\Zotlabs\\Update\\_1249","title":"_1249"},{"location":"dev/classes/Zotlabs/Update/_1249/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1249/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1250/","text":"_1250 Full name: \\Zotlabs\\Update\\_1250 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1250"},{"location":"dev/classes/Zotlabs/Update/_1250/#_1250","text":"Full name: \\Zotlabs\\Update\\_1250","title":"_1250"},{"location":"dev/classes/Zotlabs/Update/_1250/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1250/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1251/","text":"_1251 Full name: \\Zotlabs\\Update\\_1251 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1251"},{"location":"dev/classes/Zotlabs/Update/_1251/#_1251","text":"Full name: \\Zotlabs\\Update\\_1251","title":"_1251"},{"location":"dev/classes/Zotlabs/Update/_1251/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1251/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1252/","text":"_1252 Full name: \\Zotlabs\\Update\\_1252 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1252"},{"location":"dev/classes/Zotlabs/Update/_1252/#_1252","text":"Full name: \\Zotlabs\\Update\\_1252","title":"_1252"},{"location":"dev/classes/Zotlabs/Update/_1252/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1252/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1253/","text":"_1253 Full name: \\Zotlabs\\Update\\_1253 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1253"},{"location":"dev/classes/Zotlabs/Update/_1253/#_1253","text":"Full name: \\Zotlabs\\Update\\_1253","title":"_1253"},{"location":"dev/classes/Zotlabs/Update/_1253/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1253/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1254/","text":"_1254 Full name: \\Zotlabs\\Update\\_1254 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1254"},{"location":"dev/classes/Zotlabs/Update/_1254/#_1254","text":"Full name: \\Zotlabs\\Update\\_1254","title":"_1254"},{"location":"dev/classes/Zotlabs/Update/_1254/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1254/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1255/","text":"_1255 Full name: \\Zotlabs\\Update\\_1255 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1255"},{"location":"dev/classes/Zotlabs/Update/_1255/#_1255","text":"Full name: \\Zotlabs\\Update\\_1255","title":"_1255"},{"location":"dev/classes/Zotlabs/Update/_1255/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1255/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1256/","text":"_1256 Full name: \\Zotlabs\\Update\\_1256 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1256"},{"location":"dev/classes/Zotlabs/Update/_1256/#_1256","text":"Full name: \\Zotlabs\\Update\\_1256","title":"_1256"},{"location":"dev/classes/Zotlabs/Update/_1256/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1256/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1257/","text":"_1257 Full name: \\Zotlabs\\Update\\_1257 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1257"},{"location":"dev/classes/Zotlabs/Update/_1257/#_1257","text":"Full name: \\Zotlabs\\Update\\_1257","title":"_1257"},{"location":"dev/classes/Zotlabs/Update/_1257/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1257/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1258/","text":"_1258 Full name: \\Zotlabs\\Update\\_1258 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1258"},{"location":"dev/classes/Zotlabs/Update/_1258/#_1258","text":"Full name: \\Zotlabs\\Update\\_1258","title":"_1258"},{"location":"dev/classes/Zotlabs/Update/_1258/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1258/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1259/","text":"_1259 Full name: \\Zotlabs\\Update\\_1259 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1259"},{"location":"dev/classes/Zotlabs/Update/_1259/#_1259","text":"Full name: \\Zotlabs\\Update\\_1259","title":"_1259"},{"location":"dev/classes/Zotlabs/Update/_1259/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1259/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1260/","text":"_1260 Full name: \\Zotlabs\\Update\\_1260 Methods run public run(): mixed verify public verify(): mixed Automatically generated on 2025-03-15","title":"_1260"},{"location":"dev/classes/Zotlabs/Update/_1260/#_1260","text":"Full name: \\Zotlabs\\Update\\_1260","title":"_1260"},{"location":"dev/classes/Zotlabs/Update/_1260/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1260/#run","text":"public run(): mixed","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1260/#verify","text":"public verify(): mixed Automatically generated on 2025-03-15","title":"verify"},{"location":"dev/classes/Zotlabs/Update/_1261/","text":"_1261 Full name: \\Zotlabs\\Update\\_1261 Methods run public run(): mixed verify public verify(): mixed Automatically generated on 2025-03-15","title":"_1261"},{"location":"dev/classes/Zotlabs/Update/_1261/#_1261","text":"Full name: \\Zotlabs\\Update\\_1261","title":"_1261"},{"location":"dev/classes/Zotlabs/Update/_1261/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1261/#run","text":"public run(): mixed","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1261/#verify","text":"public verify(): mixed Automatically generated on 2025-03-15","title":"verify"},{"location":"dev/classes/Zotlabs/Update/_1262/","text":"_1262 Full name: \\Zotlabs\\Update\\_1262 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1262"},{"location":"dev/classes/Zotlabs/Update/_1262/#_1262","text":"Full name: \\Zotlabs\\Update\\_1262","title":"_1262"},{"location":"dev/classes/Zotlabs/Update/_1262/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1262/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Update/_1263/","text":"_1263 Full name: \\Zotlabs\\Update\\_1263 Methods run public run(): mixed Automatically generated on 2025-03-15","title":"_1263"},{"location":"dev/classes/Zotlabs/Update/_1263/#_1263","text":"Full name: \\Zotlabs\\Update\\_1263","title":"_1263"},{"location":"dev/classes/Zotlabs/Update/_1263/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Update/_1263/#run","text":"public run(): mixed Automatically generated on 2025-03-15","title":"run"},{"location":"dev/classes/Zotlabs/Web/Controller/","text":"Controller Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Web\\Controller This class is an Abstract class Methods init Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked. post Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways. get Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"Controller"},{"location":"dev/classes/Zotlabs/Web/Controller/#controller","text":"Base controller class for Modules. Modules should extend this class, and override the methods needed. Emtpy default implementations allow Modules to only override the methods they need. The methods defined by this class is invoked in order: init() post() -- only for POST requests get() Modules which emit other serialisations besides HTML (XML,JSON, etc.) should do so within the module init and/or post functions and then invoke killme() to terminate further processing. Full name: \\Zotlabs\\Web\\Controller This class is an Abstract class","title":"Controller"},{"location":"dev/classes/Zotlabs/Web/Controller/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/Controller/#init","text":"Initialize request processing. public init(): mixed This method is called before any other request processing, and regardless of the request method. The theme is not yet loaded when this method is invoked.","title":"init"},{"location":"dev/classes/Zotlabs/Web/Controller/#post","text":"Process POST requests. public post(): mixed This method is called if the incoming request is a POST request. It is invoked after the theme has been loaded. This method should not normally render HTML output, as processing will fall through to the GET processing if this method completes without error or stopping processing in other ways.","title":"post"},{"location":"dev/classes/Zotlabs/Web/Controller/#get","text":"Process GET requests or the body part of POST requests. public get(): string This method is called directly for GET requests, and immediately after the post() method for POST requests. It will return the module content as a HTML string. Return Value: HTML content for the module. Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/","text":"HTTPHeaders Full name: \\Zotlabs\\Web\\HTTPHeaders Properties in_progress private $in_progress parsed private $parsed Methods __construct public __construct(mixed $headers): mixed Parameters: Parameter Type Description $headers mixed fetch public fetch(): mixed fetcharr public fetcharr(): mixed Automatically generated on 2025-03-15","title":"HTTPHeaders"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#httpheaders","text":"Full name: \\Zotlabs\\Web\\HTTPHeaders","title":"HTTPHeaders"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#in_progress","text":"private $in_progress","title":"in_progress"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#parsed","text":"private $parsed","title":"parsed"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#__construct","text":"public __construct(mixed $headers): mixed Parameters: Parameter Type Description $headers mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#fetch","text":"public fetch(): mixed","title":"fetch"},{"location":"dev/classes/Zotlabs/Web/HTTPHeaders/#fetcharr","text":"public fetcharr(): mixed Automatically generated on 2025-03-15","title":"fetcharr"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/","text":"HTTPSig Full name: \\Zotlabs\\Web\\HTTPSig See Also: https://tools.ietf.org/html/draft-cavage-http-signatures-10 - Methods generate_digest_header public static generate_digest_header(string $body, string $alg = &#039;sha256&#039;): string This method is static . Parameters: Parameter Type Description $body string The value to create the digest for $alg string hash algorithm (one of 'sha256','sha512') Return Value: The generated digest header string for $body See Also: https://tools.ietf.org/html/rfc5843 - find_headers public static find_headers(mixed $data, mixed& $body): mixed This method is static . Parameters: Parameter Type Description $data mixed $body mixed verify public static verify(mixed $data, mixed $key = &#039;&#039;, mixed $keytype = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key mixed $keytype mixed get_key public static get_key(mixed $key, mixed $keytype, mixed $id, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $key mixed $keytype mixed $id mixed $force mixed convertKey public static convertKey(mixed $key): mixed This method is static . Parameters: Parameter Type Description $key mixed get_activitystreams_key public static get_activitystreams_key(string $id, bool $force = false, mixed $delete = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) $delete mixed Return Value: false if no pub key found, otherwise return an array with the pub key get_webfinger_key public static get_webfinger_key(string $id, bool $force = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) Return Value: false if no pub key found, otherwise return an array with the pub key get_zotfinger_key public static get_zotfinger_key(string $id, bool $force = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) Return Value: false if no pub key found, otherwise return an array with the public key create_sig public static create_sig(array $head, string $prvkey, string $keyid = EMPTY_STR, bool $auth = false, string $alg = &#039;sha256&#039;, array $encryption = false): array This method is static . Parameters: Parameter Type Description $head array $prvkey string $keyid string (optional, default '') $auth bool (optional, default false) $alg string (optional, default 'sha256') $encryption array [ 'key', 'algorithm' ] or false set_headers public static set_headers(array $headers): void This method is static . Parameters: Parameter Type Description $headers array sign public static sign(array $head, string $prvkey, string $alg = &#039;sha256&#039;): array This method is static . Parameters: Parameter Type Description $head array $prvkey string $alg string (optional) default 'sha256' parse_sigheader public static parse_sigheader(string $header): array This method is static . Parameters: Parameter Type Description $header string Return Value: associate array with - \\e string \\b keyID - \\e string \\b algorithm - \\e array \\b headers - \\e string \\b signature decrypt_sigheader public static decrypt_sigheader(string $header, string $prvkey = null): array|string This method is static . Parameters: Parameter Type Description $header string $prvkey string (optional), if not set use site private key Return Value: associative array, empty string if failue - \\e string \\b iv - \\e string \\b key - \\e string \\b alg - \\e string \\b data Automatically generated on 2025-03-15","title":"HTTPSig"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#httpsig","text":"Full name: \\Zotlabs\\Web\\HTTPSig See Also: https://tools.ietf.org/html/draft-cavage-http-signatures-10 -","title":"HTTPSig"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#generate_digest_header","text":"public static generate_digest_header(string $body, string $alg = &#039;sha256&#039;): string This method is static . Parameters: Parameter Type Description $body string The value to create the digest for $alg string hash algorithm (one of 'sha256','sha512') Return Value: The generated digest header string for $body See Also: https://tools.ietf.org/html/rfc5843 -","title":"generate_digest_header"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#find_headers","text":"public static find_headers(mixed $data, mixed& $body): mixed This method is static . Parameters: Parameter Type Description $data mixed $body mixed","title":"find_headers"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#verify","text":"public static verify(mixed $data, mixed $key = &#039;&#039;, mixed $keytype = &#039;&#039;): mixed This method is static . Parameters: Parameter Type Description $data mixed $key mixed $keytype mixed","title":"verify"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_key","text":"public static get_key(mixed $key, mixed $keytype, mixed $id, mixed $force = false): mixed This method is static . Parameters: Parameter Type Description $key mixed $keytype mixed $id mixed $force mixed","title":"get_key"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#convertkey","text":"public static convertKey(mixed $key): mixed This method is static . Parameters: Parameter Type Description $key mixed","title":"convertKey"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_activitystreams_key","text":"public static get_activitystreams_key(string $id, bool $force = false, mixed $delete = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) $delete mixed Return Value: false if no pub key found, otherwise return an array with the pub key","title":"get_activitystreams_key"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_webfinger_key","text":"public static get_webfinger_key(string $id, bool $force = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) Return Value: false if no pub key found, otherwise return an array with the pub key","title":"get_webfinger_key"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#get_zotfinger_key","text":"public static get_zotfinger_key(string $id, bool $force = false): bool|array This method is static . Parameters: Parameter Type Description $id string $force bool (optional, default false) Return Value: false if no pub key found, otherwise return an array with the public key","title":"get_zotfinger_key"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#create_sig","text":"public static create_sig(array $head, string $prvkey, string $keyid = EMPTY_STR, bool $auth = false, string $alg = &#039;sha256&#039;, array $encryption = false): array This method is static . Parameters: Parameter Type Description $head array $prvkey string $keyid string (optional, default '') $auth bool (optional, default false) $alg string (optional, default 'sha256') $encryption array [ 'key', 'algorithm' ] or false","title":"create_sig"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#set_headers","text":"public static set_headers(array $headers): void This method is static . Parameters: Parameter Type Description $headers array","title":"set_headers"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#sign","text":"public static sign(array $head, string $prvkey, string $alg = &#039;sha256&#039;): array This method is static . Parameters: Parameter Type Description $head array $prvkey string $alg string (optional) default 'sha256'","title":"sign"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#parse_sigheader","text":"public static parse_sigheader(string $header): array This method is static . Parameters: Parameter Type Description $header string Return Value: associate array with - \\e string \\b keyID - \\e string \\b algorithm - \\e array \\b headers - \\e string \\b signature","title":"parse_sigheader"},{"location":"dev/classes/Zotlabs/Web/HTTPSig/#decrypt_sigheader","text":"public static decrypt_sigheader(string $header, string $prvkey = null): array|string This method is static . Parameters: Parameter Type Description $header string $prvkey string (optional), if not set use site private key Return Value: associative array, empty string if failue - \\e string \\b iv - \\e string \\b key - \\e string \\b alg - \\e string \\b data Automatically generated on 2025-03-15","title":"decrypt_sigheader"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/","text":"HttpMeta Full name: \\Zotlabs\\Web\\HttpMeta Properties vars private $vars og private $og ogproperties private $ogproperties Methods set public set(mixed $property, mixed $value, mixed $mode): mixed Parameters: Parameter Type Description $property mixed $value mixed $mode mixed check_required public check_required(): mixed get_field public get_field(mixed $field): mixed Parameters: Parameter Type Description $field mixed get public get(): mixed Automatically generated on 2025-03-15","title":"HttpMeta"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#httpmeta","text":"Full name: \\Zotlabs\\Web\\HttpMeta","title":"HttpMeta"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#vars","text":"private $vars","title":"vars"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#og","text":"private $og","title":"og"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#ogproperties","text":"private $ogproperties","title":"ogproperties"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#set","text":"public set(mixed $property, mixed $value, mixed $mode): mixed Parameters: Parameter Type Description $property mixed $value mixed $mode mixed","title":"set"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#check_required","text":"public check_required(): mixed","title":"check_required"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#get_field","text":"public get_field(mixed $field): mixed Parameters: Parameter Type Description $field mixed","title":"get_field"},{"location":"dev/classes/Zotlabs/Web/HttpMeta/#get","text":"public get(): mixed Automatically generated on 2025-03-15","title":"get"},{"location":"dev/classes/Zotlabs/Web/Router/","text":"Router We have already parsed the server path into App::$argc and App::$argv App::$argv[0] is our module name. Let's call it 'foo'. We will load the Zotlabs/Module/Foo.php (object) or file mod/foo.php (procedural) and use it for handling our URL request to 'https://ourgreatwebsite.something/foo' . The module file contains a few functions that we call in various circumstances and in the following order: Full name: \\Zotlabs\\Web\\Router Properties modname private $modname controller private $controller module_loaded private bool $module_loaded Methods __construct public __construct(): mixed Throws: module not found Exception Dispatch public Dispatch(): mixed Automatically generated on 2025-03-15","title":"Router"},{"location":"dev/classes/Zotlabs/Web/Router/#router","text":"We have already parsed the server path into App::$argc and App::$argv App::$argv[0] is our module name. Let's call it 'foo'. We will load the Zotlabs/Module/Foo.php (object) or file mod/foo.php (procedural) and use it for handling our URL request to 'https://ourgreatwebsite.something/foo' . The module file contains a few functions that we call in various circumstances and in the following order: Full name: \\Zotlabs\\Web\\Router","title":"Router"},{"location":"dev/classes/Zotlabs/Web/Router/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/Router/#modname","text":"private $modname","title":"modname"},{"location":"dev/classes/Zotlabs/Web/Router/#controller","text":"private $controller","title":"controller"},{"location":"dev/classes/Zotlabs/Web/Router/#module_loaded","text":"private bool $module_loaded","title":"module_loaded"},{"location":"dev/classes/Zotlabs/Web/Router/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/Router/#__construct","text":"public __construct(): mixed Throws: module not found Exception","title":"__construct"},{"location":"dev/classes/Zotlabs/Web/Router/#dispatch","text":"public Dispatch(): mixed Automatically generated on 2025-03-15","title":"Dispatch"},{"location":"dev/classes/Zotlabs/Web/Session/","text":"Session Full name: \\Zotlabs\\Web\\Session Properties handler private $handler session_started private $session_started custom_handler private $custom_handler Methods init public init(): mixed start public start(): mixed nuke public nuke(): void new_cookie public new_cookie(mixed $xtime): mixed Parameters: Parameter Type Description $xtime mixed extend_cookie public extend_cookie(): mixed return_check public return_check(): mixed Automatically generated on 2025-03-15","title":"Session"},{"location":"dev/classes/Zotlabs/Web/Session/#session","text":"Full name: \\Zotlabs\\Web\\Session","title":"Session"},{"location":"dev/classes/Zotlabs/Web/Session/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/Session/#handler","text":"private $handler","title":"handler"},{"location":"dev/classes/Zotlabs/Web/Session/#session_started","text":"private $session_started","title":"session_started"},{"location":"dev/classes/Zotlabs/Web/Session/#custom_handler","text":"private $custom_handler","title":"custom_handler"},{"location":"dev/classes/Zotlabs/Web/Session/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/Session/#init","text":"public init(): mixed","title":"init"},{"location":"dev/classes/Zotlabs/Web/Session/#start","text":"public start(): mixed","title":"start"},{"location":"dev/classes/Zotlabs/Web/Session/#nuke","text":"public nuke(): void","title":"nuke"},{"location":"dev/classes/Zotlabs/Web/Session/#new_cookie","text":"public new_cookie(mixed $xtime): mixed Parameters: Parameter Type Description $xtime mixed","title":"new_cookie"},{"location":"dev/classes/Zotlabs/Web/Session/#extend_cookie","text":"public extend_cookie(): mixed","title":"extend_cookie"},{"location":"dev/classes/Zotlabs/Web/Session/#return_check","text":"public return_check(): mixed Automatically generated on 2025-03-15","title":"return_check"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/","text":"SessionHandler Full name: \\Zotlabs\\Web\\SessionHandler This class implements: \\SessionHandlerInterface Methods open public open(mixed $s, mixed $n): bool Parameters: Parameter Type Description $s mixed $n mixed read public read(mixed $id): string Parameters: Parameter Type Description $id mixed write public write(mixed $id, mixed $data): bool Parameters: Parameter Type Description $id mixed $data mixed close public close(): bool destroy public destroy(mixed $id): bool Parameters: Parameter Type Description $id mixed gc public gc(mixed $expire): int Parameters: Parameter Type Description $expire mixed Automatically generated on 2025-03-15","title":"SessionHandler"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#sessionhandler","text":"Full name: \\Zotlabs\\Web\\SessionHandler This class implements: \\SessionHandlerInterface","title":"SessionHandler"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#open","text":"public open(mixed $s, mixed $n): bool Parameters: Parameter Type Description $s mixed $n mixed","title":"open"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#read","text":"public read(mixed $id): string Parameters: Parameter Type Description $id mixed","title":"read"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#write","text":"public write(mixed $id, mixed $data): bool Parameters: Parameter Type Description $id mixed $data mixed","title":"write"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#close","text":"public close(): bool","title":"close"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#destroy","text":"public destroy(mixed $id): bool Parameters: Parameter Type Description $id mixed","title":"destroy"},{"location":"dev/classes/Zotlabs/Web/SessionHandler/#gc","text":"public gc(mixed $expire): int Parameters: Parameter Type Description $expire mixed Automatically generated on 2025-03-15","title":"gc"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/","text":"SessionRedis Full name: \\Zotlabs\\Web\\SessionRedis This class implements: \\SessionHandlerInterface Properties redis private $redis Methods __construct public __construct(mixed $connection): mixed Parameters: Parameter Type Description $connection mixed open public open(mixed $s, mixed $n): mixed Parameters: Parameter Type Description $s mixed $n mixed read public read(mixed $id): mixed Parameters: Parameter Type Description $id mixed write public write(mixed $id, mixed $data): mixed Parameters: Parameter Type Description $id mixed $data mixed close public close(): mixed destroy public destroy(mixed $id): mixed Parameters: Parameter Type Description $id mixed gc public gc(mixed $expire): mixed Parameters: Parameter Type Description $expire mixed Automatically generated on 2025-03-15","title":"SessionRedis"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#sessionredis","text":"Full name: \\Zotlabs\\Web\\SessionRedis This class implements: \\SessionHandlerInterface","title":"SessionRedis"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#redis","text":"private $redis","title":"redis"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#__construct","text":"public __construct(mixed $connection): mixed Parameters: Parameter Type Description $connection mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#open","text":"public open(mixed $s, mixed $n): mixed Parameters: Parameter Type Description $s mixed $n mixed","title":"open"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#read","text":"public read(mixed $id): mixed Parameters: Parameter Type Description $id mixed","title":"read"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#write","text":"public write(mixed $id, mixed $data): mixed Parameters: Parameter Type Description $id mixed $data mixed","title":"write"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#close","text":"public close(): mixed","title":"close"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#destroy","text":"public destroy(mixed $id): mixed Parameters: Parameter Type Description $id mixed","title":"destroy"},{"location":"dev/classes/Zotlabs/Web/SessionRedis/#gc","text":"public gc(mixed $expire): mixed Parameters: Parameter Type Description $expire mixed Automatically generated on 2025-03-15","title":"gc"},{"location":"dev/classes/Zotlabs/Web/SubModule/","text":"SubModule Full name: \\Zotlabs\\Web\\SubModule Properties controller private $controller Methods __construct public __construct(int $whicharg = 1): mixed Parameters: Parameter Type Description $whicharg int call public call(string $method): bool|mixed Parameters: Parameter Type Description $method string Automatically generated on 2025-03-15","title":"SubModule"},{"location":"dev/classes/Zotlabs/Web/SubModule/#submodule","text":"Full name: \\Zotlabs\\Web\\SubModule","title":"SubModule"},{"location":"dev/classes/Zotlabs/Web/SubModule/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Web/SubModule/#controller","text":"private $controller","title":"controller"},{"location":"dev/classes/Zotlabs/Web/SubModule/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/SubModule/#__construct","text":"public __construct(int $whicharg = 1): mixed Parameters: Parameter Type Description $whicharg int","title":"__construct"},{"location":"dev/classes/Zotlabs/Web/SubModule/#call","text":"public call(string $method): bool|mixed Parameters: Parameter Type Description $method string Automatically generated on 2025-03-15","title":"call"},{"location":"dev/classes/Zotlabs/Web/WebServer/","text":"WebServer Full name: \\Zotlabs\\Web\\WebServer Methods run public run(): mixed initialise_content private initialise_content(): mixed create_channel_links private create_channel_links(): mixed set_homebase private set_homebase(): mixed Automatically generated on 2025-03-15","title":"WebServer"},{"location":"dev/classes/Zotlabs/Web/WebServer/#webserver","text":"Full name: \\Zotlabs\\Web\\WebServer","title":"WebServer"},{"location":"dev/classes/Zotlabs/Web/WebServer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Web/WebServer/#run","text":"public run(): mixed","title":"run"},{"location":"dev/classes/Zotlabs/Web/WebServer/#initialise_content","text":"private initialise_content(): mixed","title":"initialise_content"},{"location":"dev/classes/Zotlabs/Web/WebServer/#create_channel_links","text":"private create_channel_links(): mixed","title":"create_channel_links"},{"location":"dev/classes/Zotlabs/Web/WebServer/#set_homebase","text":"private set_homebase(): mixed Automatically generated on 2025-03-15","title":"set_homebase"},{"location":"dev/classes/Zotlabs/Widget/Activity/","text":"Activity Full name: \\Zotlabs\\Widget\\Activity Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Activity"},{"location":"dev/classes/Zotlabs/Widget/Activity/#activity","text":"Full name: \\Zotlabs\\Widget\\Activity","title":"Activity"},{"location":"dev/classes/Zotlabs/Widget/Activity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Activity/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/","text":"Activity_filter Full name: \\Zotlabs\\Widget\\Activity_filter Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Activity_filter"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/#activity_filter","text":"Full name: \\Zotlabs\\Widget\\Activity_filter","title":"Activity_filter"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Activity_filter/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/","text":"Activity_order Name: Activity order Description: Order the network stream by posted date, last commented or by date unthreaded Requires: network Full name: \\Zotlabs\\Widget\\Activity_order Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Activity_order"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/#activity_order","text":"Name: Activity order Description: Order the network stream by posted date, last commented or by date unthreaded Requires: network Full name: \\Zotlabs\\Widget\\Activity_order","title":"Activity_order"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Activity_order/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Admin/","text":"Admin Full name: \\Zotlabs\\Widget\\Admin Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Admin"},{"location":"dev/classes/Zotlabs/Widget/Admin/#admin","text":"Full name: \\Zotlabs\\Widget\\Admin","title":"Admin"},{"location":"dev/classes/Zotlabs/Widget/Admin/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Admin/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Affinity/","text":"Affinity Full name: \\Zotlabs\\Widget\\Affinity Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Affinity"},{"location":"dev/classes/Zotlabs/Widget/Affinity/#affinity","text":"Full name: \\Zotlabs\\Widget\\Affinity","title":"Affinity"},{"location":"dev/classes/Zotlabs/Widget/Affinity/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Affinity/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Album/","text":"Album Full name: \\Zotlabs\\Widget\\Album Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Album"},{"location":"dev/classes/Zotlabs/Widget/Album/#album","text":"Full name: \\Zotlabs\\Widget\\Album","title":"Album"},{"location":"dev/classes/Zotlabs/Widget/Album/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Album/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/","text":"Appcategories Full name: \\Zotlabs\\Widget\\Appcategories Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Appcategories"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/#appcategories","text":"Full name: \\Zotlabs\\Widget\\Appcategories","title":"Appcategories"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Appcategories/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/","text":"Appcloud Full name: \\Zotlabs\\Widget\\Appcloud Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Appcloud"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/#appcloud","text":"Full name: \\Zotlabs\\Widget\\Appcloud","title":"Appcloud"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Appcloud/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Appstore/","text":"Appstore Full name: \\Zotlabs\\Widget\\Appstore Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Appstore"},{"location":"dev/classes/Zotlabs/Widget/Appstore/#appstore","text":"Full name: \\Zotlabs\\Widget\\Appstore","title":"Appstore"},{"location":"dev/classes/Zotlabs/Widget/Appstore/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Appstore/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Archive/","text":"Archive Full name: \\Zotlabs\\Widget\\Archive Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Archive"},{"location":"dev/classes/Zotlabs/Widget/Archive/#archive","text":"Full name: \\Zotlabs\\Widget\\Archive","title":"Archive"},{"location":"dev/classes/Zotlabs/Widget/Archive/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Archive/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/","text":"Bookmarkedchats Full name: \\Zotlabs\\Widget\\Bookmarkedchats Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Bookmarkedchats"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/#bookmarkedchats","text":"Full name: \\Zotlabs\\Widget\\Bookmarkedchats","title":"Bookmarkedchats"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Bookmarkedchats/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/","text":"Catcloud Name: Category cloud Description: Display category links in a cloud Requires: channel, cards, articles Full name: \\Zotlabs\\Widget\\Catcloud Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Catcloud"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/#catcloud","text":"Name: Category cloud Description: Display category links in a cloud Requires: channel, cards, articles Full name: \\Zotlabs\\Widget\\Catcloud","title":"Catcloud"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Catcloud/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/","text":"Catcloud_wall Full name: \\Zotlabs\\Widget\\Catcloud_wall Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Catcloud_wall"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/#catcloud_wall","text":"Full name: \\Zotlabs\\Widget\\Catcloud_wall","title":"Catcloud_wall"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Catcloud_wall/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Categories/","text":"Categories Full name: \\Zotlabs\\Widget\\Categories Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Categories"},{"location":"dev/classes/Zotlabs/Widget/Categories/#categories","text":"Full name: \\Zotlabs\\Widget\\Categories","title":"Categories"},{"location":"dev/classes/Zotlabs/Widget/Categories/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Categories/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Cdav/","text":"Cdav Full name: \\Zotlabs\\Widget\\Cdav Methods widget public widget(): mixed Automatically generated on 2025-03-15","title":"Cdav"},{"location":"dev/classes/Zotlabs/Widget/Cdav/#cdav","text":"Full name: \\Zotlabs\\Widget\\Cdav","title":"Cdav"},{"location":"dev/classes/Zotlabs/Widget/Cdav/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Cdav/#widget","text":"public widget(): mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/","text":"Channel_activities Full name: \\Zotlabs\\Widget\\Channel_activities Properties activities public static $activities This property is static . uid public static $uid This property is static . limit public static $limit This property is static . channel public static $channel This property is static . Methods widget public static widget(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed get_photos_activity private static get_photos_activity(): mixed This method is static . get_files_activity private static get_files_activity(): mixed This method is static . get_webpages_activity private static get_webpages_activity(): mixed This method is static . get_channels_activity private static get_channels_activity(): mixed This method is static . Automatically generated on 2025-03-15","title":"Channel_activities"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#channel_activities","text":"Full name: \\Zotlabs\\Widget\\Channel_activities","title":"Channel_activities"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#activities","text":"public static $activities This property is static .","title":"activities"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#uid","text":"public static $uid This property is static .","title":"uid"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#limit","text":"public static $limit This property is static .","title":"limit"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#channel","text":"public static $channel This property is static .","title":"channel"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#widget","text":"public static widget(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_photos_activity","text":"private static get_photos_activity(): mixed This method is static .","title":"get_photos_activity"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_files_activity","text":"private static get_files_activity(): mixed This method is static .","title":"get_files_activity"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_webpages_activity","text":"private static get_webpages_activity(): mixed This method is static .","title":"get_webpages_activity"},{"location":"dev/classes/Zotlabs/Widget/Channel_activities/#get_channels_activity","text":"private static get_channels_activity(): mixed This method is static . Automatically generated on 2025-03-15","title":"get_channels_activity"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/","text":"Chatroom_list Full name: \\Zotlabs\\Widget\\Chatroom_list Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Chatroom_list"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/#chatroom_list","text":"Full name: \\Zotlabs\\Widget\\Chatroom_list","title":"Chatroom_list"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_list/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/","text":"Chatroom_members Full name: \\Zotlabs\\Widget\\Chatroom_members Methods widget public widget(): mixed Automatically generated on 2025-03-15","title":"Chatroom_members"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/#chatroom_members","text":"Full name: \\Zotlabs\\Widget\\Chatroom_members","title":"Chatroom_members"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Chatroom_members/#widget","text":"public widget(): mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Clock/","text":"Clock Full name: \\Zotlabs\\Widget\\Clock Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Clock"},{"location":"dev/classes/Zotlabs/Widget/Clock/#clock","text":"Full name: \\Zotlabs\\Widget\\Clock","title":"Clock"},{"location":"dev/classes/Zotlabs/Widget/Clock/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Clock/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/","text":"Common_friends Full name: \\Zotlabs\\Widget\\Common_friends Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Common_friends"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/#common_friends","text":"Full name: \\Zotlabs\\Widget\\Common_friends","title":"Common_friends"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Common_friends/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/","text":"Cover_photo Full name: \\Zotlabs\\Widget\\Cover_photo Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Cover_photo"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/#cover_photo","text":"Full name: \\Zotlabs\\Widget\\Cover_photo","title":"Cover_photo"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Cover_photo/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/","text":"Design_tools Full name: \\Zotlabs\\Widget\\Design_tools Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Design_tools"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/#design_tools","text":"Full name: \\Zotlabs\\Widget\\Design_tools","title":"Design_tools"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Design_tools/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/","text":"Dirsort Full name: \\Zotlabs\\Widget\\Dirsort Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Dirsort"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/#dirsort","text":"Full name: \\Zotlabs\\Widget\\Dirsort","title":"Dirsort"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Dirsort/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/","text":"Dirtags Full name: \\Zotlabs\\Widget\\Dirtags Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Dirtags"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/#dirtags","text":"Full name: \\Zotlabs\\Widget\\Dirtags","title":"Dirtags"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Dirtags/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Filer/","text":"Filer Full name: \\Zotlabs\\Widget\\Filer Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Filer"},{"location":"dev/classes/Zotlabs/Widget/Filer/#filer","text":"Full name: \\Zotlabs\\Widget\\Filer","title":"Filer"},{"location":"dev/classes/Zotlabs/Widget/Filer/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Filer/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/","text":"Findpeople Full name: \\Zotlabs\\Widget\\Findpeople Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Findpeople"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/#findpeople","text":"Full name: \\Zotlabs\\Widget\\Findpeople","title":"Findpeople"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Findpeople/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Follow/","text":"Follow Full name: \\Zotlabs\\Widget\\Follow Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Follow"},{"location":"dev/classes/Zotlabs/Widget/Follow/#follow","text":"Full name: \\Zotlabs\\Widget\\Follow","title":"Follow"},{"location":"dev/classes/Zotlabs/Widget/Follow/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Follow/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Forums/","text":"Forums Full name: \\Zotlabs\\Widget\\Forums Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Forums"},{"location":"dev/classes/Zotlabs/Widget/Forums/#forums","text":"Full name: \\Zotlabs\\Widget\\Forums","title":"Forums"},{"location":"dev/classes/Zotlabs/Widget/Forums/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Forums/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/","text":"Fullprofile Full name: \\Zotlabs\\Widget\\Fullprofile Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Fullprofile"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/#fullprofile","text":"Full name: \\Zotlabs\\Widget\\Fullprofile","title":"Fullprofile"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Fullprofile/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/","text":"Helpindex Full name: \\Zotlabs\\Widget\\Helpindex Properties contents private string $contents Methods widget public widget(): mixed title public title(): string contents public contents(): string Inherited methods determine_help_language Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module. find_help_file Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string missing_translation public missing_translation(): bool missing_translation_message public missing_translation_message(): string Automatically generated on 2025-03-15","title":"Helpindex"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#helpindex","text":"Full name: \\Zotlabs\\Widget\\Helpindex","title":"Helpindex"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#contents","text":"private string $contents","title":"contents"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#widget","text":"public widget(): mixed","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#title","text":"public title(): string","title":"title"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#contents_1","text":"public contents(): string","title":"contents"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#inherited-methods","text":"","title":"Inherited methods"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#determine_help_language","text":"Determines help language. private determine_help_language(): mixed If the language was specified in the URL, override the language preference of the browser. Default to English if both of these are absent. Updates the $lang property of the module.","title":"determine_help_language"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#find_help_file","text":"Find the full path name of the file, given it's base path and the language of the request. private find_help_file(string $base_path, string $lang): void Parameters: Parameter Type Description $base_path string The path of the file to find, relative to the doc root path, and without the extension. $lang string","title":"find_help_file"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#missing_translation","text":"public missing_translation(): bool","title":"missing_translation"},{"location":"dev/classes/Zotlabs/Widget/Helpindex/#missing_translation_message","text":"public missing_translation_message(): string Automatically generated on 2025-03-15","title":"missing_translation_message"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/","text":"Hq_controls Full name: \\Zotlabs\\Widget\\Hq_controls Methods widget public widget(mixed $options): mixed Parameters: Parameter Type Description $options mixed Automatically generated on 2025-03-15","title":"Hq_controls"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/#hq_controls","text":"Full name: \\Zotlabs\\Widget\\Hq_controls","title":"Hq_controls"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Hq_controls/#widget","text":"public widget(mixed $options): mixed Parameters: Parameter Type Description $options mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Item/","text":"Item Full name: \\Zotlabs\\Widget\\Item Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Item"},{"location":"dev/classes/Zotlabs/Widget/Item/#item","text":"Full name: \\Zotlabs\\Widget\\Item","title":"Item"},{"location":"dev/classes/Zotlabs/Widget/Item/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Item/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/","text":"Menu_preview Full name: \\Zotlabs\\Widget\\Menu_preview Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Menu_preview"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/#menu_preview","text":"Full name: \\Zotlabs\\Widget\\Menu_preview","title":"Menu_preview"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Menu_preview/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Messages/","text":"Messages Full name: \\Zotlabs\\Widget\\Messages Methods widget public static widget(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed get_messages_page public static get_messages_page(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed get_dm_recipients public static get_dm_recipients(mixed $channel, mixed $item): mixed This method is static . Parameters: Parameter Type Description $channel mixed $item mixed get_notices_page public static get_notices_page(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed Automatically generated on 2025-03-15","title":"Messages"},{"location":"dev/classes/Zotlabs/Widget/Messages/#messages","text":"Full name: \\Zotlabs\\Widget\\Messages","title":"Messages"},{"location":"dev/classes/Zotlabs/Widget/Messages/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Messages/#widget","text":"public static widget(mixed $arr): mixed This method is static . Parameters: Parameter Type Description $arr mixed","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_messages_page","text":"public static get_messages_page(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed","title":"get_messages_page"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_dm_recipients","text":"public static get_dm_recipients(mixed $channel, mixed $item): mixed This method is static . Parameters: Parameter Type Description $channel mixed $item mixed","title":"get_dm_recipients"},{"location":"dev/classes/Zotlabs/Widget/Messages/#get_notices_page","text":"public static get_notices_page(mixed $options): mixed This method is static . Parameters: Parameter Type Description $options mixed Automatically generated on 2025-03-15","title":"get_notices_page"},{"location":"dev/classes/Zotlabs/Widget/Newmember/","text":"Newmember Full name: \\Zotlabs\\Widget\\Newmember Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Newmember"},{"location":"dev/classes/Zotlabs/Widget/Newmember/#newmember","text":"Full name: \\Zotlabs\\Widget\\Newmember","title":"Newmember"},{"location":"dev/classes/Zotlabs/Widget/Newmember/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Newmember/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Notes/","text":"Notes Full name: \\Zotlabs\\Widget\\Notes Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Notes"},{"location":"dev/classes/Zotlabs/Widget/Notes/#notes","text":"Full name: \\Zotlabs\\Widget\\Notes","title":"Notes"},{"location":"dev/classes/Zotlabs/Widget/Notes/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Notes/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Notifications/","text":"Notifications Full name: \\Zotlabs\\Widget\\Notifications Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Notifications"},{"location":"dev/classes/Zotlabs/Widget/Notifications/#notifications","text":"Full name: \\Zotlabs\\Widget\\Notifications","title":"Notifications"},{"location":"dev/classes/Zotlabs/Widget/Notifications/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Notifications/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Permcats/","text":"Permcats Full name: \\Zotlabs\\Widget\\Permcats Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Permcats"},{"location":"dev/classes/Zotlabs/Widget/Permcats/#permcats","text":"Full name: \\Zotlabs\\Widget\\Permcats","title":"Permcats"},{"location":"dev/classes/Zotlabs/Widget/Permcats/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Permcats/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Photo/","text":"Photo Full name: \\Zotlabs\\Widget\\Photo Methods widget public widget(array $arr): string Parameters: Parameter Type Description $arr array associative array with \\e string \\b src URL of photo; URL must be an http or https URL \\e boolean \\b zrl use zid in URL * \\e string \\b style CSS string Return Value: with parsed HTML Automatically generated on 2025-03-15","title":"Photo"},{"location":"dev/classes/Zotlabs/Widget/Photo/#photo","text":"Full name: \\Zotlabs\\Widget\\Photo","title":"Photo"},{"location":"dev/classes/Zotlabs/Widget/Photo/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Photo/#widget","text":"public widget(array $arr): string Parameters: Parameter Type Description $arr array associative array with \\e string \\b src URL of photo; URL must be an http or https URL \\e boolean \\b zrl use zid in URL * \\e string \\b style CSS string Return Value: with parsed HTML Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/","text":"Photo_albums Full name: \\Zotlabs\\Widget\\Photo_albums Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Photo_albums"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/#photo_albums","text":"Full name: \\Zotlabs\\Widget\\Photo_albums","title":"Photo_albums"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Photo_albums/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/","text":"Photo_rand Full name: \\Zotlabs\\Widget\\Photo_rand Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Photo_rand"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/#photo_rand","text":"Full name: \\Zotlabs\\Widget\\Photo_rand","title":"Photo_rand"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Photo_rand/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Pinned/","text":"Pinned Name: Pinned items Description: Display pinned items Author: Max Kostikov Requires: disabled_for_pdledit_gui Full name: \\Zotlabs\\Widget\\Pinned Properties allowed_types private $allowed_types uid private $uid Methods widget public widget(mixed $uid, mixed $types): mixed Parameters: Parameter Type Description $uid mixed $types mixed list private list(mixed $types): mixed Parameters: Parameter Type Description $types mixed activity private activity(mixed $item, mixed& $conv_responses): mixed Parameters: Parameter Type Description $item mixed $conv_responses mixed Automatically generated on 2025-03-15","title":"Pinned"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#pinned","text":"Name: Pinned items Description: Display pinned items Author: Max Kostikov Requires: disabled_for_pdledit_gui Full name: \\Zotlabs\\Widget\\Pinned","title":"Pinned"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#allowed_types","text":"private $allowed_types","title":"allowed_types"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#uid","text":"private $uid","title":"uid"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#widget","text":"public widget(mixed $uid, mixed $types): mixed Parameters: Parameter Type Description $uid mixed $types mixed","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#list","text":"private list(mixed $types): mixed Parameters: Parameter Type Description $types mixed","title":"list"},{"location":"dev/classes/Zotlabs/Widget/Pinned/#activity","text":"private activity(mixed $item, mixed& $conv_responses): mixed Parameters: Parameter Type Description $item mixed $conv_responses mixed Automatically generated on 2025-03-15","title":"activity"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/","text":"Portfolio Full name: \\Zotlabs\\Widget\\Portfolio Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Portfolio"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/#portfolio","text":"Full name: \\Zotlabs\\Widget\\Portfolio","title":"Portfolio"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Portfolio/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/","text":"Privacygroups Full name: \\Zotlabs\\Widget\\Privacygroups Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Privacygroups"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/#privacygroups","text":"Full name: \\Zotlabs\\Widget\\Privacygroups","title":"Privacygroups"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Privacygroups/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Profile/","text":"Profile Full name: \\Zotlabs\\Widget\\Profile Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Profile"},{"location":"dev/classes/Zotlabs/Widget/Profile/#profile","text":"Full name: \\Zotlabs\\Widget\\Profile","title":"Profile"},{"location":"dev/classes/Zotlabs/Widget/Profile/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Profile/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/","text":"Pubtagcloud Full name: \\Zotlabs\\Widget\\Pubtagcloud Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Pubtagcloud"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/#pubtagcloud","text":"Full name: \\Zotlabs\\Widget\\Pubtagcloud","title":"Pubtagcloud"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Pubtagcloud/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Random_block/","text":"Random_block Full name: \\Zotlabs\\Widget\\Random_block Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Random_block"},{"location":"dev/classes/Zotlabs/Widget/Random_block/#random_block","text":"Full name: \\Zotlabs\\Widget\\Random_block","title":"Random_block"},{"location":"dev/classes/Zotlabs/Widget/Random_block/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Random_block/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Rating/","text":"Rating Full name: \\Zotlabs\\Widget\\Rating Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Rating"},{"location":"dev/classes/Zotlabs/Widget/Rating/#rating","text":"Full name: \\Zotlabs\\Widget\\Rating","title":"Rating"},{"location":"dev/classes/Zotlabs/Widget/Rating/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Rating/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/","text":"Savedsearch Full name: \\Zotlabs\\Widget\\Savedsearch Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Savedsearch"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/#savedsearch","text":"Full name: \\Zotlabs\\Widget\\Savedsearch","title":"Savedsearch"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Savedsearch/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/","text":"Settings_menu Full name: \\Zotlabs\\Widget\\Settings_menu Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Settings_menu"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/#settings_menu","text":"Full name: \\Zotlabs\\Widget\\Settings_menu","title":"Settings_menu"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Settings_menu/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/","text":"Sitesearch Full name: \\Zotlabs\\Widget\\Sitesearch Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Sitesearch"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/#sitesearch","text":"Full name: \\Zotlabs\\Widget\\Sitesearch","title":"Sitesearch"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Sitesearch/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/","text":"Suggestedchats Full name: \\Zotlabs\\Widget\\Suggestedchats Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Suggestedchats"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/#suggestedchats","text":"Full name: \\Zotlabs\\Widget\\Suggestedchats","title":"Suggestedchats"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Suggestedchats/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/","text":"Suggestions Full name: \\Zotlabs\\Widget\\Suggestions Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Suggestions"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/#suggestions","text":"Full name: \\Zotlabs\\Widget\\Suggestions","title":"Suggestions"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Suggestions/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/","text":"Tagcloud Name: Tag cloud Description: Display hashtags of your network items in a cloud Requires: network, hq Full name: \\Zotlabs\\Widget\\Tagcloud Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Tagcloud"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/#tagcloud","text":"Name: Tag cloud Description: Display hashtags of your network items in a cloud Requires: network, hq Full name: \\Zotlabs\\Widget\\Tagcloud","title":"Tagcloud"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/","text":"Tagcloud_wall Full name: \\Zotlabs\\Widget\\Tagcloud_wall Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Tagcloud_wall"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/#tagcloud_wall","text":"Full name: \\Zotlabs\\Widget\\Tagcloud_wall","title":"Tagcloud_wall"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Tagcloud_wall/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/","text":"Tasklist Full name: \\Zotlabs\\Widget\\Tasklist Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Tasklist"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/#tasklist","text":"Full name: \\Zotlabs\\Widget\\Tasklist","title":"Tasklist"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Tasklist/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Tokens/","text":"Tokens Full name: \\Zotlabs\\Widget\\Tokens Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Tokens"},{"location":"dev/classes/Zotlabs/Widget/Tokens/#tokens","text":"Full name: \\Zotlabs\\Widget\\Tokens","title":"Tokens"},{"location":"dev/classes/Zotlabs/Widget/Tokens/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Tokens/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Vcard/","text":"Vcard Full name: \\Zotlabs\\Widget\\Vcard Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Vcard"},{"location":"dev/classes/Zotlabs/Widget/Vcard/#vcard","text":"Full name: \\Zotlabs\\Widget\\Vcard","title":"Vcard"},{"location":"dev/classes/Zotlabs/Widget/Vcard/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Vcard/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/","text":"Website_portation_tools Full name: \\Zotlabs\\Widget\\Website_portation_tools Methods widget public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"Website_portation_tools"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/#website_portation_tools","text":"Full name: \\Zotlabs\\Widget\\Website_portation_tools","title":"Website_portation_tools"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Website_portation_tools/#widget","text":"public widget(mixed $arr): mixed Parameters: Parameter Type Description $arr mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Widget/Zcard/","text":"Zcard Full name: \\Zotlabs\\Widget\\Zcard Methods widget public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"Zcard"},{"location":"dev/classes/Zotlabs/Widget/Zcard/#zcard","text":"Full name: \\Zotlabs\\Widget\\Zcard","title":"Zcard"},{"location":"dev/classes/Zotlabs/Widget/Zcard/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Widget/Zcard/#widget","text":"public widget(mixed $args): mixed Parameters: Parameter Type Description $args mixed Automatically generated on 2025-03-15","title":"widget"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/","text":"IHandler Full name: \\Zotlabs\\Zot6\\IHandler Methods Notify public Notify(mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $data mixed $hub mixed Rekey public Rekey(mixed $sender, mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed Refresh public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed $force mixed Purge public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed Automatically generated on 2025-03-15","title":"IHandler"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#ihandler","text":"Full name: \\Zotlabs\\Zot6\\IHandler","title":"IHandler"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#notify","text":"public Notify(mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $data mixed $hub mixed","title":"Notify"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#rekey","text":"public Rekey(mixed $sender, mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed","title":"Rekey"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#refresh","text":"public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed $force mixed","title":"Refresh"},{"location":"dev/classes/Zotlabs/Zot6/IHandler/#purge","text":"public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed Automatically generated on 2025-03-15","title":"Purge"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/","text":"Receiver Full name: \\Zotlabs\\Zot6\\Receiver Properties data protected $data encrypted protected $encrypted error protected $error messagetype protected $messagetype sender protected $sender site_id protected $site_id validated protected $validated recipients protected $recipients response protected $response handler protected $handler prvkey protected $prvkey rawdata protected $rawdata sigdata protected $sigdata hub protected $hub Methods __construct public __construct(mixed $handler, mixed $localdata = null): mixed Parameters: Parameter Type Description $handler mixed $localdata mixed run public run(): mixed ValidateSender public ValidateSender(): mixed Valid_Httpsig public Valid_Httpsig(): mixed Dispatch public Dispatch(): mixed EncryptResponse public EncryptResponse(): mixed Automatically generated on 2025-03-15","title":"Receiver"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#receiver","text":"Full name: \\Zotlabs\\Zot6\\Receiver","title":"Receiver"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#properties","text":"","title":"Properties"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#data","text":"protected $data","title":"data"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#encrypted","text":"protected $encrypted","title":"encrypted"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#error","text":"protected $error","title":"error"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#messagetype","text":"protected $messagetype","title":"messagetype"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#sender","text":"protected $sender","title":"sender"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#site_id","text":"protected $site_id","title":"site_id"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#validated","text":"protected $validated","title":"validated"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#recipients","text":"protected $recipients","title":"recipients"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#response","text":"protected $response","title":"response"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#handler","text":"protected $handler","title":"handler"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#prvkey","text":"protected $prvkey","title":"prvkey"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#rawdata","text":"protected $rawdata","title":"rawdata"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#sigdata","text":"protected $sigdata","title":"sigdata"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#hub","text":"protected $hub","title":"hub"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#__construct","text":"public __construct(mixed $handler, mixed $localdata = null): mixed Parameters: Parameter Type Description $handler mixed $localdata mixed","title":"__construct"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#run","text":"public run(): mixed","title":"run"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#validatesender","text":"public ValidateSender(): mixed","title":"ValidateSender"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#valid_httpsig","text":"public Valid_Httpsig(): mixed","title":"Valid_Httpsig"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#dispatch","text":"public Dispatch(): mixed","title":"Dispatch"},{"location":"dev/classes/Zotlabs/Zot6/Receiver/#encryptresponse","text":"public EncryptResponse(): mixed Automatically generated on 2025-03-15","title":"EncryptResponse"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/","text":"Zot6Handler Full name: \\Zotlabs\\Zot6\\Zot6Handler This class implements: \\Zotlabs\\Zot6\\IHandler Methods Notify public Notify(mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $data mixed $hub mixed Rekey public Rekey(mixed $sender, mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed Refresh public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed $force mixed Purge public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed reply_notify public static reply_notify(mixed $data, mixed $hub): mixed This method is static . Parameters: Parameter Type Description $data mixed $hub mixed reply_refresh public static reply_refresh(array $sender, array $recipients, array $hub, mixed $force): array This method is static . Parameters: Parameter Type Description $sender array $recipients array $hub array $force mixed rekey_request public static rekey_request(mixed $sender, mixed $data, mixed $hub): mixed This method is static . Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed reply_purge public static reply_purge(array $sender, array $recipients, array $hub): array This method is static . Parameters: Parameter Type Description $sender array $recipients array $hub array Automatically generated on 2025-03-15","title":"Zot6Handler"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#zot6handler","text":"Full name: \\Zotlabs\\Zot6\\Zot6Handler This class implements: \\Zotlabs\\Zot6\\IHandler","title":"Zot6Handler"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#methods","text":"","title":"Methods"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#notify","text":"public Notify(mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $data mixed $hub mixed","title":"Notify"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#rekey","text":"public Rekey(mixed $sender, mixed $data, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed","title":"Rekey"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#refresh","text":"public Refresh(mixed $sender, mixed $recipients, mixed $hub, mixed $force): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed $force mixed","title":"Refresh"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#purge","text":"public Purge(mixed $sender, mixed $recipients, mixed $hub): mixed Parameters: Parameter Type Description $sender mixed $recipients mixed $hub mixed","title":"Purge"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_notify","text":"public static reply_notify(mixed $data, mixed $hub): mixed This method is static . Parameters: Parameter Type Description $data mixed $hub mixed","title":"reply_notify"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_refresh","text":"public static reply_refresh(array $sender, array $recipients, array $hub, mixed $force): array This method is static . Parameters: Parameter Type Description $sender array $recipients array $hub array $force mixed","title":"reply_refresh"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#rekey_request","text":"public static rekey_request(mixed $sender, mixed $data, mixed $hub): mixed This method is static . Parameters: Parameter Type Description $sender mixed $data mixed $hub mixed","title":"rekey_request"},{"location":"dev/classes/Zotlabs/Zot6/Zot6Handler/#reply_purge","text":"public static reply_purge(array $sender, array $recipients, array $hub): array This method is static . Parameters: Parameter Type Description $sender array $recipients array $hub array Automatically generated on 2025-03-15","title":"reply_purge"},{"location":"dev/database/","text":"Database updates In the https://huburl/admin/dbsync page the administrator can check if any update was not successful and, if so, retry it. If an update has failed but doesn't register as failed for some reason, the administrator can attempt to re-execute the update. For example for DB update #1999, by visiting the webpage: https://huburl/admin/dbsync/1999 Database Tables Table Description abconfig arbitrary storage for connections of local channels abook connections of local channels account service provider account addon registered plugins app personal app data attach file attachments auth_codes OAuth usage cache OEmbed cache cal CalDAV containers for events channel local channels chat chat room content chatpresence channel presence information for chat chatroom data for the actual chat room clients OAuth usage config main configuration storage conv Diaspora private messages meta conversation structure event Events pgrp_member privacy groups (collections.md), group info pgrp privacy groups (collections.md), member info hook plugin hook registry hubloc xchan location storage, ties a hub location to an xchan iconfig extensible arbitrary storage for items issue future bug/issue database item all posts and webpages item_id (deprecated by iconfig) other identifiers on other services for posts likes likes of 'things' mail private messages menu webpage menu data menu_item entries for webpage menus notify notifications obj object data for things (x has y) outq output queue pconfig personal (per channel) configuration storage photo photo storage poll data for polls poll_elm data for poll elements profdef custom profile field definitions profext custom profile field data profile channel profiles profile_check DFRN remote auth use, may be obsolete register registrations requiring admin approval session web session storage shares shared item information sign Diaspora signatures. To be phased out. site site table to find directory peers source channel sources data sys_perms extensible permissions for OAuth term item taxonomy (categories, tags, etc.) table tokens OAuth usage updates directory sync updates verify general purpose verification structure vote vote data for polls xchan list of known channels in the universe xchat bookmarked chat rooms xconfig as pconfig but for channels with no local account xign channels ignored by friend suggestions xlink \"friends of friends\" linkages derived from poco, also ratings storage xperm OAuth/OpenID-Connect extensible permissions permissions storage xprof if this hub is a directory server, contains basic public profile info of everybody in the network xtag if this hub is a directory server, contains tags or interests of everybody in the network","title":"Database updates"},{"location":"dev/database/#database-updates","text":"In the https://huburl/admin/dbsync page the administrator can check if any update was not successful and, if so, retry it. If an update has failed but doesn't register as failed for some reason, the administrator can attempt to re-execute the update. For example for DB update #1999, by visiting the webpage: https://huburl/admin/dbsync/1999","title":"Database updates"},{"location":"dev/database/#database-tables","text":"Table Description abconfig arbitrary storage for connections of local channels abook connections of local channels account service provider account addon registered plugins app personal app data attach file attachments auth_codes OAuth usage cache OEmbed cache cal CalDAV containers for events channel local channels chat chat room content chatpresence channel presence information for chat chatroom data for the actual chat room clients OAuth usage config main configuration storage conv Diaspora private messages meta conversation structure event Events pgrp_member privacy groups (collections.md), group info pgrp privacy groups (collections.md), member info hook plugin hook registry hubloc xchan location storage, ties a hub location to an xchan iconfig extensible arbitrary storage for items issue future bug/issue database item all posts and webpages item_id (deprecated by iconfig) other identifiers on other services for posts likes likes of 'things' mail private messages menu webpage menu data menu_item entries for webpage menus notify notifications obj object data for things (x has y) outq output queue pconfig personal (per channel) configuration storage photo photo storage poll data for polls poll_elm data for poll elements profdef custom profile field definitions profext custom profile field data profile channel profiles profile_check DFRN remote auth use, may be obsolete register registrations requiring admin approval session web session storage shares shared item information sign Diaspora signatures. To be phased out. site site table to find directory peers source channel sources data sys_perms extensible permissions for OAuth term item taxonomy (categories, tags, etc.) table tokens OAuth usage updates directory sync updates verify general purpose verification structure vote vote data for polls xchan list of known channels in the universe xchat bookmarked chat rooms xconfig as pconfig but for channels with no local account xign channels ignored by friend suggestions xlink \"friends of friends\" linkages derived from poco, also ratings storage xperm OAuth/OpenID-Connect extensible permissions permissions storage xprof if this hub is a directory server, contains basic public profile info of everybody in the network xtag if this hub is a directory server, contains tags or interests of everybody in the network","title":"Database Tables"},{"location":"dev/database/db_abook/","text":"abook Field Description Type Null Key Default Extra abook_id Sequential ID int(10) unsigned NO PRI NULL auto_increment abook_account account.account_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_channel channel.channel_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_xchan xchan.xchan_hash of the target identity (this channel's connection) char(255) NO MUL abook_my_perms bitfield of all specific permissions granted this connection int(11) NO MUL 0 abook_their_perms bitfield of all permissions granted to you by this connection int(11) NO MUL 0 abook_closeness \"closeness\" value for optional affinity tool, 0-99 tinyint(3) unsigned NO MUL 99 abook_created Datetime this record was created datetime NO MUL 0000-00-00 00:00:00 abook_updated Datetime this record was modified datetime NO MUL 0000-00-00 00:00:00 abook_connected datetime of last successful \"poll\" for this connection datetime NO MUL 0000-00-00 00:00:00 abook_dob Datetime of connection's birthday converted from their timezone to UTC datetime NO MUL 0000-00-00 00:00:00 abook_flags No longer used int(11) NO MUL 0 abook_profile profile.guid of profile to display to this connection if authenticated char(64) NO MUL abook_blocked Bi-directional communications with this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_ignored Incoming communications from this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_hidden This connection will not be shown as a connection to anybody but the channel owner int(11) NO MUL 0 abook_archived This connection is likely non-functioning and the entry and conversations are preserved, but further polled communications will not be attempted int(11) NO MUL 0 abook_pending A connection request was received from this channel but has not been approved by the channel owner, public communications may still be visible but no additional permissions have been granted int(11) NO MUL 0 abook_unconnected currently unused. Projected usage is to indicate \"one-way\" connections which were instigated on this end but are still pending on the remote end int(11) NO MUL 0 abook_self is a special case where the owner is the target. Every channel has one abook entry with abook_self and with a target abook_xchan set to channel.channel_hash. When this flag is present, abook_my_perms is the default permissions granted to all new connections and several other fields are unused int(11) NO MUL 0 abook_feed indicates this connection is an RSS/Atom feed and may trigger special handling int(11) NO MUL 0 abook_incl connection filter allow rules separated by LF text NO MUL 0 abook_excl connection filter deny rules separated by LF text NO MUL 0 abook_instance comma separated list of site urls of all channel clones that this connection is connected with (used only for singleton networks which don't support cloning) text NO MUL 0","title":"abook"},{"location":"dev/database/db_abook/#abook","text":"Field Description Type Null Key Default Extra abook_id Sequential ID int(10) unsigned NO PRI NULL auto_increment abook_account account.account_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_channel channel.channel_id of the channel which owns this record int(10) unsigned NO MUL NULL abook_xchan xchan.xchan_hash of the target identity (this channel's connection) char(255) NO MUL abook_my_perms bitfield of all specific permissions granted this connection int(11) NO MUL 0 abook_their_perms bitfield of all permissions granted to you by this connection int(11) NO MUL 0 abook_closeness \"closeness\" value for optional affinity tool, 0-99 tinyint(3) unsigned NO MUL 99 abook_created Datetime this record was created datetime NO MUL 0000-00-00 00:00:00 abook_updated Datetime this record was modified datetime NO MUL 0000-00-00 00:00:00 abook_connected datetime of last successful \"poll\" for this connection datetime NO MUL 0000-00-00 00:00:00 abook_dob Datetime of connection's birthday converted from their timezone to UTC datetime NO MUL 0000-00-00 00:00:00 abook_flags No longer used int(11) NO MUL 0 abook_profile profile.guid of profile to display to this connection if authenticated char(64) NO MUL abook_blocked Bi-directional communications with this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_ignored Incoming communications from this channel are blocked, regardless of other permissions int(11) NO MUL 0 abook_hidden This connection will not be shown as a connection to anybody but the channel owner int(11) NO MUL 0 abook_archived This connection is likely non-functioning and the entry and conversations are preserved, but further polled communications will not be attempted int(11) NO MUL 0 abook_pending A connection request was received from this channel but has not been approved by the channel owner, public communications may still be visible but no additional permissions have been granted int(11) NO MUL 0 abook_unconnected currently unused. Projected usage is to indicate \"one-way\" connections which were instigated on this end but are still pending on the remote end int(11) NO MUL 0 abook_self is a special case where the owner is the target. Every channel has one abook entry with abook_self and with a target abook_xchan set to channel.channel_hash. When this flag is present, abook_my_perms is the default permissions granted to all new connections and several other fields are unused int(11) NO MUL 0 abook_feed indicates this connection is an RSS/Atom feed and may trigger special handling int(11) NO MUL 0 abook_incl connection filter allow rules separated by LF text NO MUL 0 abook_excl connection filter deny rules separated by LF text NO MUL 0 abook_instance comma separated list of site urls of all channel clones that this connection is connected with (used only for singleton networks which don't support cloning) text NO MUL 0","title":"abook"},{"location":"dev/database/db_account/","text":"account Field Description Type Null Key Default Extra account_id table index int(10) unsigned NO PRI NULL auto_increment account_parent for hierarchical accounts, the account_id of the parent to this one, if account_parent = account_id, this is the top level account int(10) unsigned NO MUL 0 account_default_channel channel_id of channel to connect on login int(10) unsigned NO MUL 0 account_salt complexity token for account_password char(32) NO account_password hashed password for this account char(255) NO account_email essentially the login ID, although it is usually possible to login with a channel address char(255) NO MUL account_external Currently unused char(255) NO MUL account_language default language (closest available browser-accept language when account was created) char(16) NO en account_created timestamp of account creation datetime NO 0000-00-00 00:00:00 account_lastlog timestamp of last login (or daily update if \"remember me\" is in effect) datetime NO MUL 0000-00-00 00:00:00 account_flags see notes int(10) unsigned NO MUL 0 account_roles see notes int(10) unsigned NO MUL 0 account_reset verification token for password reset char(255) NO account_expires timestamp when account expires and will be deleted datetime NO MUL 0000-00-00 00:00:00 account_expire_notified timestamp of last warning of account expiration datetime NO 0000-00-00 00:00:00 account_service_class service class for this account, determines what if any limits/restrictions are in place char(32) NO MUL account_level future use int(10) unsigned NO MUL 0 account_password_changed timestamp of last password change - to limit account deletion for 48 hours to prevent malicious activity datetime NO MUL 0000-00-00 00:00:00 Notes: Account Flags define ( 'ACCOUNT_OK', 0x0000 ); define ( 'ACCOUNT_UNVERIFIED', 0x0001 ); define ( 'ACCOUNT_BLOCKED', 0x0002 ); define ( 'ACCOUNT_EXPIRED', 0x0004 ); define ( 'ACCOUNT_REMOVED', 0x0008 ); define ( 'ACCOUNT_PENDING', 0x0010 ); Account roles define ( 'ACCOUNT_ROLE_SYSTEM', 0x0002 ); // 2 - this is the special system account define ( 'ACCOUNT_ROLE_DEVELOPER', 0x0004 ); define ( 'ACCOUNT_ROLE_ADMIN', 0x1000 ); // 4096 - this account is an administrator","title":"account"},{"location":"dev/database/db_account/#account","text":"Field Description Type Null Key Default Extra account_id table index int(10) unsigned NO PRI NULL auto_increment account_parent for hierarchical accounts, the account_id of the parent to this one, if account_parent = account_id, this is the top level account int(10) unsigned NO MUL 0 account_default_channel channel_id of channel to connect on login int(10) unsigned NO MUL 0 account_salt complexity token for account_password char(32) NO account_password hashed password for this account char(255) NO account_email essentially the login ID, although it is usually possible to login with a channel address char(255) NO MUL account_external Currently unused char(255) NO MUL account_language default language (closest available browser-accept language when account was created) char(16) NO en account_created timestamp of account creation datetime NO 0000-00-00 00:00:00 account_lastlog timestamp of last login (or daily update if \"remember me\" is in effect) datetime NO MUL 0000-00-00 00:00:00 account_flags see notes int(10) unsigned NO MUL 0 account_roles see notes int(10) unsigned NO MUL 0 account_reset verification token for password reset char(255) NO account_expires timestamp when account expires and will be deleted datetime NO MUL 0000-00-00 00:00:00 account_expire_notified timestamp of last warning of account expiration datetime NO 0000-00-00 00:00:00 account_service_class service class for this account, determines what if any limits/restrictions are in place char(32) NO MUL account_level future use int(10) unsigned NO MUL 0 account_password_changed timestamp of last password change - to limit account deletion for 48 hours to prevent malicious activity datetime NO MUL 0000-00-00 00:00:00","title":"account"},{"location":"dev/database/db_account/#notes","text":"","title":"Notes:"},{"location":"dev/database/db_account/#account-flags","text":"define ( 'ACCOUNT_OK', 0x0000 ); define ( 'ACCOUNT_UNVERIFIED', 0x0001 ); define ( 'ACCOUNT_BLOCKED', 0x0002 ); define ( 'ACCOUNT_EXPIRED', 0x0004 ); define ( 'ACCOUNT_REMOVED', 0x0008 ); define ( 'ACCOUNT_PENDING', 0x0010 );","title":"Account Flags"},{"location":"dev/database/db_account/#account-roles","text":"define ( 'ACCOUNT_ROLE_SYSTEM', 0x0002 ); // 2 - this is the special system account define ( 'ACCOUNT_ROLE_DEVELOPER', 0x0004 ); define ( 'ACCOUNT_ROLE_ADMIN', 0x1000 ); // 4096 - this account is an administrator","title":"Account roles"},{"location":"dev/database/db_addon/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td]generated index[td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aname[/td][td]plugin base (file)name[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]version[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]installed[/td][td]currently always 1[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hidden[/td][td]currently unused[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]tstamp[/td][td]file timestamp to check for reloads[/td][td]bigint(20)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]plugin_admin[/td][td]1 = has admin config, 0 = has no admin config[/td][td]tinyint(1)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table] Notes: These are addons which have been enabled by the site administrator on the admin/plugin page Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db addon"},{"location":"dev/database/db_app/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]generated index[/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]app_id[/td][td]hash identifying this app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_sig[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_author[/td][td]xchan_hash of app creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_name[/td][td]name of app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_desc[/td][td]optional description of app[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]app_url[/td][td]target_url[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_photo[/td][td]app icon[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_version[/td][td]version of app[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_channel[/td][td]channel_id owning this instance of the app[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]app_addr[/td][td]reddress/webbie of app creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_price[/td][td]free-form price field[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]app_page[/td][td]currently unused[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_requires[/td][td]access rules[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_created[/td][td]datetime of app creation[/td][td]datetime[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_edited[/td][td]datetime of last app edit[/td][td]datetime[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_deleted[/td][td]1 = deleted, 0 = normal[/td][td]int(11)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]app_system[/td][td]1 = imported system app, 0 = member created app[/td][td]int(11)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [/table] Storage for personal apps Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db app"},{"location":"dev/database/db_attach/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]generated index[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td]account_id of owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id of owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hash[/td][td]hash for cross-site identification[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]creator[/td][td]xchan_hash of author/creator[/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filename[/td][td]filename of original[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filetype[/td][td]mimetype[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]filesize[/td][td]size in bytes[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]revision[/td][td]for version control (partially implemented)[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]folder[/td][td]attach.hash of parent folder[/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]flags[/td][td]no longer used[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]is_dir[/td][td]0 (file) or 1 to indicate a directory[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]is_photo[/td][td]if 1, a photo is linked to this resource[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]os_storage[/td][td]if 0, data contains content; if 1 data contains path to content (always 1 in hubzilla)[/td][td]tinyint[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]os_path[/td][td]under construction, store the system path[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]display_path[/td][td]under construction, store the human readable path[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]content[/td][td]file data or pathname to stored data if ATTACH_FLAG_OS[/td][td]longblob[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]creation time[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]edited[/td][td]last edit time[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]permissions[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] permissions are xchan_hash or group_hash surrounded by angle chars. e.g. ' ' Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db attach"},{"location":"dev/database/db_auth_codes/","text":"OAuth2 authorisation register - currently implemented but unused [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]varchar(40)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]redirect_uri[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]scope[/td][td][/td][td]varchar(250)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db auth codes"},{"location":"dev/database/db_cache/","text":"OEmbed information cache [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]k[/td][td]horizontal width + url or resource[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td]OEmbed response from site[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]updated[/td][td]datetime of cache insertion[/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db cache"},{"location":"dev/database/db_channel/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]channel_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_account_id[/td][td]account.id of the account owning this channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_primary[/td][td]1 = this is the primary instance of this channel[/td][td]tinyint(1) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_name[/td][td]Name that this channel is known by[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_address[/td][td]\"username\" or URL-and-email safe nickname[/td][td]char(255)[/td][td]NO[/td][td]UNI[/td][td][/td][td] [/td][/tr] [tr][td]channel_guid[/td][td]Long hash representing a psuedo-unique ID, does not have ot be globally unique[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_guid_sig[/td][td]channel.gui signed with channel.prvkey and base64url_encoded[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_hash[/td][td]base64url_encode of a 64-char whirlpool hash of channel.guid and channel_guid_sig concatenated, synonymous with xchan_hash.[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_timezone[/td][td]PHP-legal timezone[/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]UTC[/td][td] [/td][/tr] [tr][td]channel_location[/td][td]Default for item.location[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_theme[/td][td]channel theme preference[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_startpage[/td]relative site URL to visit after logging in[td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]channel_pubkey[/td][td]RSA public key 4096 bit[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_prvkey[/td][td]RSA private key 4096 bit[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_notifyflags[/td][td]bifield representing what notification types are active[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]65535[/td][td] [/td][/tr] [tr][td]channel_pageflags[/td][td]bitfield of special channel uses[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_dirdate[/td][td]time when directory was last pinged. Must do this once a month[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_lastpost[/td][td]date of last post for this channel. May not be fully implemented[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_deleted[/td][td]time when channel was deleted[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]channel_max_anon_mail[/td][td]unused[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]10[/td][td] [/td][/tr] [tr][td]channel_max_friend_req[/td][td]unused[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]10[/td][td] [/td][/tr] [tr][td]channel_expire_days[/td][td]expire imported content that hasn't been otherwise protected after this many days, 0 is no expiration[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_passwd_reset[/td][td]password reset token[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]channel_default_group[/td][td]put all new connections into the group with this name[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]channel_allow_cid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_allow_gid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_deny_cid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_deny_gid[/td][td]Default permissions for this channel[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channel_r_stream[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_profile[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_photos[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_abook[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_stream[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_wall[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_tagwall[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_comment[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_mail[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_photos[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_chat[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_a_delegate[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_r_storage[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_storage[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_r_pages[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_pages[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_a_republish[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_w_like[/td][td]specific permission bitfield[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_removed[/td][td]if 1, this channel has been deleted[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_system[/td][td]if 1, this is the special system channel on this site[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]128[/td][td] [/td][/tr] [tr][td]channel_moved[/td][td]URL of relocated channel, making this instance abandoned if set[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db channel"},{"location":"dev/database/db_chat/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]chat_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]chat_room[/td][td]chatroom.cr_id for this chat[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]chat_xchan[/td][td]author xchan_hash[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]chat_text[/td][td]the text of the chat message[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]timestamp of this message[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db chat"},{"location":"dev/database/db_chatpresence/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]cp_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cp_room[/td][td]chatroom.cr_id of the chatroom[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cp_xchan[/td][td]xchan_hash of the chatroom participant[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]cp_last[/td][td]datetime last ping[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cp_status[/td][td]text status description e.g. \"online\"[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cp_client[/td][td]IP address of this client[/td][td]char(128)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db chatpresence"},{"location":"dev/database/db_chatroom/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]cr_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cr_aid[/td][td]account.id of chatroom owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cr_uid[/td][td]channel.channel_id of chatroom owner[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cr_name[/td][td]visible name of chatroom[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]cr_created[/td][td]creation timestampe[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cr_edited[/td][td]edited timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]cr_expire[/td][td]expiration period for chats in this chatroom in minutes, 0 is no expiration[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]permissions for this room[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db chatroom"},{"location":"dev/database/db_clients/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]pw[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]redirect_uri[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]clname[/td][td][/td][td]text[/td][td]YES[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]icon[/td][td][/td][td]text[/td][td]YES[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db clients"},{"location":"dev/database/db_config/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db config"},{"location":"dev/database/db_conv/","text":"Used in Diaspora private mails [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]guid[/td][td]A unique identifier for this conversation[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]recips[/td][td]sender_handle;recipient_handle[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]creator[/td][td]handle of creator[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td]creation timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]updated[/td][td]edited timestamp[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]subject[/td][td]subject of initial message (obscured for privacy)[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db conv"},{"location":"dev/database/db_event/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]event_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]edited[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dtstart[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]dtend[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]summary[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]description[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]location[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]etype[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]nofinish[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]adjust[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]1[/td][td] [/td][/tr] [tr][td]dismissed[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_status[/td][td][/td][td]charr(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_status_date[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_percent[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_repeat[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_sequence[/td][td][/td][td]smallint[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_priority[/td][td][/td][td]smallint[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]event_vdata[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]cal_id[/td][td][/td][td]int(10)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db event"},{"location":"dev/database/db_fcontact/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]request[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]nick[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]batch[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]notify[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]poll[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]confirm[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]priority[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]network[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]alias[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pubkey[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]updated[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db fcontact"},{"location":"dev/database/db_ffinder/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]fid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db ffinder"},{"location":"dev/database/db_fserver/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]server[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]posturl[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]key[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db fserver"},{"location":"dev/database/db_fsuggest/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]request[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]note[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db fsuggest"},{"location":"dev/database/db_hook/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hook[/td][td]name of hook[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]file[/td][td]relative filename of hook handler[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]fn[/td][td]function name of hook handler[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]priority[/td][td]can be used to sort conflicts in hook handling by calling handlers in priority order[/td][td]int(11) unsigned[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]hook_version[/td][td]version 0 hooks must have two arguments, the App and the hook data. version 1 hooks have 1 argument - the hook data[/td][td]int(11) unsigned[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db hook"},{"location":"dev/database/db_hubloc/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]hubloc_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hubloc_guid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_guid_sig[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_network[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hubloc_status[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hubloc_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_url_sig[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_host[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_callback[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]hubloc_connect[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]hubloc_sitekey[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]hubloc_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]hubloc_connected[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db hubloc"},{"location":"dev/database/db_issue/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]issue_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]issue_created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]issue_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]issue_assigned[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_priority[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_status[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]issue_component[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db issue"},{"location":"dev/database/db_item/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]Sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]mid[/td][td]Message-id - globally unique, there can be several items with the same message-ID in the table as they may have different uid owners[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]aid[/td][td]channel_account_id of the channel_id (uid) which owns this copy of the item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id (uid) which owns this copy of the item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]parent[/td][td]item.id of the parent to this item if it is a reply of some form; otherwise this must be set to the id of this item[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]parent_mid[/td][td]Globally unique message-id of the parent to this item[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]thr_parent[/td][td]If the parent of this item is not the top-level item in the conversation, the message-id of the immediate parent; otherwise set to parent_mid[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td]Creation timestamp. If creation is more than ten minutes into the future, set item_delayed to 1; it will automatically be delivered by the poller once the created time has passed[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]edited[/td][td]Date of last edit (default is created)[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]expires[/td][td]Date this item expires and will be removed[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]commented[/td][td]Date of last comment/reply to this item[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]received[/td][Date the item was received at this sitetd][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]changed[/td][td]Date that something in the conversation changed, indicating clients should fetch the conversation again[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]comments_closed[/td][td]Date after which no more comments will be accepted[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]owner_xchan[/td][td]xchan_hash of the owner of this conversation (this is who replies are sent to)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]author_xchan[/td][td]xchan_hash of the author of this item[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]source_xchan[/td][td]xchan_hash of the external source of this item belongs to multiple delivery chains and comments need to be uplinked[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mimetype[/td][td]mime type of the content body[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]title[/td][td]item title[/td][td]text[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]body[/td][td]item body content[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]app[/td][td]application which generated this item[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]lang[/td][td]auto-detected language[/td][td]char(64)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]revision[/td][td]future use, version control[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]verb[/td][td]ActivityStreams verb (old style URI)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_type[/td][td]ActivityStreams object type (old style URI)[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]obj[/td][td]JSON encoded object structure unless it is an implied object (normal post)[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]tgt_type[/td][td]ActivityStreams target type if applicable (URI)[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]target[/td][td]JSON encoded target structure if used[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]layout_mid[/td][td]For webpages, which layout (mid or message_id) to use when displaying this page[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]postopts[/td][td]External post connectors add their network name to this comma-separated string to identify that they should be delivered to these networks during delivery[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]route[/td][td]comma separated xchan list of xchans where this message was routed on its way to this destination, used for route loop discovery and rejection of comments which arrived by alternate routes and may have different permissions[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]llink[/td][td]URL of a displayable copy of this post/conversation on this site[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]plink[/td][td]permalink or URL toa displayable copy of the message at its source[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]resource_id[/td][td]Used to link other tables to items, it identifies the linked resource and if set must also set resource_type[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]resource_type[/td][td]default none, if a linked resource this should be the name of the resource type such as \"photo\" or \"event\"[/td][td]char(16)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]attach[/td][td]JSON structure representing attachments to this item[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]sig[/td][td]RSA signature of the item body by the original author if the private key is available[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]diaspora_meta[/td][td]Used to store Diaspora comment signatures with their weird requirements[/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]location[/td][td]text location where this item originated[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]coord[/td][td] longitude/latitude pair representing location where this item originated[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]public_policy[/td][td]If the author has specified restrictions (this network, this site) etc. for distribution, the corresponding policy text is present here and item_private = 1[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]comment_policy[/td][td]If the author has specified comment restrictions (thei network, this site, etc.) the corresponding policy text is present here[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]allow_cid[/td][td]Access Control - list of allowed xchans ' ...'[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td]Access Control - list of allowed group hashes, see allow_cid[td][/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td]Access Control - list of denied xchans[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td]Access Control - list of denied groups[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]item_restrict[/td]no longer used[td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_flags[/td][td]no longer used[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_private[/td][td]distribution is restricted[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_origin[/td][td]item originated at this site[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_unseen[/td][td]item has not been seen[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_starred[/td][td]item has been favourited[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_uplink[/td][td]This item is part of a multiple delivery chain and must be uplinked to the original sender (source_xchan)[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_consensus[/td][td]This item allows voting tools[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_wall[/td][td]This item was posted to the wall of uid[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_thread_top[/td][td]parent = id, this is the top post in a conversation [/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_notshown[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_nsfw[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_relay[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_mentionsme[/td][td]The owner of this item was mentioned in it[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_nocomment[/td][td]if 1, no comments are allowed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_obscured[/td][td]no longer used[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_verified[/td][td]the signature has been verified on this site[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_retained[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_rss[/td][td]item originated in a feed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_deleted[/td][td]item has been deleted[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_type[/td][td]used to identify webpage and design element types, 0 is a normal conversation item[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_hidden[/td][td]0 or 1 if item is not to be displayed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_unpublished[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_delayed[/td][td]item is posted in the future[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_pending_remove[/td][td]item is in the process of being removed[/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]item_blocked[/td][td][/td][td]tinyint(4)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db item"},{"location":"dev/database/db_item_id/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]iid[/td][td]item.id of the referenced item[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]sid[/td][td]an additional identifier to attach or link to the referenced item (often used to store a message_id from another system in order to suppress duplicates)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]service[/td][td]the name or description of the service which generated this identifier[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db item id"},{"location":"dev/database/db_likes/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(11) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]liker[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]likee[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target_type[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target_id[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]target[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db likes"},{"location":"dev/database/db_mail/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]convid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]mail_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]from_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]to_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]account_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]title[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]body[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]attach[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]parent_mid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db mail"},{"location":"dev/database/db_menu/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]menu_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]menu_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]menu_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]menu_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]menu_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db menu"},{"location":"dev/database/db_menu_item/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]mitem_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]mitem_link[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mitem_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]mitem_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mitem_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]mitem_menu_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]mitem_order[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db menu item"},{"location":"dev/database/db_notify/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xname[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]date[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]msg[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]aid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]link[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]parent[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]seen[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ntype[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]otype[/td][td][/td][td]char(16)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db notify"},{"location":"dev/database/db_obj/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]obj_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]obj_page[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_verb[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_type[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]obj_obj[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]obj_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db obj"},{"location":"dev/database/db_outq/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]outq_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]outq_account[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_driver[/td][td][/td][td]char(32)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]outq_posturl[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]outq_async[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_delivered[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]outq_created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]outq_updated[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]outq_notify[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]outq_msg[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db outq"},{"location":"dev/database/db_pconfig/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db pconfig"},{"location":"dev/database/db_pgrp/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td]unique hash representing this group with the group name appended[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]uid[/td][td]channel.channel_id owning this data[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]visible[/td][td]1 indicates the member list is not private[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]deleted[/td][td]1 indicates the group has been deleted[/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]gname[/td][td]human readable name of group[/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db pgrp"},{"location":"dev/database/db_pgrp_member/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td]channel.channel_id of the owner of this data[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]gid[/td][td]groups.id of the associated group[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan[/td][td]xchan.xchan_hash of the member assigned to the associated group[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db pgrp member"},{"location":"dev/database/db_photo/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]resource_id[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]edited[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]title[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]description[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]album[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]filename[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]mimetype[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]image/jpeg[/td][td] [/td][/tr] [tr][td]height[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]width[/td][td][/td][td]smallint(6)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]filesize[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]content[/td][td][/td][td]mediumblob[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]scale[/td][td][/td][td]tinyint(3)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]profile[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]photo_flags[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]allow_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]allow_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_cid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]deny_gid[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db photo"},{"location":"dev/database/db_poll/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]poll_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]poll_channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]poll_desc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]poll_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]poll_votes[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db poll"},{"location":"dev/database/db_poll_elm/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]pelm_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]pelm_poll[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]pelm_desc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pelm_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td][/td][td]0[/td][td] [/td][/tr] [tr][td]pelm_result[/td][td][/td][td]float[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db poll elm"},{"location":"dev/database/db_profdef/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]field_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]field_type[/td][td][/td][td]char(16)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_help[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]field_inputs[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db profdef"},{"location":"dev/database/db_profext/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db profext"},{"location":"dev/database/db_profile/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]profile_guid[/td][td][/td][td]char(64)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]aid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]profile_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]is_default[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]hide_friends[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]fullname[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]pdesc[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]chandesc[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dob[/td][td][/td][td]char(32)[/td][td]NO[/td][td][/td][td]0000-00-00[/td][td] [/td][/tr] [tr][td]dob_tz[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]UTC[/td][td] [/td][/tr] [tr][td]address[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]locality[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]region[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]postal_code[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]country_name[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]hometown[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]gender[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]marital[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]partner[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]howlong[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]sexual[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]politic[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]religion[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]keywords[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]likes[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]dislikes[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]about[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]summary[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]music[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]book[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]tv[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]film[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]interest[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]romance[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]employment[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]education[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]contact[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]channels[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]homepage[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]photo[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]thumb[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]publish[/td][td][/td][td]tinyint(1)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db profile"},{"location":"dev/database/db_profile_check/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]dfrn_id[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]sec[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]expire[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db profile check"},{"location":"dev/database/db_register/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]password[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]language[/td][td][/td][td]char(16)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db register"},{"location":"dev/database/db_session/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]sid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]data[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]expire[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db session"},{"location":"dev/database/db_shares/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]share_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]share_type[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]share_target[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]share_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db shares"},{"location":"dev/database/db_sign/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]retract_iid[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]signed_text[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]signature[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]signer[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db sign"},{"location":"dev/database/db_site/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]site_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]site_access[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_update[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_pull[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_sync[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]site_directory[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]site_register[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]site_sellpage[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]site_location[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]site_realm[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db site"},{"location":"dev/database/db_source/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]src_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]src_channel_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]src_channel_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]src_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]src_patt[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db source"},{"location":"dev/database/db_spam/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(11)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]spam[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ham[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]term[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]date[/td][td][/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db spam"},{"location":"dev/database/db_sys_perms/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]public_perm[/td][td][/td][td]tinyint(1) unsigned[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db sys perms"},{"location":"dev/database/db_term/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]tid[/td][td]sequential index[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]aid[/td][td]channel_account_id of the controlling channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]uid[/td][td]channel_id of the controlling channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]oid[/td][td]DB index of linked thing[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]otype[/td][td]type of linked thing[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]ttype[/td][td]taxonomy type (See Tag/term types in boot.php)[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]term[/td][td]the actual taxonomy term[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]url[/td]relevant link (for tags and mentions, a link to the associated resource)[td][/td][td]char(255)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]imgurl[/td][td]rarely used - an image associated with this taxonomy term[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]term_hash[/td][td]unique hash for this entry[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]parent_hash[/td][td]for hierarchical taxonomies, the hash of the relevant parent[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db term"},{"location":"dev/database/db_tokens/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]varchar(40)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]secret[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]client_id[/td][td][/td][td]varchar(20)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]expires[/td][td][/td][td]bigint(20) unsigned[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]scope[/td][td][/td][td]varchar(200)[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]uid[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db tokens"},{"location":"dev/database/db_updates/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]ud_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]ud_hash[/td][td][/td][td]char(128)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]ud_guid[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]ud_date[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]ud_last[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]ud_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]ud_addr[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db updates"},{"location":"dev/database/db_verify/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]channel[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]type[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]token[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]meta[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]created[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db verify"},{"location":"dev/database/db_vote/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]vote_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]vote_poll[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]vote_element[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]vote_result[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]vote_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db vote"},{"location":"dev/database/db_xchan/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xchan_hash[/td][td]calculated hash of this extended channel[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_guid[/td][td]channel_guid of this extended channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_guid_sig[/td][td]base64url encoded signature of the guid[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_pubkey[/td][td]public key for verifying signed data and assertions[/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xchan_photo_mimetype[/td][td]mimetype of the profile photo[/td][td]char(32)[/td][td]NO[/td][td][/td][td]image/jpeg[/td][td] [/td][/tr] [tr][td]xchan_photo_l[/td][td]photo url 300px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_photo_m[/td][td]photo url 80 px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_photo_s[/td][td]photo url 48 px[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_addr[/td][td]user@host[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_url[/td][td]url of channel page on primary hub location[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_connurl[/td]poco url[td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_follow[/td]url template for following %s[td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_connpage[/td][td]for premium channels url of channel to display when connecting[/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xchan_name[/td][td]human readabl name of channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_network[/td][td]network of channel for instance 'zot', 'diaspora', 'unknown'[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_instance_url[/td][td]no longer used[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchan_flags[/td][td]no longer used[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_photo_date[/td][td]timestamp of last photo change in GMT[/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]xchan_name_date[/td][td]timestamp of last name change in GMT[/td][td]datetime[/td][td]NO[/td][td][/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [tr][td]xchan_hidden[/td][td]flag - channel is hidden[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_orphan[/td][td]flag - channel has no known hubloc locations[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_censored[/td][td]flag - channel has been censored[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_selfcensored[/td][td]flag - channel is self censored (adult or nsfw)[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_system[/td][td]flag - this represents a system channel[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_pubforum[/td][td]flag - channel is a public forum[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan_deleted[/td][td]flag - channel was deleted[/td][td]int(10) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xchan"},{"location":"dev/database/db_xchat/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xchat_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xchat_url[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xchat_edited[/td][td][/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xchat"},{"location":"dev/database/db_xconfig/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xchan[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]cat[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]k[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]v[/td][td][/td][td]mediumtext[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xconfig"},{"location":"dev/database/db_xign/","text":"xign - holds xchan information for channels that have been ignored in 'friend suggestions' [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]uid[/td][td]local channel.channel_id[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xchan[/td][td]xchan.xchan_hash of ignored channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xign"},{"location":"dev/database/db_xlink/","text":"xlink - used to store social graph and channel ratings [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xlink_id[/td][td]sequential ID[/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xlink_xchan[/td][td]xchan.xchan_hash of controlling channel[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xlink_link[/td][td]xchan.xchan_hash of link target (connection or rating)[/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xlink_rating[/td][td]int rating[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_rating_txt[/td][td]rating text[/td][td]mediumtext[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_updated[/td][td]timestamp of update in GMT[/td][td]datetime[/td][td]NO[/td][td]MUL[/td][td]0000-00-00 00:00:00[/td][td] [tr][td]xlink_static[/td][td]0 for social graph, 1 for ratings[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xlink_sig[/td][td]base64url encoded signature of rating information[/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xlink"},{"location":"dev/database/db_xprof/","text":"xprof - stores searchable public profile information on directory servers [table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xprof_hash[/td][td]xchan.xchan_hash of this channel[/td][td]char(255)[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_age[/td][td]current age (updated monthly)[/td][td]tinyint(3) unsigned[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [tr][td]xprof_desc[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_dob[/td][td][/td][td]char(12)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_gender[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_marital[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_sexual[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_locale[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_region[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_postcode[/td][td][/td][td]char(32)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_country[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xprof_keywords[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_about[/td][td][/td][td]text[/td][td]NO[/td][td][/td][td]NULL[/td][td] [/td][/tr] [tr][td]xprof_homepage[/td][td][/td][td]char(255)[/td][td]NO[/td][td][/td][td][/td][td] [/td][/tr] [tr][td]xprof_hometown[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xprof"},{"location":"dev/database/db_xtag/","text":"[table] [tr][th]Field[/th][th]Description[/th][th]Type[/th][th]Null[/th][th]Key[/th][th]Default[/th][th]Extra [/th][/tr] [tr][td]xtag_id[/td][td][/td][td]int(10) unsigned[/td][td]NO[/td][td]PRI[/td][td]NULL[/td][td]auto_increment [/td][/tr] [tr][td]xtag_hash[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td]NULL[/td][td] [/td][/tr] [tr][td]xtag_term[/td][td][/td][td]char(255)[/td][td]NO[/td][td]MUL[/td][td][/td][td] [/td][/tr] [tr][td]xtag_flags[/td][td][/td][td]int(11)[/td][td]NO[/td][td]MUL[/td][td]0[/td][td] [/td][/tr] [/table] Return to [zrl=[baseurl]/help/database]database documentation[/zrl]","title":"Db xtag"},{"location":"dev/plugins/","text":"Creating Plugins/Addons for $Projectname So you want to make $Projectname do something it doesn't already do. There are lots of ways. But let's learn how to write a plugin or addon. In your $Projectname folder/directory, you will probably see a sub-directory called 'addon'. If you don't have one already, go ahead and create it. mkdir addon Then figure out a name for your addon. You probably have at least a vague idea of what you want it to do. For our example I'm going to create a plugin called 'randplace' that provides a somewhat random location for each of your posts. The name of your plugin is used to find the functions we need to access and is part of the function names, so to be safe, use only simple text characters. Once you've chosen a name, create a directory beneath 'addon' to hold your working file or files. mkdir addon/randplace Now create your plugin file. It needs to have the same name, and it's a PHP script, so using your favourite editor, create the file addon/randplace/randplace.php The very first line of this file needs to be <?php Then we're going to create a comment block to describe the plugin. There's a special format for this. We use / ... / comment-style and some tagged lines consisting of /** * * Name: Random Place (here you can use better descriptions than you could in the filename) * Description: Sample $Projectname plugin, Sets a random place when posting. * Version: 1.0 * Author: Mike Macgirvin <mike@zothub.com> * */ These tags will be seen by the site administrator when he/she installs or manages plugins from the admin panel. There can be more than one author. Just add another line starting with 'Author:'. The typical plugin will have at least the following functions: pluginname_load() pluginname_unload() In our case, we'll call them randplace_load() and randplace_unload(), as that is the name of our plugin. These functions are called whenever we wish to either initialise the plugin or remove it from the current webpage. Also if your plugin requires things like altering the database schema before it can run for the very first time, you would likely place these instructions in the functions named pluginname_install() pluginname_uninstall() Next we'll talk about hooks . Hooks are places in $Projectname code where we allow plugins to do stuff. There are a lot of these , and they each have a name. What we normally do is use the pluginname_load() function to register a \"handler function\" for any hooks you are interested in. Then when any of these hooks are triggered, your code will be called. We register hook handlers with the 'register_hook()' function. It takes 3 arguments. The first is the hook we wish to catch, the second is the filename of the file to find our handler function (relative to the base of your $Projectname installation), and the third is the function name of your handler function. So let's create our randplace_load() function right now. function randplace_load() { register_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook'); register_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings'); register_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post'); } So we're going to catch three events, 'post_local' which is triggered when a post is made on the local system, 'feature_settings' to set some preferences for our plugin, and 'feature_settings_post' to store those settings. Next we'll create an unload function. This is easy, as it just unregisters our hooks. It takes exactly the same arguments. function randplace_unload() { unregister_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook'); unregister_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings'); unregister_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post'); } Hooks are called with two arguments. The first is always $a, which is our global App structure and contains a huge amount of information about the state of the web request we are processing; as well as who the viewer is, and what our login state is, and the current contents of the web page we're probably constructing. The second argument is specific to the hook you're calling. It contains information relevant to that particular place in the program, and often allows you to look at, and even change it. In order to change it, you need to add '&' to the variable name so it is passed to your function by reference. Otherwise it will create a copy and any changes you make will be lost when the hook process returns. Usually (but not always) the second argument is a named array of data structures. Please see the \"hook reference\" (not yet written as of this date) for details on any specific hook. Occasionally you may need to view the program source to see precisely how a given hook is called and how the results are processed. Let's go ahead and add some code to implement our post_local hook handler. function randplace_post_hook($a, &$item) { /** * * An item was posted on the local system. * We are going to look for specific items: * - A status post by a profile owner * - The profile owner must have allowed our plugin * */ logger('randplace invoked'); if(! local_channel()) /* non-zero if this is a logged in user of this system */ return; if(local_channel() != $item['uid']) /* Does this person own the post? */ return; if(($item['parent']) || (! is_item_normal($item))) { /* If the item has a parent, or isn't \"normal\", this is a comment or something else, not a status post. */ return; } /* Retrieve our personal config setting */ $active = get_pconfig(local_channel(), 'randplace', 'enable'); if(! $active) return; /** * * OK, we're allowed to do our stuff. * Here's what we are going to do: * load the list of timezone names, and use that to generate a list of world cities. * Then we'll pick one of those at random and put it in the \"location\" field for the post. * */ $cities = array(); $zones = timezone_identifiers_list(); foreach($zones as $zone) { if((strpos($zone,'/')) && (! stristr($zone,'US/')) && (! stristr($zone,'Etc/'))) $cities[] = str_replace('_', ' ',substr($zone,strpos($zone,'/') + 1)); } if(! count($cities)) return; $city = array_rand($cities,1); $item['location'] = $cities[$city]; return; } Now let's add our functions to create and store preference settings. /** * * Callback from the settings post function. * $post contains the global $_POST array. * We will make sure we've got a valid user account * and that only our own submit button was clicked * and if so set our configuration setting for this person. * */ function randplace_settings_post($a,$post) { if(! local_channel()) return; if($_POST['randplace-submit']) set_pconfig(local_channel(),'randplace','enable',intval($_POST['randplace'])); } /** * * Called from the Feature Setting form. * The second argument is a string in this case, the HTML content region of the page. * Add our own settings info to the string. * * For uniformity of settings pages, we use the following convention * <div class=\"settings-block\"> * <h3>title</h3> * .... settings html - many elements will be floated... * <div class=\"clear\"></div> <!-- generic class which clears all floats --> * <input type=\"submit\" name=\"pluginnname-submit\" class=\"settings-submit\" ..... /> * </div> */ function randplace_settings(&$a,&$s) { if(! local_channel()) return; /* Add our stylesheet to the page so we can make our settings look nice */ head_add_css('/addon/randplace/randplace.css'); /* Get the current state of our config variable */ $enabled = get_pconfig(local_channel(),'randplace','enable'); $checked = (($enabled) ? ' checked=\"checked\" ' : ''); /* Add some HTML to the existing form */ $s .= '<div class=\"settings-block\">'; $s .= '<h3>' . t('Randplace Settings') . '</h3>'; $s .= '<div id=\"randplace-enable-wrapper\">'; $s .= '<label id=\"randplace-enable-label\" for=\"randplace-checkbox\">' . t('Enable Randplace Plugin') . '</label>'; $s .= '<input id=\"randplace-checkbox\" type=\"checkbox\" name=\"randplace\" value=\"1\" ' . $checked . '/>'; $s .= '</div><div class=\"clear\"></div>'; /* provide a submit button */ $s .= '<div class=\"settings-submit-wrapper\" ><input type=\"submit\" name=\"randplace-submit\" class=\"settings-submit\" value=\"' . t('Submit') . '\" /></div></div>'; } Advanced Plugins Sometimes your plugins want to provide a range of new functionality which isn't provided at all or is clumsy to provide using hooks. In this case your plugin can also act as a 'module'. A module in our case refers to a structured webpage handler which responds to a given URL. Then anything which accesses that URL will be handled completely by your plugin. The key to this is to create a simple function named pluginname_module() which does nothing. function randplace_module() { return; } Once this function exists, the URL https://yoursite/randplace will access your plugin as a module. Then you can define functions which are called at various points to build a webpage just like the modules in the mod/ directory. The typical functions and the order which they are called is modulename_init($a) // (e.g. randplace_init($a);) called first - if you wish to emit json or xml, // you should do it here, followed by killme() which will avoid the default action of building a webpage modulename_aside($a) // Often used to create sidebar content modulename_post($a) // Called whenever the page is accessed via the \"post\" method modulename_content($a) // called to generate the central page content. This function should return a string // consisting of the central page content. Your module functions have access to the URL path as if they were standalone programs in the Unix operating system. For instance if you visit the page https://yoursite/randplace/something/somewhere/whatever we will create an argc/argv list for use by your module functions $x = argc(); $x will be 4, the number of path arguments after the sitename for($x = 0; $x < argc(); $x ++) echo $x . ' ' . argv($x); 0 randplace 1 something 2 somewhere 3 whatever Porting Friendica Plugins $Projectname uses a similar plugin architecture to the Friendica project. The authentication, identity, and permissions systems are completely different. Many Friendica plugins can be ported reasonably easily by renaming a few functions - and then ensuring that the permissions model is adhered to. The functions which need to be renamed are: Friendica's pluginname_install() is pluginname_load() Friendica's pluginname_uninstall() is pluginname_unload() $Projectname has _install and _uninstall functions but these are used differently. Friendica's \"plugin_settings\" hook is called \"feature_settings\" Friendica's \"plugin_settings_post\" hook is called \"feature_settings_post\" Changing these will often allow your plugin to function, but please double check all your permission and identity code because the concepts behind it are completely different in $Projectname. Many structured data names (especially DB schema columns) are also quite different. include doc/macros/main_footer.bb;","title":"Creating Plugins/Addons for $Projectname"},{"location":"dev/plugins/#creating-pluginsaddons-for-projectname","text":"So you want to make $Projectname do something it doesn't already do. There are lots of ways. But let's learn how to write a plugin or addon. In your $Projectname folder/directory, you will probably see a sub-directory called 'addon'. If you don't have one already, go ahead and create it. mkdir addon Then figure out a name for your addon. You probably have at least a vague idea of what you want it to do. For our example I'm going to create a plugin called 'randplace' that provides a somewhat random location for each of your posts. The name of your plugin is used to find the functions we need to access and is part of the function names, so to be safe, use only simple text characters. Once you've chosen a name, create a directory beneath 'addon' to hold your working file or files. mkdir addon/randplace Now create your plugin file. It needs to have the same name, and it's a PHP script, so using your favourite editor, create the file addon/randplace/randplace.php The very first line of this file needs to be <?php Then we're going to create a comment block to describe the plugin. There's a special format for this. We use / ... / comment-style and some tagged lines consisting of /** * * Name: Random Place (here you can use better descriptions than you could in the filename) * Description: Sample $Projectname plugin, Sets a random place when posting. * Version: 1.0 * Author: Mike Macgirvin <mike@zothub.com> * */ These tags will be seen by the site administrator when he/she installs or manages plugins from the admin panel. There can be more than one author. Just add another line starting with 'Author:'. The typical plugin will have at least the following functions: pluginname_load() pluginname_unload() In our case, we'll call them randplace_load() and randplace_unload(), as that is the name of our plugin. These functions are called whenever we wish to either initialise the plugin or remove it from the current webpage. Also if your plugin requires things like altering the database schema before it can run for the very first time, you would likely place these instructions in the functions named pluginname_install() pluginname_uninstall() Next we'll talk about hooks . Hooks are places in $Projectname code where we allow plugins to do stuff. There are a lot of these , and they each have a name. What we normally do is use the pluginname_load() function to register a \"handler function\" for any hooks you are interested in. Then when any of these hooks are triggered, your code will be called. We register hook handlers with the 'register_hook()' function. It takes 3 arguments. The first is the hook we wish to catch, the second is the filename of the file to find our handler function (relative to the base of your $Projectname installation), and the third is the function name of your handler function. So let's create our randplace_load() function right now. function randplace_load() { register_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook'); register_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings'); register_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post'); } So we're going to catch three events, 'post_local' which is triggered when a post is made on the local system, 'feature_settings' to set some preferences for our plugin, and 'feature_settings_post' to store those settings. Next we'll create an unload function. This is easy, as it just unregisters our hooks. It takes exactly the same arguments. function randplace_unload() { unregister_hook('post_local', 'addon/randplace/randplace.php', 'randplace_post_hook'); unregister_hook('feature_settings', 'addon/randplace/randplace.php', 'randplace_settings'); unregister_hook('feature_settings_post', 'addon/randplace/randplace.php', 'randplace_settings_post'); } Hooks are called with two arguments. The first is always $a, which is our global App structure and contains a huge amount of information about the state of the web request we are processing; as well as who the viewer is, and what our login state is, and the current contents of the web page we're probably constructing. The second argument is specific to the hook you're calling. It contains information relevant to that particular place in the program, and often allows you to look at, and even change it. In order to change it, you need to add '&' to the variable name so it is passed to your function by reference. Otherwise it will create a copy and any changes you make will be lost when the hook process returns. Usually (but not always) the second argument is a named array of data structures. Please see the \"hook reference\" (not yet written as of this date) for details on any specific hook. Occasionally you may need to view the program source to see precisely how a given hook is called and how the results are processed. Let's go ahead and add some code to implement our post_local hook handler. function randplace_post_hook($a, &$item) { /** * * An item was posted on the local system. * We are going to look for specific items: * - A status post by a profile owner * - The profile owner must have allowed our plugin * */ logger('randplace invoked'); if(! local_channel()) /* non-zero if this is a logged in user of this system */ return; if(local_channel() != $item['uid']) /* Does this person own the post? */ return; if(($item['parent']) || (! is_item_normal($item))) { /* If the item has a parent, or isn't \"normal\", this is a comment or something else, not a status post. */ return; } /* Retrieve our personal config setting */ $active = get_pconfig(local_channel(), 'randplace', 'enable'); if(! $active) return; /** * * OK, we're allowed to do our stuff. * Here's what we are going to do: * load the list of timezone names, and use that to generate a list of world cities. * Then we'll pick one of those at random and put it in the \"location\" field for the post. * */ $cities = array(); $zones = timezone_identifiers_list(); foreach($zones as $zone) { if((strpos($zone,'/')) && (! stristr($zone,'US/')) && (! stristr($zone,'Etc/'))) $cities[] = str_replace('_', ' ',substr($zone,strpos($zone,'/') + 1)); } if(! count($cities)) return; $city = array_rand($cities,1); $item['location'] = $cities[$city]; return; } Now let's add our functions to create and store preference settings. /** * * Callback from the settings post function. * $post contains the global $_POST array. * We will make sure we've got a valid user account * and that only our own submit button was clicked * and if so set our configuration setting for this person. * */ function randplace_settings_post($a,$post) { if(! local_channel()) return; if($_POST['randplace-submit']) set_pconfig(local_channel(),'randplace','enable',intval($_POST['randplace'])); } /** * * Called from the Feature Setting form. * The second argument is a string in this case, the HTML content region of the page. * Add our own settings info to the string. * * For uniformity of settings pages, we use the following convention * <div class=\"settings-block\"> * <h3>title</h3> * .... settings html - many elements will be floated... * <div class=\"clear\"></div> <!-- generic class which clears all floats --> * <input type=\"submit\" name=\"pluginnname-submit\" class=\"settings-submit\" ..... /> * </div> */ function randplace_settings(&$a,&$s) { if(! local_channel()) return; /* Add our stylesheet to the page so we can make our settings look nice */ head_add_css('/addon/randplace/randplace.css'); /* Get the current state of our config variable */ $enabled = get_pconfig(local_channel(),'randplace','enable'); $checked = (($enabled) ? ' checked=\"checked\" ' : ''); /* Add some HTML to the existing form */ $s .= '<div class=\"settings-block\">'; $s .= '<h3>' . t('Randplace Settings') . '</h3>'; $s .= '<div id=\"randplace-enable-wrapper\">'; $s .= '<label id=\"randplace-enable-label\" for=\"randplace-checkbox\">' . t('Enable Randplace Plugin') . '</label>'; $s .= '<input id=\"randplace-checkbox\" type=\"checkbox\" name=\"randplace\" value=\"1\" ' . $checked . '/>'; $s .= '</div><div class=\"clear\"></div>'; /* provide a submit button */ $s .= '<div class=\"settings-submit-wrapper\" ><input type=\"submit\" name=\"randplace-submit\" class=\"settings-submit\" value=\"' . t('Submit') . '\" /></div></div>'; } Advanced Plugins Sometimes your plugins want to provide a range of new functionality which isn't provided at all or is clumsy to provide using hooks. In this case your plugin can also act as a 'module'. A module in our case refers to a structured webpage handler which responds to a given URL. Then anything which accesses that URL will be handled completely by your plugin. The key to this is to create a simple function named pluginname_module() which does nothing. function randplace_module() { return; } Once this function exists, the URL https://yoursite/randplace will access your plugin as a module. Then you can define functions which are called at various points to build a webpage just like the modules in the mod/ directory. The typical functions and the order which they are called is modulename_init($a) // (e.g. randplace_init($a);) called first - if you wish to emit json or xml, // you should do it here, followed by killme() which will avoid the default action of building a webpage modulename_aside($a) // Often used to create sidebar content modulename_post($a) // Called whenever the page is accessed via the \"post\" method modulename_content($a) // called to generate the central page content. This function should return a string // consisting of the central page content. Your module functions have access to the URL path as if they were standalone programs in the Unix operating system. For instance if you visit the page https://yoursite/randplace/something/somewhere/whatever we will create an argc/argv list for use by your module functions $x = argc(); $x will be 4, the number of path arguments after the sitename for($x = 0; $x < argc(); $x ++) echo $x . ' ' . argv($x); 0 randplace 1 something 2 somewhere 3 whatever Porting Friendica Plugins $Projectname uses a similar plugin architecture to the Friendica project. The authentication, identity, and permissions systems are completely different. Many Friendica plugins can be ported reasonably easily by renaming a few functions - and then ensuring that the permissions model is adhered to. The functions which need to be renamed are: Friendica's pluginname_install() is pluginname_load() Friendica's pluginname_uninstall() is pluginname_unload() $Projectname has _install and _uninstall functions but these are used differently. Friendica's \"plugin_settings\" hook is called \"feature_settings\" Friendica's \"plugin_settings_post\" hook is called \"feature_settings_post\" Changing these will often allow your plugin to function, but please double check all your permission and identity code because the concepts behind it are completely different in $Projectname. Many structured data names (especially DB schema columns) are also quite different.","title":"Creating Plugins/Addons for $Projectname"},{"location":"dev/plugins/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/themes/","text":"Creating a Derived Theme Lesson 1 A derived theme takes most of the settings from its \"parent\" theme and lets you change a few things to your liking without creating an entire theme package. To create a derived theme, first choose a name. For our example we'll call our theme 'mytheme'. Hopefully you'll be a bit more creative. But throughout this document, wherever you see 'mytheme', replace that with the name you chose. Directory Structure First you need to create a theme directory structure. We'll keep it simple. We need a php directory and a css directory. Here are the Unix/Linux commands to do this. Assume that 'mywebsite' is your top level $Projectname folder. cd mywebsite mkdir view/theme/mytheme mkdir view/theme/mytheme/css mkdir view/theme/mytheme/php Great. Now we need a couple of files. The first one is your theme info file, which describes the theme. It will be called view/theme/mytheme/php/theme.php (clever name huh?) Inside it, put the following information - edit as needed <?php /** * * Name: Mytheme * * Description: Sample Derived theme * * Version: 1.0 * * Author: Your Name * * Compat: Red [*] * */ function mytheme_init(&$a) { App::$theme_info['extends'] = 'redbasic'; } Remember to rename the mytheme_init function with your theme name. In this case we will be extending the theme 'redbasic'. Now create another file. We call this a PCSS file, but it's really a PHP file. The file is called view/theme/mytheme/php/style.php In it, put the following: <?php require_once('view/theme/redbasic/php/style.php'); echo @file_get_contents('view/theme/mytheme/css/style.css'); That's it. This tells the software to read the PCSS information for the redbasic theme first, and then read our CSS file which will just consist of changes we want to make from our parent theme (redbasic). Now create the actual CSS file for your theme. Put it in view/theme/mytheme/css/style.css (where we just told the software to look for it). For our example, we'll just change the body background color so you can see that it works. You can use any CSS you'd like. body { background-color: #DDD; } You've just successfully created a derived theme. This needs to be enabled in the admin \"themes\" panel, and then anybody on the site can use it by selecting it in Settings->Display Settings as their default theme. Lesson 2 If you want to use the redbasic schemas for your derived theme, you have to do a bit more. Do everything as above, but don't create view/theme/mytheme/php/style.php, but copy instead view/theme/redbasic/php/style.php to view/theme/mytheme/php/style.php. Modify that file and remove (or comment out) these two lines: if(local_channel() && App::$channel && App::$channel['channel_theme'] != 'redbasic') set_pconfig(local_channel(), 'redbasic', 'schema', '---'); Also add this line at the bottom: echo @file_get_contents('view/theme/mytheme/css/style.css'); To show the schema selector you have to copy view/theme/redbasic/tpl/theme_settings.tpl to view/theme/mytheme/tpl/theme_settings.tpl. Modify that file and replace the lines: {{if $theme == redbasic}} {{include file=\"field_select.tpl\" field=$schema}} {{/if}} with: {{include file=\"field_select.tpl\" field=$schema}} include doc/macros/main_footer.bb;","title":"Creating a Derived Theme"},{"location":"dev/themes/#creating-a-derived-theme","text":"Lesson 1 A derived theme takes most of the settings from its \"parent\" theme and lets you change a few things to your liking without creating an entire theme package. To create a derived theme, first choose a name. For our example we'll call our theme 'mytheme'. Hopefully you'll be a bit more creative. But throughout this document, wherever you see 'mytheme', replace that with the name you chose. Directory Structure First you need to create a theme directory structure. We'll keep it simple. We need a php directory and a css directory. Here are the Unix/Linux commands to do this. Assume that 'mywebsite' is your top level $Projectname folder. cd mywebsite mkdir view/theme/mytheme mkdir view/theme/mytheme/css mkdir view/theme/mytheme/php Great. Now we need a couple of files. The first one is your theme info file, which describes the theme. It will be called view/theme/mytheme/php/theme.php (clever name huh?) Inside it, put the following information - edit as needed <?php /** * * Name: Mytheme * * Description: Sample Derived theme * * Version: 1.0 * * Author: Your Name * * Compat: Red [*] * */ function mytheme_init(&$a) { App::$theme_info['extends'] = 'redbasic'; } Remember to rename the mytheme_init function with your theme name. In this case we will be extending the theme 'redbasic'. Now create another file. We call this a PCSS file, but it's really a PHP file. The file is called view/theme/mytheme/php/style.php In it, put the following: <?php require_once('view/theme/redbasic/php/style.php'); echo @file_get_contents('view/theme/mytheme/css/style.css'); That's it. This tells the software to read the PCSS information for the redbasic theme first, and then read our CSS file which will just consist of changes we want to make from our parent theme (redbasic). Now create the actual CSS file for your theme. Put it in view/theme/mytheme/css/style.css (where we just told the software to look for it). For our example, we'll just change the body background color so you can see that it works. You can use any CSS you'd like. body { background-color: #DDD; } You've just successfully created a derived theme. This needs to be enabled in the admin \"themes\" panel, and then anybody on the site can use it by selecting it in Settings->Display Settings as their default theme. Lesson 2 If you want to use the redbasic schemas for your derived theme, you have to do a bit more. Do everything as above, but don't create view/theme/mytheme/php/style.php, but copy instead view/theme/redbasic/php/style.php to view/theme/mytheme/php/style.php. Modify that file and remove (or comment out) these two lines: if(local_channel() && App::$channel && App::$channel['channel_theme'] != 'redbasic') set_pconfig(local_channel(), 'redbasic', 'schema', '---'); Also add this line at the bottom: echo @file_get_contents('view/theme/mytheme/css/style.css'); To show the schema selector you have to copy view/theme/redbasic/tpl/theme_settings.tpl to view/theme/mytheme/tpl/theme_settings.tpl. Modify that file and replace the lines: {{if $theme == redbasic}} {{include file=\"field_select.tpl\" field=$schema}} {{/if}} with: {{include file=\"field_select.tpl\" field=$schema}}","title":"Creating a Derived Theme"},{"location":"dev/themes/#include-docmacrosmain_footerbb","text":"","title":"include doc/macros/main_footer.bb;"},{"location":"dev/widgets/","text":"","title":"Index"},{"location":"home/","text":"About What is Hubzilla? Hubzilla is a decentralised communication network with the aim of providing communication options that circumvent censorship, respect privacy and are therefore free from the restrictions imposed by today's commercial communication giants. These primarily provide spy networks for paying customers of all kinds and monopolise and centralise the entire Internet - which was not originally among the revolutionary goals that led to the World Wide Web. Hubzilla is free, open source and free of charge. It was developed to run on a Raspberry Pi as well as on the largest AMD and Intel Xeon multiprocessor servers. It can be used for communication between a few individuals or connect many thousands of people and more. Another goal is to be independent of skills and resources. Hubzilla is as easy to use for the ordinary computer user as it is for system administrators and developers. How you use it depends on how you want to use it. Hubzilla is written in PHP, making it easy to install on any of today's hosting platforms, including self-hosting at home, on shared servers or on virtual and dedicated servers. In other words, Hubzilla can run on any platform that has a web server, a MySQL-compatible database and PHP. Hubzilla offers some unique goodies: One-click identification: you can access other servers in the Hubzilla network by simply clicking on a link to them. Authentication is easily done automatically behind the scenes. Forget all the different usernames for different sites and passwords - Hubzilla does it all for you. Clone: You can clone your online identity (or, as we say, a channel). It is no longer tied to a specific server, domain or IP address. Simply import it to another Hubzilla server (or Hubzilla hub, as we call it) - directly online or using a previously generated export. If your primary hub is suddenly no longer online, no problem, your contacts, posts and messages are still automatically available and accessible under your cloned identity. (*: only posts and messages created after the moment of cloning) Privacy: Hubzilla identities (Nomad IDs) can be deleted, backed up/downloaded and cloned. You have full control over your data. If you decide to delete all your data and your Nomad ID, all you have to do is click on a link and it will be deleted from the server immediately. No questions asked, no fuss. Hubzilla Features Built-in Social When you post announcements on your website, they are automatically broadcast to your followers on the Fediverse, Mastodon, and more. You can also interact with them via your website. Groups & Forums Building a community is important for your business or nonprofit organization. You can add public, private, and moderated discussion groups & forums. These work across nearly all fediverse platforms. Cloud Storage You can store documents directly on your website, and share them with others. Public, private, or restricted access. With the files being stored on your domain name, they will know it comes from you. Federated Single Sign On You can use your Hubzilla online identity to log into other websites that support Magic Signon (OpenWebAuth). That way you don't have to create a new account on every website, forum, membership site, or app. Nomadic Identity Clone your online identity and content to multiple sites using the Nomad protocol and mirror any changes in near real time. All your friends and all your content are available on any of your cloned instances - at any time.","title":"About"},{"location":"home/#about","text":"","title":"About"},{"location":"home/#what-is-hubzilla","text":"Hubzilla is a decentralised communication network with the aim of providing communication options that circumvent censorship, respect privacy and are therefore free from the restrictions imposed by today's commercial communication giants. These primarily provide spy networks for paying customers of all kinds and monopolise and centralise the entire Internet - which was not originally among the revolutionary goals that led to the World Wide Web. Hubzilla is free, open source and free of charge. It was developed to run on a Raspberry Pi as well as on the largest AMD and Intel Xeon multiprocessor servers. It can be used for communication between a few individuals or connect many thousands of people and more. Another goal is to be independent of skills and resources. Hubzilla is as easy to use for the ordinary computer user as it is for system administrators and developers. How you use it depends on how you want to use it. Hubzilla is written in PHP, making it easy to install on any of today's hosting platforms, including self-hosting at home, on shared servers or on virtual and dedicated servers. In other words, Hubzilla can run on any platform that has a web server, a MySQL-compatible database and PHP. Hubzilla offers some unique goodies: One-click identification: you can access other servers in the Hubzilla network by simply clicking on a link to them. Authentication is easily done automatically behind the scenes. Forget all the different usernames for different sites and passwords - Hubzilla does it all for you. Clone: You can clone your online identity (or, as we say, a channel). It is no longer tied to a specific server, domain or IP address. Simply import it to another Hubzilla server (or Hubzilla hub, as we call it) - directly online or using a previously generated export. If your primary hub is suddenly no longer online, no problem, your contacts, posts and messages are still automatically available and accessible under your cloned identity. (*: only posts and messages created after the moment of cloning) Privacy: Hubzilla identities (Nomad IDs) can be deleted, backed up/downloaded and cloned. You have full control over your data. If you decide to delete all your data and your Nomad ID, all you have to do is click on a link and it will be deleted from the server immediately. No questions asked, no fuss.","title":"What is Hubzilla?"},{"location":"home/#hubzilla-features","text":"","title":"Hubzilla Features"},{"location":"home/#built-in-social","text":"When you post announcements on your website, they are automatically broadcast to your followers on the Fediverse, Mastodon, and more. You can also interact with them via your website.","title":"Built-in Social"},{"location":"home/#groups-forums","text":"Building a community is important for your business or nonprofit organization. You can add public, private, and moderated discussion groups & forums. These work across nearly all fediverse platforms.","title":"Groups &amp; Forums"},{"location":"home/#cloud-storage","text":"You can store documents directly on your website, and share them with others. Public, private, or restricted access. With the files being stored on your domain name, they will know it comes from you.","title":"Cloud Storage"},{"location":"home/#federated-single-sign-on","text":"You can use your Hubzilla online identity to log into other websites that support Magic Signon (OpenWebAuth). That way you don't have to create a new account on every website, forum, membership site, or app.","title":"Federated Single Sign On"},{"location":"home/#nomadic-identity","text":"Clone your online identity and content to multiple sites using the Nomad protocol and mirror any changes in near real time. All your friends and all your content are available on any of your cloned instances - at any time.","title":"Nomadic Identity"},{"location":"home/contribute/","text":"Contributing to This Documentation Welcome! We\u2019re thrilled to have you contribute to the Hubzilla documentation. This guide explains how to submit changes to our documentation, hosted at https://github.com/saiwal/hubzilla-docs . Built with MkDocs and the mkdocs-material theme, our docs are community-maintainable, and your input\u2014whether fixing a typo, adding a section, or improving clarity\u2014makes a difference. Here\u2019s how to get started. How Versioning Works Our documentation uses a versioning system where each version (e.g., 10.0.8 ) has its own branch in the repository. Changes should be made to the branch corresponding to the version you\u2019re documenting (e.g., 10.0.8 ). A maintainer will later merge these changes into the main branch for publishing. This keeps version-specific docs organized and up-to-date. Prerequisites A GitHub account (sign up at github.com if you don\u2019t have one). Basic knowledge of Markdown (our docs are written in this format\u2014check out a Markdown guide if you\u2019re new to it). Optional: Familiarity with Git, MkDocs, and mkdocs-material (no worries if not\u2014we\u2019ll cover web-based editing too!). Step-by-Step Guide Option 1: Contribute Using GitHub\u2019s Web Interface (No Software Required) This is the simplest way to make changes without installing anything. Visit the Repository Go to https://github.com/saiwal/hubzilla-docs . You\u2019ll see the project files, including a docs/ folder where the documentation lives. Switch to the Correct Version Branch Click the branch dropdown (it defaults to main ). Select the branch for the version you\u2019re editing (e.g., 10.0.8 ). If it doesn\u2019t exist yet, a maintainer may need to create it\u2014open an issue to request it. Find or Create a File Navigate to the docs/ folder in the selected branch to edit an existing file (e.g., index.md ). To add a new page, click \u201cCreate new file\u201d at the top-right after navigating to docs/ . Edit the File Click the pencil icon (\u270f\ufe0f) in the top-right corner of any .md file to edit. Make your changes using Markdown (e.g., add text, headers with # , lists with - , or code blocks with ```). The mkdocs-material theme supports rich formatting\u2014see its reference for options like admonitions or tables. If creating a new file, name it descriptively (e.g., new-feature.md ) and add your content. Preview Your Changes Use the \u201cPreview\u201d tab above the editor to see how your Markdown will look (note: GitHub\u2019s preview lacks mkdocs-material styling, so local testing is ideal for full accuracy). Submit Your Changes Scroll to the \u201cCommit changes\u201d section. Write a short description (e.g., \u201cFixed typo in 10.0.8 install guide\u201d). Ensure \u201cCommit directly to the [version] branch\u201d (e.g., 10.0.8 ) is selected, or select \u201cCreate a new branch\u201d if you\u2019re proposing a new feature branch (e.g., 10.0.8-fix-typo ). Click \u201cCommit changes.\u201d Open a Pull Request If you committed directly to the version branch (e.g., 10.0.8 ), you\u2019re done\u2014maintainers will handle merging to main later. If you created a new branch, go to the \u201cPull requests\u201d tab, click \u201cNew pull request,\u201d set the base branch to your version (e.g., 10.0.8 ), and submit it with a description. Wait for Review A maintainer will review your changes. Once approved, they\u2019ll merge your contribution into the version branch and eventually into main for publishing. Option 2: Contribute Using Git Locally (For Advanced Users) If you prefer working locally and previewing the site with mkdocs-material , use this method. Fork the Repository Go to https://github.com/saiwal/hubzilla-docs . Click \u201cFork\u201d to create a copy under your GitHub account. Clone Your Fork Open a terminal and run: git clone https://github.com/YOUR-USERNAME/hubzilla-docs.git Replace YOUR-USERNAME with your GitHub username. Navigate into the folder: cd hubzilla-docs Switch to the Version Branch Check out the branch for the version you\u2019re editing: git checkout 10 .0.8 If it doesn\u2019t exist locally, fetch it: git fetch origin git checkout 10 .0.8 If the branch isn\u2019t in the repo yet, create it: git checkout -b 10 .0.8 Set Up MkDocs and MkDocs-Material Locally Ensure Python is installed ( python.org ). Install MkDocs and mkdocs-material : pip install mkdocs mkdocs-material Preview the Site Run: mkdocs serve Visit http://localhost:8000 to see the live site with mkdocs-material styling as you edit. Make Your Changes Edit or create .md files in the docs/ folder. Use mkdocs-material features like admonitions (e.g., !!! note ) or tabs\u2014see the docs . Stage and commit your changes: git add . git commit -m \"Updated 10.0.8 install instructions\" Push to Your Fork Push to the version branch in your fork: git push origin 10 .0.8 Create a Pull Request Go to your fork on GitHub ( https://github.com/YOUR-USERNAME/hubzilla-docs ). Click \u201cCompare & pull request,\u201d setting the base branch to saiwal/hubzilla-docs \u2019s version branch (e.g., 10.0.8 ). Add details and submit! Updating the Navigation To add a new page to the site\u2019s navigation: Open the Configuration File Open mkdocs.yml in the version branch (e.g., 10.0.8 ). Modify the Navigation Section Find the nav section and add your page, e.g.: nav : - Home : index.md - New Page : new-feature.md # Your new file The mkdocs-material theme will reflect this in the sidebar. Submit the Change Submit this change via a pull request or direct commit to the version branch as described above. Tips for Success Target the Right Branch : Always make changes in the version branch (e.g., 10.0.8 ), not main . Leverage MkDocs-Material : Explore its features for rich formatting. Keep it Clear : Write simply and concisely for all Hubzilla users. Test Locally : Use mkdocs serve to preview with mkdocs-material styling. Ask for Help : Stuck? Open an issue on the repo or contact the community. After Submission Once your changes are merged into the version branch (e.g., 10.0.8 ), a maintainer will handle merging them into main for publishing. Your contribution will then go live at https://saiwal.github.io/hubzilla-docs/ , styled beautifully with mkdocs-material . Thank you for improving Hubzilla\u2019s documentation!","title":"Contributing to This Documentation"},{"location":"home/contribute/#contributing-to-this-documentation","text":"Welcome! We\u2019re thrilled to have you contribute to the Hubzilla documentation. This guide explains how to submit changes to our documentation, hosted at https://github.com/saiwal/hubzilla-docs . Built with MkDocs and the mkdocs-material theme, our docs are community-maintainable, and your input\u2014whether fixing a typo, adding a section, or improving clarity\u2014makes a difference. Here\u2019s how to get started.","title":"Contributing to This Documentation"},{"location":"home/contribute/#how-versioning-works","text":"Our documentation uses a versioning system where each version (e.g., 10.0.8 ) has its own branch in the repository. Changes should be made to the branch corresponding to the version you\u2019re documenting (e.g., 10.0.8 ). A maintainer will later merge these changes into the main branch for publishing. This keeps version-specific docs organized and up-to-date.","title":"How Versioning Works"},{"location":"home/contribute/#prerequisites","text":"A GitHub account (sign up at github.com if you don\u2019t have one). Basic knowledge of Markdown (our docs are written in this format\u2014check out a Markdown guide if you\u2019re new to it). Optional: Familiarity with Git, MkDocs, and mkdocs-material (no worries if not\u2014we\u2019ll cover web-based editing too!).","title":"Prerequisites"},{"location":"home/contribute/#step-by-step-guide","text":"","title":"Step-by-Step Guide"},{"location":"home/contribute/#option-1-contribute-using-githubs-web-interface-no-software-required","text":"This is the simplest way to make changes without installing anything.","title":"Option 1: Contribute Using GitHub\u2019s Web Interface (No Software Required)"},{"location":"home/contribute/#visit-the-repository","text":"Go to https://github.com/saiwal/hubzilla-docs . You\u2019ll see the project files, including a docs/ folder where the documentation lives.","title":"Visit the Repository"},{"location":"home/contribute/#switch-to-the-correct-version-branch","text":"Click the branch dropdown (it defaults to main ). Select the branch for the version you\u2019re editing (e.g., 10.0.8 ). If it doesn\u2019t exist yet, a maintainer may need to create it\u2014open an issue to request it.","title":"Switch to the Correct Version Branch"},{"location":"home/contribute/#find-or-create-a-file","text":"Navigate to the docs/ folder in the selected branch to edit an existing file (e.g., index.md ). To add a new page, click \u201cCreate new file\u201d at the top-right after navigating to docs/ .","title":"Find or Create a File"},{"location":"home/contribute/#edit-the-file","text":"Click the pencil icon (\u270f\ufe0f) in the top-right corner of any .md file to edit. Make your changes using Markdown (e.g., add text, headers with # , lists with - , or code blocks with ```). The mkdocs-material theme supports rich formatting\u2014see its reference for options like admonitions or tables. If creating a new file, name it descriptively (e.g., new-feature.md ) and add your content.","title":"Edit the File"},{"location":"home/contribute/#preview-your-changes","text":"Use the \u201cPreview\u201d tab above the editor to see how your Markdown will look (note: GitHub\u2019s preview lacks mkdocs-material styling, so local testing is ideal for full accuracy).","title":"Preview Your Changes"},{"location":"home/contribute/#submit-your-changes","text":"Scroll to the \u201cCommit changes\u201d section. Write a short description (e.g., \u201cFixed typo in 10.0.8 install guide\u201d). Ensure \u201cCommit directly to the [version] branch\u201d (e.g., 10.0.8 ) is selected, or select \u201cCreate a new branch\u201d if you\u2019re proposing a new feature branch (e.g., 10.0.8-fix-typo ). Click \u201cCommit changes.\u201d","title":"Submit Your Changes"},{"location":"home/contribute/#open-a-pull-request","text":"If you committed directly to the version branch (e.g., 10.0.8 ), you\u2019re done\u2014maintainers will handle merging to main later. If you created a new branch, go to the \u201cPull requests\u201d tab, click \u201cNew pull request,\u201d set the base branch to your version (e.g., 10.0.8 ), and submit it with a description.","title":"Open a Pull Request"},{"location":"home/contribute/#wait-for-review","text":"A maintainer will review your changes. Once approved, they\u2019ll merge your contribution into the version branch and eventually into main for publishing.","title":"Wait for Review"},{"location":"home/contribute/#option-2-contribute-using-git-locally-for-advanced-users","text":"If you prefer working locally and previewing the site with mkdocs-material , use this method.","title":"Option 2: Contribute Using Git Locally (For Advanced Users)"},{"location":"home/contribute/#fork-the-repository","text":"Go to https://github.com/saiwal/hubzilla-docs . Click \u201cFork\u201d to create a copy under your GitHub account.","title":"Fork the Repository"},{"location":"home/contribute/#clone-your-fork","text":"Open a terminal and run: git clone https://github.com/YOUR-USERNAME/hubzilla-docs.git Replace YOUR-USERNAME with your GitHub username. Navigate into the folder: cd hubzilla-docs","title":"Clone Your Fork"},{"location":"home/contribute/#switch-to-the-version-branch","text":"Check out the branch for the version you\u2019re editing: git checkout 10 .0.8 If it doesn\u2019t exist locally, fetch it: git fetch origin git checkout 10 .0.8 If the branch isn\u2019t in the repo yet, create it: git checkout -b 10 .0.8","title":"Switch to the Version Branch"},{"location":"home/contribute/#set-up-mkdocs-and-mkdocs-material-locally","text":"Ensure Python is installed ( python.org ). Install MkDocs and mkdocs-material : pip install mkdocs mkdocs-material","title":"Set Up MkDocs and MkDocs-Material Locally"},{"location":"home/contribute/#preview-the-site","text":"Run: mkdocs serve Visit http://localhost:8000 to see the live site with mkdocs-material styling as you edit.","title":"Preview the Site"},{"location":"home/contribute/#make-your-changes","text":"Edit or create .md files in the docs/ folder. Use mkdocs-material features like admonitions (e.g., !!! note ) or tabs\u2014see the docs . Stage and commit your changes: git add . git commit -m \"Updated 10.0.8 install instructions\"","title":"Make Your Changes"},{"location":"home/contribute/#push-to-your-fork","text":"Push to the version branch in your fork: git push origin 10 .0.8","title":"Push to Your Fork"},{"location":"home/contribute/#create-a-pull-request","text":"Go to your fork on GitHub ( https://github.com/YOUR-USERNAME/hubzilla-docs ). Click \u201cCompare & pull request,\u201d setting the base branch to saiwal/hubzilla-docs \u2019s version branch (e.g., 10.0.8 ). Add details and submit!","title":"Create a Pull Request"},{"location":"home/contribute/#updating-the-navigation","text":"To add a new page to the site\u2019s navigation:","title":"Updating the Navigation"},{"location":"home/contribute/#open-the-configuration-file","text":"Open mkdocs.yml in the version branch (e.g., 10.0.8 ).","title":"Open the Configuration File"},{"location":"home/contribute/#modify-the-navigation-section","text":"Find the nav section and add your page, e.g.: nav : - Home : index.md - New Page : new-feature.md # Your new file The mkdocs-material theme will reflect this in the sidebar.","title":"Modify the Navigation Section"},{"location":"home/contribute/#submit-the-change","text":"Submit this change via a pull request or direct commit to the version branch as described above.","title":"Submit the Change"},{"location":"home/contribute/#tips-for-success","text":"Target the Right Branch : Always make changes in the version branch (e.g., 10.0.8 ), not main . Leverage MkDocs-Material : Explore its features for rich formatting. Keep it Clear : Write simply and concisely for all Hubzilla users. Test Locally : Use mkdocs serve to preview with mkdocs-material styling. Ask for Help : Stuck? Open an issue on the repo or contact the community.","title":"Tips for Success"},{"location":"home/contribute/#after-submission","text":"Once your changes are merged into the version branch (e.g., 10.0.8 ), a maintainer will handle merging them into main for publishing. Your contribution will then go live at https://saiwal.github.io/hubzilla-docs/ , styled beautifully with mkdocs-material . Thank you for improving Hubzilla\u2019s documentation!","title":"After Submission"},{"location":"home/gdpr/","text":"Privacy Notice How your information will be used Information you provide to this website may be stored and used to provide services to you. We require an email address to idenitfy the account holder. This will not be shared with any other website or service. It is used to send you notifications about your account and perform administrative tasks such as resetting your password. You have the option to opt-out of all email notifications through your settings. Communication channels created on this website require a name and a photo or avatar. A default avatar will be chosen if you do not supply one. The name, avatar, and a link to the channel webpage will be shared with other servers and services in order to refer to this identity. The name does not need to be your real name and the photo or avatar does not need to resemble you. All other information you supply to this website is optional. As a social communication and cloud storage service, you will usually be using this website to share information with others. We provide a range of privacy options to allow you to restrict this sharing to only those you choose. Processing of your information Our processing of your information is limited to storing it for you to use. We MAY keep logs of activity to help diagnose software issues and to maintain security of the system against intrusion. These logs are routinely deleted after a few days. We MAY (if you have provided this permission) try to suggest frendships or connections based on analysing publicly available information about your connections. This is currently the most advanced data \"processing\" performed at this website. You may restrict access to this information if this processing is undesired. If supplied, we MAY use your gender to formulate text messages in your native language, for instance \"Bob commented on HIS post.\" In all other cases, your data is stored under your desired privacy policy and to the best of our ability is only shared with those who you have elected to share it with. We do not share your private information with third parties or analyse your behaviour or personal characteristics. We have no advertisements or business relationships with advertisers. We MAY be asked or forced to divulge information provided by you in response to legitimate criminal and legal proceedings. Where possible we will notify you if this happens. Access to your information Some communications are shared with other websites. Those using the same software will usually have similar privacy policies. You may be shown embedded videos and provided links to visit other websites as part of your day-to-day activities using this website. This MAY expose you to monitoring by external services, such as (but not limited to) Facebook, Twitter, and Google. Each website operator is allowed to configure whether or not embedded content is permitted. Further access to your personal data and stored files is under your control. Our storage of your data is provided under your implied consent through your continued use of the service. You may withdraw this consent at any time and on account deletion we will remove all data which belongs to you. The process of deletion may take several days as we also make a good faith effort to delete it from any internetworked websites that have been provided a copy. All data and files stored for a communications channel are available for you to download for either archival puposes or to transfer to another compatible website. Your rights Under the General Data Protection Regulation (GDPR) and The Data Protection Act 2018 (DPA) you have a number of rights with regard to your personal data. You have the right to request from us access to and rectification or erasure of your personal data, the right to restrict processing, object to processing as well as in certain circumstances the right to data portability. If you have provided consent for the processing of your data you have the right (in certain circumstances) to withdraw that consent at any time which will not affect the lawfulness of the processing before your consent was withdrawn. You have the right to lodge a complaint to the Information Commissioners\u2019 Office if you believe that we have not complied with the requirements of the GDPR or DPA 18 with regard to your personal data. Identity and contact details of controller and data protection officer [NAME OF COMPANY] is the controller [and processor] of data for the purposes of the DPA 18 and GDPR. 3 If you have any concerns as to how your data is processed you can contact: [ [NAME] Data Protection Offer at [EMAIL ADDRESS] ] [NAME] [JOB TITLE] at [EMAIL ADDRESS] or you can write to these individuals using the address of []","title":"Privacy Notice"},{"location":"home/gdpr/#privacy-notice","text":"","title":"Privacy Notice"},{"location":"home/gdpr/#how-your-information-will-be-used","text":"Information you provide to this website may be stored and used to provide services to you. We require an email address to idenitfy the account holder. This will not be shared with any other website or service. It is used to send you notifications about your account and perform administrative tasks such as resetting your password. You have the option to opt-out of all email notifications through your settings. Communication channels created on this website require a name and a photo or avatar. A default avatar will be chosen if you do not supply one. The name, avatar, and a link to the channel webpage will be shared with other servers and services in order to refer to this identity. The name does not need to be your real name and the photo or avatar does not need to resemble you. All other information you supply to this website is optional. As a social communication and cloud storage service, you will usually be using this website to share information with others. We provide a range of privacy options to allow you to restrict this sharing to only those you choose.","title":"How your information will be used"},{"location":"home/gdpr/#processing-of-your-information","text":"Our processing of your information is limited to storing it for you to use. We MAY keep logs of activity to help diagnose software issues and to maintain security of the system against intrusion. These logs are routinely deleted after a few days. We MAY (if you have provided this permission) try to suggest frendships or connections based on analysing publicly available information about your connections. This is currently the most advanced data \"processing\" performed at this website. You may restrict access to this information if this processing is undesired. If supplied, we MAY use your gender to formulate text messages in your native language, for instance \"Bob commented on HIS post.\" In all other cases, your data is stored under your desired privacy policy and to the best of our ability is only shared with those who you have elected to share it with. We do not share your private information with third parties or analyse your behaviour or personal characteristics. We have no advertisements or business relationships with advertisers. We MAY be asked or forced to divulge information provided by you in response to legitimate criminal and legal proceedings. Where possible we will notify you if this happens.","title":"Processing of your information"},{"location":"home/gdpr/#access-to-your-information","text":"Some communications are shared with other websites. Those using the same software will usually have similar privacy policies. You may be shown embedded videos and provided links to visit other websites as part of your day-to-day activities using this website. This MAY expose you to monitoring by external services, such as (but not limited to) Facebook, Twitter, and Google. Each website operator is allowed to configure whether or not embedded content is permitted. Further access to your personal data and stored files is under your control. Our storage of your data is provided under your implied consent through your continued use of the service. You may withdraw this consent at any time and on account deletion we will remove all data which belongs to you. The process of deletion may take several days as we also make a good faith effort to delete it from any internetworked websites that have been provided a copy. All data and files stored for a communications channel are available for you to download for either archival puposes or to transfer to another compatible website.","title":"Access to your information"},{"location":"home/gdpr/#your-rights","text":"Under the General Data Protection Regulation (GDPR) and The Data Protection Act 2018 (DPA) you have a number of rights with regard to your personal data. You have the right to request from us access to and rectification or erasure of your personal data, the right to restrict processing, object to processing as well as in certain circumstances the right to data portability. If you have provided consent for the processing of your data you have the right (in certain circumstances) to withdraw that consent at any time which will not affect the lawfulness of the processing before your consent was withdrawn. You have the right to lodge a complaint to the Information Commissioners\u2019 Office if you believe that we have not complied with the requirements of the GDPR or DPA 18 with regard to your personal data. Identity and contact details of controller and data protection officer [NAME OF COMPANY] is the controller [and processor] of data for the purposes of the DPA 18 and GDPR. 3 If you have any concerns as to how your data is processed you can contact: [ [NAME] Data Protection Offer at [EMAIL ADDRESS] ] [NAME] [JOB TITLE] at [EMAIL ADDRESS] or you can write to these individuals using the address of []","title":"Your rights"},{"location":"home/release/","text":"Release Notes Fix duplicating terms/iconfig in addToCollectionAndSync() Refactor Daemon/Importdoc for better SQL performance when looking up outdated entries Tweak SQL in mod sse_bs for possible performance improvements Fix PHP warnings Do not run post_local hook on add activities in pubcrawl addon Do not run post_local hook on add activities in diaspora addon Remove old rawmsg/fields before storing new rawmsg in pubcrawl addon Fix retractions in diaspora addon","title":"Release Notes"},{"location":"home/release/#release-notes","text":"Fix duplicating terms/iconfig in addToCollectionAndSync() Refactor Daemon/Importdoc for better SQL performance when looking up outdated entries Tweak SQL in mod sse_bs for possible performance improvements Fix PHP warnings Do not run post_local hook on add activities in pubcrawl addon Do not run post_local hook on add activities in diaspora addon Remove old rawmsg/fields before storing new rawmsg in pubcrawl addon Fix retractions in diaspora addon","title":"Release Notes"},{"location":"member/","text":"Overview While many of Hubzilla's features and capabilities will be familiar to those who have used social networking sites and blogging software before, there are also some new concepts and features that most people have not yet encountered. Some of the new ideas are related to the decentralised nature of the grid, others to the advanced permission system needed to protect your data. This guide will help you understand how to create, configure and use your nomadic identity.","title":"Overview"},{"location":"member/#overview","text":"While many of Hubzilla's features and capabilities will be familiar to those who have used social networking sites and blogging software before, there are also some new concepts and features that most people have not yet encountered. Some of the new ideas are related to the decentralised nature of the grid, others to the advanced permission system needed to protect your data. This guide will help you understand how to create, configure and use your nomadic identity.","title":"Overview"},{"location":"member/AdvancedSearch/","text":"Advanced Directory Search Advanced Directory Search is enabled in \"Expert Mode\" from your Settings => Additional features page. On the Directory page an option named \"Advanced\" will apear in the \"Find Channels\" widget (typically in the sidebar). Clicking \"Advanced\" will open another search box for entering advanced search requests. Advanced requests include name=xxx [Channel name contains xxx] address=xxx [Channel address (webbie) contains xxx] locale=xxx [Locale (typically 'city') contains xxx] region=xxx [Region (state/territory) contains xxx] postcode=xxx [Postcode or zip code contains xxx] country=xxx [Country name contains xxx] gender=xxx [Gender contains xxx] marital=xxx [Marital status contains xxx] sexual=xxx [Sexual preference contains xxx] keywords=xxx [Keywords contain xxx] There are many reasons why a match may not return what you're looking for, as many channels do not provide detailed information in their default (public) profile, and many of these fields allow free-text input in several languages - and this may be difficult to match precisely. For instance you may have better results finding somebody in the USA with 'country=u' (along with some odd channels from Deutschland and Bulgaria and Australia) because this could be represented in a profile as US, U.S.A, USA, United States, etc... Future revisions of this tool may try to smooth over some of these difficulties. Requests may be joined together with 'and', 'or', and 'and not'. Terms containing spaces must be quoted. Example: name=\"charlie brown\" and country=canada and not gender=female","title":"AdvancedSearch"},{"location":"member/AdvancedSearch/#advanced-directory-search","text":"Advanced Directory Search is enabled in \"Expert Mode\" from your Settings => Additional features page. On the Directory page an option named \"Advanced\" will apear in the \"Find Channels\" widget (typically in the sidebar). Clicking \"Advanced\" will open another search box for entering advanced search requests. Advanced requests include name=xxx [Channel name contains xxx] address=xxx [Channel address (webbie) contains xxx] locale=xxx [Locale (typically 'city') contains xxx] region=xxx [Region (state/territory) contains xxx] postcode=xxx [Postcode or zip code contains xxx] country=xxx [Country name contains xxx] gender=xxx [Gender contains xxx] marital=xxx [Marital status contains xxx] sexual=xxx [Sexual preference contains xxx] keywords=xxx [Keywords contain xxx] There are many reasons why a match may not return what you're looking for, as many channels do not provide detailed information in their default (public) profile, and many of these fields allow free-text input in several languages - and this may be difficult to match precisely. For instance you may have better results finding somebody in the USA with 'country=u' (along with some odd channels from Deutschland and Bulgaria and Australia) because this could be represented in a profile as US, U.S.A, USA, United States, etc... Future revisions of this tool may try to smooth over some of these difficulties. Requests may be joined together with 'and', 'or', and 'and not'. Terms containing spaces must be quoted. Example: name=\"charlie brown\" and country=canada and not gender=female","title":"Advanced Directory Search"},{"location":"member/NSFW/","text":"Content warning/NSFW Content warnings and hiding certain content is done with Hubzilla using the \u2018NSFW\u2019 app. While with other services in the Fediverse you have to rely on the authors of posts possibly hiding \u2018sensitive\u2019 content behind a content warning (a content or trigger warning), with Hubzilla you have this functionality in your own hands as a recipient. With the NSFW app, you can create filters that ensure that posts that match the filter rules are collapsed. The content of the post is only displayed when you click on the button. Here you can enter keywords and even regular expressions that the posting will be searched for. If one of the words or a text pattern is found, the content in the stream will be collapsed. It is also possible to filter by language (lang=xx or lang!=xx). If a phrase that matches one of the filters entered is found in a posting, the posting will initially be hidden from you behind a content warning.","title":"NSFW"},{"location":"member/NSFW/#content-warningnsfw","text":"Content warnings and hiding certain content is done with Hubzilla using the \u2018NSFW\u2019 app. While with other services in the Fediverse you have to rely on the authors of posts possibly hiding \u2018sensitive\u2019 content behind a content warning (a content or trigger warning), with Hubzilla you have this functionality in your own hands as a recipient. With the NSFW app, you can create filters that ensure that posts that match the filter rules are collapsed. The content of the post is only displayed when you click on the button. Here you can enter keywords and even regular expressions that the posting will be searched for. If one of the words or a text pattern is found, the content in the stream will be collapsed. It is also possible to filter by language (lang=xx or lang!=xx). If a phrase that matches one of the filters entered is found in a posting, the posting will initially be hidden from you behind a content warning.","title":"Content warning/NSFW"},{"location":"member/account_settings/","text":"Account settings You can use the account settings to change your account details.","title":"Account settings"},{"location":"member/account_settings/#account-settings","text":"You can use the account settings to change your account details.","title":"Account settings"},{"location":"member/accounts_profiles_channels_basics/","text":"Accounts, Profiles and Channels Once you have registered an account at the grid you have also created a profile and a channel . Account You have one account. This consists of your email account and your password. With your account you access your profile and your channel. Think of your account as the way you authenticate at one $Projectname site. It lets you do things, such as creating profiles and channels with which you can connect to other people. Profile You have surely registered with some other internet services, such as forums or online communities. For all of them you provided some information about yourself, such as date of birth, country, age and the likes. If you like you can see your profile here: [baseurl]/profile/[webname] and edit it by clicking on the pencil icon next to your avatar image. Unlike other services hubzilla offers you the advantage of creating many more profiles . That way you are able to distinguish between profiles targeted specially at everyone (your public profile), your work mates, your family and your partner. Think of your profile as the basic information about yourself you tell other people. Channel During the registration you created your first channel . Yes, besides several profiles you are able to have several channels. This might be a bit confusing in the beginning, but let's clear things up. You already have created one channel. You can use this one for the public, to communicate with people about every day life. But perhaps you are an avid book reader and many people are bored by that. So you open a second channel just for the book lovers, where you all can talk about books as much as you like. Obviously this is a new stream of posts, with a new profile (... or new profile s ...) and completely different contacts. Some connections might exist in both channels, but there will be some that are exclusive to only one of both. You yourself just switch between both of them just like you would in real life switch when talking to people you meet on the street or people you meet specially to talk about books. You can even connect to yourself, or better: to your other channel. :) Think of a channel as different spaces dedicated to different topics where you meet with different people.","title":"Accounts, Profiles and Channels"},{"location":"member/accounts_profiles_channels_basics/#accounts-profiles-and-channels","text":"Once you have registered an account at the grid you have also created a profile and a channel . Account You have one account. This consists of your email account and your password. With your account you access your profile and your channel. Think of your account as the way you authenticate at one $Projectname site. It lets you do things, such as creating profiles and channels with which you can connect to other people. Profile You have surely registered with some other internet services, such as forums or online communities. For all of them you provided some information about yourself, such as date of birth, country, age and the likes. If you like you can see your profile here: [baseurl]/profile/[webname] and edit it by clicking on the pencil icon next to your avatar image. Unlike other services hubzilla offers you the advantage of creating many more profiles . That way you are able to distinguish between profiles targeted specially at everyone (your public profile), your work mates, your family and your partner. Think of your profile as the basic information about yourself you tell other people. Channel During the registration you created your first channel . Yes, besides several profiles you are able to have several channels. This might be a bit confusing in the beginning, but let's clear things up. You already have created one channel. You can use this one for the public, to communicate with people about every day life. But perhaps you are an avid book reader and many people are bored by that. So you open a second channel just for the book lovers, where you all can talk about books as much as you like. Obviously this is a new stream of posts, with a new profile (... or new profile s ...) and completely different contacts. Some connections might exist in both channels, but there will be some that are exclusive to only one of both. You yourself just switch between both of them just like you would in real life switch when talking to people you meet on the street or people you meet specially to talk about books. You can even connect to yourself, or better: to your other channel. :) Think of a channel as different spaces dedicated to different topics where you meet with different people.","title":"Accounts, Profiles and Channels"},{"location":"member/additional_features/","text":"Additional features (hidden settings) The \u2018Additional Features\u2019 settings are not accessible in their entirety either via the menu or via an icon. However, all the individual feature settings can also be accessed in the respective app via the cogwheel next to the main menu (avatar picture). These are settings for additional functions in all possible areas of Hubzilla. To access the settings, you have to append the URL of the hub /settings/features to the browser, e.g. https://klacker.org/settings/features . The default settings for all of these options are set by the hub administrator. This default setting can be overridden by the user in the \u2018Additional Functions\u2019. For each option, the administrator also has the option of locking the default setting to prevent changes. The user can still flip the switch for the option, but the selection is not saved and the option is reset to the default setting.","title":"Additional features (hidden settings)"},{"location":"member/additional_features/#additional-features-hidden-settings","text":"The \u2018Additional Features\u2019 settings are not accessible in their entirety either via the menu or via an icon. However, all the individual feature settings can also be accessed in the respective app via the cogwheel next to the main menu (avatar picture). These are settings for additional functions in all possible areas of Hubzilla. To access the settings, you have to append the URL of the hub /settings/features to the browser, e.g. https://klacker.org/settings/features . The default settings for all of these options are set by the hub administrator. This default setting can be overridden by the user in the \u2018Additional Functions\u2019. For each option, the administrator also has the option of locking the default setting to prevent changes. The user can still flip the switch for the option, but the selection is not saved and the option is reset to the default setting.","title":"Additional features (hidden settings)"},{"location":"member/addressbook/","text":"Address book (CardDAV) Hubzilla offers you address management with the \u2018CardDAV\u2019 app. You can create as many address books as you like. The entries are stored in vCards format. The app also allows you to import address books or individual vCards from a file. Address books are generally private and cannot be shared - not even via remote authorisation.","title":"Addressbook"},{"location":"member/addressbook/#address-book-carddav","text":"Hubzilla offers you address management with the \u2018CardDAV\u2019 app. You can create as many address books as you like. The entries are stored in vCards format. The app also allows you to import address books or individual vCards from a file. Address books are generally private and cannot be shared - not even via remote authorisation.","title":"Address book (CardDAV)"},{"location":"member/apps/","text":"Apps A freshly installed Hubzilla instance has a number of basic functionalities. However, there are many features that are not part of the basic installation and are not immediately available for a newly created channel. The majority of functions are realised as \u2018applications\u2019 (or \u2018apps\u2019 for short). You can access the apps using the \u2018app menu\u2019, which is symbolised by the \u2018\u22ee\u2019 button (and is located on the far right of the navigation bar on most hubs). You can also pin frequently used apps to the navigation bar so that you don't have to open the app menu every time you call them up. How many and which apps are available to you depends on how the administrator has configured the hub. App management You can manage the apps for your channel using app management. You can also access this in the app menu under the lowest menu item \u2018+ Apps\u2019 After calling up the app management, the apps already installed are displayed. You can now switch between \u2018Installed apps\u2019 and \u2018Available apps\u2019 in the left-hand sidebar. Available apps In the available apps, you will find all the apps available on your hub. Some of them are already installed. You can use the button next to the app to install apps or update apps that are already installed. Installed apps The Installed apps tab contains all the apps that are installed for your channel. To the right of each app there are two or three buttons with icons: a star icon, a pinhead icon and, if applicable, a cogwheel icon. The star symbol is used to make the app accessible as a menu item in the app menu. You can pin the app in the navigation bar using the pin symbol. If there is a dialogue for app-specific settings for an app, you can access this via the button with the cogwheel symbol. Manage apps There is also a button labelled \u2018Manage apps\u2019 at the top of the installed apps tab. This button takes you to the \u2018Manage apps\u2019 page, where you can uninstall apps and also edit installed apps within certain limits. It is also possible to create your own apps there (only for advanced users!). Sorting apps in the menu You can easily sort the apps you have added to the app menu using drag-and-drop and specify your preferred order.","title":"Apps"},{"location":"member/apps/#apps","text":"A freshly installed Hubzilla instance has a number of basic functionalities. However, there are many features that are not part of the basic installation and are not immediately available for a newly created channel. The majority of functions are realised as \u2018applications\u2019 (or \u2018apps\u2019 for short). You can access the apps using the \u2018app menu\u2019, which is symbolised by the \u2018\u22ee\u2019 button (and is located on the far right of the navigation bar on most hubs). You can also pin frequently used apps to the navigation bar so that you don't have to open the app menu every time you call them up. How many and which apps are available to you depends on how the administrator has configured the hub.","title":"Apps"},{"location":"member/apps/#app-management","text":"You can manage the apps for your channel using app management. You can also access this in the app menu under the lowest menu item \u2018+ Apps\u2019 After calling up the app management, the apps already installed are displayed. You can now switch between \u2018Installed apps\u2019 and \u2018Available apps\u2019 in the left-hand sidebar.","title":"App management"},{"location":"member/apps/#available-apps","text":"In the available apps, you will find all the apps available on your hub. Some of them are already installed. You can use the button next to the app to install apps or update apps that are already installed.","title":"Available apps"},{"location":"member/apps/#installed-apps","text":"The Installed apps tab contains all the apps that are installed for your channel. To the right of each app there are two or three buttons with icons: a star icon, a pinhead icon and, if applicable, a cogwheel icon. The star symbol is used to make the app accessible as a menu item in the app menu. You can pin the app in the navigation bar using the pin symbol. If there is a dialogue for app-specific settings for an app, you can access this via the button with the cogwheel symbol.","title":"Installed apps"},{"location":"member/apps/#manage-apps","text":"There is also a button labelled \u2018Manage apps\u2019 at the top of the installed apps tab. This button takes you to the \u2018Manage apps\u2019 page, where you can uninstall apps and also edit installed apps within certain limits. It is also possible to create your own apps there (only for advanced users!).","title":"Manage apps"},{"location":"member/apps/#sorting-apps-in-the-menu","text":"You can easily sort the apps you have added to the app menu using drag-and-drop and specify your preferred order.","title":"Sorting apps in the menu"},{"location":"member/article/","text":"Article The article is a macroblogging post type at Hubzilla and is suitable for real blog posts, for example. Unlike normal posts, which are distributed throughout the entire network (including the Fediverse), articles remain on your own hub. They are only accessible to users of other instances and users who do not have an account in the Fediverse via their URL. Of course, the URL can be shared so that the article will still be known in the Fediverse and can be accessed. You can create an article using the app (app menu \u22ee) \u2018Article\u2019. When you open it, all created articles are displayed and you have the option to create a new article (\u2018Add article\u2019). Creating an article is similar to creating a normal post. However, the input form has an additional field: \u2018Link to page\u2019. Here you can enter an easy-to-read link name. If you leave this field empty, a name will be assigned automatically (longer and more \u2018cryptic\u2019). If you have filled in the optional \u2018Summary\u2019 field, only the summary of an article will initially be displayed, just like a normal post. If you click on \u2018View article\u2019, the article itself will be displayed. The direct link to the article is composed as follows: URL-of-your-hub/articles/channel-name/link-to-page","title":"Article"},{"location":"member/article/#article","text":"The article is a macroblogging post type at Hubzilla and is suitable for real blog posts, for example. Unlike normal posts, which are distributed throughout the entire network (including the Fediverse), articles remain on your own hub. They are only accessible to users of other instances and users who do not have an account in the Fediverse via their URL. Of course, the URL can be shared so that the article will still be known in the Fediverse and can be accessed. You can create an article using the app (app menu \u22ee) \u2018Article\u2019. When you open it, all created articles are displayed and you have the option to create a new article (\u2018Add article\u2019). Creating an article is similar to creating a normal post. However, the input form has an additional field: \u2018Link to page\u2019. Here you can enter an easy-to-read link name. If you leave this field empty, a name will be assigned automatically (longer and more \u2018cryptic\u2019). If you have filled in the optional \u2018Summary\u2019 field, only the summary of an article will initially be displayed, just like a normal post. If you click on \u2018View article\u2019, the article itself will be displayed. The direct link to the article is composed as follows: URL-of-your-hub/articles/channel-name/link-to-page","title":"Article"},{"location":"member/bbcode/","text":"Text Decoration BBcode syntax Rendered text [b]bold[/b] bold [i]italic[/i] italic [u]underlined[/u] underlined [s]strike[/s] ~~strike~~ [color=red]red[/color] [hl]highlighted[/hl] [font=courier]some text[/font] [quote]quote[/quote] [quote=Author]Author? Me? No, no, no...[/quote] [size=small]small text[/size] [size=xx-large]xx-large text[/size] [size=20]20px exactly[/size] Size options include: xx-small, small, medium, large, xx-large Add a horizontal bar [hr] Like this This is [center]centered[/center] text Code blocks Code can be rendered generically in a block or inline format (depending on if there are new line characters in the text), or you can specify a supported language for enhanced syntax highlighting. Syntax highlighting requires a suitable rendering plugin such as hilite . Supported languages with the hilite plugin include php, css, mysql, sql, abap, diff, html, perl, ruby, vbscript, avrc, dtd, java, xml, cpp, python, javascript, js, json, sh . If a rendering plugin is not installed or an unsupported language is specified, the output for syntax highlighted code blocks is the same as the block format code tag. BBcode syntax Output [code]function bbcode() { }[/code] function bbcode() { } [code=php]function bbcode() { $variable = true; if( $variable ) { echo \"true\"; } }[/code] [nobb][nobb]This is how [i]you[/i] can [u]show[/u] how to use [hl]BBcode[/hl] syntax[/nobb][/nobb] This is how [i]you[/i] can [u]show[/u] how to use [hl]BBcode[/hl] syntax Lists BBcode syntax Rendered list [ul] [*] First list element [*] Second list element [/ul] - First list element - Second list element [ol] [*] First list element [*] Second list element [/ol] 1. First list element 2. Second list element [list=A] [*] First list element [*] Second list element [/list] The list type options are 1, i, I, a, A . A. First list element B. Second list element [dl terms=\"b\"] [*= First element term] First element description [*= Second element term] Second element description [/dl] The terms style options can be any combination of: bbold iitalic uunderline mmonospace llarge hhorizontal \u2014 like this defintion list First element term First element description Second element term Second element description Tables BBcode syntax Rendered table [table border=0] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table] [table border=1] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table] [table] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table] Links and Embedded Content BBcode syntax Output [video]video URL[/video] [audio]audio URL[/audio] VIDEO AUDIO [video='URL_TO_POSTER']video_link[/video] [url=https://hubzilla.org]Hubzilla[/url] Hubzilla An image [img]https://example.org/image.jpg[/img] in some text Hubzilla spezific codes BBcode syntax Output Magic-auth version of [url] tag [zrl=https://hubzilla.org]Identity-aware link[/zrl] Magic-auth version of [img] tag [zmg]https://hubzilla.org/some/photo.jpg[/zmg] Image is only viewable by those authenticated and with permission. Observer-dependent output: [observer=1]Text to display if observer IS authenticated[/observer] [observer=0]Text to display if observer IS NOT authenticated[/observer] [observer.language=en]Text to display if observer language is English[/observer] [observer.language!=de]Text to display if observer language is not German[/observer] [observer.url] channel URL of observer [observer.baseurl] website of observer [observer.name] name of observer [observer.webname] short name in the url of the observer [observer.address] address (Nomad/Zot-id) of observer [observer.photo] profile photo of observer What is a spoiler? [spoiler]Text you want to hide.[/spoiler] What is a spoiler? Click to open/close [toc data-toc='div.page-body' data-toc-headings='h1,h2'] Create a table of content in a webpage or wiki page. Please refer to the original jQuery toc to get more explanations. Optional param: 'data-toc'. If omitted the default is 'body' Optional param: 'data-toc-headings'. If omitted the default is 'h1,h2,h3' [rpost=title]Text to post[/rpost] The observer will be returned to their home hub to enter a post with the specified title and body. Both are optional [ baseurl]/rpost?f=&title=title&body=Text+to+post This requires the qrator plugin. [qr]text to post[/qr] This requires a suitable map plugin such as openstreetmap . [map] Generate an inline map using the current browser coordinates of the poster, if browser location is enabled This requires a suitable map plugin such as openstreetmap . [map=latitude,longitude] Generate a map using global coordinates. This requires a suitable map plugin such as openstreetmap . [map]Place Name[/map] Generate a map for a given named location. The first matching location is returned. For instance \"Sydney\" will usually return Sydney, Australia and not Sydney, Nova Scotia, Canada unless the more precise location is specified. It is highly recommended to use the post preview utility to ensure you have the correct location before submitting the post. [\u00a9] \u00a9","title":"Bbcode"},{"location":"member/bbcode/#text-decoration","text":"BBcode syntax Rendered text [b]bold[/b] bold [i]italic[/i] italic [u]underlined[/u] underlined [s]strike[/s] ~~strike~~ [color=red]red[/color] [hl]highlighted[/hl] [font=courier]some text[/font] [quote]quote[/quote] [quote=Author]Author? Me? No, no, no...[/quote] [size=small]small text[/size] [size=xx-large]xx-large text[/size] [size=20]20px exactly[/size] Size options include: xx-small, small, medium, large, xx-large Add a horizontal bar [hr] Like this This is [center]centered[/center] text","title":"Text Decoration"},{"location":"member/bbcode/#code-blocks","text":"Code can be rendered generically in a block or inline format (depending on if there are new line characters in the text), or you can specify a supported language for enhanced syntax highlighting. Syntax highlighting requires a suitable rendering plugin such as hilite . Supported languages with the hilite plugin include php, css, mysql, sql, abap, diff, html, perl, ruby, vbscript, avrc, dtd, java, xml, cpp, python, javascript, js, json, sh . If a rendering plugin is not installed or an unsupported language is specified, the output for syntax highlighted code blocks is the same as the block format code tag. BBcode syntax Output [code]function bbcode() { }[/code] function bbcode() { } [code=php]function bbcode() { $variable = true; if( $variable ) { echo \"true\"; } }[/code] [nobb][nobb]This is how [i]you[/i] can [u]show[/u] how to use [hl]BBcode[/hl] syntax[/nobb][/nobb] This is how [i]you[/i] can [u]show[/u] how to use [hl]BBcode[/hl] syntax","title":"Code blocks"},{"location":"member/bbcode/#lists","text":"BBcode syntax Rendered list [ul] [*] First list element [*] Second list element [/ul] - First list element - Second list element [ol] [*] First list element [*] Second list element [/ol] 1. First list element 2. Second list element [list=A] [*] First list element [*] Second list element [/list] The list type options are 1, i, I, a, A . A. First list element B. Second list element [dl terms=\"b\"] [*= First element term] First element description [*= Second element term] Second element description [/dl] The terms style options can be any combination of: bbold iitalic uunderline mmonospace llarge hhorizontal \u2014 like this defintion list First element term First element description Second element term Second element description","title":"Lists"},{"location":"member/bbcode/#tables","text":"BBcode syntax Rendered table [table border=0] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table] [table border=1] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table] [table] [tr] [th]Header 1[/th][th]Header 2[/th] [/tr] [tr][td]Content[/td][td]Content[/td][/tr] [tr][td]Content[/td][td]Content[/td][/tr] [/table]","title":"Tables"},{"location":"member/bbcode/#links-and-embedded-content","text":"BBcode syntax Output [video]video URL[/video] [audio]audio URL[/audio] VIDEO AUDIO [video='URL_TO_POSTER']video_link[/video] [url=https://hubzilla.org]Hubzilla[/url] Hubzilla An image [img]https://example.org/image.jpg[/img] in some text","title":"Links and Embedded Content"},{"location":"member/bbcode/#hubzilla-spezific-codes","text":"BBcode syntax Output Magic-auth version of [url] tag [zrl=https://hubzilla.org]Identity-aware link[/zrl] Magic-auth version of [img] tag [zmg]https://hubzilla.org/some/photo.jpg[/zmg] Image is only viewable by those authenticated and with permission. Observer-dependent output: [observer=1]Text to display if observer IS authenticated[/observer] [observer=0]Text to display if observer IS NOT authenticated[/observer] [observer.language=en]Text to display if observer language is English[/observer] [observer.language!=de]Text to display if observer language is not German[/observer] [observer.url] channel URL of observer [observer.baseurl] website of observer [observer.name] name of observer [observer.webname] short name in the url of the observer [observer.address] address (Nomad/Zot-id) of observer [observer.photo] profile photo of observer What is a spoiler? [spoiler]Text you want to hide.[/spoiler] What is a spoiler? Click to open/close [toc data-toc='div.page-body' data-toc-headings='h1,h2'] Create a table of content in a webpage or wiki page. Please refer to the original jQuery toc to get more explanations. Optional param: 'data-toc'. If omitted the default is 'body' Optional param: 'data-toc-headings'. If omitted the default is 'h1,h2,h3' [rpost=title]Text to post[/rpost] The observer will be returned to their home hub to enter a post with the specified title and body. Both are optional [ baseurl]/rpost?f=&title=title&body=Text+to+post This requires the qrator plugin. [qr]text to post[/qr] This requires a suitable map plugin such as openstreetmap . [map] Generate an inline map using the current browser coordinates of the poster, if browser location is enabled This requires a suitable map plugin such as openstreetmap . [map=latitude,longitude] Generate a map using global coordinates. This requires a suitable map plugin such as openstreetmap . [map]Place Name[/map] Generate a map for a given named location. The first matching location is returned. For instance \"Sydney\" will usually return Sydney, Australia and not Sydney, Nova Scotia, Canada unless the more precise location is specified. It is highly recommended to use the post preview utility to ensure you have the correct location before submitting the post. [\u00a9] \u00a9","title":"Hubzilla spezific codes"},{"location":"member/blocking_channels/","text":"Blocking/ignoring/archiving/hiding channels Channels in your address book can have the status \u2018 blocked \u2019, \u2018 ignored\u2019, \u2018 archived\u2019 or \u2018 hidden\u2019 . There is a filter on your connection page that displays the channels with these statuses. You can change the status of a channel on the pages for editing connections. The meaning: Blocked: The channel cannot read your items, regardless of permissions, and it cannot write to your channel. Ignored : The channel can read your items if it is authorised to do so, but it cannot write to your channel. Hidden: The channel is not displayed in the connection list of your profile. No one can see that you are connected to it. Note: It is still visible to your other connections, for example in replies to posts. Archived: If a channel cannot be reached for 30 days, it is automatically marked as archived. This means that all data is retained, but the channel is no longer queried for new information and is removed from the auto-complete. If you find out later that the channel is online again, you can remove it manually from the archive.","title":"Blocking channels"},{"location":"member/blocking_channels/#blockingignoringarchivinghiding-channels","text":"Channels in your address book can have the status \u2018 blocked \u2019, \u2018 ignored\u2019, \u2018 archived\u2019 or \u2018 hidden\u2019 . There is a filter on your connection page that displays the channels with these statuses. You can change the status of a channel on the pages for editing connections. The meaning: Blocked: The channel cannot read your items, regardless of permissions, and it cannot write to your channel. Ignored : The channel can read your items if it is authorised to do so, but it cannot write to your channel. Hidden: The channel is not displayed in the connection list of your profile. No one can see that you are connected to it. Note: It is still visible to your other connections, for example in replies to posts. Archived: If a channel cannot be reached for 30 days, it is automatically marked as archived. This means that all data is retained, but the channel is no longer queried for new information and is removed from the auto-complete. If you find out later that the channel is online again, you can remove it manually from the archive.","title":"Blocking/ignoring/archiving/hiding channels"},{"location":"member/bookmarks/","text":"Bookmarks Bookmarks specify a link that can be saved in your bookmarks folder. They use the character string #^ followed by the link. These are often generated automatically. If the administrator of the Hub has installed the \u2018bookmarker\u2019 add-on, this sequence is converted into a bookmark symbol when the post or comment is viewed online. If you click on the icon, the bookmark is saved. If the bookmark add-in is not installed, the post drop-down menu contains a link to save the bookmark or bookmarks. To use bookmarks, you must install the \u2018Bookmarks\u2019 app. The app will then list all the bookmarks you have set. To add a bookmark independently of a link in the stream or a post, you can call up the page <URL_your_hub> /rbmark, which provides you with a mask for manually entering a bookmark. You can also create a bookmarklet and place it in the bookmark bar of your web browser, for example: javascript : javascript : ( function (){ var % 20 url = location . href ; var % 20 title = document . title || url ; window . open ( '[observer.baseurl]/rbmark?&url=' + encodeURIComponent ( url ) + '&title=' + encodeURIComponent ( title ) + '&source=bookmarklet' , '_blank' , 'menubar=no,height=390,width=600,toolbar=no,scrollbars=no,status=no,dialog=1' );})(); Important: Replace the expression [observer.baseurl] with the URL of your hub, e.g. if you have your channel on Klackerhub, you simply have to enter https://klacker.org for [observer.baseurl] . Now you can add any website you visit to your channel's bookmarks by clicking on the bookmarklet.","title":"Bookmarks"},{"location":"member/bookmarks/#bookmarks","text":"Bookmarks specify a link that can be saved in your bookmarks folder. They use the character string #^ followed by the link. These are often generated automatically. If the administrator of the Hub has installed the \u2018bookmarker\u2019 add-on, this sequence is converted into a bookmark symbol when the post or comment is viewed online. If you click on the icon, the bookmark is saved. If the bookmark add-in is not installed, the post drop-down menu contains a link to save the bookmark or bookmarks. To use bookmarks, you must install the \u2018Bookmarks\u2019 app. The app will then list all the bookmarks you have set. To add a bookmark independently of a link in the stream or a post, you can call up the page <URL_your_hub> /rbmark, which provides you with a mask for manually entering a bookmark. You can also create a bookmarklet and place it in the bookmark bar of your web browser, for example: javascript : javascript : ( function (){ var % 20 url = location . href ; var % 20 title = document . title || url ; window . open ( '[observer.baseurl]/rbmark?&url=' + encodeURIComponent ( url ) + '&title=' + encodeURIComponent ( title ) + '&source=bookmarklet' , '_blank' , 'menubar=no,height=390,width=600,toolbar=no,scrollbars=no,status=no,dialog=1' );})(); Important: Replace the expression [observer.baseurl] with the URL of your hub, e.g. if you have your channel on Klackerhub, you simply have to enter https://klacker.org for [observer.baseurl] . Now you can add any website you visit to your channel's bookmarks by clicking on the bookmarklet.","title":"Bookmarks"},{"location":"member/calendar/","text":"Calendar The \u2018Calendar\u2019 app can be used to manage appointments. After opening the app, a calendar overview (one month) is displayed. Clicking on a day allows you to create an event. In the input mask (shortened view, can be expanded by clicking on \u2018more\u2019 ) you can now enter the essential contents. You may also define detailed permissions for these entries, so that you can record private appointments and public/shared appointments in one and the same calendar. CalDAV access with Android You can synchronise your Android calendar with your hub. Use the \u2018URL\u2019 and \u2018Username\u2019 to log in. The base URL is <your-hub-URL>/cdav , and the username is your channel name (without the leading \u2018@\u2019 and without the hub address \u2018 @<your-hub> \u2019). To share your calendar, visit <your-hub-URL>/cdav/calendar .","title":"Calendar"},{"location":"member/calendar/#calendar","text":"The \u2018Calendar\u2019 app can be used to manage appointments. After opening the app, a calendar overview (one month) is displayed. Clicking on a day allows you to create an event. In the input mask (shortened view, can be expanded by clicking on \u2018more\u2019 ) you can now enter the essential contents. You may also define detailed permissions for these entries, so that you can record private appointments and public/shared appointments in one and the same calendar.","title":"Calendar"},{"location":"member/calendar/#caldav-access-with-android","text":"You can synchronise your Android calendar with your hub. Use the \u2018URL\u2019 and \u2018Username\u2019 to log in. The base URL is <your-hub-URL>/cdav , and the username is your channel name (without the leading \u2018@\u2019 and without the hub address \u2018 @<your-hub> \u2019). To share your calendar, visit <your-hub-URL>/cdav/calendar .","title":"CalDAV access with Android"},{"location":"member/channel_locations/","text":"Manage Channel locations If the current channel has clones on other hubs, the menu will show an additional entry, \u2018Manage Channel locations\u2019. This allows you to specify the hub on which the main channel (primary channel) is located (this also determines the part of the handle after the \u2018@\u2019). You can also delete clones from here. However, for channels on third-party servers, it is recommended that you delete the channel on the actual hub. Deleting from the clone management should only be used if the clone's hub no longer exists.","title":"Channel locations"},{"location":"member/channel_locations/#manage-channel-locations","text":"If the current channel has clones on other hubs, the menu will show an additional entry, \u2018Manage Channel locations\u2019. This allows you to specify the hub on which the main channel (primary channel) is located (this also determines the part of the handle after the \u2018@\u2019). You can also delete clones from here. However, for channels on third-party servers, it is recommended that you delete the channel on the actual hub. Deleting from the clone management should only be used if the clone's hub no longer exists.","title":"Manage Channel locations"},{"location":"member/channel_roles/","text":"Channel roles When you create a new channel, you will be asked to select an permission role depending on how you want to use this channel. The most popular permission roles are the social network roles. You have many more choices comparable to Facebook groups and pages, collaborative spaces, news feeds and more. These roles automatically configure various system variables, from the permissions granted to friends to the default privacy and visibility settings. Advanced configurations are available to customise each of these parameters to your needs, but our experience has been that most users prefer to set it and forget it. Below are some of the different roles that are currently available and how they affect your privacy and interaction options. There are four channel roles: Public Personal Community Forum Customised Public The channel is a very permissive social network profile that is compatible with other federated social networks. Privacy is a lower priority than ease of access and connection with others. Anyone on the network can comment on your public posts and send you private messages. By default, posts and published articles are public, but you can override and restrict this when you create the article. You are listed in the directory. Your online presence and connections are visible to others. This mode can increase your susceptibility to unsolicited messages and spam. The \u2018classic\u2019 social media account. Personal By default, posts and published items are public, but you can override and restrict this when creating the item. You are listed in the directory. Your online presence and connections are visible to others. Only your direct connections can comment on your public posts and send you private messages. Community Forum The channel is a typical forum. By default, posts and published articles are public. Members can post articles via !mention or wall-to-wall. The posting of photos and other published articles is blocked. The channel is visible in the directory. Members are added automatically. In order to be able to view media as a forum user, some of which may have restricted authorisations, it is necessary to activate the option \u2018Enable OCAP access\u2019 in your own user channel under Settings \u2192 Privacy settings ( <hub>/settings/privacy ). Custom This is the most precise setting for channel rights. All rights can be set in fine granularity. Caution: If you select the wrong settings here, you can render your channel unusable. Fortunately, the rights can also be changed again so that such malfunctions can be rectified. It makes sense to consider the effects of each individual permission for yourself as the channel owner, but also for other users. The following settings are possible for each control point: Only me Only those you explicitly authorise Accepted connections Any connections Everyone on this website All Hubzilla members Anyone authenticated Anyone on the Internet To edit the custom role , select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue will appear, drawing your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens.","title":"Channel roles"},{"location":"member/channel_roles/#channel-roles","text":"When you create a new channel, you will be asked to select an permission role depending on how you want to use this channel. The most popular permission roles are the social network roles. You have many more choices comparable to Facebook groups and pages, collaborative spaces, news feeds and more. These roles automatically configure various system variables, from the permissions granted to friends to the default privacy and visibility settings. Advanced configurations are available to customise each of these parameters to your needs, but our experience has been that most users prefer to set it and forget it. Below are some of the different roles that are currently available and how they affect your privacy and interaction options. There are four channel roles: Public Personal Community Forum Customised","title":"Channel roles"},{"location":"member/channel_roles/#public","text":"The channel is a very permissive social network profile that is compatible with other federated social networks. Privacy is a lower priority than ease of access and connection with others. Anyone on the network can comment on your public posts and send you private messages. By default, posts and published articles are public, but you can override and restrict this when you create the article. You are listed in the directory. Your online presence and connections are visible to others. This mode can increase your susceptibility to unsolicited messages and spam. The \u2018classic\u2019 social media account.","title":"Public"},{"location":"member/channel_roles/#personal","text":"By default, posts and published items are public, but you can override and restrict this when creating the item. You are listed in the directory. Your online presence and connections are visible to others. Only your direct connections can comment on your public posts and send you private messages.","title":"Personal"},{"location":"member/channel_roles/#community-forum","text":"The channel is a typical forum. By default, posts and published articles are public. Members can post articles via !mention or wall-to-wall. The posting of photos and other published articles is blocked. The channel is visible in the directory. Members are added automatically. In order to be able to view media as a forum user, some of which may have restricted authorisations, it is necessary to activate the option \u2018Enable OCAP access\u2019 in your own user channel under Settings \u2192 Privacy settings ( <hub>/settings/privacy ).","title":"Community Forum"},{"location":"member/channel_roles/#custom","text":"This is the most precise setting for channel rights. All rights can be set in fine granularity. Caution: If you select the wrong settings here, you can render your channel unusable. Fortunately, the rights can also be changed again so that such malfunctions can be rectified. It makes sense to consider the effects of each individual permission for yourself as the channel owner, but also for other users. The following settings are possible for each control point: Only me Only those you explicitly authorise Accepted connections Any connections Everyone on this website All Hubzilla members Anyone authenticated Anyone on the Internet To edit the custom role , select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue will appear, drawing your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens.","title":"Custom"},{"location":"member/channel_settings/","text":"Channel settings If you access the settings via the menu item, the channel settings are displayed by default. The basic settings are used to set the properties and functions of the currently selected (used) channel. In addition to the channel role, you can also define the standard for automatically created directories in the cloud (these are generated, for example, when you upload an image as an attachment in a post). It is also possible to delete the channel (red \u2018Delete channel\u2019 button). Important note: It is not possible to create a new channel on this hub under the name of the deleted channel (not even by cloning). This is to protect against \u2018identity misuse\u2019. If you still want to reinstall a channel with this name for important reasons, you can contact the admin of the hub, explain the reasons (so that they can be sure that you have a legitimate interest) and ask them to remove the block. Only he can do this with a few simple steps in the database. You can also set the expiry period for imported content from other channels and control this import using two filters. The notification settings allow you to specify exactly whether you want to be notified of certain events and actions. And whether you also want the notification to be sent by email.","title":"Channel settings"},{"location":"member/channel_settings/#channel-settings","text":"If you access the settings via the menu item, the channel settings are displayed by default. The basic settings are used to set the properties and functions of the currently selected (used) channel. In addition to the channel role, you can also define the standard for automatically created directories in the cloud (these are generated, for example, when you upload an image as an attachment in a post). It is also possible to delete the channel (red \u2018Delete channel\u2019 button). Important note: It is not possible to create a new channel on this hub under the name of the deleted channel (not even by cloning). This is to protect against \u2018identity misuse\u2019. If you still want to reinstall a channel with this name for important reasons, you can contact the admin of the hub, explain the reasons (so that they can be sure that you have a legitimate interest) and ask them to remove the block. Only he can do this with a few simple steps in the database. You can also set the expiry period for imported content from other channels and control this import using two filters. The notification settings allow you to specify exactly whether you want to be notified of certain events and actions. And whether you also want the notification to be sent by email.","title":"Channel settings"},{"location":"member/channels/","text":"Channels Channels are simply collections of content that are stored in one place. A channel can stand for anything. It can represent you, a website, a forum, photo albums, anything. For most people, their first channel is \u2018Me\u2019. The most important functions for a channel that represents \u2018me\u2019 are: Secure and private \u2018spam-free\u2019 communication Identity and \u2018single sign-on\u2019 across the entire network Privacy controls and authorisations that extend to the entire network Directory services (like a phone book) In short, a channel that represents you is \u2018me on the Internet\u2019. With one account at a hub, several different channels can be created and used, each with its own individual configuration.","title":"Channels"},{"location":"member/channels/#channels","text":"Channels are simply collections of content that are stored in one place. A channel can stand for anything. It can represent you, a website, a forum, photo albums, anything. For most people, their first channel is \u2018Me\u2019. The most important functions for a channel that represents \u2018me\u2019 are: Secure and private \u2018spam-free\u2019 communication Identity and \u2018single sign-on\u2019 across the entire network Privacy controls and authorisations that extend to the entire network Directory services (like a phone book) In short, a channel that represents you is \u2018me on the Internet\u2019. With one account at a hub, several different channels can be created and used, each with its own individual configuration.","title":"Channels"},{"location":"member/chat_rooms/","text":"Chat Rooms The \u2018Chat Rooms\u2019 app allows you to set up chat rooms for instant messaging within a hub and to chat with other channels within the hub. If you access the app from the app menu, your own chat rooms will be displayed. To create a new chat room, click on the \u2018Add Room\u2019 button. Here you have to give the chat a name and you can choose how many minutes the chat content will expire after. It is also possible to use the privacy tool (\ud83d\udd12) to determine who is authorised to see and use the chat room. The URL to the chat room is displayed in the browser and is also available via the link to the chat room in the left sidebar. Now you can share the URL with another user in your hub and start a chat with them.","title":"Chat rooms"},{"location":"member/chat_rooms/#chat-rooms","text":"The \u2018Chat Rooms\u2019 app allows you to set up chat rooms for instant messaging within a hub and to chat with other channels within the hub. If you access the app from the app menu, your own chat rooms will be displayed. To create a new chat room, click on the \u2018Add Room\u2019 button. Here you have to give the chat a name and you can choose how many minutes the chat content will expire after. It is also possible to use the privacy tool (\ud83d\udd12) to determine who is authorised to see and use the chat room. The URL to the chat room is displayed in the browser and is also available via the link to the chat room in the left sidebar. Now you can share the URL with another user in your hub and start a chat with them.","title":"Chat Rooms"},{"location":"member/clone/","text":"Clone Hubzilla channels have a so-called \u2018nomadic identity\u2019. This is a speciality of the Nomad protocol, on which Hubzilla is based and with which Hubzilla hubs communicate with each other. The nomadic identity makes it possible to create clones of your own channel, which greatly increases your resistance to censorship and outages. If you have cloned your channel, it is no problem if your \u2018home hub\u2019 fails or does not work correctly. You can seamlessly continue to participate in the Fediverse with a channel clone located on another hub. All channel clones are automatically synchronised in the background. To create a clone of your channel, you need an account on another Hubzilla hub. There are now several ways to create a clone of your channel on this other hub. You can use the \u2018Channel Export\u2019 app to export the channel on your \u2018home hub\u2019. By clicking on the \u2018Export channel\u2019 button, you can export your identity and your social graph to a file that you can download. Since files, websites, wikis, calendars and chat rooms are always restricted to your own hub (i.e. the respective server), you can also use the \u2018Channel export\u2019 app to download archives of this data locally. Now log in to the new hub and either select the \u2018Channels\u2019 menu item in the main menu (your profile picture; top left) and then the \u2018+ Create new\u2019 button on the channel selection page that appears, or go directly to the channel creation page at <URL-of-your-hub>/new_channel . On this page, however, you do not enter any information for creating a new channel, but instead select the link \u2018import an existing channel from another server\u2019 at the bottom of the dialogue. The dialogue for importing the channel now opens. Click on the \u2018File to upload: Browse...\u2019 button to open a file dialogue where you can select the previously saved channel file. As an alternative to this method, you can also clone your channel directly from the source, i.e. the originating hub. To do this, you must enter the handle of the channel to be cloned, the e-mail address for logging in to the source hub, and the corresponding password in the channel import dialogue. In addition, you can use a switch to select whether files and objects from the source hub should also be imported (provided that your new hub allows this and the storage limit is sufficient). In the dialogue, you can also specify whether the new hub should be your \u2018primary hub\u2019. This means that the new channel (the one you are now creating) will be your primary channel. This affects the handle of your channel, which will now end with the URL of the new hub. As a rule, unless you want to move completely to a different hub, you leave the switch at \u2018No\u2019 and the primary hub remains the one it currently is (the handle remains unchanged). If you would like a different channel name (short name), you can enter it in an additional input field. If you leave the field empty, the channel short name remains unchanged. Note: If the channel short name is already in use on the new hub (or has been blocked because an identical channel already existed there but was deleted), the system will automatically modify the short name. Finally, click on \u2018Submit\u2019 and do NOT leave the page until the import is complete. Depending on the size of the source channel, this may take some time. You can manage your clones at any time via Settings \u2192 Manage clone addresses. You can define which is the \u2018primary hub\u2019 and you can delete clones, although it is recommended that you delete cloned channels directly on the respective hub.","title":"Clone"},{"location":"member/clone/#clone","text":"Hubzilla channels have a so-called \u2018nomadic identity\u2019. This is a speciality of the Nomad protocol, on which Hubzilla is based and with which Hubzilla hubs communicate with each other. The nomadic identity makes it possible to create clones of your own channel, which greatly increases your resistance to censorship and outages. If you have cloned your channel, it is no problem if your \u2018home hub\u2019 fails or does not work correctly. You can seamlessly continue to participate in the Fediverse with a channel clone located on another hub. All channel clones are automatically synchronised in the background. To create a clone of your channel, you need an account on another Hubzilla hub. There are now several ways to create a clone of your channel on this other hub. You can use the \u2018Channel Export\u2019 app to export the channel on your \u2018home hub\u2019. By clicking on the \u2018Export channel\u2019 button, you can export your identity and your social graph to a file that you can download. Since files, websites, wikis, calendars and chat rooms are always restricted to your own hub (i.e. the respective server), you can also use the \u2018Channel export\u2019 app to download archives of this data locally. Now log in to the new hub and either select the \u2018Channels\u2019 menu item in the main menu (your profile picture; top left) and then the \u2018+ Create new\u2019 button on the channel selection page that appears, or go directly to the channel creation page at <URL-of-your-hub>/new_channel . On this page, however, you do not enter any information for creating a new channel, but instead select the link \u2018import an existing channel from another server\u2019 at the bottom of the dialogue. The dialogue for importing the channel now opens. Click on the \u2018File to upload: Browse...\u2019 button to open a file dialogue where you can select the previously saved channel file. As an alternative to this method, you can also clone your channel directly from the source, i.e. the originating hub. To do this, you must enter the handle of the channel to be cloned, the e-mail address for logging in to the source hub, and the corresponding password in the channel import dialogue. In addition, you can use a switch to select whether files and objects from the source hub should also be imported (provided that your new hub allows this and the storage limit is sufficient). In the dialogue, you can also specify whether the new hub should be your \u2018primary hub\u2019. This means that the new channel (the one you are now creating) will be your primary channel. This affects the handle of your channel, which will now end with the URL of the new hub. As a rule, unless you want to move completely to a different hub, you leave the switch at \u2018No\u2019 and the primary hub remains the one it currently is (the handle remains unchanged). If you would like a different channel name (short name), you can enter it in an additional input field. If you leave the field empty, the channel short name remains unchanged. Note: If the channel short name is already in use on the new hub (or has been blocked because an identical channel already existed there but was deleted), the system will automatically modify the short name. Finally, click on \u2018Submit\u2019 and do NOT leave the page until the import is complete. Depending on the size of the source channel, this may take some time. You can manage your clones at any time via Settings \u2192 Manage clone addresses. You can define which is the \u2018primary hub\u2019 and you can delete clones, although it is recommended that you delete cloned channels directly on the respective hub.","title":"Clone"},{"location":"member/cloud_storage/","text":"Cloud storage Your files are visible to everyone who is allowed to view them on the internet at <URL-of-your-hub>/cloud/<your-channel-name> . If the viewer has sufficient rights, they can also create new files and folders/directories. This option should only be used for smaller files and photos (up to a few megabytes), as it uses the internal memory. Please use WebDAV to upload larger files (videos, music, etc.). These files can still be accessed via the web access. With WebDAV, you can copy files directly into or out of your computer's operating system, with your cloud files appearing like a virtual drive. This should be used to upload large files such as video and audio files. The URL for the cloud directory is <URL-of-your-hub>/dav/ . If, depending on the DAV file system integration (depending on the operating system used and possibly the application), a username is required, this is the channel short name (i.e. without the leading \u2018@\u2019 and without the following \u2018@hub address\u2019). A possibly required password corresponds to your login password.","title":"Cloud storage"},{"location":"member/cloud_storage/#cloud-storage","text":"Your files are visible to everyone who is allowed to view them on the internet at <URL-of-your-hub>/cloud/<your-channel-name> . If the viewer has sufficient rights, they can also create new files and folders/directories. This option should only be used for smaller files and photos (up to a few megabytes), as it uses the internal memory. Please use WebDAV to upload larger files (videos, music, etc.). These files can still be accessed via the web access. With WebDAV, you can copy files directly into or out of your computer's operating system, with your cloud files appearing like a virtual drive. This should be used to upload large files such as video and audio files. The URL for the cloud directory is <URL-of-your-hub>/dav/ . If, depending on the DAV file system integration (depending on the operating system used and possibly the application), a username is required, this is the channel short name (i.e. without the leading \u2018@\u2019 and without the following \u2018@hub address\u2019). A possibly required password corresponds to your login password.","title":"Cloud storage"},{"location":"member/comanche/","text":"Comanche page description language Comanche is a BBCode-like markup language that can be used to create elaborate and complex web pages by assembling them from a series of components, some of which are pre-built and others that can be defined on the fly. Comanche uses a page description language to create these pages. Comanche primarily selects which content should appear in the various areas of the page. The various areas have names, and these names may change depending on the layout template selected. Page templates There are currently five layout templates, unless your website offers additional layouts. Standard template The default template defines a \u2018nav\u2019 area at the top, \u2018aside\u2019 as a sidebar with a fixed width, \u2018content\u2019 for the main content area and \u2018footer\u2019 for a page footer. Full template The full template corresponds to the default template except that there is no \u2018aside\u2019 area. Choklet The Choklet template offers a range of fluid layout styles that can be set to taste: (default flavour) - a two-column layout similar to the default template, but more flexible bannertwo - a two-column layout with a banner area, compatible with the default template on small displays three - three-column layout (adds a \u2018right_aside\u2019 area to the standard template) edgestwo - two-column layout with fixed margins edgesthree - three-column layout with fixed margins full - three-column layout with fixed margins and the addition of a \u2018header\u2019 area below the navigation bar Redable A template for reading longer texts in full screen mode (i.e. without a navigation bar). Three columns: aside, content and right_aside. For maximum readability, it is advisable to use only the middle content column. Zen Gives you the freedom to do everything yourself. Just a blank page with a content area. To select a layout template, use the \u2018template\u2019 tag. [template]full[/template] To select the template \u2018choklet\u2019 with the flavour \u2018three\u2019: [template=three]choklet[/template] The default template is used if no other template is specified. The template can use arbitrary names for the content regions. You will use \u2018region\u2019 tags to decide what content should be placed in which regions. Three \u2018macros\u2019 have been defined for your use. $htmlhead - replaced with the site head content. $nav - replaced with the site navigation bar content. $content - replaced with the main page content. By default, $nav is inserted into the \u2018nav\u2019 page area and $content into the \u2018content\u2019 area. You only need to use these macros if you want to change the order of the elements or move them to other areas. To select a theme for your page, use the \u2018theme\u2019 tag. [theme]suckerberg[/theme] This selects the theme \u2018suckerberg\u2019. By default, the theme preferred by your channel is used. [theme=passion]suckerberg[/theme] This selects the theme named \u2018suckerberg\u2019 and chooses the \u2018passion\u2019 scheme (theme variant). Alternatively, it is also possible to use compressed theme notation. [theme]suckerberg:passion[/theme] The compressed notation is not part of Comanche itself, but it is recognised by the Hubzilla platform as a theme specifier. Navbar [navbar]tucson[/navbar] Use the \u2018tucson\u2019 template for the navigation bar and CSS rules. By default, the \u2018default\u2019 template is used for the navigation bar. Regions Each region has a name, as mentioned above. You specify the region you are interested in with a \u2018region\u2019 tag containing the name. Any content you want to place in that region should be placed between the opening region tag and the closing tag. [region=htmlhead]....content goes here....[/region] [region=aside]....content goes here....[/region] [region=nav]....content goes here....[/region] [region=content]....content goes here....[/region] CSS and Javascript We have the option of including Javascript and CSS libraries in the htmlhead section. Currently we use jquery (js), bootstrap (css/js) and foundation (css/js). This overwrites the htmlhead of the selected theme. [region=htmlhead] [css]bootstrap[/css] [js]jquery[/js] [js]bootstrap[/js] [/region] Menus and blocks The website creation tools allow you to create menus and blocks in addition to page content. These provide a set of existing content that can be placed in the areas and order you specify. Each of these elements has a name that you set when you create the menu or block. [menu]mymenu[/menu] This places the menu \u2018mymenu\u2019 at this point on the page, which must be within an area. [menu=horizontal]mymenu[/menu] This places the menu named \u2018mymenu\u2019 at this point on the page, which must be within an area. It also assigns the class \u2018horizontal\u2019 to the menu. The class \u2018horizontal\u2019 is defined in the redbasic theme. It may or may not be available in other themes. [menu][var=wrap]none[/var]mymenu[/menu] The [var=wrap]none[/var] variable in a block removes the enclosing div element from the menu. [block]contributors[/block] This places a block named \u2018contributors\u2019 in this region. [block=someclass]contributors[/block] This places a block named \u2018contributors\u2019 in this region. In addition, the class \u2018someclass\u2019 is applied to the block. This replaces the default block classes \u2018bblock widget\u2019. [block][var=wrap]none[/var]contributors[/block] The variable [var=wrap]none[/var] in a block removes the enclosing div element from the block. Widgets Widgets are executable applications provided by the system that you can place on your page. Some widgets require arguments that you can use to customise the widget to your purpose. System widgets are listed here. Widgets can also be created by plugins, themes or your website administrator to provide additional functions. Widgets and arguments are specified with the tags \u2018widget\u2019 and \u2018var\u2019. [widget=recent_visitors][var=count]24[/var][/widget] This loads the \u2018recent_visitors\u2019 widget and sets the \u2018count\u2019 argument to \u201824\u2019. Comments The \u2018comment\u2019 tag is used to delimit comments. These comments are not displayed on the rendered page. [comment]This is a comment[/comment] Conditional execution You can use an \u2018if\u2019 construct to make decisions. These are currently based on the system configuration variable or the current observer. [if $config.system.foo] ... the configuration variable system.foo evaluates to \u2018true\u2019. [else] ... the configuration variable system.foo evaluates to \u2018false\u2019. [/if] [if $observer] ... this content will only be show to authenticated viewers [/if] The \u2018else\u2019 clause is optional. In addition to the Boolean evaluation, several tests are supported. [if $config.system.foo == bar] ... the configuration variable system.foo is equal to the string \u2018bar\u2019 [/if] [if $config.system.foo != bar] ... the configuration variable system.foo is not equal to the string \u2018bar\u2019 [/if] [if $config.system.foo {} bar ]... the configuration variable system.foo is a simple array containing a value \u2018bar\u2019 [/if] [if $config.system.foo {*} bar]... the configuration variable system.foo is a simple array containing a key named \u2018bar\u2019 [/if] Complex example [comment]use an existing page template which provides a banner region plus 3 columns beneath it[/comment] [template]3-column-with-header[/template] [comment]Use the \"darknight\" theme[/comment] [theme]darkknight[/theme] [comment]Use the existing site navigation menu[/comment] [region=nav]$nav[/region] [region=side] [comment]Use my chosen menu and a couple of widgets[/comment] [menu]myfavouritemenu[/menu] [widget=recent_visitors] [var=count]24[/var] [var=names_only]1[/var] [/widget] [widget=tagcloud][/widget] [block]donate[/block] [/region] [region=middle] [comment]Show the normal page content[/comment] $content [/region] [region=right] [comment]Show my condensed channel \"wall\" feed and allow interaction if the observer is allowed to interact[/comment] [widget]channel[/widget] [/region]","title":"Comanche"},{"location":"member/comanche/#comanche-page-description-language","text":"Comanche is a BBCode-like markup language that can be used to create elaborate and complex web pages by assembling them from a series of components, some of which are pre-built and others that can be defined on the fly. Comanche uses a page description language to create these pages. Comanche primarily selects which content should appear in the various areas of the page. The various areas have names, and these names may change depending on the layout template selected.","title":"Comanche page description language"},{"location":"member/comanche/#page-templates","text":"There are currently five layout templates, unless your website offers additional layouts. Standard template The default template defines a \u2018nav\u2019 area at the top, \u2018aside\u2019 as a sidebar with a fixed width, \u2018content\u2019 for the main content area and \u2018footer\u2019 for a page footer. Full template The full template corresponds to the default template except that there is no \u2018aside\u2019 area. Choklet The Choklet template offers a range of fluid layout styles that can be set to taste: (default flavour) - a two-column layout similar to the default template, but more flexible bannertwo - a two-column layout with a banner area, compatible with the default template on small displays three - three-column layout (adds a \u2018right_aside\u2019 area to the standard template) edgestwo - two-column layout with fixed margins edgesthree - three-column layout with fixed margins full - three-column layout with fixed margins and the addition of a \u2018header\u2019 area below the navigation bar Redable A template for reading longer texts in full screen mode (i.e. without a navigation bar). Three columns: aside, content and right_aside. For maximum readability, it is advisable to use only the middle content column. Zen Gives you the freedom to do everything yourself. Just a blank page with a content area. To select a layout template, use the \u2018template\u2019 tag. [template]full[/template] To select the template \u2018choklet\u2019 with the flavour \u2018three\u2019: [template=three]choklet[/template] The default template is used if no other template is specified. The template can use arbitrary names for the content regions. You will use \u2018region\u2019 tags to decide what content should be placed in which regions. Three \u2018macros\u2019 have been defined for your use. $htmlhead - replaced with the site head content. $nav - replaced with the site navigation bar content. $content - replaced with the main page content. By default, $nav is inserted into the \u2018nav\u2019 page area and $content into the \u2018content\u2019 area. You only need to use these macros if you want to change the order of the elements or move them to other areas. To select a theme for your page, use the \u2018theme\u2019 tag. [theme]suckerberg[/theme] This selects the theme \u2018suckerberg\u2019. By default, the theme preferred by your channel is used. [theme=passion]suckerberg[/theme] This selects the theme named \u2018suckerberg\u2019 and chooses the \u2018passion\u2019 scheme (theme variant). Alternatively, it is also possible to use compressed theme notation. [theme]suckerberg:passion[/theme] The compressed notation is not part of Comanche itself, but it is recognised by the Hubzilla platform as a theme specifier. Navbar [navbar]tucson[/navbar] Use the \u2018tucson\u2019 template for the navigation bar and CSS rules. By default, the \u2018default\u2019 template is used for the navigation bar. Regions Each region has a name, as mentioned above. You specify the region you are interested in with a \u2018region\u2019 tag containing the name. Any content you want to place in that region should be placed between the opening region tag and the closing tag. [region=htmlhead]....content goes here....[/region] [region=aside]....content goes here....[/region] [region=nav]....content goes here....[/region] [region=content]....content goes here....[/region] CSS and Javascript We have the option of including Javascript and CSS libraries in the htmlhead section. Currently we use jquery (js), bootstrap (css/js) and foundation (css/js). This overwrites the htmlhead of the selected theme. [region=htmlhead] [css]bootstrap[/css] [js]jquery[/js] [js]bootstrap[/js] [/region] Menus and blocks The website creation tools allow you to create menus and blocks in addition to page content. These provide a set of existing content that can be placed in the areas and order you specify. Each of these elements has a name that you set when you create the menu or block. [menu]mymenu[/menu] This places the menu \u2018mymenu\u2019 at this point on the page, which must be within an area. [menu=horizontal]mymenu[/menu] This places the menu named \u2018mymenu\u2019 at this point on the page, which must be within an area. It also assigns the class \u2018horizontal\u2019 to the menu. The class \u2018horizontal\u2019 is defined in the redbasic theme. It may or may not be available in other themes. [menu][var=wrap]none[/var]mymenu[/menu] The [var=wrap]none[/var] variable in a block removes the enclosing div element from the menu. [block]contributors[/block] This places a block named \u2018contributors\u2019 in this region. [block=someclass]contributors[/block] This places a block named \u2018contributors\u2019 in this region. In addition, the class \u2018someclass\u2019 is applied to the block. This replaces the default block classes \u2018bblock widget\u2019. [block][var=wrap]none[/var]contributors[/block] The variable [var=wrap]none[/var] in a block removes the enclosing div element from the block. Widgets Widgets are executable applications provided by the system that you can place on your page. Some widgets require arguments that you can use to customise the widget to your purpose. System widgets are listed here. Widgets can also be created by plugins, themes or your website administrator to provide additional functions. Widgets and arguments are specified with the tags \u2018widget\u2019 and \u2018var\u2019. [widget=recent_visitors][var=count]24[/var][/widget] This loads the \u2018recent_visitors\u2019 widget and sets the \u2018count\u2019 argument to \u201824\u2019. Comments The \u2018comment\u2019 tag is used to delimit comments. These comments are not displayed on the rendered page. [comment]This is a comment[/comment] Conditional execution You can use an \u2018if\u2019 construct to make decisions. These are currently based on the system configuration variable or the current observer. [if $config.system.foo] ... the configuration variable system.foo evaluates to \u2018true\u2019. [else] ... the configuration variable system.foo evaluates to \u2018false\u2019. [/if] [if $observer] ... this content will only be show to authenticated viewers [/if] The \u2018else\u2019 clause is optional. In addition to the Boolean evaluation, several tests are supported. [if $config.system.foo == bar] ... the configuration variable system.foo is equal to the string \u2018bar\u2019 [/if] [if $config.system.foo != bar] ... the configuration variable system.foo is not equal to the string \u2018bar\u2019 [/if] [if $config.system.foo {} bar ]... the configuration variable system.foo is a simple array containing a value \u2018bar\u2019 [/if] [if $config.system.foo {*} bar]... the configuration variable system.foo is a simple array containing a key named \u2018bar\u2019 [/if] Complex example [comment]use an existing page template which provides a banner region plus 3 columns beneath it[/comment] [template]3-column-with-header[/template] [comment]Use the \"darknight\" theme[/comment] [theme]darkknight[/theme] [comment]Use the existing site navigation menu[/comment] [region=nav]$nav[/region] [region=side] [comment]Use my chosen menu and a couple of widgets[/comment] [menu]myfavouritemenu[/menu] [widget=recent_visitors] [var=count]24[/var] [var=names_only]1[/var] [/widget] [widget=tagcloud][/widget] [block]donate[/block] [/region] [region=middle] [comment]Show the normal page content[/comment] $content [/region] [region=right] [comment]Show my condensed channel \"wall\" feed and allow interaction if the observer is allowed to interact[/comment] [widget]channel[/widget] [/region]","title":"Page templates"},{"location":"member/commenting/","text":"Commenting If you want to comment on a post, i.e. reply to it, click in the field at the bottom of the post (\u2018Comment\u2019). This opens the comment editor, which is similar to the post editor. However, there are no fields for a title, a summary or categories. Below the input field for the content of the comment there are again buttons for certain formatting (not all that are available in the post editor, because not everything is possible in a comment) and on the right again a button for a preview, as well as a \u2018Submit\u2019 button to publish the comment. You can also mark up the text in the comment content field with Markdown, bbCode and HTML. As there is no field for a summary, it is not possible to use this for a content warning regarding the comment. However, this can be achieved using bbCode by inserting the content warning in [summary][/summary] . This initially hides all of the following content, which can then be displayed by clicking on it.","title":"Commenting"},{"location":"member/commenting/#commenting","text":"If you want to comment on a post, i.e. reply to it, click in the field at the bottom of the post (\u2018Comment\u2019). This opens the comment editor, which is similar to the post editor. However, there are no fields for a title, a summary or categories. Below the input field for the content of the comment there are again buttons for certain formatting (not all that are available in the post editor, because not everything is possible in a comment) and on the right again a button for a preview, as well as a \u2018Submit\u2019 button to publish the comment. You can also mark up the text in the comment content field with Markdown, bbCode and HTML. As there is no field for a summary, it is not possible to use this for a content warning regarding the comment. However, this can be achieved using bbCode by inserting the content warning in [summary][/summary] . This initially hides all of the following content, which can then be displayed by clicking on it.","title":"Commenting"},{"location":"member/connecting_with_channels/","text":"Connecting with channels Connections in Hubzilla can have many different meanings. A connection is more precisely defined as a set of permissions that you have granted to another person. In traditional social networks, all connections are given the same permissions or at most two levels (friends and \u2018followers\u2019). In Hubzilla, a separate set of permissions can be set/customised depending on the situation and the relationship you have with the other channel. You can allow someone to see your posts, but not your photos. You can also deny them permission to comment on your posts or send private messages to you. But let's make it simple: you want to be friends with someone you know from social networks. How do you do that? You can view the directory. The directory is available on all Hubzilla sites, so if you search from your own site, you'll get results from across the network. You can search by name, interest, location and keyword. If you already know someone's \u2018handle\u2019, you can contact them directly. A handle looks just like an email address (e.g. bob@example.com) but refers to a person in the open social network. In order to establish a connection, a compatible network protocol must be used. By default, this software supports the Nomad protocol, but other protocols can be provided via plugins/add-ons. For more information on connecting to channels on other networks, see below. How to connect to other Hubzilla channels: Visit the desired channel's profile by clicking on their photo in the directory, stream or comments and it will open their channel homepage in the channel viewer. On the left side of the screen you will normally see a link labelled \u2018Connect\u2019. Click on it and you're done. Depending on the settings of the channel you want to connect to, you may have to wait for the channel to approve your connection, but no further action is required on your part. Once you have initiated the connection, you will be redirected to the connection editor. Here you can assign specific authorisations for this channel if you want to make changes. You can also create a connection to any channel by going to the \u2018Connections\u2019 page of your website or directory and entering the \u2018Handle\u2019 in the \u2018Add new connection\u2019 field. Use this method if someone tells you their handle and you want to connect to them. The process is the same as when connecting via the \u2018Connect\u2019 button - you will then be redirected to the connection editor to set the authorisations. This is how you establish a connection to channels in other networks: The process for connecting to \u2018channels\u2019 on other networks (such as GNU Social, Mastodon, Misskey, Pleroma and Diaspora) is similar - enter their \u2018handle\u2019 in the \u2018+Add\u2019 field on the \u2018Connections\u2019 page. However, before you do this, please visit the App Management in the app menu and make sure that the appropriate protocol (Diaspora, GNU-Social/OStatus or ActivityPub) is deployed in your hub and enabled for your channel . These networks/protocols do not support account migration and location independence. So if you change location or clone your channel elsewhere, communication with these connections may fail. For this reason, these protocols are not enabled by default, but only with your consent. Enabling these protocols is an important decision between communicating with friends on these networks and account resilience in case your server goes down. Some communication networks offer more than one protocol. For example, you can connect to someone who uses both the \u2018ostatus\u2019 and \u2018activitypub\u2019 protocols for communication. In general, the \u2018activitypub\u2019 protocol provides a better experience than the \u2018ostatus\u2019 protocol, but Hubzilla often chooses the first protocol it detects, and that may not be what you want. You can connect to someone using a specific protocol by putting the protocol name in square brackets before their \u2018handle\u2019. For example [activitypub]https://foo.bar/foobar [ostatus]foobar@foo.bar [diaspora]foobar@foo.bar[zot]foobar@foo.bar [feed]https://foo.bar/foobar How to connect to RSS feeds: Your hub administrator can allow you to connect to RSS feeds. The procedure for connecting to an RSS feed is the same, except that you enter (or paste) the URL of the feed into the \u2018Add new connection\u2019 field. The options may be restricted by your hub administrator because connections to feeds can sometimes cause high system loads.","title":"Connecting with channels"},{"location":"member/connecting_with_channels/#connecting-with-channels","text":"Connections in Hubzilla can have many different meanings. A connection is more precisely defined as a set of permissions that you have granted to another person. In traditional social networks, all connections are given the same permissions or at most two levels (friends and \u2018followers\u2019). In Hubzilla, a separate set of permissions can be set/customised depending on the situation and the relationship you have with the other channel. You can allow someone to see your posts, but not your photos. You can also deny them permission to comment on your posts or send private messages to you. But let's make it simple: you want to be friends with someone you know from social networks. How do you do that? You can view the directory. The directory is available on all Hubzilla sites, so if you search from your own site, you'll get results from across the network. You can search by name, interest, location and keyword. If you already know someone's \u2018handle\u2019, you can contact them directly. A handle looks just like an email address (e.g. bob@example.com) but refers to a person in the open social network. In order to establish a connection, a compatible network protocol must be used. By default, this software supports the Nomad protocol, but other protocols can be provided via plugins/add-ons. For more information on connecting to channels on other networks, see below.","title":"Connecting with channels"},{"location":"member/connecting_with_channels/#how-to-connect-to-other-hubzilla-channels","text":"Visit the desired channel's profile by clicking on their photo in the directory, stream or comments and it will open their channel homepage in the channel viewer. On the left side of the screen you will normally see a link labelled \u2018Connect\u2019. Click on it and you're done. Depending on the settings of the channel you want to connect to, you may have to wait for the channel to approve your connection, but no further action is required on your part. Once you have initiated the connection, you will be redirected to the connection editor. Here you can assign specific authorisations for this channel if you want to make changes. You can also create a connection to any channel by going to the \u2018Connections\u2019 page of your website or directory and entering the \u2018Handle\u2019 in the \u2018Add new connection\u2019 field. Use this method if someone tells you their handle and you want to connect to them. The process is the same as when connecting via the \u2018Connect\u2019 button - you will then be redirected to the connection editor to set the authorisations.","title":"How to connect to other Hubzilla channels:"},{"location":"member/connecting_with_channels/#this-is-how-you-establish-a-connection-to-channels-in-other-networks","text":"The process for connecting to \u2018channels\u2019 on other networks (such as GNU Social, Mastodon, Misskey, Pleroma and Diaspora) is similar - enter their \u2018handle\u2019 in the \u2018+Add\u2019 field on the \u2018Connections\u2019 page. However, before you do this, please visit the App Management in the app menu and make sure that the appropriate protocol (Diaspora, GNU-Social/OStatus or ActivityPub) is deployed in your hub and enabled for your channel . These networks/protocols do not support account migration and location independence. So if you change location or clone your channel elsewhere, communication with these connections may fail. For this reason, these protocols are not enabled by default, but only with your consent. Enabling these protocols is an important decision between communicating with friends on these networks and account resilience in case your server goes down. Some communication networks offer more than one protocol. For example, you can connect to someone who uses both the \u2018ostatus\u2019 and \u2018activitypub\u2019 protocols for communication. In general, the \u2018activitypub\u2019 protocol provides a better experience than the \u2018ostatus\u2019 protocol, but Hubzilla often chooses the first protocol it detects, and that may not be what you want. You can connect to someone using a specific protocol by putting the protocol name in square brackets before their \u2018handle\u2019. For example [activitypub]https://foo.bar/foobar [ostatus]foobar@foo.bar [diaspora]foobar@foo.bar[zot]foobar@foo.bar [feed]https://foo.bar/foobar","title":"This is how you establish a connection to channels in other networks:"},{"location":"member/connecting_with_channels/#how-to-connect-to-rss-feeds","text":"Your hub administrator can allow you to connect to RSS feeds. The procedure for connecting to an RSS feed is the same, except that you enter (or paste) the URL of the feed into the \u2018Add new connection\u2019 field. The options may be restricted by your hub administrator because connections to feeds can sometimes cause high system loads.","title":"How to connect to RSS feeds:"},{"location":"member/connection_editor/","text":"Connection editor If you click on the \u2018Edit\u2019 button for a contact in the \u2018Connections\u2019 app, the connection editor opens. You can use the editor to assign a specific contact role to a contact. If required, you can use the \u2018Contact Roles\u2019 button to display the existing roles and also create new roles. Another button (Compare authorisations) allows you to compare the assigned authorisations with those of the standard authorisation role. You can use the \u2018Privacy groups\u2019 tab to assign a contact to one or more privacy groups. You can use the \u2018Profiles\u2019 tab to specify which of your profiles (if you have created several) is displayed to the contact. With the content filters, you can filter out posts from a contact with certain content or use filters to specify that only posts with defined content end up in the stream. You can use the contact tools to block the contact, ignore, archive, hide or delete.","title":"Connection editor"},{"location":"member/connection_editor/#connection-editor","text":"If you click on the \u2018Edit\u2019 button for a contact in the \u2018Connections\u2019 app, the connection editor opens. You can use the editor to assign a specific contact role to a contact. If required, you can use the \u2018Contact Roles\u2019 button to display the existing roles and also create new roles. Another button (Compare authorisations) allows you to compare the assigned authorisations with those of the standard authorisation role. You can use the \u2018Privacy groups\u2019 tab to assign a contact to one or more privacy groups. You can use the \u2018Profiles\u2019 tab to specify which of your profiles (if you have created several) is displayed to the contact. With the content filters, you can filter out posts from a contact with certain content or use filters to specify that only posts with defined content end up in the stream. You can use the contact tools to block the contact, ignore, archive, hide or delete.","title":"Connection editor"},{"location":"member/connections/","text":"Connections You can use the \u2018Connections\u2019 app to display all your connections. In the overview, for each connection the channel name the date of the connection the channel address (handle) the network of the contact (ActivityPub, Zot (Nomad), RSS, Diaspora...) you can use a filter next to it to display the channel's recent activities in the stream the profile picture and a coloured dot (traffic light colours) indicates the rights granted by the contact (if you rest the mouse pointer over the coloured dot, the rights granted are displayed) can be seen. A label is also displayed which shows the type of connection or warns that (in the case of clones) there is no connection at this location. There is an \u2018Edit\u2019 button on the right of each contact entry, with which you can edit the connection using the connection editor.","title":"Connections"},{"location":"member/connections/#connections","text":"You can use the \u2018Connections\u2019 app to display all your connections. In the overview, for each connection the channel name the date of the connection the channel address (handle) the network of the contact (ActivityPub, Zot (Nomad), RSS, Diaspora...) you can use a filter next to it to display the channel's recent activities in the stream the profile picture and a coloured dot (traffic light colours) indicates the rights granted by the contact (if you rest the mouse pointer over the coloured dot, the rights granted are displayed) can be seen. A label is also displayed which shows the type of connection or warns that (in the case of clones) there is no connection at this location. There is an \u2018Edit\u2019 button on the right of each contact entry, with which you can edit the connection using the connection editor.","title":"Connections"},{"location":"member/content_filters/","text":"Content Filters Content Filter allows you to filter incoming content from all sources or from specific connections. The filtering may be based on words, tags, regular expressions, or language. You can set global filters for all incoming content in the stream settings. You can also set individual filters for each of your Connections. Select \"Edit\" for any connection, then look under Content filter. If you add filters under Do not import posts with this text , (\"deny filtering\") these are applied first. Any matching content will be removed. Then, any filters under Only import posts with this text (\"accept filtering\") are applied. Only matching content will be kept, and everything that doesn't match will be removed. Generally speaking, you will be using one or the other; and rarely if ever using both at the same time. Basic Filters TEXT Any text that doesn't start with one of the following: '#', '$', '?', '/', '@', 'lang=', 'lang!=' performs a case-insensitive text match. Example: apple (matches \"apple\", \"APPLE\", \"Apples\", \"pineapple\", \"applesauce\", etc.) Example: low sub (matches \"low sub\", \"low sub-zero\", \"Yellow Submarine\", etc.) NOTE: Beware of using short character sequences that will match many dissimilar words. You may want to use REGULAR EXPRESSIONS (see below). LANGUAGE lang= Match language (if it can be identified) Example: lang=de (matches German-language content) lang!= Match anything except this language (if it can be identified) Example: lang!=en (matches non-English content) HASHTAG # Match hashtag Example: #cats #>n Match greater than total number of hashtags Example: #>10 MENTION @ Match mention Example: @alice @>n Match greater than total number of mentions Example: @>10 CATEGORY $ Match category. Example: $Science ITEMS AND FIELDS ? Discussed below under Advanced Filters REGULAR EXPRESSIONS (REGEX) / Match a \"regular expression\". See numerous online help sites such as Regular-Expressions.info and regexr.com for regex assistance. Example: /gr[ae]y/ (matches \"gray\" and \"grey\") Example: /\\b[Ww]ar\\b/ (matches the whole words \"war\" and \"War\", but not \"wars\", \"warning\", \"software\", etc.) Advanced Filters ITEMS ? You may perform a string/numeric/array/boolean match on the database fields of an item (a post, comment, etc). A complete listing is beyond the scope of this document, but see install/schema_mysql.sql and search for CREATE TABLE IF NOT EXISTS item``. Here is a sampling: body (content of the message) verb (usually the same as the ActivityPub activity type, e.g. Create, Listen) obj_type (usually the same as the ActivityPub object.type, e.g. Note, Event) item_thread_top (first post in a thread, boolean) item_private (0 = public message, 1 = restricted message, 2 = direct message) ua (User-Agent string of delivery agent - custom item attribute that is not in the database) ...etc... Available comparison operators are: ?foo ~= baz -- item.foo contains the string 'baz' ?foo == baz -- item.foo is the string 'baz' ?foo != baz -- item.foo is not the string 'baz' ?foo // regex -- item.foo matches the regular expression 'regex' - automatically wrapped in forward slashes unless you wrap it with some other character, for instance '=regex='. ?foo >= 3 -- item.foo is greater than or equal to 3 ?foo > 3 -- item.foo is greater than 3 ?foo <= 3 -- item.foo is less than or equal to 3 ?foo < 3 -- item.foo is less than 3 ?foo {} baz -- 'baz' is an array element in item.foo ?foo {*} baz -- 'baz' is an array key in item.foo ?foo -- true condition for item.foo ?!foo -- false condition for item.foo (The values 0, '', an empty array, and an unset value will all evaluate to false) Example: ?verb == Announce (matches ActivityPub \"boosts\") FIELDS ?+ ActivityPub/ActivityStreams object match. This is literally the copied object attribute from the incoming activity. Supports all the operators listed above. Examples: ?+type == Question -- matches ActivityPub polls ?+attributedTo ~= spammer -- matches ActivityPub attributedTo: https://o3r56t3c.example.com/u/cryptospammer2355","title":"Content filters"},{"location":"member/content_filters/#content-filters","text":"Content Filter allows you to filter incoming content from all sources or from specific connections. The filtering may be based on words, tags, regular expressions, or language. You can set global filters for all incoming content in the stream settings. You can also set individual filters for each of your Connections. Select \"Edit\" for any connection, then look under Content filter. If you add filters under Do not import posts with this text , (\"deny filtering\") these are applied first. Any matching content will be removed. Then, any filters under Only import posts with this text (\"accept filtering\") are applied. Only matching content will be kept, and everything that doesn't match will be removed. Generally speaking, you will be using one or the other; and rarely if ever using both at the same time.","title":"Content Filters"},{"location":"member/content_filters/#basic-filters","text":"TEXT Any text that doesn't start with one of the following: '#', '$', '?', '/', '@', 'lang=', 'lang!=' performs a case-insensitive text match. Example: apple (matches \"apple\", \"APPLE\", \"Apples\", \"pineapple\", \"applesauce\", etc.) Example: low sub (matches \"low sub\", \"low sub-zero\", \"Yellow Submarine\", etc.) NOTE: Beware of using short character sequences that will match many dissimilar words. You may want to use REGULAR EXPRESSIONS (see below). LANGUAGE lang= Match language (if it can be identified) Example: lang=de (matches German-language content) lang!= Match anything except this language (if it can be identified) Example: lang!=en (matches non-English content) HASHTAG # Match hashtag Example: #cats #>n Match greater than total number of hashtags Example: #>10 MENTION @ Match mention Example: @alice @>n Match greater than total number of mentions Example: @>10 CATEGORY $ Match category. Example: $Science ITEMS AND FIELDS ? Discussed below under Advanced Filters REGULAR EXPRESSIONS (REGEX) / Match a \"regular expression\". See numerous online help sites such as Regular-Expressions.info and regexr.com for regex assistance. Example: /gr[ae]y/ (matches \"gray\" and \"grey\") Example: /\\b[Ww]ar\\b/ (matches the whole words \"war\" and \"War\", but not \"wars\", \"warning\", \"software\", etc.)","title":"Basic Filters"},{"location":"member/content_filters/#advanced-filters","text":"ITEMS ? You may perform a string/numeric/array/boolean match on the database fields of an item (a post, comment, etc). A complete listing is beyond the scope of this document, but see install/schema_mysql.sql and search for CREATE TABLE IF NOT EXISTS item``. Here is a sampling: body (content of the message) verb (usually the same as the ActivityPub activity type, e.g. Create, Listen) obj_type (usually the same as the ActivityPub object.type, e.g. Note, Event) item_thread_top (first post in a thread, boolean) item_private (0 = public message, 1 = restricted message, 2 = direct message) ua (User-Agent string of delivery agent - custom item attribute that is not in the database) ...etc... Available comparison operators are: ?foo ~= baz -- item.foo contains the string 'baz' ?foo == baz -- item.foo is the string 'baz' ?foo != baz -- item.foo is not the string 'baz' ?foo // regex -- item.foo matches the regular expression 'regex' - automatically wrapped in forward slashes unless you wrap it with some other character, for instance '=regex='. ?foo >= 3 -- item.foo is greater than or equal to 3 ?foo > 3 -- item.foo is greater than 3 ?foo <= 3 -- item.foo is less than or equal to 3 ?foo < 3 -- item.foo is less than 3 ?foo {} baz -- 'baz' is an array element in item.foo ?foo {*} baz -- 'baz' is an array key in item.foo ?foo -- true condition for item.foo ?!foo -- false condition for item.foo (The values 0, '', an empty array, and an unset value will all evaluate to false) Example: ?verb == Announce (matches ActivityPub \"boosts\") FIELDS ?+ ActivityPub/ActivityStreams object match. This is literally the copied object attribute from the incoming activity. Supports all the operators listed above. Examples: ?+type == Question -- matches ActivityPub polls ?+attributedTo ~= spammer -- matches ActivityPub attributedTo: https://o3r56t3c.example.com/u/cryptospammer2355","title":"Advanced Filters"},{"location":"member/conversation_features/","text":"Conversation features You can use this dialogue to define certain conversation features for a post: Allow emoji reactions Allow dislikes Allow local marking (asterisks) Allow replies to comments","title":"Conversation features"},{"location":"member/conversation_features/#conversation-features","text":"You can use this dialogue to define certain conversation features for a post: Allow emoji reactions Allow dislikes Allow local marking (asterisks) Allow replies to comments","title":"Conversation features"},{"location":"member/create_channels/","text":"Create channels Once you have created your account, you will be presented with the \u2018Add Channel\u2019 screen. Normally, your first channel will be one that represents you - so it's a good idea to use your own name (or a pseudonym) as your channel name. The channel name should be considered the title or short description of your channel. The \u2018Choose a short nickname\u2019 field is similar to a \u2018Username\u2019. With what you enter here, you create a channel address (also known as a \u2018handle\u2019 in Fediverse) that other people can use to connect to you and that you can use to log in to other websites. This address looks like an email address and has the form <nickname>@<your_hub>. Note : In other Fediverse services, the handle is preceded by an \u2018@\u2019. With Hubzilla, this character must be omitted if you want to connect to another user or search for a handle, as an example. You can create additional channels via the \u2018Channel manager\u2019 link. As soon as you have done this, your channel is ready for use. Under <your_hub>/channel/<nickname> you will find your channel \u2018Stream\u2019. Your most recent activities are displayed here in reverse chronological order.","title":"Create channels"},{"location":"member/create_channels/#create-channels","text":"Once you have created your account, you will be presented with the \u2018Add Channel\u2019 screen. Normally, your first channel will be one that represents you - so it's a good idea to use your own name (or a pseudonym) as your channel name. The channel name should be considered the title or short description of your channel. The \u2018Choose a short nickname\u2019 field is similar to a \u2018Username\u2019. With what you enter here, you create a channel address (also known as a \u2018handle\u2019 in Fediverse) that other people can use to connect to you and that you can use to log in to other websites. This address looks like an email address and has the form <nickname>@<your_hub>. Note : In other Fediverse services, the handle is preceded by an \u2018@\u2019. With Hubzilla, this character must be omitted if you want to connect to another user or search for a handle, as an example. You can create additional channels via the \u2018Channel manager\u2019 link. As soon as you have done this, your channel is ready for use. Under <your_hub>/channel/<nickname> you will find your channel \u2018Stream\u2019. Your most recent activities are displayed here in reverse chronological order.","title":"Create channels"},{"location":"member/delete/","text":"Delete This function can be used to delete posts from the stream. A normal user does not have this option in the global stream. Only an administrator can remove posts from this stream.","title":"Delete"},{"location":"member/delete/#delete","text":"This function can be used to delete posts from the stream. A normal user does not have this option in the global stream. Only an administrator can remove posts from this stream.","title":"Delete"},{"location":"member/delete_account/","text":"Deleting your account If you wish to delete your account, i.e. all access to the hub, use the settings in the main menu (top left; profile picture): Settings \u2192 Account settings. At the top of the page, you will see a button labelled \u2018Remove account\u2019. Click on it and your account (account) will be deleted, including all content, after you enter your account password (for security purposes).","title":"Delete account"},{"location":"member/delete_account/#deleting-your-account","text":"If you wish to delete your account, i.e. all access to the hub, use the settings in the main menu (top left; profile picture): Settings \u2192 Account settings. At the top of the page, you will see a button labelled \u2018Remove account\u2019. Click on it and your account (account) will be deleted, including all content, after you enter your account password (for security purposes).","title":"Deleting your account"},{"location":"member/deleting_channel/","text":"Deleting a channel If you want to delete your channel, use the settings in the main menu (top left; profile picture): Settings \u2192 Channel settings. At the top of the page, you will see a button labelled \u2018Remove channel\u2019. Click on it and your channel, including all content, will be deleted after you enter your account password (for security purposes). Note: It is no longer possible to create a new channel with the same name on this hub. This is because the channel nickname is locked in the database to prevent impersonation. However, if you need to restore the old channel (by cloning) on the hub, please ask the administrator to delete the locked nickname from the Hubzilla database.","title":"Deleting channel"},{"location":"member/deleting_channel/#deleting-a-channel","text":"If you want to delete your channel, use the settings in the main menu (top left; profile picture): Settings \u2192 Channel settings. At the top of the page, you will see a button labelled \u2018Remove channel\u2019. Click on it and your channel, including all content, will be deleted after you enter your account password (for security purposes). Note: It is no longer possible to create a new channel with the same name on this hub. This is because the channel nickname is locked in the database to prevent impersonation. However, if you need to restore the old channel (by cloning) on the hub, please ask the administrator to delete the locked nickname from the Hubzilla database.","title":"Deleting a channel"},{"location":"member/diaspora_compat/","text":"Diaspora Compatibility The Diaspora Protocol addon allows a site to communicate using the Diaspora protocol, which allows communications and connections to be made with Diaspora members (and also Friendica members, since that network also provides the Diaspora Protocol). This addon is available in the 'basic' and 'standard' server configurations. It is not available with and the plugin is disabled completely when you are using the 'pro' server configuration. The reason for this is that the Diaspora protocol is not very sophisticated and many $projectname features do not work well with it. Members will have to be aware of limitations of the protocol or limit their own activities to those which are compatible with Diaspora. The 'pro' server configuration is free from these limitations and you may use all of the project features and abilities without regard for how they translate to other networks. Many features are unique to Hubzilla and are supported by the Nomad protocol, which is our native communications language between servers/hubs. If you are using a configuration which allows direct Diaspora communications you should be aware of the limitations presented here. Private mail retraction (unsend) is not possible for Diaspora connections. Private posts and their associated comments are sent in plaintext email notifications in Diaspora and Friendica. This is a major privacy issue and affects any private communications you have where any member of the conversation is on another network. Be aware of it. Access control only works on posts and comments. Diaspora members will get permission denied trying to access any other access controlled hubzilla objects such as files, photos, webpages, chatrooms, etc. In the case of private photos that are linked to posts, they will see a \"prohibited sign\" instead of the photo. Diaspora has no concept of private media and provides an illusion of photo privacy by using obscured URLs rather than protecting the photo from snooping by unauthorised viewers. There is no workaround except to make your media resources public (to everybody on the internet). Edited posts will not be delivered. Diaspora members will see the original post/comment without edits. There is no mechanism in the protocol to update an existing post. We cannot delete it and submit another invisibly because the message-id will change and we need to keep the same message-id on our own network. The only workaround is to delete the post/comment and do it over. (If this is a post, this will delete any existing likes/comments). We may eventually provide a way to delete the out of date copy only from Diaspora and keep it intact on networks that can handle edits. Nomadic identity ($projectname 'standard' only) will not work with Diaspora. We may eventually provide an option which will allow you to \"start sharing\" from all of your clones when you make the first connection. The Diaspora person does not have to accept this, but it will allow your communications to continue if they accept this connection. Without this option, if you go to another server from where you made the connection originally or you make the connection before creating the clone, you will need to connect with them again from the new location. Post expiration is not supported on Diaspora. We may provide you an option to not send expiring posts to that network. In the future this may be provided with a remote delete request. End-to-end encryption is not supported. We will translate these posts into a lock icon, which can never be unlocked from the Diaspora side. Message verification will eventually be supported. Multiple profiles are not supported. Diaspora members can only see your default profile. Birthday events will not appear in Diaspora. Other events will be translated and sent as a post, but all times will either be in the origination channel's timezone or in GMT. We do not know the recipient's timezone because Diaspora doesn't have this concept. We currently allow tags to be hijacked by default. An option is provided to allow you to prevent the other end of the network from hijacking your tags and point them at its own resources. Community tags will not work. We will send a tagging activity as a comment. It won't do anything. Privacy tags (@!somebody) will not be available to Diaspora members. These tags may have to be stripped or obscured to prevent them from being hijacked - which could result in privacy issues. Plus-tagged hubzilla forums should work from Diaspora. You cannot use Diaspora channels as channel sources. Dislikes of posts will be converted to comments and you will have the option to send these as comments or not send them to Diaspora (which does not provide dislike). Currently they are not sent. We will do the same for both likes and dislikes of comments . They can either be sent as comments or you will have the ability to prevent them from being transmitted to Diaspora. Currently they are not sent. Emojis are currently untranslated. \"observer tags\" will be converted to empty text. Embedded apps will be translated into links. Embedded page design elements (work in progress) will be either stripped or converted to an error message. Diaspora members will not appear in the directory. There are differences in oembed compatibility between the networks. Some embedded resources will turn into a link on one side or the other.","title":"Diaspora compat"},{"location":"member/diaspora_compat/#diaspora-compatibility","text":"The Diaspora Protocol addon allows a site to communicate using the Diaspora protocol, which allows communications and connections to be made with Diaspora members (and also Friendica members, since that network also provides the Diaspora Protocol). This addon is available in the 'basic' and 'standard' server configurations. It is not available with and the plugin is disabled completely when you are using the 'pro' server configuration. The reason for this is that the Diaspora protocol is not very sophisticated and many $projectname features do not work well with it. Members will have to be aware of limitations of the protocol or limit their own activities to those which are compatible with Diaspora. The 'pro' server configuration is free from these limitations and you may use all of the project features and abilities without regard for how they translate to other networks. Many features are unique to Hubzilla and are supported by the Nomad protocol, which is our native communications language between servers/hubs. If you are using a configuration which allows direct Diaspora communications you should be aware of the limitations presented here. Private mail retraction (unsend) is not possible for Diaspora connections. Private posts and their associated comments are sent in plaintext email notifications in Diaspora and Friendica. This is a major privacy issue and affects any private communications you have where any member of the conversation is on another network. Be aware of it. Access control only works on posts and comments. Diaspora members will get permission denied trying to access any other access controlled hubzilla objects such as files, photos, webpages, chatrooms, etc. In the case of private photos that are linked to posts, they will see a \"prohibited sign\" instead of the photo. Diaspora has no concept of private media and provides an illusion of photo privacy by using obscured URLs rather than protecting the photo from snooping by unauthorised viewers. There is no workaround except to make your media resources public (to everybody on the internet). Edited posts will not be delivered. Diaspora members will see the original post/comment without edits. There is no mechanism in the protocol to update an existing post. We cannot delete it and submit another invisibly because the message-id will change and we need to keep the same message-id on our own network. The only workaround is to delete the post/comment and do it over. (If this is a post, this will delete any existing likes/comments). We may eventually provide a way to delete the out of date copy only from Diaspora and keep it intact on networks that can handle edits. Nomadic identity ($projectname 'standard' only) will not work with Diaspora. We may eventually provide an option which will allow you to \"start sharing\" from all of your clones when you make the first connection. The Diaspora person does not have to accept this, but it will allow your communications to continue if they accept this connection. Without this option, if you go to another server from where you made the connection originally or you make the connection before creating the clone, you will need to connect with them again from the new location. Post expiration is not supported on Diaspora. We may provide you an option to not send expiring posts to that network. In the future this may be provided with a remote delete request. End-to-end encryption is not supported. We will translate these posts into a lock icon, which can never be unlocked from the Diaspora side. Message verification will eventually be supported. Multiple profiles are not supported. Diaspora members can only see your default profile. Birthday events will not appear in Diaspora. Other events will be translated and sent as a post, but all times will either be in the origination channel's timezone or in GMT. We do not know the recipient's timezone because Diaspora doesn't have this concept. We currently allow tags to be hijacked by default. An option is provided to allow you to prevent the other end of the network from hijacking your tags and point them at its own resources. Community tags will not work. We will send a tagging activity as a comment. It won't do anything. Privacy tags (@!somebody) will not be available to Diaspora members. These tags may have to be stripped or obscured to prevent them from being hijacked - which could result in privacy issues. Plus-tagged hubzilla forums should work from Diaspora. You cannot use Diaspora channels as channel sources. Dislikes of posts will be converted to comments and you will have the option to send these as comments or not send them to Diaspora (which does not provide dislike). Currently they are not sent. We will do the same for both likes and dislikes of comments . They can either be sent as comments or you will have the ability to prevent them from being transmitted to Diaspora. Currently they are not sent. Emojis are currently untranslated. \"observer tags\" will be converted to empty text. Embedded apps will be translated into links. Embedded page design elements (work in progress) will be either stripped or converted to an error message. Diaspora members will not appear in the directory. There are differences in oembed compatibility between the networks. Some embedded resources will turn into a link on one side or the other.","title":"Diaspora Compatibility"},{"location":"member/direct_messages/","text":"Direct messages Direct messages are messages that are addressed to one or more individual connections. They are accessible via the network stream. A filter for direct messages has been added to the stream filter widget for quick access. If you want to send a direct message to one (or more) other users (direct messages can only be read by the recipients and the sender), you write a normal post and address it exclusively to the recipient(s) using a special mention. This is done with the private mention (privacy tag). A privacy tag is a name that is preceded by the two characters @! and which, in addition to marking these channels, also changes the data protection authorisations of the post so that only these are taken into account. You do not need to use a privacy tag to reply to a DN \u2018privately\u2019, i.e. as a DN. You simply reply directly to the incoming DN, which distributes the reply to all original recipients. As an alternative to the privacy tag, you can also select channels or privacy groups from the privacy tool (\ud83d\udd12). This is the more complicated way, but it also works. However, the use of a privacy tag overwrites any selection made in the privacy tool. So if you write a post that is to be sent as a direct message, you can omit the privacy tag and instead click on the padlock symbol next to the \u2018Share\u2019 button to access the authorisation settings.","title":"Direct messages"},{"location":"member/direct_messages/#direct-messages","text":"Direct messages are messages that are addressed to one or more individual connections. They are accessible via the network stream. A filter for direct messages has been added to the stream filter widget for quick access. If you want to send a direct message to one (or more) other users (direct messages can only be read by the recipients and the sender), you write a normal post and address it exclusively to the recipient(s) using a special mention. This is done with the private mention (privacy tag). A privacy tag is a name that is preceded by the two characters @! and which, in addition to marking these channels, also changes the data protection authorisations of the post so that only these are taken into account. You do not need to use a privacy tag to reply to a DN \u2018privately\u2019, i.e. as a DN. You simply reply directly to the incoming DN, which distributes the reply to all original recipients. As an alternative to the privacy tag, you can also select channels or privacy groups from the privacy tool (\ud83d\udd12). This is the more complicated way, but it also works. However, the use of a privacy tag overwrites any selection made in the privacy tool. So if you write a post that is to be sent as a direct message, you can omit the privacy tag and instead click on the padlock symbol next to the \u2018Share\u2019 button to access the authorisation settings.","title":"Direct messages"},{"location":"member/directory/","text":"Directory Hubzilla offers a channel directory via the app (in the app menu \u22ee). The Hubzilla Grid channels are listed in the directory. The directory options in the left sidebar can be used to filter the scope of the directory. For example, you can restrict the listing to channels from your own hub. There is also a keyword cloud in the left sidebar, which you can use to find channels with corresponding interests/focal points. There is also a search field in the left sidebar to find channels by name / name components or interests (keywords). You can then connect directly to a channel found by clicking on the corresponding button.","title":"Directory"},{"location":"member/directory/#directory","text":"Hubzilla offers a channel directory via the app (in the app menu \u22ee). The Hubzilla Grid channels are listed in the directory. The directory options in the left sidebar can be used to filter the scope of the directory. For example, you can restrict the listing to channels from your own hub. There is also a keyword cloud in the left sidebar, which you can use to find channels with corresponding interests/focal points. There is also a search field in the left sidebar to find channels by name / name components or interests (keywords). You can then connect directly to a channel found by clicking on the corresponding button.","title":"Directory"},{"location":"member/display_settings/","text":"Display settings The display settings can be used to customise the design of the channel. In addition, you can determine which content is displayed, within certain limits. In the design settings, you can select from the installed themes and set your design scheme for the topic. With the custom design settings, it is possible to adjust the colour scheme to your own preferences and to define corner rounding, standard sizes and standard dimensions for avatars. The default settings are initially displayed in simplified form, and only allow you to set the dark mode, choose a narrow navigation bar, set the width of the content area and adjust the font size. If you set the \u2018Show advanced settings\u2019 switch to \u2018Yes\u2019 and submit the selection, the advanced settings will be displayed, where you can set colours, avatar dimensions and background images. The content settings allow you to select various parameters (e.g. the time until the view is updated) and to switch off the display of the \u2018links for new members\u2019 that are displayed when new channels are created.","title":"Display settings"},{"location":"member/display_settings/#display-settings","text":"The display settings can be used to customise the design of the channel. In addition, you can determine which content is displayed, within certain limits. In the design settings, you can select from the installed themes and set your design scheme for the topic. With the custom design settings, it is possible to adjust the colour scheme to your own preferences and to define corner rounding, standard sizes and standard dimensions for avatars. The default settings are initially displayed in simplified form, and only allow you to set the dark mode, choose a narrow navigation bar, set the width of the content area and adjust the font size. If you set the \u2018Show advanced settings\u2019 switch to \u2018Yes\u2019 and submit the selection, the advanced settings will be displayed, where you can set colours, avatar dimensions and background images. The content settings allow you to select various parameters (e.g. the time until the view is updated) and to switch off the display of the \u2018links for new members\u2019 that are displayed when new channels are created.","title":"Display settings"},{"location":"member/encryption/","text":"Builtin Automatic Encryption Full disclosure: The encryption hubzilla uses per default is not absolutely waterproof. There are known procedures to circumvent it. But this takes a lot of effort and needs to be done individually for each channel. And to make this clear: Other services store your messages in plaintext, therefore we regard this approach as a significant improvement for your privacy. Plus you are always free to use further encryption and password protection if you so desire. To explain this in more detail: each channel has its key pair every non-public post is automatically encrypted optional password protect content via crypto-javascript browser-to-browser encryption (needs to be enabled in settings) Full disclosure: A rogue hub admin could injects malicious javascript-code (e.g. keylogging-abilities) into the code. Encrypt our stuff out of band with GPG, become a hub administrator yourself or use other means of communication if this worries you. So what is the scope of security? Full disclosure: This might be great, but it is not perfect. - every non-public post is automatically encrypted but persons who have access to the site's database and files may be able to decrypt everything by using these keys which obviously need to be stored on the server. To be clear: The encrypion keys are different for every channel and it is quite an effort to do this. And again: Other services store your messages in plain text unencrypted. So this is quite a significant win for your privacy. We believe that the NSA-level dragnet plaintext extracting mass surveillance is probably not possible due to the design of the Nomad protocol. Dedicated attacks including hacking into one hub to obtain the server logs and database only partly reveal what is going on between people communication between different hubs. We believe that this makes it much more expensive for state-level attackers to access your content in hubzilla. We gladly accept help improving the security of the system and auditing it as well.","title":"Encryption"},{"location":"member/encryption/#builtin-automatic-encryption","text":"Full disclosure: The encryption hubzilla uses per default is not absolutely waterproof. There are known procedures to circumvent it. But this takes a lot of effort and needs to be done individually for each channel. And to make this clear: Other services store your messages in plaintext, therefore we regard this approach as a significant improvement for your privacy. Plus you are always free to use further encryption and password protection if you so desire. To explain this in more detail: each channel has its key pair every non-public post is automatically encrypted optional password protect content via crypto-javascript browser-to-browser encryption (needs to be enabled in settings) Full disclosure: A rogue hub admin could injects malicious javascript-code (e.g. keylogging-abilities) into the code. Encrypt our stuff out of band with GPG, become a hub administrator yourself or use other means of communication if this worries you. So what is the scope of security? Full disclosure: This might be great, but it is not perfect. - every non-public post is automatically encrypted but persons who have access to the site's database and files may be able to decrypt everything by using these keys which obviously need to be stored on the server. To be clear: The encrypion keys are different for every channel and it is quite an effort to do this. And again: Other services store your messages in plain text unencrypted. So this is quite a significant win for your privacy. We believe that the NSA-level dragnet plaintext extracting mass surveillance is probably not possible due to the design of the Nomad protocol. Dedicated attacks including hacking into one hub to obtain the server logs and database only partly reveal what is going on between people communication between different hubs. We believe that this makes it much more expensive for state-level attackers to access your content in hubzilla. We gladly accept help improving the security of the system and auditing it as well.","title":"Builtin Automatic Encryption"},{"location":"member/files/","text":"Files Hubzilla provides cloud functionality. This means that you have a directory for each channel in which you can create further subdirectories and store files. You can define precise access rights for each directory, and even for each individual file. These can range from visibility for the general public, to visibility for members of certain groups, to individual approval for individual members of your own connections. It is even possible to share files with people who do not have a Hubzilla identity. This is done using guest access tokens. Creating and deleting directories and creating and deleting files is really easy. You can access your cloud storage via the \u2018app menu\u2019 (\u22ee) \u2192 Files. You can also upload images via the files section, which is also possible via the \u2018Photos\u2019 section. The files can be displayed in a list view or in a tile view You can create new directories/folders with the \u2018Create\u2019 button. When creating a folder, you can also immediately define the permissions for the new folder (\ud83d\udd13). With the \u2018+ Add files\u2019 button, you can upload files to your cloud. Here, too, you can set the access permissions directly. To set or change access rights (permissions) for directories or files at a later time, click on the context menu (\ufe19) of the file or directory. You can also perform various file operations here. If you attach a file using the \u2018\ud83d\udcce\u2019 button when creating a post or comment, this file will be stored in a new directory (sample: year-month ) in the cloud, if one is created.","title":"Files"},{"location":"member/files/#files","text":"Hubzilla provides cloud functionality. This means that you have a directory for each channel in which you can create further subdirectories and store files. You can define precise access rights for each directory, and even for each individual file. These can range from visibility for the general public, to visibility for members of certain groups, to individual approval for individual members of your own connections. It is even possible to share files with people who do not have a Hubzilla identity. This is done using guest access tokens. Creating and deleting directories and creating and deleting files is really easy. You can access your cloud storage via the \u2018app menu\u2019 (\u22ee) \u2192 Files. You can also upload images via the files section, which is also possible via the \u2018Photos\u2019 section. The files can be displayed in a list view or in a tile view You can create new directories/folders with the \u2018Create\u2019 button. When creating a folder, you can also immediately define the permissions for the new folder (\ud83d\udd13). With the \u2018+ Add files\u2019 button, you can upload files to your cloud. Here, too, you can set the access permissions directly. To set or change access rights (permissions) for directories or files at a later time, click on the context menu (\ufe19) of the file or directory. You can also perform various file operations here. If you attach a file using the \u2018\ud83d\udcce\u2019 button when creating a post or comment, this file will be stored in a new directory (sample: year-month ) in the cloud, if one is created.","title":"Files"},{"location":"member/follow_conversation/","text":"Follow / unfollow conversation With Follow conversation / Unfollow conversation you can switch whether you want to follow a thread, i.e. whether you want to receive notifications about comments/replies, likes, dislikes, emoji reactions or that the post has been shared or re-shared.","title":"Follow conversation"},{"location":"member/follow_conversation/#follow-unfollow-conversation","text":"With Follow conversation / Unfollow conversation you can switch whether you want to follow a thread, i.e. whether you want to receive notifications about comments/replies, likes, dislikes, emoji reactions or that the post has been shared or re-shared.","title":"Follow / unfollow conversation"},{"location":"member/gallery/","text":"Gallery The \u2018Gallery\u2019 app is a simple photo gallery that displays all your images from the cloud storage. The displayed images are scaled appropriately, which can lead to a slightly blurred display for smaller images. It is more practical to use the \u2018 Photos \u2019 app.","title":"Gallery"},{"location":"member/gallery/#gallery","text":"The \u2018Gallery\u2019 app is a simple photo gallery that displays all your images from the cloud storage. The displayed images are scaled appropriately, which can lead to a slightly blurred display for smaller images. It is more practical to use the \u2018 Photos \u2019 app.","title":"Gallery"},{"location":"member/guest_access/","text":"Guest access If you would like to share private content (i.e. content that is not accessible to the public) with people who do not have a Hubzilla account, you have the option of realising this using guest access. With guest access, you create a (possibly temporary) access that enables the user who logs in with this data to access your publicly accessible content, but also non-public content that you specifically release for guest access. If you call up the \u2018Guest access\u2019 app, a web form is displayed with which you can set up such guest access. You enter a login name of your choice. Hubzilla has already automatically generated a password for the guest access. You can now give these two pieces of information to the person you want to give access to content. In the \u2018Expires\u2019 field, you can also enter an expiry date after which the guest access will be automatically deleted. If you leave this field empty, the guest access will be created without a time limit. It will then never expire automatically and may have to be deleted manually. You can also define a contact role for the guest access. All guest accounts are listed in the left-hand sidebar. If you select a guest account there, you can edit or delete it again (even before the deadline expires). As soon as a guest account has been created, it also appears in the \u2018 Authorisation settings \u2019 (privacy tool) under \u2018User-defined selection\u2019. You can use this to explicitly authorise individual private content for the guest account (but of course also for other contacts) so that the guest can access the content.","title":"Guest access"},{"location":"member/guest_access/#guest-access","text":"If you would like to share private content (i.e. content that is not accessible to the public) with people who do not have a Hubzilla account, you have the option of realising this using guest access. With guest access, you create a (possibly temporary) access that enables the user who logs in with this data to access your publicly accessible content, but also non-public content that you specifically release for guest access. If you call up the \u2018Guest access\u2019 app, a web form is displayed with which you can set up such guest access. You enter a login name of your choice. Hubzilla has already automatically generated a password for the guest access. You can now give these two pieces of information to the person you want to give access to content. In the \u2018Expires\u2019 field, you can also enter an expiry date after which the guest access will be automatically deleted. If you leave this field empty, the guest access will be created without a time limit. It will then never expire automatically and may have to be deleted manually. You can also define a contact role for the guest access. All guest accounts are listed in the left-hand sidebar. If you select a guest account there, you can edit or delete it again (even before the deadline expires). As soon as a guest account has been created, it also appears in the \u2018 Authorisation settings \u2019 (privacy tool) under \u2018User-defined selection\u2019. You can use this to explicitly authorise individual private content for the guest account (but of course also for other contacts) so that the guest can access the content.","title":"Guest access"},{"location":"member/important_apps/","text":"Important apps If you want to use your channel mainly for social networking, there are some apps that are not installed or activated by default, some of which are essential. To participate in the entire Fediverse, you need to install the \u2018 ActivityPub Protocol \u2019 app. To make it easier to find worthwhile contacts and find out what is happening in the Fediverse, you can install and use the \u2018 Public stream \u2019 app. The \u2018 NSFW \u2019 app, with which you can create and use your own content warning filters, is also useful and recommended. You should also install the \u2018 Superblock \u2019 app, which allows you to completely block certain users. The \u2018 Privacy Groups \u2019 app is also important. This makes it possible to create contact groups and filter them, as well as to communicate with the contacts in the groups. Please note: The \u2018Public stream\u2019 app is only available for installation if the hub administrator has activated this stream.","title":"Important apps"},{"location":"member/important_apps/#important-apps","text":"If you want to use your channel mainly for social networking, there are some apps that are not installed or activated by default, some of which are essential. To participate in the entire Fediverse, you need to install the \u2018 ActivityPub Protocol \u2019 app. To make it easier to find worthwhile contacts and find out what is happening in the Fediverse, you can install and use the \u2018 Public stream \u2019 app. The \u2018 NSFW \u2019 app, with which you can create and use your own content warning filters, is also useful and recommended. You should also install the \u2018 Superblock \u2019 app, which allows you to completely block certain users. The \u2018 Privacy Groups \u2019 app is also important. This makes it possible to create contact groups and filter them, as well as to communicate with the contacts in the groups. Please note: The \u2018Public stream\u2019 app is only available for installation if the hub administrator has activated this stream.","title":"Important apps"},{"location":"member/insert_images/","text":"Insert images There are various ways to insert images into posts and comments. In the post editor There are two buttons in the post editor that allow you to insert images: \u2018Embed image\u2019 and \u2018Attach/upload file\u2019. With \u2018Embed image\u2019, you can insert an image that already exists in the cloud into the post. The image must therefore either be available or you can upload it for precisely this purpose, e.g. using the \u2018Files\u2019 app. If you select this button, an overview of the available image files opens and you only have to select and click on the appropriate image. Please note: After selecting the image to be inserted, the selection window must be closed again. It does not close automatically after inserting an image so that you have the option of inserting several images in one go. Once selected, the image, scaled to its original size, is inserted as a clickable link to the source file using the bbCode tags [zrl][zmg][/zmg][/zrl] at the end of the previous post (not at the current text cursor position). With \u2018Attach/upload file\u2019 an image can be uploaded directly from your own device and embedded at the end of the post. A file selection dialogue opens where you can select and upload the image on your own device. It is uploaded to an automatically created subdirectory in the cloud and inserted at the end of the previous post using the bbCode tags [zrl][zmg][/zmg][/zrl] . Please note: With this method, the image is not scaled to its original size but displayed as a smaller preview image if there is no continuous text. As a result, you may see a chequered background around the image. In the comment editor The comment editor only offers the option of uploading and embedding an image. The button for inserting an existing image does not exist there. If you still want to insert an existing image, you must do this manually using the tags [img][/img] or [img=URL][/img] . To do this, you need to know the URL of the image. In this way, you can also insert images from external sources on the web. If you use [img=WIDTHxHEIGHT][/img] , you can scale the image. Alt text If you want an alternative text (alt text) to be displayed when the image cannot be displayed or - as a pop-up - when you move the mouse pointer over the image, you can place it between the two tags [img=URL]ALT_TEXT[/img] . If you have embedded the image in a post using the first method (\u2018Embed image\u2019), you have to do it yourself. You have to replace the scaling that was inserted in the opening zmg tag with the URL of the image and replace the automatically inserted image URL between the opening and closing zmg tag with the alt text. Example: The image was embedded and the code [zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=520x520]https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png[/zmg][/zrl] was created automatically, then it must be changed to insert the alt text \u2018Hubzilla icon on red background\u2019, for example: [zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png520x520]Hubzilla icon on red background[/zmg][/zrl]","title":"Insert images"},{"location":"member/insert_images/#insert-images","text":"There are various ways to insert images into posts and comments.","title":"Insert images"},{"location":"member/insert_images/#in-the-post-editor","text":"There are two buttons in the post editor that allow you to insert images: \u2018Embed image\u2019 and \u2018Attach/upload file\u2019. With \u2018Embed image\u2019, you can insert an image that already exists in the cloud into the post. The image must therefore either be available or you can upload it for precisely this purpose, e.g. using the \u2018Files\u2019 app. If you select this button, an overview of the available image files opens and you only have to select and click on the appropriate image. Please note: After selecting the image to be inserted, the selection window must be closed again. It does not close automatically after inserting an image so that you have the option of inserting several images in one go. Once selected, the image, scaled to its original size, is inserted as a clickable link to the source file using the bbCode tags [zrl][zmg][/zmg][/zrl] at the end of the previous post (not at the current text cursor position). With \u2018Attach/upload file\u2019 an image can be uploaded directly from your own device and embedded at the end of the post. A file selection dialogue opens where you can select and upload the image on your own device. It is uploaded to an automatically created subdirectory in the cloud and inserted at the end of the previous post using the bbCode tags [zrl][zmg][/zmg][/zrl] . Please note: With this method, the image is not scaled to its original size but displayed as a smaller preview image if there is no continuous text. As a result, you may see a chequered background around the image.","title":"In the post editor"},{"location":"member/insert_images/#in-the-comment-editor","text":"The comment editor only offers the option of uploading and embedding an image. The button for inserting an existing image does not exist there. If you still want to insert an existing image, you must do this manually using the tags [img][/img] or [img=URL][/img] . To do this, you need to know the URL of the image. In this way, you can also insert images from external sources on the web. If you use [img=WIDTHxHEIGHT][/img] , you can scale the image.","title":"In the comment editor"},{"location":"member/insert_images/#alt-text","text":"If you want an alternative text (alt text) to be displayed when the image cannot be displayed or - as a pop-up - when you move the mouse pointer over the image, you can place it between the two tags [img=URL]ALT_TEXT[/img] . If you have embedded the image in a post using the first method (\u2018Embed image\u2019), you have to do it yourself. You have to replace the scaling that was inserted in the opening zmg tag with the URL of the image and replace the automatically inserted image URL between the opening and closing zmg tag with the alt text. Example: The image was embedded and the code [zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=520x520]https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png[/zmg][/zrl] was created automatically, then it must be changed to insert the alt text \u2018Hubzilla icon on red background\u2019, for example: [zrl=https://klacker.org/photos/tutorial01/image/cd747cd9-3f05-42cd-94cc-91c7368c5a18][zmg=https://klacker.org/photo/cd747cd9-3f05-42cd-94cc-91c7368c5a18-2.png520x520]Hubzilla icon on red background[/zmg][/zrl]","title":"Alt text"},{"location":"member/interact/","text":"Interact with posts You can interact with posts that you see in the stream. This is one of the purposes of social networks. You can comment on such a post, but there are also other ways of interacting. The buttons for this can be found at the bottom right of the post. You can \u2018like\u2019 \ud83d\udd92 or \u2018dislike\u2019 a post \ud83d\udd93 or you can react to a post with an emoji: Further functions can be found in the \u2699 menu.","title":"Interact"},{"location":"member/interact/#interact-with-posts","text":"You can interact with posts that you see in the stream. This is one of the purposes of social networks. You can comment on such a post, but there are also other ways of interacting. The buttons for this can be found at the bottom right of the post. You can \u2018like\u2019 \ud83d\udd92 or \u2018dislike\u2019 a post \ud83d\udd93 or you can react to a post with an emoji: Further functions can be found in the \u2699 menu.","title":"Interact with posts"},{"location":"member/link_to_source/","text":"Link to source Link to source\u2019 takes you to the actual source of a post. You end up at the original post on the instance of the post creator.","title":"Link to source"},{"location":"member/link_to_source/#link-to-source","text":"Link to source\u2019 takes you to the actual source of a post. You end up at the original post on the instance of the post creator.","title":"Link to source"},{"location":"member/mentions/","text":"Mentions Channels (users) are labelled by simply prefixing their name (handle) with the @ sign. @Jack When you mention someone, an autocomplete field is created from which you can select your immediate connections. Select accordingly. If the contact is authorised to receive your posting, they will receive a tag notification. If the addressee is not in your contact list, you must write out the handle after the \u2018@\u2019 sign. If the recipient also authorises mentions of third parties, they will also be notified of the mention.","title":"Mentions"},{"location":"member/mentions/#mentions","text":"Channels (users) are labelled by simply prefixing their name (handle) with the @ sign. @Jack When you mention someone, an autocomplete field is created from which you can select your immediate connections. Select accordingly. If the contact is authorised to receive your posting, they will receive a tag notification. If the addressee is not in your contact list, you must write out the handle after the \u2018@\u2019 sign. If the recipient also authorises mentions of third parties, they will also be notified of the mention.","title":"Mentions"},{"location":"member/permissions/","text":"Permissions Permissions are a core element of Hubzilla. They allow very fine-grained options for making content accessible, hiding it or restricting its use. They are also used to make direct messages possible by using authorisations to determine who can see the post (direct messages are nothing else) and who cannot.","title":"Permissions"},{"location":"member/permissions/#permissions","text":"Permissions are a core element of Hubzilla. They allow very fine-grained options for making content accessible, hiding it or restricting its use. They are also used to make direct messages possible by using authorisations to determine who can see the post (direct messages are nothing else) and who cannot.","title":"Permissions"},{"location":"member/permissions_channel_roles/","text":"Permissions - User-defined channel roles Channel roles define which rights are granted when interacting with a channel. They can be accessed under \u2018Settings\u2019 \u2192 \u2018Channel settings\u2019. The role for a channel can be defined here. Channel roles also have an influence on contact roles because individual rights that are specified and inherited from the channel roles overwrite your own settings there. To truly customise the role permissions of your channel, you must select \u2018User-defined\u2019 as the channel role. The other roles (\u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019) are predefined authorisation roles (see: Channel roles ). With the customised channel roles, you can define who can perform the following interactions and how: Can see my channel stream and my posts Can send me the posts from their channel Can see my default profile Can see my connections Can see my file and image folders Can upload/modify my file and image folders Can see the web pages of my channel Can see my wiki pages Can create/edit web pages in my channel Can edit my wiki pages Can publish posts on my channel page (\u2018wall\u2019) Can send me direct messages Can like/dislike profiles and profile stuff Can chat with me Can quote/mirror my public posts in other channels Can administer my channel The following authorisations are then available for these interactions: Only me Only those you explicitly allow Accepted connections Any connections Everyone on this website All Hubzilla members Anyone authenticated Anyone on the Internet To edit the custom role , select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue appears, which draws your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens. Important note: The user-defined roles should be set with caution and harbour the risk that the channel will no longer behave as desired with certain configurations.","title":"Permissions channel roles"},{"location":"member/permissions_channel_roles/#permissions-user-defined-channel-roles","text":"Channel roles define which rights are granted when interacting with a channel. They can be accessed under \u2018Settings\u2019 \u2192 \u2018Channel settings\u2019. The role for a channel can be defined here. Channel roles also have an influence on contact roles because individual rights that are specified and inherited from the channel roles overwrite your own settings there. To truly customise the role permissions of your channel, you must select \u2018User-defined\u2019 as the channel role. The other roles (\u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019) are predefined authorisation roles (see: Channel roles ). With the customised channel roles, you can define who can perform the following interactions and how: Can see my channel stream and my posts Can send me the posts from their channel Can see my default profile Can see my connections Can see my file and image folders Can upload/modify my file and image folders Can see the web pages of my channel Can see my wiki pages Can create/edit web pages in my channel Can edit my wiki pages Can publish posts on my channel page (\u2018wall\u2019) Can send me direct messages Can like/dislike profiles and profile stuff Can chat with me Can quote/mirror my public posts in other channels Can administer my channel The following authorisations are then available for these interactions: Only me Only those you explicitly allow Accepted connections Any connections Everyone on this website All Hubzilla members Anyone authenticated Anyone on the Internet To edit the custom role , select \u2018Privacy settings\u2019 in the settings. At the bottom right you will find the button \u2018Custom channel role configuration\u2019. If you click on it, a warning dialogue appears, which draws your attention to the risks of incorrect configuration. If you confirm that you want to edit the rights, the settings dialogue for the user-defined role rights opens. Important note: The user-defined roles should be set with caution and harbour the risk that the channel will no longer behave as desired with certain configurations.","title":"Permissions - User-defined channel roles"},{"location":"member/permissions_contact_roles/","text":"Permissions - Contact roles Contact roles are used to create roles (i.e. a collection of rights and options) for contacts. These roles can then be assigned to a contact or all contacts in a privacy group (not the group itself). This restricts or extends the possibilities of contacts. The \u2018Contact roles\u2019 app can be used to create roles that correspond to the channel roles . This permission role can then be assigned to individual contacts or all contacts in a privacy group in the contact editor or privacy group editor. After creation, each channel automatically has the \u2018Standard\u2019 contact role (\u2018System role - not editable\u2019). New contacts are automatically assigned this contact role (unless you create your own contact role, change this default setting and assign the new, customised role to new contacts in future). The default contact role includes authorisations based on the selected channel role. In addition to the rights granted by the channel role, some other rights are granted so that the channel behaves as you would expect based on the channel role (e.g. \u2018Public\u2019 is most similar to a \u2018normal\u2019 social network channel). Note: Some of the rights of a channel role (whether standard or self-created) are inherited from the channel role. These rights cannot be revoked in the contact role. The contact role is a whitelist in which only additional rights can be granted. You can assign a contact role to a contact in the connection editor . This dialogue also appears when you add a new contact. By default, the contact role for which the \u2018Automatically assign this role to new contacts\u2019 switch has been activated is selected here. For channels without self-defined contact roles, this is always \u2018Standard\u2019. There is also a \u2018Contact Roles\u2019 button in the connection editor which takes you to the contact role editor if you want to create a new contact role for the contact.","title":"Permissions contact roles"},{"location":"member/permissions_contact_roles/#permissions-contact-roles","text":"Contact roles are used to create roles (i.e. a collection of rights and options) for contacts. These roles can then be assigned to a contact or all contacts in a privacy group (not the group itself). This restricts or extends the possibilities of contacts. The \u2018Contact roles\u2019 app can be used to create roles that correspond to the channel roles . This permission role can then be assigned to individual contacts or all contacts in a privacy group in the contact editor or privacy group editor. After creation, each channel automatically has the \u2018Standard\u2019 contact role (\u2018System role - not editable\u2019). New contacts are automatically assigned this contact role (unless you create your own contact role, change this default setting and assign the new, customised role to new contacts in future). The default contact role includes authorisations based on the selected channel role. In addition to the rights granted by the channel role, some other rights are granted so that the channel behaves as you would expect based on the channel role (e.g. \u2018Public\u2019 is most similar to a \u2018normal\u2019 social network channel). Note: Some of the rights of a channel role (whether standard or self-created) are inherited from the channel role. These rights cannot be revoked in the contact role. The contact role is a whitelist in which only additional rights can be granted. You can assign a contact role to a contact in the connection editor . This dialogue also appears when you add a new contact. By default, the contact role for which the \u2018Automatically assign this role to new contacts\u2019 switch has been activated is selected here. For channels without self-defined contact roles, this is always \u2018Standard\u2019. There is also a \u2018Contact Roles\u2019 button in the connection editor which takes you to the contact role editor if you want to create a new contact role for the contact.","title":"Permissions - Contact roles"},{"location":"member/permissions_content/","text":"Permissions for content If you share content on Hubzilla, i.e. publish posts, upload images or texts, enter appointments in the calendar, you can define exactly who has access to this content. You can access the permission settings for content via a button (\"Privacy Tool\") with a padlock symbol \ud83d\udd12or \ud83d\udd13. For sharing posts: For creating folders/directories in the cloud storage: For uploading files: For sharing dates/events: There are also corresponding permission setting options for websites, wiki pages and various other content. If you click on the icon, the permissions dialogue opens, which you can use to set the permissions for other users (this is usually about the visibility of content). You have the choice between Public - As the name suggests, the content is visible to everyone on the Internet. So even for users who do not use a Fediverse service. Only me - Here, only the user who created the content can see it. They \u2018share\u2019 it with themselves. Privacy groups - The content is visible to all users who are in one of your privacy groups. Customised selection - Here you can specify exactly who can see the content. It is also possible to combine privacy groups and individual contacts by selecting \u2018Allow\u2019 or \u2018Deny\u2019 for the respective entry. Important note: Once permissions for postings have been set, they can no longer be changed! A posting is immediately distributed to an indeterminable number of other servers, so that permissions cannot be subsequently granted or withdrawn, whereas permissions for other content such as files, images, etc. can be subsequently edited because this content is only stored on your own instance (hub) and only the reference to the content is passed on when it is shared.","title":"Permissions content"},{"location":"member/permissions_content/#permissions-for-content","text":"If you share content on Hubzilla, i.e. publish posts, upload images or texts, enter appointments in the calendar, you can define exactly who has access to this content. You can access the permission settings for content via a button (\"Privacy Tool\") with a padlock symbol \ud83d\udd12or \ud83d\udd13. For sharing posts: For creating folders/directories in the cloud storage: For uploading files: For sharing dates/events: There are also corresponding permission setting options for websites, wiki pages and various other content. If you click on the icon, the permissions dialogue opens, which you can use to set the permissions for other users (this is usually about the visibility of content). You have the choice between Public - As the name suggests, the content is visible to everyone on the Internet. So even for users who do not use a Fediverse service. Only me - Here, only the user who created the content can see it. They \u2018share\u2019 it with themselves. Privacy groups - The content is visible to all users who are in one of your privacy groups. Customised selection - Here you can specify exactly who can see the content. It is also possible to combine privacy groups and individual contacts by selecting \u2018Allow\u2019 or \u2018Deny\u2019 for the respective entry. Important note: Once permissions for postings have been set, they can no longer be changed! A posting is immediately distributed to an indeterminable number of other servers, so that permissions cannot be subsequently granted or withdrawn, whereas permissions for other content such as files, images, etc. can be subsequently edited because this content is only stored on your own instance (hub) and only the reference to the content is passed on when it is shared.","title":"Permissions for content"},{"location":"member/photos/","text":"Photos The Photos app is a special management/viewing tool for images uploaded to your own cloud. It displays thumbnails instead of tiles or file names, which makes it easier to find specific images. Clicking on the image will take you to the image view. There are two control icons here to switch to the next or previous photo. There is also a \u2018Photo tools\u2019 button that allows you to set the image as a profile picture or banner and to edit the image using a menu. Clicking on the image again will open a full-size view.","title":"Photos"},{"location":"member/photos/#photos","text":"The Photos app is a special management/viewing tool for images uploaded to your own cloud. It displays thumbnails instead of tiles or file names, which makes it easier to find specific images. Clicking on the image will take you to the image view. There are two control icons here to switch to the next or previous photo. There is also a \u2018Photo tools\u2019 button that allows you to set the image as a profile picture or banner and to edit the image using a menu. Clicking on the image again will open a full-size view.","title":"Photos"},{"location":"member/posting/","text":"Posting If you would like to write and share a post (publish, although the circle of recipients or those who can see the post may be restricted), you can usually do this via the \u2018Share\u2019 field located above the stream. Click on this field to open the post editor. At the top is the field for the post title (optional), below this is the field for the summary (also optional), if the administrator of your hub allows this function. The summary can also be used for the purpose of a content warning. Below the field for the summary is a field for categories (if activated by the admin). Below this is the text field in which you can create the post content. Depending on the Hub settings, you can use plain text, Markdown, bbCode or HTML for formatting the text. At the bottom of the post editor there are some buttons for easier formatting of the content and for inserting elements and using additional functions: bold, italic, underline, quote, code, attach/upload file, insert link, insert image (an image that already exists under Files), insert location, set expiry date for the post, set publication date, encrypt text, vote (poll) on/off, deactivate comments. To the right of this is another block with buttons. Here you can display a preview of the post, specify whether the post should be published on other networks, make the authorisation settings (who can see the post) and finally publish it using the \u2018Share\u2019 button. You can also access the post editor by selecting the corresponding menu item in the app menu (top right \u22ee) or the corresponding icon in the navigation bar (if you have pinned the \u2018Write post\u2019 app).","title":"Posting"},{"location":"member/posting/#posting","text":"If you would like to write and share a post (publish, although the circle of recipients or those who can see the post may be restricted), you can usually do this via the \u2018Share\u2019 field located above the stream. Click on this field to open the post editor. At the top is the field for the post title (optional), below this is the field for the summary (also optional), if the administrator of your hub allows this function. The summary can also be used for the purpose of a content warning. Below the field for the summary is a field for categories (if activated by the admin). Below this is the text field in which you can create the post content. Depending on the Hub settings, you can use plain text, Markdown, bbCode or HTML for formatting the text. At the bottom of the post editor there are some buttons for easier formatting of the content and for inserting elements and using additional functions: bold, italic, underline, quote, code, attach/upload file, insert link, insert image (an image that already exists under Files), insert location, set expiry date for the post, set publication date, encrypt text, vote (poll) on/off, deactivate comments. To the right of this is another block with buttons. Here you can display a preview of the post, specify whether the post should be published on other networks, make the authorisation settings (who can see the post) and finally publish it using the \u2018Share\u2019 button. You can also access the post editor by selecting the corresponding menu item in the app menu (top right \u22ee) or the corresponding icon in the navigation bar (if you have pinned the \u2018Write post\u2019 app).","title":"Posting"},{"location":"member/privacy_groups/","text":"Privacy Groups The \u2018Privacy Groups\u2019 app allows you to create groups to which you can assign contacts. On the one hand, they serve to filter the stream (so you can only display posts from users who are in a privacy group) and, on the other hand, they allow you to grant certain groups rights to content with regard to permissions . The first function is easy to understand. If you have contacts (a contact can be in several groups) in a group and you select a specific group in the left sidebar in the stream view, only posts from contacts in that group will be displayed. This function thus acts as a stream filter. The second function is also easy to grasp, but rather unusual for many Fediverse users, since it only exists in this form in Hubzilla and related services (Streams, Friendica etc.). As the name \u2018Privacy Groups\u2019 suggests, this is also about restricted communication. If you select a group as the authorisation when composing a post, the post is only distributed to the contacts contained in that group and only they can see it. It is also not possible for the recipients (group members) to share such a post publicly. This allows for closed group communication. When you open the app, existing groups are displayed in the left sidebar and the input form for creating a new group is displayed in the main view. If you select one of the groups in the sidebar, you can edit it. Membership for contacts can also be set here. Clicking on an entry toggles the membership between \u2018Not in group\u2019 and \u2018Group membership\u2019. This way, you can remove members from a group or add users as group members. Adding a contact to a group can also be done in the \u2018Connections\u2019 app using the contacts tool: To add a new group, click on the \u2018+ Add new group\u2019 entry in the sidebar.","title":"Privacy groups"},{"location":"member/privacy_groups/#privacy-groups","text":"The \u2018Privacy Groups\u2019 app allows you to create groups to which you can assign contacts. On the one hand, they serve to filter the stream (so you can only display posts from users who are in a privacy group) and, on the other hand, they allow you to grant certain groups rights to content with regard to permissions . The first function is easy to understand. If you have contacts (a contact can be in several groups) in a group and you select a specific group in the left sidebar in the stream view, only posts from contacts in that group will be displayed. This function thus acts as a stream filter. The second function is also easy to grasp, but rather unusual for many Fediverse users, since it only exists in this form in Hubzilla and related services (Streams, Friendica etc.). As the name \u2018Privacy Groups\u2019 suggests, this is also about restricted communication. If you select a group as the authorisation when composing a post, the post is only distributed to the contacts contained in that group and only they can see it. It is also not possible for the recipients (group members) to share such a post publicly. This allows for closed group communication. When you open the app, existing groups are displayed in the left sidebar and the input form for creating a new group is displayed in the main view. If you select one of the groups in the sidebar, you can edit it. Membership for contacts can also be set here. Clicking on an entry toggles the membership between \u2018Not in group\u2019 and \u2018Group membership\u2019. This way, you can remove members from a group or add users as group members. Adding a contact to a group can also be done in the \u2018Connections\u2019 app using the contacts tool: To add a new group, click on the \u2018+ Add new group\u2019 entry in the sidebar.","title":"Privacy Groups"},{"location":"member/privacy_settings/","text":"Privacy settings In the privacy settings, you can determine whether your posts may be indexed by search engines, whether you accept contact requests automatically (without manual approval), whether all messages in which you are mentioned are automatically accepted, whether comments from users who are not among your contacts are submitted for moderation (approved/rejected) or deleted, and whether you allow OCAP access.","title":"Privacy settings"},{"location":"member/privacy_settings/#privacy-settings","text":"In the privacy settings, you can determine whether your posts may be indexed by search engines, whether you accept contact requests automatically (without manual approval), whether all messages in which you are mentioned are automatically accepted, whether comments from users who are not among your contacts are submitted for moderation (approved/rejected) or deleted, and whether you allow OCAP access.","title":"Privacy settings"},{"location":"member/profiles/","text":"Profiles Hubzilla has unlimited profiles. You can use different profiles to show different \u2018sides of yourself\u2019 to different target groups. This is not the same as having different channels. Different channels allow for completely different information. You can have a channel for yourself, a channel for your sports team, a channel for your website or something else. A profile allows for fine-grained \u2018\u2019sides\u2018\u2019 of each channel. Different profiles could be compared to different business cards of a person. Depending on the purpose, different information is given on each business card. For example, your standard public profile could read: \u2018Hi, I'm Fred and I like to laugh\u2019. You can show your close friends a profile that says \u2018and I also like to throw dwarfs\u2019. You always have a profile that is referred to as your \u2018standard\u2019 or \u2018public\u2019 profile. This profile is always accessible to the general public and cannot be hidden (there may be rare exceptions on privately run or unaffiliated sites). You can and should limit the information you make available in your public profile. If you want your friends to be able to find you, it is helpful if you include the following information in your public profile... Your real name or at least a nickname that everyone knows A photo of you Your location on earth, at least at country level. If you also want to meet people who share general interests with you, please take a moment to add some \u2018keywords\u2019 to your profile. For example, \u2018music, linux, photography\u2019 or something similar. You can add as many keywords as you like. Select \u2018Edit profiles\u2019 from the menu on your Hubzilla site. You can edit an existing profile, change the profile photo, add things to a profile or create a new profile. You can also create a \u2018clone\u2019 of an existing profile if you only want to change a few things but don't want to re-enter all the information. To do this, click on the profile you want to clone and select \u2018Clone this profile\u2019. In the list of your profiles, you can also select the contacts who can see a particular profile. Simply click on \u2018Edit visibility\u2019 next to the profile in question (only available for profiles that are not your default profile) and then click on specific connections to add them to or remove them from the group of people who can see this profile. Once a profile has been selected, the person viewing your profile will see the private profile you have assigned. If the person is not authenticated, they will see your public profile. There is a setting that allows you to publish your profile in a directory and ensure that it can be found by others. You can change this setting on the \u2018Settings\u2019 page. If you do not want others to find you without telling them your channel address, you can leave your profile unpublished.","title":"Profiles"},{"location":"member/profiles/#profiles","text":"Hubzilla has unlimited profiles. You can use different profiles to show different \u2018sides of yourself\u2019 to different target groups. This is not the same as having different channels. Different channels allow for completely different information. You can have a channel for yourself, a channel for your sports team, a channel for your website or something else. A profile allows for fine-grained \u2018\u2019sides\u2018\u2019 of each channel. Different profiles could be compared to different business cards of a person. Depending on the purpose, different information is given on each business card. For example, your standard public profile could read: \u2018Hi, I'm Fred and I like to laugh\u2019. You can show your close friends a profile that says \u2018and I also like to throw dwarfs\u2019. You always have a profile that is referred to as your \u2018standard\u2019 or \u2018public\u2019 profile. This profile is always accessible to the general public and cannot be hidden (there may be rare exceptions on privately run or unaffiliated sites). You can and should limit the information you make available in your public profile. If you want your friends to be able to find you, it is helpful if you include the following information in your public profile... Your real name or at least a nickname that everyone knows A photo of you Your location on earth, at least at country level. If you also want to meet people who share general interests with you, please take a moment to add some \u2018keywords\u2019 to your profile. For example, \u2018music, linux, photography\u2019 or something similar. You can add as many keywords as you like. Select \u2018Edit profiles\u2019 from the menu on your Hubzilla site. You can edit an existing profile, change the profile photo, add things to a profile or create a new profile. You can also create a \u2018clone\u2019 of an existing profile if you only want to change a few things but don't want to re-enter all the information. To do this, click on the profile you want to clone and select \u2018Clone this profile\u2019. In the list of your profiles, you can also select the contacts who can see a particular profile. Simply click on \u2018Edit visibility\u2019 next to the profile in question (only available for profiles that are not your default profile) and then click on specific connections to add them to or remove them from the group of people who can see this profile. Once a profile has been selected, the person viewing your profile will see the private profile you have assigned. If the person is not authenticated, they will see your public profile. There is a setting that allows you to publish your profile in a directory and ensure that it can be found by others. You can change this setting on the \u2018Settings\u2019 page. If you do not want others to find you without telling them your channel address, you can leave your profile unpublished.","title":"Profiles"},{"location":"member/protection_of_privacy/","text":"Tips for protecting your privacy If you attach great importance to your privacy and still want to participate in Fediverse, you need to think carefully about what you want to reveal about yourself before and during the creation of a personal channel. This is the case with every Fediverse service. With Hubzilla, however, there is another important aspect. You not only have to ask yourself the question \u2018What?\u2019, but also \u2018To whom?\u2019 and \u2018Which?\u2019. With Hubzilla, you not only determine what you disclose about yourself, but also who you allow to see the information and content. And who you allow to interact with what. The advantage is that you are not dependent on a \u2018rule set\u2019, but can define different rules for different applications and different contacts. A typical use case would be that you want to participate in Fediverse in the normal way that you are familiar with from other social networks. When creating a channel, you must make the first relevant decision: the channel role . Here you can choose between \u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019 and \u2018 Customised\u2019. Apart from the \u2018Community Forum\u2019, which is intended for other applications, you have the choice between three roles. With the \u2018Public\u2019 role, you allow others to see your channel stream (i.e. the posts that you share publicly) and your posts in general, see your standard profile, see your connections, see your file and image folders, see the web pages of your channel, see the wiki pages of your channel, comment on, like or dislike your posts, send you direct messages, like or dislike your profiles and profile content and chat with you. These role-based rules reflect the \u2018normal\u2019 use of a social network quite well. The \u2018Personal\u2019 role is similar and only denies some of the permissions of the \u2018Public\u2019 role. It allows others to see your channel stream (i.e. the posts that you share publicly) and your posts in general, see your default profile, ./. see your file and image folders, see the web pages of your channel, see the wiki pages of your channel, ./. ./. ./. ./. Interaction by other users is restricted with this profile, as they are not allowed to comment on, like or dislike your posts (the latter also not in relation to your profile/profile content). They are also not allowed to send you direct messages or chat with you. The \u2018User-defined\u2019 role allows you to define all authorisations individually. Caution is advised here, as inappropriate rules can make a channel halfway \u2018unusable\u2019. For the intended use as a \u2018typical social network account\u2019, we recommend selecting the \u2018Public\u2019 or \u2018Personal\u2019 role. If you would rather opt for the \u2018Personal\u2019 role, but would still like to allow further interaction with certain users (friends, family, colleagues, etc.), you do not have to use the \u2018Public\u2019 role. Hubzilla works with whitelists (permission lists) for authorisations. The channel role therefore defines the basic authorisations. You cannot subsequently revoke these (apart from defining access rights in the specific individual case of a content) using other mechanisms. However, you can add various authorisations to the whitelist using different contact roles . For example, you could create a \u2018Family\u2019 contact role in which - in addition to the authorisations granted by the \u2018Personal\u2019 role - further authorisations (e.g. commenting, linking, disliking and sending direct messages) are granted. If you now assign this contact role to your contacts that you define as \u2018Family\u2019 in this example, your family members - unlike everyone else - can write comments, give you a thumbs up or thumbs down and communicate with you non-publicly (direct message). You can create as many contact roles as you like for different purposes and contacts and grant additional authorisations in addition to those of the channel role. But(!): You cannot revoke any authorisation from the channel role there. It is therefore advisable not to be too generous with the channel role and to select it accordingly, depending on the purpose of the channel. By selecting \u2018User-defined\u2019, for example, you could define an even more restrictive channel role than \u2018Personal\u2019 and then define further authorisations for certain users with the contact roles (only recommended if you are really familiar with the authorisation system). Another aspect of privacy is the profile information. For \u2018typical\u2019 use as a social network account, some information should be disclosed in the profile. Otherwise, other users will not have the idea of connecting with you. Or they want to connect with another user, but the other user refuses because they have no information about you (unless they know you and your channel name). So some information should go in there. As much as necessary, as little as possible. You should fill your standard profile, which every channel has, with information according to exactly this principle. However, Hubzilla allows you to create multiple profiles. In such profiles, you can then enter further information that may be of interest for certain connections. You then have the option of releasing such special profiles for certain connections. The information is therefore not visible and public to everyone, but is only available to the selected users.","title":"Protection of privacy"},{"location":"member/protection_of_privacy/#tips-for-protecting-your-privacy","text":"If you attach great importance to your privacy and still want to participate in Fediverse, you need to think carefully about what you want to reveal about yourself before and during the creation of a personal channel. This is the case with every Fediverse service. With Hubzilla, however, there is another important aspect. You not only have to ask yourself the question \u2018What?\u2019, but also \u2018To whom?\u2019 and \u2018Which?\u2019. With Hubzilla, you not only determine what you disclose about yourself, but also who you allow to see the information and content. And who you allow to interact with what. The advantage is that you are not dependent on a \u2018rule set\u2019, but can define different rules for different applications and different contacts. A typical use case would be that you want to participate in Fediverse in the normal way that you are familiar with from other social networks. When creating a channel, you must make the first relevant decision: the channel role . Here you can choose between \u2018Public\u2019, \u2018Personal\u2019, \u2018Community Forum\u2019 and \u2018 Customised\u2019. Apart from the \u2018Community Forum\u2019, which is intended for other applications, you have the choice between three roles. With the \u2018Public\u2019 role, you allow others to see your channel stream (i.e. the posts that you share publicly) and your posts in general, see your standard profile, see your connections, see your file and image folders, see the web pages of your channel, see the wiki pages of your channel, comment on, like or dislike your posts, send you direct messages, like or dislike your profiles and profile content and chat with you. These role-based rules reflect the \u2018normal\u2019 use of a social network quite well. The \u2018Personal\u2019 role is similar and only denies some of the permissions of the \u2018Public\u2019 role. It allows others to see your channel stream (i.e. the posts that you share publicly) and your posts in general, see your default profile, ./. see your file and image folders, see the web pages of your channel, see the wiki pages of your channel, ./. ./. ./. ./. Interaction by other users is restricted with this profile, as they are not allowed to comment on, like or dislike your posts (the latter also not in relation to your profile/profile content). They are also not allowed to send you direct messages or chat with you. The \u2018User-defined\u2019 role allows you to define all authorisations individually. Caution is advised here, as inappropriate rules can make a channel halfway \u2018unusable\u2019. For the intended use as a \u2018typical social network account\u2019, we recommend selecting the \u2018Public\u2019 or \u2018Personal\u2019 role. If you would rather opt for the \u2018Personal\u2019 role, but would still like to allow further interaction with certain users (friends, family, colleagues, etc.), you do not have to use the \u2018Public\u2019 role. Hubzilla works with whitelists (permission lists) for authorisations. The channel role therefore defines the basic authorisations. You cannot subsequently revoke these (apart from defining access rights in the specific individual case of a content) using other mechanisms. However, you can add various authorisations to the whitelist using different contact roles . For example, you could create a \u2018Family\u2019 contact role in which - in addition to the authorisations granted by the \u2018Personal\u2019 role - further authorisations (e.g. commenting, linking, disliking and sending direct messages) are granted. If you now assign this contact role to your contacts that you define as \u2018Family\u2019 in this example, your family members - unlike everyone else - can write comments, give you a thumbs up or thumbs down and communicate with you non-publicly (direct message). You can create as many contact roles as you like for different purposes and contacts and grant additional authorisations in addition to those of the channel role. But(!): You cannot revoke any authorisation from the channel role there. It is therefore advisable not to be too generous with the channel role and to select it accordingly, depending on the purpose of the channel. By selecting \u2018User-defined\u2019, for example, you could define an even more restrictive channel role than \u2018Personal\u2019 and then define further authorisations for certain users with the contact roles (only recommended if you are really familiar with the authorisation system). Another aspect of privacy is the profile information. For \u2018typical\u2019 use as a social network account, some information should be disclosed in the profile. Otherwise, other users will not have the idea of connecting with you. Or they want to connect with another user, but the other user refuses because they have no information about you (unless they know you and your channel name). So some information should go in there. As much as necessary, as little as possible. You should fill your standard profile, which every channel has, with information according to exactly this principle. However, Hubzilla allows you to create multiple profiles. In such profiles, you can then enter further information that may be of interest for certain connections. You then have the option of releasing such special profiles for certain connections. The information is therefore not visible and public to everyone, but is only available to the selected users.","title":"Tips for protecting your privacy"},{"location":"member/public_stream/","text":"Public Stream If the administrator of a hub has activated the public stream, you as a user can install and activate the \u2018Public stream\u2019 app. While all posts and activities from yourself and all your connections appear in the \u2018normal\u2019 stream, the public stream is more comprehensive. There are two options: If the administrator has restricted the public stream to their own hub, all public posts and activities from the streams of all users who have an account on this hub will appear there. If the administrator has not restricted the public stream to their own hub, all public posts from all channels of their own hub, public content that arrives at their own hub (e.g. comments on posts by hub users that originate from other instances) and randomly collected content from channels that are known to their own hub (i.e. all contacts from all channels on their own hub) will be displayed. The public stream is not unmoderated. The administrator of a hub has the option of deleting posts from the public stream (\u2018Admin delete\u2019). These posts are then actually deleted from the public stream of their own hub. They also do not appear in the public stream view of other channels of the hub.","title":"Public stream"},{"location":"member/public_stream/#public-stream","text":"If the administrator of a hub has activated the public stream, you as a user can install and activate the \u2018Public stream\u2019 app. While all posts and activities from yourself and all your connections appear in the \u2018normal\u2019 stream, the public stream is more comprehensive. There are two options: If the administrator has restricted the public stream to their own hub, all public posts and activities from the streams of all users who have an account on this hub will appear there. If the administrator has not restricted the public stream to their own hub, all public posts from all channels of their own hub, public content that arrives at their own hub (e.g. comments on posts by hub users that originate from other instances) and randomly collected content from channels that are known to their own hub (i.e. all contacts from all channels on their own hub) will be displayed. The public stream is not unmoderated. The administrator of a hub has the option of deleting posts from the public stream (\u2018Admin delete\u2019). These posts are then actually deleted from the public stream of their own hub. They also do not appear in the public stream view of other channels of the hub.","title":"Public Stream"},{"location":"member/registration/","text":"Login / Registration Not all Hubzilla sites allow open registration. If registration is allowed, you will see a \u2018Register\u2019 link right next to the login prompt on the site's homepage. Following this link will take you to the site's registration page. On some sites, you may be redirected to another site that lists hubs where registration is allowed. Since all Hubzilla sites are connected, it does not matter where your account is located. Your e-mail address Please enter a valid e-mail address. Your email address will never be published. This address will be used to activate your account, to send (optional) email notifications for incoming messages or articles and to recover lost passwords . Password Enter a password of your choice and repeat it in the second field to ensure that it has been entered correctly. As Hubzilla offers a decentralised identity, you can use your account to log in to many other websites. Terms of Use Click on the link to read the website's terms of use. Once you have read them, confirm them by ticking the box in the registration form. Log in Once you have entered the required information, click on the \u2018Register\u2019 button. Some websites may require administrator approval before registration can be processed, in which case you will be notified. Please check your email (including your spam folder) for approval of your registration.","title":"Registration"},{"location":"member/registration/#login-registration","text":"Not all Hubzilla sites allow open registration. If registration is allowed, you will see a \u2018Register\u2019 link right next to the login prompt on the site's homepage. Following this link will take you to the site's registration page. On some sites, you may be redirected to another site that lists hubs where registration is allowed. Since all Hubzilla sites are connected, it does not matter where your account is located. Your e-mail address Please enter a valid e-mail address. Your email address will never be published. This address will be used to activate your account, to send (optional) email notifications for incoming messages or articles and to recover lost passwords . Password Enter a password of your choice and repeat it in the second field to ensure that it has been entered correctly. As Hubzilla offers a decentralised identity, you can use your account to log in to many other websites. Terms of Use Click on the link to read the website's terms of use. Once you have read them, confirm them by ticking the box in the registration form. Log in Once you have entered the required information, click on the \u2018Register\u2019 button. Some websites may require administrator approval before registration can be processed, in which case you will be notified. Please check your email (including your spam folder) for approval of your registration.","title":"Login / Registration"},{"location":"member/repeat/","text":"Repeat By repeating posts, the post is distributed to your own connections. Comments end up in the original post (in contrast to shared posts ). This behaviour corresponds to \u2018boosting\u2019, as we know it from Mastodon or other Fediverse services, for example.","title":"Repeat"},{"location":"member/repeat/#repeat","text":"By repeating posts, the post is distributed to your own connections. Comments end up in the original post (in contrast to shared posts ). This behaviour corresponds to \u2018boosting\u2019, as we know it from Mastodon or other Fediverse services, for example.","title":"Repeat"},{"location":"member/save_to_folder/","text":"Save to folder If you want to remember postings for later, you can do this by marking them (star). However, if you have a large number of postings marked in this way, it can easily become confusing. It is more practical to save such posts in different \u2018folders\u2019. These are categorised markings. If you select \u2018Save in folder\u2019, a dialogue window opens to select the folder. You can enter a folder name in the text field. If folders already exist, a double click in the text field will display a selection list of the existing folders so that you can select one of them. If you have placed a post in a folder, you can recognise this by the folder symbol (including folder name) at the bottom left of the post. This icon can also be used to remove a post from a folder by clicking on the \u2018X\u2019 in the icon. In the stream view, you will find the entry \u2018Saved folders\u2019 in the left sidebar. If you click on it, all existing folders are displayed. If you now select a folder, all the posts that you have saved in this folder will be displayed in (reverse) chronological order in the stream. This feature is comparable to the \u2018clips\u2019 (= categorised bookmarks) as known from Misskey and the Forkeys.","title":"Save to folder"},{"location":"member/save_to_folder/#save-to-folder","text":"If you want to remember postings for later, you can do this by marking them (star). However, if you have a large number of postings marked in this way, it can easily become confusing. It is more practical to save such posts in different \u2018folders\u2019. These are categorised markings. If you select \u2018Save in folder\u2019, a dialogue window opens to select the folder. You can enter a folder name in the text field. If folders already exist, a double click in the text field will display a selection list of the existing folders so that you can select one of them. If you have placed a post in a folder, you can recognise this by the folder symbol (including folder name) at the bottom left of the post. This icon can also be used to remove a post from a folder by clicking on the \u2018X\u2019 in the icon. In the stream view, you will find the entry \u2018Saved folders\u2019 in the left sidebar. If you click on it, all existing folders are displayed. If you now select a folder, all the posts that you have saved in this folder will be displayed in (reverse) chronological order in the stream. This feature is comparable to the \u2018clips\u2019 (= categorised bookmarks) as known from Misskey and the Forkeys.","title":"Save to folder"},{"location":"member/search/","text":"Search To quickly find information, you can use the search function. To do so, click on the icon in the navigation bar. This searches the entire hub. You can search for hashtags, handles and text. In the channel view, there is also a search field in the left sidebar. It only searches the stream of your own channel. Searches that have been performed in this widget can also be saved by clicking on the floppy disc symbol next to the search field. The saved search is then displayed in a list of search terms below the search field and can be repeated at any time with a single click.","title":"Search"},{"location":"member/search/#search","text":"To quickly find information, you can use the search function. To do so, click on the icon in the navigation bar. This searches the entire hub. You can search for hashtags, handles and text. In the channel view, there is also a search field in the left sidebar. It only searches the stream of your own channel. Searches that have been performed in this widget can also be saved by clicking on the floppy disc symbol next to the search field. The saved search is then displayed in a list of search terms below the search field and can be repeated at any time with a single click.","title":"Search"},{"location":"member/settings/","text":"Settings Hubzilla allows a wide range of settings for behaviour, appearance, features, channels, etc. You can access most settings via the main menu, where you will find the Settings menu item. Various categories of settings are provided: Account settings Channel settings Privacy settings Display settings Manage locations - if clones of your channel exist If you are in the stream view, you will see a small cogwheel (\u2699) next to the main menu, which you can use to access the stream settings There are also hidden settings Additional functions which you cannot access via the menu or an icon.","title":"Settings"},{"location":"member/settings/#settings","text":"Hubzilla allows a wide range of settings for behaviour, appearance, features, channels, etc. You can access most settings via the main menu, where you will find the Settings menu item. Various categories of settings are provided: Account settings Channel settings Privacy settings Display settings Manage locations - if clones of your channel exist If you are in the stream view, you will see a small cogwheel (\u2699) next to the main menu, which you can use to access the stream settings There are also hidden settings Additional functions which you cannot access via the menu or an icon.","title":"Settings"},{"location":"member/share/","text":"Share When posts are shared (forwarded), a post by another user is posted again on your own channel. A new conversation is created in your own channel. Comments are added to the new conversation and not to the original one. Sharing posts only works from the stream or your own channel, but not from a \u2018third-party\u2019 channel.","title":"Share"},{"location":"member/share/#share","text":"When posts are shared (forwarded), a post by another user is posted again on your own channel. A new conversation is created in your own channel. Comments are added to the new conversation and not to the original one. Sharing posts only works from the stream or your own channel, but not from a \u2018third-party\u2019 channel.","title":"Share"},{"location":"member/show_source_code/","text":"Show source code You can use this function to display the source code of a post. The content is therefore not rendered in formatted form, but includes the text including all markup tags (Markdown, bbCode, HTML). The function therefore seems to be more for advanced or very curious users. However, it does contain a feature that can be helpful for everyone. In addition to the internal post ID, there are two hyperlinks: \u2018plink\u2019 and \u2018llink\u2019. \u2018plink\u2019 means \u201cpermalink\u201d and corresponds to the link to the source . \u2018llink\u2019 means \u201clocal link\u201d and refers to the location of the post on your own instance (hub). Clicking on it does not cause you to leave your own instance, but displays the post in the single view.","title":"Show source code"},{"location":"member/show_source_code/#show-source-code","text":"You can use this function to display the source code of a post. The content is therefore not rendered in formatted form, but includes the text including all markup tags (Markdown, bbCode, HTML). The function therefore seems to be more for advanced or very curious users. However, it does contain a feature that can be helpful for everyone. In addition to the internal post ID, there are two hyperlinks: \u2018plink\u2019 and \u2018llink\u2019. \u2018plink\u2019 means \u201cpermalink\u201d and corresponds to the link to the source . \u2018llink\u2019 means \u201clocal link\u201d and refers to the location of the post on your own instance (hub). Clicking on it does not cause you to leave your own instance, but displays the post in the single view.","title":"Show source code"},{"location":"member/stream_settings/","text":"Stream settings The stream settings are not accessed via Main Menu \u2192 Settings, but via the small cogwheel symbol (\u2699) next to the main menu, which appears there as soon as you open the stream view. The stream settings can be used to select the display of the stream and the features available there (e.g. stream filters, saving search queries, etc.).","title":"Stream settings"},{"location":"member/stream_settings/#stream-settings","text":"The stream settings are not accessed via Main Menu \u2192 Settings, but via the small cogwheel symbol (\u2699) next to the main menu, which appears there as soon as you open the stream view. The stream settings can be used to select the display of the stream and the features available there (e.g. stream filters, saving search queries, etc.).","title":"Stream settings"},{"location":"member/superblock/","text":"Superblock The \u2018Superblock\u2019 app is a moderation method for your own stream. While Hubzilla's normal functionality only allows you to block users you are connected to using the contact tool, Superblock works regardless of whether you are connected to a contact or not. If you notice a user in the stream with whom you are not connected (because their posts are shared by a contact from your own address book) and - for whatever reason - you do not want to have any posts from this Fediverse user in the stream, you can achieve this with the \u2018Superblock\u2019 app. To do this, click on the small white triangle in the avatar of the user you want to block. A pull-down menu opens, which contains the menu item \u2018Block completely\u2019 at the bottom. Clicking on this menu item places the user in the superblock list. Posts from this user will no longer appear in their own stream. Affected posts are immediately hidden in the stream. In addition, this user will no longer be able to read your posts, regardless of their authorisations, nor will they be able to post to your channel. If you select the \u2018Superblock\u2019 app in the app menu (top right \u22ee), a list of all blocked contacts is displayed. A \u2018rubbish bin icon\u2019 is displayed next to each contact. Click on this icon to remove the user from the block list. The user can then follow you again, see your posts and also comment on them and their posts will also appear in the stream again (e.g. by sharing a contact). Superblock is not installed and activated by default for new channels.","title":"Superblock"},{"location":"member/superblock/#superblock","text":"The \u2018Superblock\u2019 app is a moderation method for your own stream. While Hubzilla's normal functionality only allows you to block users you are connected to using the contact tool, Superblock works regardless of whether you are connected to a contact or not. If you notice a user in the stream with whom you are not connected (because their posts are shared by a contact from your own address book) and - for whatever reason - you do not want to have any posts from this Fediverse user in the stream, you can achieve this with the \u2018Superblock\u2019 app. To do this, click on the small white triangle in the avatar of the user you want to block. A pull-down menu opens, which contains the menu item \u2018Block completely\u2019 at the bottom. Clicking on this menu item places the user in the superblock list. Posts from this user will no longer appear in their own stream. Affected posts are immediately hidden in the stream. In addition, this user will no longer be able to read your posts, regardless of their authorisations, nor will they be able to post to your channel. If you select the \u2018Superblock\u2019 app in the app menu (top right \u22ee), a list of all blocked contacts is displayed. A \u2018rubbish bin icon\u2019 is displayed next to each contact. Click on this icon to remove the user from the block list. The user can then follow you again, see your posts and also comment on them and their posts will also appear in the stream again (e.g. by sharing a contact). Superblock is not installed and activated by default for new channels.","title":"Superblock"},{"location":"member/tags/","text":"Tags Tags (also called thematic tags, hashtags or topical tags) Tags are displayed by prefixing the tag name with the \u2018#\u2019 character. This creates a link in the post to a generalised website search for the specified term. For example, #cars will provide a search link for all posts that mention \u2018cars\u2019 on your website. Topical tags are usually at least three characters long. Shorter search terms are unlikely to return search results, but this depends on the database configuration. Thematic tags are also usually not linked if they are purely numeric, e.g. #1. If you wish to use a numeric hashtag, please include descriptive text such as #2012-elections or enclose the entire tag in double quotes (e.g. #\"2012\u2033). Double quotes are also required if the tag contains spaces (#\"My Tag\") and may be required if the tag contains punctuation (#\"EndsWithPeriod.\" Or #\"Exciting !!!\").","title":"Tags"},{"location":"member/tags/#tags","text":"Tags (also called thematic tags, hashtags or topical tags) Tags are displayed by prefixing the tag name with the \u2018#\u2019 character. This creates a link in the post to a generalised website search for the specified term. For example, #cars will provide a search link for all posts that mention \u2018cars\u2019 on your website. Topical tags are usually at least three characters long. Shorter search terms are unlikely to return search results, but this depends on the database configuration. Thematic tags are also usually not linked if they are purely numeric, e.g. #1. If you wish to use a numeric hashtag, please include descriptive text such as #2012-elections or enclose the entire tag in double quotes (e.g. #\"2012\u2033). Double quotes are also required if the tag contains spaces (#\"My Tag\") and may be required if the tag contains punctuation (#\"EndsWithPeriod.\" Or #\"Exciting !!!\").","title":"Tags"},{"location":"member/the_grid/","text":"The grid The \u2018Grid\u2019 is the name given to the network of all Hubzilla hubs that communicate with each other via the Nomad protocol. The grid is effectively a subset of the Fediverse and includes all Hubzilla servers.","title":"The grid"},{"location":"member/the_grid/#the-grid","text":"The \u2018Grid\u2019 is the name given to the network of all Hubzilla hubs that communicate with each other via the Nomad protocol. The grid is effectively a subset of the Fediverse and includes all Hubzilla servers.","title":"The grid"},{"location":"member/the_stream/","text":"The stream The stream is the list of posts, comments and boosts from users in the Fediverse. It is sorted in reverse chronological order (the most recent posts appear at the top). Exactly which posts are shown here depends largely on your authorisation settings. The stream (also known as the \u2018timeline\u2019 in other Fediverse services) can be filtered using various filters: by direct messages, events, polls, privacy groups, forums, flagged posts, your own posts, saved folders and names. The stream in the Fediverse is not created by algorithms that select supposedly interesting content for the user, but is determined exclusively by the user himself. In Fediverse, you, the user, are the algorithm for the stream.","title":"The stream"},{"location":"member/the_stream/#the-stream","text":"The stream is the list of posts, comments and boosts from users in the Fediverse. It is sorted in reverse chronological order (the most recent posts appear at the top). Exactly which posts are shown here depends largely on your authorisation settings. The stream (also known as the \u2018timeline\u2019 in other Fediverse services) can be filtered using various filters: by direct messages, events, polls, privacy groups, forums, flagged posts, your own posts, saved folders and names. The stream in the Fediverse is not created by algorithms that select supposedly interesting content for the user, but is determined exclusively by the user himself. In Fediverse, you, the user, are the algorithm for the stream.","title":"The stream"},{"location":"member/toggle_star_status/","text":"Toggle Star Status Switching the marking star should not be confused with \u2018starring\u2019 (= favouriting) other feed services (e.g. Mastodon). While \u2018starring\u2019 in these services represents a positive evaluation of the post, which corresponds most closely to a \u2018link\u2019, marking with a star in Hubzilla is comparable to setting a bookmark. By toggling (one click sets the star, another removes it again), the post is set as a kind of bookmark for the user. You can recognise a \u2018starred\u2019 post by the star symbol at the bottom left. In the stream view, you will find the entry \u2018Marked posts\u2019 in the left sidebar. If you click on it, all marked posts are displayed in (reverse) chronological order in the stream.","title":"Toggle star status"},{"location":"member/toggle_star_status/#toggle-star-status","text":"Switching the marking star should not be confused with \u2018starring\u2019 (= favouriting) other feed services (e.g. Mastodon). While \u2018starring\u2019 in these services represents a positive evaluation of the post, which corresponds most closely to a \u2018link\u2019, marking with a star in Hubzilla is comparable to setting a bookmark. By toggling (one click sets the star, another removes it again), the post is set as a kind of bookmark for the user. You can recognise a \u2018starred\u2019 post by the star symbol at the bottom left. In the stream view, you will find the entry \u2018Marked posts\u2019 in the left sidebar. If you click on it, all marked posts are displayed in (reverse) chronological order in the stream.","title":"Toggle Star Status"},{"location":"member/websites/","text":"Websites The Websites app allows you to create static websites in your channel. Websites remain on your hub and are not federated. However, you can share the link to the website and enable all users in the Fediverse to visit your website. When you open the app, you will be taken to the website overview. The pages will be accessible at <your-instance-URL>/page/<your-channel-name>/<page-link-title> . In the left sidebar, there is a widget with the design tools for \u2018blocks\u2019, \u2018menus\u2019, \u2018layouts\u2019 and \u2018pages\u2019. Below that, there is another widget that allows you to export and import web pages. The centre section lists the existing web pages. You can edit, share and delete them. There is also a button to create a new web page: \u2018Create\u2019. When you click on this button, the web page editor opens. You now have the choice of how you want to design the website: with bbCode, with HTML, with Markdown, with plain text or with the Comanche layout language. You can also specify which layout (if you have created one or more using the layout design tool) should be used to display the web page. Next is the input field for the optional page title, as well as (also optional) a summary, and (mandatory) the page URL. Below that is the text editor for the content of the website. If you just want to create a very simple website with formatting and other markup elements, it is sufficient to create it in the website editor using plain text, HTML, bbCode or Markdown. This way you get a website without a special layout (without sidebars, without menus etc.). For more sophisticated websites, it is recommended that you work with blocks, layouts and menus. Blocks Blocks can be parts of web pages. The basic HTML code of a block looks like this <div> block content </div> If a block has the content type text/html, it can also contain menu items. The example content of <p>HTML block content</p> [menu]menuname[/menu] will produce HTML like this <div> <p>HTML block content</p> <div> <ul> <li><a href=\u2018#\u2019>Link 1</a></li> <li><a href=\u2018#\u2019>Link 2</a></li> <li><a href=\u2018#\u2019>Link 3</a></li> </ul> </div> </p> A block can also contain the actual content of the website via the $content macro. To do this, create a block with only $content as content. For a block to appear on the website, it must be defined within a region in the page layout. [region=aside] [block]blockname[/block] [/region] The appearance of the block can be manipulated in the page layout. You can assign your own classes [region=aside] [block=myclass]blockname[/block] [/region] will produce the following HTML <div class=\u2018myclass\u2019> Block Content </div> The wrap variable can be used to free a block from its enclosing <div></div> tag [region=aside] [block][var=wrap]none[/var]blockname[/block] [/region] This HTML is generated Block content With the block editor, blocks can be created just as easily as web pages. Menus The menu editor is used to easily create navigation menus. The menu must be assigned a unique name (this name can be used to reference it later in the website and in blocks). Entering a title is optional. You can also choose whether the menu is available for adding bookmarks. This feature makes it possible to add links marked as bookmarks from the stream to the menu with a single click. Click \u2018Submit and continue\u2019 to create the menu. The dialogue for adding a menu entry will now open. You must enter a name for the menu entry (\u2018Name of the link\u2019) and the destination of the link. This can be a URL or the name of another menu (which is then integrated as a submenu). You can influence the sorting of the menu entries by entering a number at \u2018Order in list\u2019. If the URL is an external link to a source on another hub, you can ensure that you are authenticated at the target and that restricted content is available if necessary by setting the \u2018Use Magic-Auth if available\u2019 switch. You can also specify whether links should open in a new window or tab. Click on \u2018Submit and proceed\u2019 to create further entries. \u2018Submit and finish\u2019 ends the entry of menu items. Menus can, however, be edited and added to at any time. Layouts Layouts are used to define the general structure of web pages. They are designed using the Comanche page description language, a variant of bbCode. You have to give the layout a name. The definition of the layout is then entered in the text field. This is also where you can define the contents of the various regions.","title":"Websites"},{"location":"member/websites/#websites","text":"The Websites app allows you to create static websites in your channel. Websites remain on your hub and are not federated. However, you can share the link to the website and enable all users in the Fediverse to visit your website. When you open the app, you will be taken to the website overview. The pages will be accessible at <your-instance-URL>/page/<your-channel-name>/<page-link-title> . In the left sidebar, there is a widget with the design tools for \u2018blocks\u2019, \u2018menus\u2019, \u2018layouts\u2019 and \u2018pages\u2019. Below that, there is another widget that allows you to export and import web pages. The centre section lists the existing web pages. You can edit, share and delete them. There is also a button to create a new web page: \u2018Create\u2019. When you click on this button, the web page editor opens. You now have the choice of how you want to design the website: with bbCode, with HTML, with Markdown, with plain text or with the Comanche layout language. You can also specify which layout (if you have created one or more using the layout design tool) should be used to display the web page. Next is the input field for the optional page title, as well as (also optional) a summary, and (mandatory) the page URL. Below that is the text editor for the content of the website. If you just want to create a very simple website with formatting and other markup elements, it is sufficient to create it in the website editor using plain text, HTML, bbCode or Markdown. This way you get a website without a special layout (without sidebars, without menus etc.). For more sophisticated websites, it is recommended that you work with blocks, layouts and menus.","title":"Websites"},{"location":"member/websites/#blocks","text":"Blocks can be parts of web pages. The basic HTML code of a block looks like this <div> block content </div> If a block has the content type text/html, it can also contain menu items. The example content of <p>HTML block content</p> [menu]menuname[/menu] will produce HTML like this <div> <p>HTML block content</p> <div> <ul> <li><a href=\u2018#\u2019>Link 1</a></li> <li><a href=\u2018#\u2019>Link 2</a></li> <li><a href=\u2018#\u2019>Link 3</a></li> </ul> </div> </p> A block can also contain the actual content of the website via the $content macro. To do this, create a block with only $content as content. For a block to appear on the website, it must be defined within a region in the page layout. [region=aside] [block]blockname[/block] [/region] The appearance of the block can be manipulated in the page layout. You can assign your own classes [region=aside] [block=myclass]blockname[/block] [/region] will produce the following HTML <div class=\u2018myclass\u2019> Block Content </div> The wrap variable can be used to free a block from its enclosing <div></div> tag [region=aside] [block][var=wrap]none[/var]blockname[/block] [/region] This HTML is generated Block content With the block editor, blocks can be created just as easily as web pages.","title":"Blocks"},{"location":"member/websites/#menus","text":"The menu editor is used to easily create navigation menus. The menu must be assigned a unique name (this name can be used to reference it later in the website and in blocks). Entering a title is optional. You can also choose whether the menu is available for adding bookmarks. This feature makes it possible to add links marked as bookmarks from the stream to the menu with a single click. Click \u2018Submit and continue\u2019 to create the menu. The dialogue for adding a menu entry will now open. You must enter a name for the menu entry (\u2018Name of the link\u2019) and the destination of the link. This can be a URL or the name of another menu (which is then integrated as a submenu). You can influence the sorting of the menu entries by entering a number at \u2018Order in list\u2019. If the URL is an external link to a source on another hub, you can ensure that you are authenticated at the target and that restricted content is available if necessary by setting the \u2018Use Magic-Auth if available\u2019 switch. You can also specify whether links should open in a new window or tab. Click on \u2018Submit and proceed\u2019 to create further entries. \u2018Submit and finish\u2019 ends the entry of menu items. Menus can, however, be edited and added to at any time.","title":"Menus"},{"location":"member/websites/#layouts","text":"Layouts are used to define the general structure of web pages. They are designed using the Comanche page description language, a variant of bbCode. You have to give the layout a name. The definition of the layout is then entered in the text field. This is also where you can define the contents of the various regions.","title":"Layouts"},{"location":"member/wikis/","text":"Wikis The \u2018Wiki\u2019 app makes it possible to create wikis in your own channel. Wiki pages are not federated and remain on your own hub. The wiki app offers simple, classic wiki functionality. Wiki posts can be created as plain text, Markdown text or BBcode text. To view (or edit) a wiki, select the corresponding wiki from the list on this page. If you want to create a new wiki, click on the button \u2018+ Create new\u2019. An input form will open in which you enter the name of the wiki and define the content type (as standard). You can use a switch to determine that only the selected content type (text, Markdown, BBcode) must be used for all wiki entries. You can also use a switch to turn the creation of a status post about wiki creation on or off. You can also set up detailed permission rights for a wiki. Click on \u2018Submit\u2019 to create the wiki and open the home page. The default view of a wiki page is always \u2018View\u2019, in which the text is rendered according to the source code. You can switch to the \u2018Edit\u2019 view using the tabs at the top to access the editor mode. If you have edited the page and then switch back to View, the changes will be displayed immediately. If you want to save the page, enter a suitable comment in the input field below the text and click on \u2018Save\u2019. The wiki page has been created. Using the third tab, labelled \u2018History\u2019, you can view the changes made to the wiki page and, if you wish, undo changes. This is a wiki-typical form of version control. As you create more wiki pages, they will be listed in the left sidebar, from where they can also be accessed. For collaborative editing of a wiki, it is necessary to grant the users who are allowed to work on the wiki appropriate rights. In the case of a Public, Personal or Community Forum channel, this is done by means of a corresponding contact role in which the editing of the wiki pages is authorised. This permission is not granted by default for the channel roles mentioned (permission can be granted for a user-defined channel role, but it then applies generally and cannot be withdrawn again using a contact role). If you want to exclude individual wikis from this, you must restrict their visibility via the permission settings of the wiki (padlock).","title":"Wikis"},{"location":"member/wikis/#wikis","text":"The \u2018Wiki\u2019 app makes it possible to create wikis in your own channel. Wiki pages are not federated and remain on your own hub. The wiki app offers simple, classic wiki functionality. Wiki posts can be created as plain text, Markdown text or BBcode text. To view (or edit) a wiki, select the corresponding wiki from the list on this page. If you want to create a new wiki, click on the button \u2018+ Create new\u2019. An input form will open in which you enter the name of the wiki and define the content type (as standard). You can use a switch to determine that only the selected content type (text, Markdown, BBcode) must be used for all wiki entries. You can also use a switch to turn the creation of a status post about wiki creation on or off. You can also set up detailed permission rights for a wiki. Click on \u2018Submit\u2019 to create the wiki and open the home page. The default view of a wiki page is always \u2018View\u2019, in which the text is rendered according to the source code. You can switch to the \u2018Edit\u2019 view using the tabs at the top to access the editor mode. If you have edited the page and then switch back to View, the changes will be displayed immediately. If you want to save the page, enter a suitable comment in the input field below the text and click on \u2018Save\u2019. The wiki page has been created. Using the third tab, labelled \u2018History\u2019, you can view the changes made to the wiki page and, if you wish, undo changes. This is a wiki-typical form of version control. As you create more wiki pages, they will be listed in the left sidebar, from where they can also be accessed. For collaborative editing of a wiki, it is necessary to grant the users who are allowed to work on the wiki appropriate rights. In the case of a Public, Personal or Community Forum channel, this is done by means of a corresponding contact role in which the editing of the wiki pages is authorised. This permission is not granted by default for the channel roles mentioned (permission can be granted for a user-defined channel role, but it then applies generally and cannot be withdrawn again using a contact role). If you want to exclude individual wikis from this, you must restrict their visibility via the permission settings of the wiki (padlock).","title":"Wikis"},{"location":"project/","text":"Hubzilla Governance Governance relates to the management of a project and particularly how this relates to conflict resolution. Community Governance The project is maintained and decisions made by the 'community'. The governance structure is still evolving. Until the structure is finalised, decisions are made in the following order: Lazy Consensus: If a project proposal is made to one of the community governance forums and there are no serious objections in a \"reasonable\" amount of time from date of proposal (we usually provide 2-3 days for all interested parties to weigh in), no vote needs to be taken and the proposal will be considered approved. Some concerns may be raised at this time, but if these are addressed during discussion and work-arounds provided, it will still be considered approved. Veto: Senior developers with a significant history of project commits may veto any decision. The decision may not proceed until the veto is removed or an alternative proposal is presented. Community Vote: A decision which does not have a clear mandate or clear consensus, but is not vetoed, can be taken to a community vote. At present this is a simple popular vote in one of the applicable community forums. At this time, popular vote decides the outcome. This may change in the future if the community adopts a 'council' governance model. This document will be updated at that time with the updated governance rules. Community Voting does not always provide a pleasant outcome and can generate polarised factions in the community (hence the reason why other models are under consideration). If the proposal is 'down voted' there are still several things which can be done and the proposal re-submitted with slightly different parameters (convert to an addon, convert to an optional feature which is disabled by default, etc.). If interest in the feature is high and the vote is \"close\", it can generate lots of bad feelings amongst the losing voters. On such close votes, it is [b]strongly recommended[/b] that the proposer take steps to address any concerns that were raised and re-submit. Privacy Policy Q: Who can see my content? A: By default ANYBODY on the internet, UNLESS you restrict it. Hubzilla allows you to choose the privacy level you desire. Restricted content will NOT be visible to \"spy networks\" and advertisers. It will be protected against eavesdropping by outsiders - to the best of our ability. Hub administrators with sufficient skills and patience MAY be able to eavesdrop on some private communications but they must expend effort to do so. Privacy modes exist within Hubzilla which are even resistant to eavesdropping by skilled and determined hub administrators. Q: Can my content be censored? A: Hubzilla (the network) CANNOT censor your content. Server and hub administrators are subject to local laws and MAY remove objectionable content from their site/hub. Anybody MAY become a hub administrator, including you; and therefore publish content which might otherwise be censored. You still MAY be subject to local laws. Definitions Hubzilla Otherwise referred to as \"the network\", Hubzilla is a collection of individual computers/servers (aka hubs ) which connect together to form a larger cooperative network. hub An individual computer or server connected to Hubzilla. These are provided by a hub administrator and may be public or private, paid or free. hub administrator The system operator of an individual hub. Policies Public Information Any information or anything posted by you within Hubzilla MAY be public or visible to anybody on the internet. To the extent possible, Hubzilla allows you to protect content and restrict who can view it. Your profile photo, your channel name, and the location (URL or network address) of your channel are visible to anybody on the internet and privacy controls will not affect the display of these items. You MAY additionally provide other profile information. Any information which you provide in your \"default\" or public profile MAY be transmitted to other hubs in Hubzilla and additionally MAY be displayed in the channel directory. You can restrict the viewing of this profile information. It may be restricted only to members of your hub, or only connections (friends), or other limited sets of viewers as you desire. If you wish for your profile to be restricted, you must set the appropriate privacy setting, or simply DO NOT provide additional information. Content Content you provide (status posts, photos, files, etc.) belongs to you. Hubzilla default is to publish content openly and visible to anybody on the internet (PUBLIC). You MAY control this in your channel settings and restrict the default permissions or you MAY restrict the visibility of any single published item separately (PRIVATE). Hubzilla developers will ensure that restricted content is ONLY visible to those in the restriction list - to the best of their ability. Content (especially status posts) that you share with other networks or that you have made visible to anybody on the internet (PUBLIC) cannot easily be taken back once it has been published. It MAY be shared with other networks and made available through RSS/Atom feeds. It may also be syndicated on other Hubzilla sites. It MAY appear on other networks and websites and be visible in internet searches. If you do not wish this default behaviour please adjust your channel settings and restrict who can see your content. Comments and Forum posts Comments to posts that were created by others and posts which are designated as forum posts belong to you as the creator/author, but the distribution of these posts is not under your direct control, and you relinquish SOME rights to these items. These posts/comments MAY be re-distributed to others, and MAY be visible to anybody on the internet. In the case of comments, the creator of the \"first message\" in the thread (conversation) to which you are replying controls the distribution of all comments and replies to that message. They \"own\" and therefore have certain rights with regard to the entire conversation (including all comments contained within it). You can still edit or delete the comment, but the conversation owner also has rights to edit, delete, re-distribute, and backup/restore any or all the content from the conversation. Private Information Hubzilla developers will ensure that any content you provide which is designated as PRIVATE will be protected against eavesdropping - to the best of their ability. Private channel content CAN be seen in the database of every involved hub administrator, but private messages are obscured in the database. The latter means that it is very difficult, but NOT impossible for this content to be seen by a hub administrator. Private channel content and private messages are also stripped from email notifications. End to end encryption is provided as an optional feature and this CANNOT be seen, even by a determined administrator. Identity Privacy Privacy for your identity is another aspect. Because you have a decentralized identity in Hubzilla, your privacy extends beyond your home hub. If you want to have complete control of your privacy and security you should run your own hub on a dedicated server. For many people, this is complicated and may stretch their technical abilities. So let's list a few precautions you can make to assure your privacy as much as possible. A decentralized identity has a lot of advantages and gives you al lot of interesting features, but you should be aware of the fact that your identity is known by other hubs in Hubzilla network. One of those advantages is that other channels can serve you customized content and allow you to see private things (such as private photos which others wish to share with you). Because of this those channels need to know who you are. But we understand that sometimes those other channels know more from you than you might desire. For instance the plug-in Visage that can tell a channel owner the last time you visit their profile. You can easily OPT-OUT of this low level and we think, harmless tracking. You can enable Do Not Track (DNT) in your web browser. We respect this new privacy policy proposal. All modern browsers support DNT. You will find it in the privacy settings of your browsers or else you can consult the web browser's manual. This will not affect the functionality of Hubzilla. This setting is probably enough for most people. You can disable publication of your channel in our channel directory. If you want people to find your channel, you should give your channel address directly to them. We think this is a good indication that you prefer extra privacy and automatically enable \"Do Not Track\" if this is the case. You can have a blocked hub. That means that all channels and content on that hub is not public, and not visible to the outside world. This is something only your hub administrator can do. We also respect this and automatically enable \"Do Not Track\" if it is set. Censorship Hubzilla is a global network which is inclusive of all religions and cultures. This does not imply that every member of the network feels the same way you do on contentious issues, and some people may be STRONGLY opposed to the content you post. In general, if you wish to post something that you know may nor be universally acceptable, the best approach is to restrict the audience using privacy controls to a small circle of friends. Hubzilla as a network provider is unable to censor content. However, hub administrators MAY censor any content which appears on their hub to comply with local laws or even personal judgement. Their decision is final. If you have issues with any hub administrator, you may move your account and postings to another site which is more in line with your expectations. Please check (periodically) the Terms of Service of your hub to learn about any rules or guidelines. If your content consists of material which is illegal or may cause issues, you are STRONGLY encouraged to host your own (become a hub administrator). You may still find that your content is blocked on some hubs, but Hubzilla as a network cannot block it from being posted. Hubzilla RECOMMENDS that hub administrators provide a grace period of 1-2 days between warning an account holder of content that needs to be removed and physically removing or disabling the account. This will give the content owner an opportunity to export their channel meta-data and import it to another site. In rare cases the content may be of such a nature to justify the immediate termination of the account. This is a hub decision, not a Hubzilla decision. If you typically and regularly post content of an adult or offensive nature, you are STRONGLY encouraged to mark your account \"NSFW\" (Not Safe For Work). This will prevent the display of your profile photo in the directory except to viewers that have chosen to disable \"safe mode\". If your profile photo is found by directory administrators to be adult or offensive, the directory administrator MAY flag your profile photo as NSFW. There is currently no official mechanism to contest or reverse this decision, which is why you SHOULD mark your own account NSFW if it is likely to be inappropriate for general audiences.","title":"Hubzilla Governance"},{"location":"project/#hubzilla-governance","text":"Governance relates to the management of a project and particularly how this relates to conflict resolution.","title":"Hubzilla Governance"},{"location":"project/#community-governance","text":"The project is maintained and decisions made by the 'community'. The governance structure is still evolving. Until the structure is finalised, decisions are made in the following order: Lazy Consensus: If a project proposal is made to one of the community governance forums and there are no serious objections in a \"reasonable\" amount of time from date of proposal (we usually provide 2-3 days for all interested parties to weigh in), no vote needs to be taken and the proposal will be considered approved. Some concerns may be raised at this time, but if these are addressed during discussion and work-arounds provided, it will still be considered approved. Veto: Senior developers with a significant history of project commits may veto any decision. The decision may not proceed until the veto is removed or an alternative proposal is presented. Community Vote: A decision which does not have a clear mandate or clear consensus, but is not vetoed, can be taken to a community vote. At present this is a simple popular vote in one of the applicable community forums. At this time, popular vote decides the outcome. This may change in the future if the community adopts a 'council' governance model. This document will be updated at that time with the updated governance rules. Community Voting does not always provide a pleasant outcome and can generate polarised factions in the community (hence the reason why other models are under consideration). If the proposal is 'down voted' there are still several things which can be done and the proposal re-submitted with slightly different parameters (convert to an addon, convert to an optional feature which is disabled by default, etc.). If interest in the feature is high and the vote is \"close\", it can generate lots of bad feelings amongst the losing voters. On such close votes, it is [b]strongly recommended[/b] that the proposer take steps to address any concerns that were raised and re-submit.","title":"Community Governance"},{"location":"project/#privacy-policy","text":"Q: Who can see my content? A: By default ANYBODY on the internet, UNLESS you restrict it. Hubzilla allows you to choose the privacy level you desire. Restricted content will NOT be visible to \"spy networks\" and advertisers. It will be protected against eavesdropping by outsiders - to the best of our ability. Hub administrators with sufficient skills and patience MAY be able to eavesdrop on some private communications but they must expend effort to do so. Privacy modes exist within Hubzilla which are even resistant to eavesdropping by skilled and determined hub administrators. Q: Can my content be censored? A: Hubzilla (the network) CANNOT censor your content. Server and hub administrators are subject to local laws and MAY remove objectionable content from their site/hub. Anybody MAY become a hub administrator, including you; and therefore publish content which might otherwise be censored. You still MAY be subject to local laws.","title":"Privacy Policy"},{"location":"project/#definitions","text":"Hubzilla Otherwise referred to as \"the network\", Hubzilla is a collection of individual computers/servers (aka hubs ) which connect together to form a larger cooperative network. hub An individual computer or server connected to Hubzilla. These are provided by a hub administrator and may be public or private, paid or free. hub administrator The system operator of an individual hub.","title":"Definitions"},{"location":"project/#policies","text":"","title":"Policies"},{"location":"project/#public-information","text":"Any information or anything posted by you within Hubzilla MAY be public or visible to anybody on the internet. To the extent possible, Hubzilla allows you to protect content and restrict who can view it. Your profile photo, your channel name, and the location (URL or network address) of your channel are visible to anybody on the internet and privacy controls will not affect the display of these items. You MAY additionally provide other profile information. Any information which you provide in your \"default\" or public profile MAY be transmitted to other hubs in Hubzilla and additionally MAY be displayed in the channel directory. You can restrict the viewing of this profile information. It may be restricted only to members of your hub, or only connections (friends), or other limited sets of viewers as you desire. If you wish for your profile to be restricted, you must set the appropriate privacy setting, or simply DO NOT provide additional information.","title":"Public Information"},{"location":"project/#content","text":"Content you provide (status posts, photos, files, etc.) belongs to you. Hubzilla default is to publish content openly and visible to anybody on the internet (PUBLIC). You MAY control this in your channel settings and restrict the default permissions or you MAY restrict the visibility of any single published item separately (PRIVATE). Hubzilla developers will ensure that restricted content is ONLY visible to those in the restriction list - to the best of their ability. Content (especially status posts) that you share with other networks or that you have made visible to anybody on the internet (PUBLIC) cannot easily be taken back once it has been published. It MAY be shared with other networks and made available through RSS/Atom feeds. It may also be syndicated on other Hubzilla sites. It MAY appear on other networks and websites and be visible in internet searches. If you do not wish this default behaviour please adjust your channel settings and restrict who can see your content.","title":"Content"},{"location":"project/#comments-and-forum-posts","text":"Comments to posts that were created by others and posts which are designated as forum posts belong to you as the creator/author, but the distribution of these posts is not under your direct control, and you relinquish SOME rights to these items. These posts/comments MAY be re-distributed to others, and MAY be visible to anybody on the internet. In the case of comments, the creator of the \"first message\" in the thread (conversation) to which you are replying controls the distribution of all comments and replies to that message. They \"own\" and therefore have certain rights with regard to the entire conversation (including all comments contained within it). You can still edit or delete the comment, but the conversation owner also has rights to edit, delete, re-distribute, and backup/restore any or all the content from the conversation.","title":"Comments and Forum posts"},{"location":"project/#private-information","text":"Hubzilla developers will ensure that any content you provide which is designated as PRIVATE will be protected against eavesdropping - to the best of their ability. Private channel content CAN be seen in the database of every involved hub administrator, but private messages are obscured in the database. The latter means that it is very difficult, but NOT impossible for this content to be seen by a hub administrator. Private channel content and private messages are also stripped from email notifications. End to end encryption is provided as an optional feature and this CANNOT be seen, even by a determined administrator.","title":"Private Information"},{"location":"project/#identity-privacy","text":"Privacy for your identity is another aspect. Because you have a decentralized identity in Hubzilla, your privacy extends beyond your home hub. If you want to have complete control of your privacy and security you should run your own hub on a dedicated server. For many people, this is complicated and may stretch their technical abilities. So let's list a few precautions you can make to assure your privacy as much as possible. A decentralized identity has a lot of advantages and gives you al lot of interesting features, but you should be aware of the fact that your identity is known by other hubs in Hubzilla network. One of those advantages is that other channels can serve you customized content and allow you to see private things (such as private photos which others wish to share with you). Because of this those channels need to know who you are. But we understand that sometimes those other channels know more from you than you might desire. For instance the plug-in Visage that can tell a channel owner the last time you visit their profile. You can easily OPT-OUT of this low level and we think, harmless tracking. You can enable Do Not Track (DNT) in your web browser. We respect this new privacy policy proposal. All modern browsers support DNT. You will find it in the privacy settings of your browsers or else you can consult the web browser's manual. This will not affect the functionality of Hubzilla. This setting is probably enough for most people. You can disable publication of your channel in our channel directory. If you want people to find your channel, you should give your channel address directly to them. We think this is a good indication that you prefer extra privacy and automatically enable \"Do Not Track\" if this is the case. You can have a blocked hub. That means that all channels and content on that hub is not public, and not visible to the outside world. This is something only your hub administrator can do. We also respect this and automatically enable \"Do Not Track\" if it is set.","title":"Identity Privacy"},{"location":"project/#censorship","text":"Hubzilla is a global network which is inclusive of all religions and cultures. This does not imply that every member of the network feels the same way you do on contentious issues, and some people may be STRONGLY opposed to the content you post. In general, if you wish to post something that you know may nor be universally acceptable, the best approach is to restrict the audience using privacy controls to a small circle of friends. Hubzilla as a network provider is unable to censor content. However, hub administrators MAY censor any content which appears on their hub to comply with local laws or even personal judgement. Their decision is final. If you have issues with any hub administrator, you may move your account and postings to another site which is more in line with your expectations. Please check (periodically) the Terms of Service of your hub to learn about any rules or guidelines. If your content consists of material which is illegal or may cause issues, you are STRONGLY encouraged to host your own (become a hub administrator). You may still find that your content is blocked on some hubs, but Hubzilla as a network cannot block it from being posted. Hubzilla RECOMMENDS that hub administrators provide a grace period of 1-2 days between warning an account holder of content that needs to be removed and physically removing or disabling the account. This will give the content owner an opportunity to export their channel meta-data and import it to another site. In rare cases the content may be of such a nature to justify the immediate termination of the account. This is a hub decision, not a Hubzilla decision. If you typically and regularly post content of an adult or offensive nature, you are STRONGLY encouraged to mark your account \"NSFW\" (Not Safe For Work). This will prevent the display of your profile photo in the directory except to viewers that have chosen to disable \"safe mode\". If your profile photo is found by directory administrators to be adult or offensive, the directory administrator MAY flag your profile photo as NSFW. There is currently no official mechanism to contest or reverse this decision, which is why you SHOULD mark your own account NSFW if it is likely to be inappropriate for general audiences.","title":"Censorship"},{"location":"project/credits/","text":"Credits Thanks to all who have helped and contributed to the project and its predecessors over the years. It is possible we missed in your name but this is unintentional. We also thank the community and its members for providing valuable input and without whom this entire effort would be meaningless. It is also worth acknowledging the contributions and solutions to problems which arose from discussions amongst members and developers of other somewhat related and competing projects; even if we have had our occasional disagreements. Mike Macgirvin Fabio Comuni Simon L'nu marijus Tobias Diekershoff fabrixxm tommy tomson Simon zottel Christian Vogeley jeroenpraat Michael Vogel erik Zach Prezkuta Paolo T Michael Meer Michael Abinoam P. Marques Jr Tobias H\u00f6\u00dfl Alexander Kampmann Olaf Conradi Paolo Tacconi tobiasd Devlon Duthie Zvi ben Yaakov (a.k.a rdc) Alexandre Hannud Abdo Olivier Migeot Chris Case Klaus Weidenbach Michael Johnston olivierm Vasudev Kamath pixelroot Max Weller duthied Martin Schmitt Sebastian Egbers Erkan Yilmaz sasiflo Stefan Parviainen Haakon Meland Eriksen Oliver Hartmann (23n) Erik Lundin habeascodice sirius Charles Tony Baldwin Hauke Zuehl Keith Fernie Anne Walk toclimb Daniel Frank Matthew Exon Michal Supler Tobias Luther U-SOUND\\mike mrjive nostupidzone tonnerkiller Antoine G Christian Drechsler Ludovic Grossard RedmatrixCanada Stanislav Lechev [0xAF] aweiher bufalo1973 dsp1986 felixgilles ike maase2 mycocham ndurchx pafcu Sim\u00f3 Albert i Beltran Manuel Reva Manuel Jim\u00e9nez Friaza Gustav Wall aka \"neue medienordnung plus\"","title":"Credits"},{"location":"project/credits/#credits","text":"Thanks to all who have helped and contributed to the project and its predecessors over the years. It is possible we missed in your name but this is unintentional. We also thank the community and its members for providing valuable input and without whom this entire effort would be meaningless. It is also worth acknowledging the contributions and solutions to problems which arose from discussions amongst members and developers of other somewhat related and competing projects; even if we have had our occasional disagreements. Mike Macgirvin Fabio Comuni Simon L'nu marijus Tobias Diekershoff fabrixxm tommy tomson Simon zottel Christian Vogeley jeroenpraat Michael Vogel erik Zach Prezkuta Paolo T Michael Meer Michael Abinoam P. Marques Jr Tobias H\u00f6\u00dfl Alexander Kampmann Olaf Conradi Paolo Tacconi tobiasd Devlon Duthie Zvi ben Yaakov (a.k.a rdc) Alexandre Hannud Abdo Olivier Migeot Chris Case Klaus Weidenbach Michael Johnston olivierm Vasudev Kamath pixelroot Max Weller duthied Martin Schmitt Sebastian Egbers Erkan Yilmaz sasiflo Stefan Parviainen Haakon Meland Eriksen Oliver Hartmann (23n) Erik Lundin habeascodice sirius Charles Tony Baldwin Hauke Zuehl Keith Fernie Anne Walk toclimb Daniel Frank Matthew Exon Michal Supler Tobias Luther U-SOUND\\mike mrjive nostupidzone tonnerkiller Antoine G Christian Drechsler Ludovic Grossard RedmatrixCanada Stanislav Lechev [0xAF] aweiher bufalo1973 dsp1986 felixgilles ike maase2 mycocham ndurchx pafcu Sim\u00f3 Albert i Beltran Manuel Reva Manuel Jim\u00e9nez Friaza Gustav Wall aka \"neue medienordnung plus\"","title":"Credits"},{"location":"start/","text":"Overview Hubzilla is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support Hubzilla. Many will but please review the requirements and confirm these with your hosting provider prior to installation. We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working. Where to find more help If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker . Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues.","title":"Index"},{"location":"start/#overview","text":"Hubzilla is more than a simple web application. It is a complex communications system which more closely resembles an email server than a web server. For reliability and performance, messages are delivered in the background and are queued for later delivery when sites are down. This kind of functionality requires a bit more of the host system than the typical blog. Not every PHP/MySQL hosting provider will be able to support Hubzilla. Many will but please review the requirements and confirm these with your hosting provider prior to installation. We've tried very hard to ensure that $Projectname will run on commodity hosting platforms such as those used to host Wordpress blogs and Drupal websites. It will run on most any Linux VPS system. Windows LAMP platforms such as XAMPP and WAMP are not officially supported at this time however we welcome patches if you manage to get it working.","title":"Overview"},{"location":"start/#where-to-find-more-help","text":"If you encounter problems or have issues not addressed in this documentation, please let us know via the Github issue tracker . Please be as clear as you can about your operating environment and provide as much detail as possible about any error messages you may see, so that we can prevent it from happening in the future. Due to the large variety of operating systems and PHP platforms in existence we may have only limited ability to debug your PHP installation or acquire any missing modules, but we will do our best to solve any general code issues.","title":"Where to find more help"},{"location":"start/docker/","text":"Installation using Docker It is possible to install Hubzilla comfortably and conveniently as a Docker container. Option 1: saiwal/hubzilla-docker The key features are: Fully functional Hubzilla instance with just a few commands. Prebuilt images available via dockerhub for amd64, arm/v7, arm64. Continuous Updates: The Docker image is built to allow for easy updates whenever new changes are made to the Hubzilla core or its dependencies. SMTP Integration: Built-in support for sending emails using ssmtp, making it easy to configure email notifications for your Hubzilla instance. The repository for the container is located here: saiwal/hubzilla-docker Building the image from scratch Clone the Repository: git clone https://github.com/skprg/hubzilla-docker.git cd hubzilla-docker Configure Your Environment: Update the docker-compose.yml file with your SMTP and other settings. Build and Run the Container: docker-compose up --build -d Using prebuilt image Replace the following lines in docker-compose.yml build: context: . dockerfile: Dockerfile with image: ghcr.io/skprg/hubzilla-docker:latest Run the container: docker compose up -d Access Your Hubzilla Instance: Navigate to http://localhost (or the appropriate URL) to view your Hubzilla instance. Option 2: dhitchenor/hubzilla Another dockjer deployment is provided at https://github.com/dhitchenor/hubzilla Features: * Automatic setup * Integral addons, preinstalled * env file for easy configuration/toggling of features Instructions and details are available at the repository .","title":"Installation using Docker"},{"location":"start/docker/#installation-using-docker","text":"It is possible to install Hubzilla comfortably and conveniently as a Docker container.","title":"Installation using Docker"},{"location":"start/docker/#option-1-saiwalhubzilla-docker","text":"The key features are: Fully functional Hubzilla instance with just a few commands. Prebuilt images available via dockerhub for amd64, arm/v7, arm64. Continuous Updates: The Docker image is built to allow for easy updates whenever new changes are made to the Hubzilla core or its dependencies. SMTP Integration: Built-in support for sending emails using ssmtp, making it easy to configure email notifications for your Hubzilla instance. The repository for the container is located here: saiwal/hubzilla-docker","title":"Option 1: saiwal/hubzilla-docker"},{"location":"start/docker/#building-the-image-from-scratch","text":"Clone the Repository: git clone https://github.com/skprg/hubzilla-docker.git cd hubzilla-docker Configure Your Environment: Update the docker-compose.yml file with your SMTP and other settings. Build and Run the Container: docker-compose up --build -d","title":"Building the image from scratch"},{"location":"start/docker/#using-prebuilt-image","text":"Replace the following lines in docker-compose.yml build: context: . dockerfile: Dockerfile with image: ghcr.io/skprg/hubzilla-docker:latest Run the container: docker compose up -d Access Your Hubzilla Instance: Navigate to http://localhost (or the appropriate URL) to view your Hubzilla instance.","title":"Using prebuilt image"},{"location":"start/docker/#option-2-dhitchenorhubzilla","text":"Another dockjer deployment is provided at https://github.com/dhitchenor/hubzilla Features: * Automatic setup * Integral addons, preinstalled * env file for easy configuration/toggling of features Instructions and details are available at the repository .","title":"Option 2: dhitchenor/hubzilla"},{"location":"start/manual_install/","text":"Manual installation on an existing server Unpack the Hubzilla files into the root of your web server document area If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess. If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file. This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be: git clone https://framagit.org/hubzilla/core.git mywebsite and then you can pick up the latest changes at any time with: git pull make sure folders store/[data]/smarty3 and store exist and are writable by the webserver: mkdir -p \"store/[data]/smarty3\" chmod -R 777 store This permission (777) is very dangerous and if you have sufficient privilege and knowledge you should make these directories writeable only by the webserver and, if different, the user that will run the cron job (see below). In many shared hosting environments this may be difficult without opening a trouble ticket with your provider. The above permissions will allow the software to work, but are not optimal. The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function: addon extend view/theme widget Official addons Installation Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames: cd mywebsite util/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons Updating For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository:: cd mywebsite util/update_addon_repo hzaddons Create searchable representations of the online documentation. You may do this any time that the documentation is updated : cd mywebsite util/importdoc","title":"Manual installation on an existing server"},{"location":"start/manual_install/#manual-installation-on-an-existing-server","text":"","title":"Manual installation on an existing server"},{"location":"start/manual_install/#unpack-the-hubzilla-files-into-the-root-of-your-web-server-document-area","text":"If you copy the directory tree to your webserver, make sure that you include the hidden files like .htaccess. If you are able to do so, we recommend using git to clone the source repository rather than to use a packaged tar or zip file. This makes the software much easier to update. The Linux command to clone the repository into a directory \"mywebsite\" would be: git clone https://framagit.org/hubzilla/core.git mywebsite and then you can pick up the latest changes at any time with: git pull make sure folders store/[data]/smarty3 and store exist and are writable by the webserver: mkdir -p \"store/[data]/smarty3\" chmod -R 777 store This permission (777) is very dangerous and if you have sufficient privilege and knowledge you should make these directories writeable only by the webserver and, if different, the user that will run the cron job (see below). In many shared hosting environments this may be difficult without opening a trouble ticket with your provider. The above permissions will allow the software to work, but are not optimal. The following directories also need to be writable by the webserver in order for certain web-based administrative tools to function: addon extend view/theme widget","title":"Unpack the Hubzilla files into the root of your web server document area"},{"location":"start/manual_install/#official-addons","text":"","title":"Official addons"},{"location":"start/manual_install/#installation","text":"Navigate to your website. Then you should clone the addon repository (separately). We'll give this repository a nickname of 'hzaddons'. You can pull in other hubzilla addon repositories by giving them different nicknames: cd mywebsite util/add_addon_repo https://framagit.org/hubzilla/addons.git hzaddons","title":"Installation"},{"location":"start/manual_install/#updating","text":"For keeping the addon tree updated, you should be on your top level website directory and issue an update command for that repository:: cd mywebsite util/update_addon_repo hzaddons Create searchable representations of the online documentation. You may do this any time that the documentation is updated : cd mywebsite util/importdoc","title":"Updating"},{"location":"start/prep/","text":"Before you begin Choose a domain name or subdomain name for your server Hubzilla can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports. Decide if you will use SSL and obtain an SSL certificate before software installation You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates! Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate. This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement. Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt. If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection. If you do not use SSL, your webserver MUST NOT listen on port 443 at all. If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms.","title":"Prep"},{"location":"start/prep/#before-you-begin","text":"","title":"Before you begin"},{"location":"start/prep/#choose-a-domain-name-or-subdomain-name-for-your-server","text":"Hubzilla can only be installed into the root of a domain or sub-domain, and can not be installed using alternate TCP ports.","title":"Choose a domain name or subdomain name for your server"},{"location":"start/prep/#decide-if-you-will-use-ssl-and-obtain-an-ssl-certificate-before-software-installation","text":"You SHOULD use SSL. If you use SSL, you MUST use a \"browser-valid\" certificate. You MUST NOT use self-signed certificates! Please test your certificate prior to installation. A web tool for testing your certificate is available at \"http://www.digicert.com/help/\". When visiting your site for the first time, please use the SSL (\"https://\") URL if SSL is available. This will avoid problems later. The installation routine will not allow you to use a non browser-valid certificate. This restriction is incorporated because public posts from you may contain references to images on your own hub. Other members viewing their stream on other hubs will get warnings if your certificate is not trusted by their web browser. This will confuse many people because this is a decentralised network and they will get the warning about your hub while viewing their own hub and may think their own hub has an issue. These warnings are very technical and scary to some folks, many of whom will not know how to proceed except to follow the browser advice. This is disruptive to the community. That said, we recognise the issues surrounding the current certificate infrastructure and agree there are many problems, but that doesn't change the requirement. Free \"browser-valid\" certificates are available from providers such as StartSSL and LetsEncrypt. If you do NOT use SSL, there may be a delay of up to a minute for the initial install script - while we check the SSL port to see if anything responds there. When communicating with new sites, $Projectname always attempts connection on the SSL port first, before falling back to a less secure connection. If you do not use SSL, your webserver MUST NOT listen on port 443 at all. If you use LetsEncrypt to provide certificates and create a file under .well-known/acme-challenge so that LetsEncrypt can verify your domain ownership, please remove or rename the .well-known directory as soon as the certificate is generated. $Projectname will provide its own handler for \".well-known\" services when it is installed, and an existing directory in this location may prevent some of these services from working correctly. This should not be a problem with Apache, but may be an issue with nginx or other web server platforms.","title":"Decide if you will use SSL and obtain an SSL certificate before software installation"},{"location":"start/script_install/","text":"Automated installation on an existing server using a shell script There is a shell script in ( .homeinstall/hubzilla-setup.sh ) that will install Hubzilla and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary. Requirements The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9: Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3) Internet connection and router at home Mini-PC / Raspi connected to your router USB drive for backups Fresh installation of Debian on your mini-pc Router with open ports 80 and 443 for your Debian Overview of installation steps apt-get install git mkdir -p /var/www/html cd /var/www/html git clone https://framagit.org/hubzilla/core.git . nano .homeinstall/hubzilla-config.txt cd .homeinstall/ ./hubzilla-setup.sh service apache2 reload Open your domain with a browser and step throught the initial configuration of $Projectname.","title":"Automated installation on an existing server using a shell script"},{"location":"start/script_install/#automated-installation-on-an-existing-server-using-a-shell-script","text":"There is a shell script in ( .homeinstall/hubzilla-setup.sh ) that will install Hubzilla and its dependencies on a fresh installation of Debian 9 stable (Stetch). It should work on similar Linux systems but your results may vary.","title":"Automated installation on an existing server using a shell script"},{"location":"start/script_install/#requirements","text":"The installation script was originally designed for a small hardware server behind your home router. However, it has been tested on several systems running Debian 9: Home-PC (Debian-9.2-amd64) and Rapberry-Pi 3 (Rasbian = Debian 9.3) Internet connection and router at home Mini-PC / Raspi connected to your router USB drive for backups Fresh installation of Debian on your mini-pc Router with open ports 80 and 443 for your Debian","title":"Requirements"},{"location":"start/script_install/#overview-of-installation-steps","text":"apt-get install git mkdir -p /var/www/html cd /var/www/html git clone https://framagit.org/hubzilla/core.git . nano .homeinstall/hubzilla-config.txt cd .homeinstall/ ./hubzilla-setup.sh service apache2 reload Open your domain with a browser and step throught the initial configuration of $Projectname.","title":"Overview of installation steps"}]}